From rbieniek at berlios.de  Wed Jan  4 01:10:48 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Wed, 4 Jan 2006 01:10:48 +0100
Subject: [Rtspproxy-devel] r371 - in trunk: . RTSPProxy-Core
Message-ID: <200601040010.k040Am51012682@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-04 01:10:41 +0100 (Wed, 04 Jan 2006)
New Revision: 371

Added:
   trunk/RTSPProxy-Core/
   trunk/RTSPProxy-Core/LICENSE.txt
   trunk/RTSPProxy-Core/pom.xml
   trunk/RTSPProxy-Core/src/
Removed:
   trunk/pom.xml
   trunk/src/
Log:
- Moved current project into a subproject as it will be the core of the
RTSPProxy suite.


Copied: trunk/RTSPProxy-Core/LICENSE.txt (from rev 370, trunk/LICENSE.txt)

Copied: trunk/RTSPProxy-Core/pom.xml (from rev 370, trunk/pom.xml)
===================================================================
--- trunk/pom.xml	2005-12-28 01:39:17 UTC (rev 370)
+++ trunk/RTSPProxy-Core/pom.xml	2006-01-04 00:10:41 UTC (rev 371)
@@ -0,0 +1,267 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project
+	xsi:noNamespaceSchemaLocation="http://maven.apache.org/maven-v4_0_0.xsd">
+
+	<!-- 
+		$Id$
+		$URL$
+	-->
+
+	<modelVersion>4.0.0</modelVersion>
+
+	<name>RTSP Proxy</name>
+	<groupId>net.merlimat</groupId>
+	<artifactId>rtspproxy-core</artifactId>
+	<version>3.0-ALPHA3-SNAPSHOT</version>
+	<url>http://rtspproxy.berlios.de</url>
+	<inceptionYear>2003</inceptionYear>
+
+	<organization>
+		<name>Matteo Merli</name>
+		<url>http://merlimat.net</url>
+	</organization>
+
+	<issueManagement>
+		<system>Berlios</system>
+		<url>http://developer.berlios.de/bugs/?group_id=4526</url>
+	</issueManagement>
+
+	<licenses>
+		<license>
+			<name>GNU General Public License</name>
+			<url>LICENSE.txt</url>
+		</license>
+	</licenses>
+	<developers>
+		<developer>
+			<id>merlimat</id>
+			<name>Matteo Merli</name>
+			<email>matteo.merli at gmail.com</email>
+			<!-- <timezone>+1</timezone> -->
+			<url>http://merlimat.net/about</url>
+		</developer>
+		<developer>
+			<id>rbieniek</id>
+			<name>Rainer Bieniek</name>
+			<email>Rainer.Bieniek at vodafone.com</email>
+			<!-- <timezone>+1</timezone> -->
+			<!-- <url>http://merlimat.net/about</url> -->
+		</developer>
+	</developers>
+
+	<scm>
+		<connection>
+			scm:svn:http://svn.berlios.de/svnroot/repos/rtspproxy/trunk
+		</connection>
+		<developerConnection>
+			scm:svn:https://svn.berlios.de/svnroot/repos/rtspproxy/trunk
+		</developerConnection>
+		<url>http://svn.berlios.de/wsvn/rtspproxy/</url>
+	</scm>
+
+	<mailingLists>
+		<mailingList>
+			<name>Development list</name>
+			<post>rtspproxy-devel at lists.berlios.de</post>
+
+			<archive>
+				http://www.nabble.com/RtspProxy-Devel-f6753.html
+			</archive>
+			<subscribe>
+				https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
+			</subscribe>
+			<unsubscribe>
+				https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
+			</unsubscribe>
+		</mailingList>
+	</mailingLists>
+
+	<distributionManagement>
+		<downloadUrl>
+			http://rtspproxy.berlios.de/download.html
+		</downloadUrl>
+		<site>
+			<id>rtspproxy.website</id>
+			<name>Default Site</name>
+			<url>
+				scp://shell.berlios.de/home/groups/rtspproxy/htdocs
+			</url>
+		</site>
+	</distributionManagement>
+
+	<dependencies>
+		<dependency>
+			<groupId>log4j</groupId>
+			<artifactId>log4j</artifactId>
+			<version>1.2.9</version>
+		</dependency>
+
+		<dependency>
+			<groupId>org.apache.directory.network</groupId>
+			<artifactId>mina</artifactId>
+			<version>0.9.0</version>
+		</dependency>
+		
+		<dependency>
+			<groupId>mx4j</groupId>
+			<artifactId>mx4j-tools</artifactId>
+			<version>2.1.1</version>
+		</dependency>
+
+		<dependency>
+			<groupId>dom4j</groupId>
+			<artifactId>dom4j</artifactId>
+			<version>1.6.1</version>
+		</dependency>
+
+		<dependency>
+			<groupId>junit</groupId>
+			<artifactId>junit</artifactId>
+			<version>3.8.1</version>
+			<scope>test</scope>
+		</dependency>
+	</dependencies>
+<!--
+	<repositories>
+		<repository>
+		<id>Apache repository</id>
+		<url>http://svn.apache.org/repository/</url>
+		</repository>
+	</repositories>
+-->
+
+	<build>
+		<defaultGoal>assembly:directory</defaultGoal>
+
+		<resources>
+			<resource>
+				<directory>src/main/resources</directory>
+				<filtering>true</filtering>
+			</resource>
+		</resources>
+
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-compiler-plugin</artifactId>
+				<configuration>
+					<source>1.5</source>
+					<target>1.5</target>
+					<showWarnings>true</showWarnings>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-assembly-plugin</artifactId>
+				<configuration>
+					<descriptor>
+						src/resources/release/default.xml
+					</descriptor>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-site-plugin</artifactId>
+				<configuration>
+					<outputEncoding>UTF-8</outputEncoding>
+				</configuration>
+				<!--  <version>2.0-beta-2</version> -->
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>changes-maven-plugin</artifactId>
+				<executions>
+					<execution>
+						<goals>
+							<goal>announcement-generate</goal>
+						</goals>
+						<id>announcement-generate</id>
+					</execution>
+					<execution>
+						<goals>
+							<goal>announcement-mail</goal>
+						</goals>
+						<id>announcement-mail</id>
+					</execution>
+				</executions>
+				<configuration>
+					<xmlPath>src/changes</xmlPath>
+
+					<smtpHost>mail.yourhost.com</smtpHost>
+					<smtpPort implementation="java.lang.Integer">
+						25
+					</smtpPort>
+					<toAddresses>
+						<toAddress implementation="java.lang.String">
+							someones at email.com
+						</toAddress>
+						<toAddress implementation="java.lang.String">
+							anothersomeone at email.com
+						</toAddress>
+					</toAddresses>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-pmd-plugin</artifactId>
+				<configuration>
+					<targetJdk implementation="java.lang.String">
+						1.5
+					</targetJdk>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+
+	<reporting>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>
+					maven-project-info-reports-plugin
+				</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>changelog-maven-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>surefire-report-maven-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>changes-maven-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>taglist-maven-plugin</artifactId>
+			</plugin>
+<!-- 
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-javadoc-plugin</artifactId>
+				<configuration>
+					<charset>UTF-8</charset>
+					<docencoding>UTF-8</docencoding>
+					<link>
+						http://java.sun.com/j2se/1.5.0/docs/api/,
+						http://www.junit.org/junit/javadoc/3.8.1/,
+						http://directory.apache.org/subprojects/network/apidocs/
+					</link>
+				</configuration>
+			</plugin>
+-->
+			<!-- 
+				<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-pmd-plugin</artifactId>
+				<configuration>
+				<targetJdk implementation="java.lang.String">1.5</targetJdk>
+				</configuration>
+				</plugin>
+			-->
+		</plugins>
+	</reporting>
+
+</project>

Copied: trunk/RTSPProxy-Core/src (from rev 370, trunk/src)

Deleted: trunk/pom.xml
===================================================================
--- trunk/pom.xml	2005-12-28 01:39:17 UTC (rev 370)
+++ trunk/pom.xml	2006-01-04 00:10:41 UTC (rev 371)
@@ -1,260 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project
-	xsi:noNamespaceSchemaLocation="http://maven.apache.org/maven-v4_0_0.xsd">
-
-	<!-- 
-		$Id$
-		$URL$
-	-->
-
-	<modelVersion>4.0.0</modelVersion>
-
-	<name>RTSP Proxy</name>
-	<groupId>net.merlimat</groupId>
-	<artifactId>rtspproxy</artifactId>
-	<version>3.0-ALPHA3-SNAPSHOT</version>
-	<url>http://rtspproxy.berlios.de</url>
-	<inceptionYear>2003</inceptionYear>
-
-	<organization>
-		<name>Matteo Merli</name>
-		<url>http://merlimat.net</url>
-	</organization>
-
-	<issueManagement>
-		<system>Berlios</system>
-		<url>http://developer.berlios.de/bugs/?group_id=4526</url>
-	</issueManagement>
-
-	<licenses>
-		<license>
-			<name>GNU General Public License</name>
-			<url>LICENSE.txt</url>
-		</license>
-	</licenses>
-	<developers>
-		<developer>
-			<id>merlimat</id>
-			<name>Matteo Merli</name>
-			<email>matteo.merli at gmail.com</email>
-			<!-- <timezone>+1</timezone> -->
-			<url>http://merlimat.net/about</url>
-		</developer>
-	</developers>
-
-	<scm>
-		<connection>
-			scm:svn:http://svn.berlios.de/svnroot/repos/rtspproxy/trunk
-		</connection>
-		<developerConnection>
-			scm:svn:https://svn.berlios.de/svnroot/repos/rtspproxy/trunk
-		</developerConnection>
-		<url>http://svn.berlios.de/wsvn/rtspproxy/</url>
-	</scm>
-
-	<mailingLists>
-		<mailingList>
-			<name>Development list</name>
-			<post>rtspproxy-devel at lists.berlios.de</post>
-
-			<archive>
-				http://www.nabble.com/RtspProxy-Devel-f6753.html
-			</archive>
-			<subscribe>
-				https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
-			</subscribe>
-			<unsubscribe>
-				https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
-			</unsubscribe>
-		</mailingList>
-	</mailingLists>
-
-	<distributionManagement>
-		<downloadUrl>
-			http://rtspproxy.berlios.de/download.html
-		</downloadUrl>
-		<site>
-			<id>rtspproxy.website</id>
-			<name>Default Site</name>
-			<url>
-				scp://shell.berlios.de/home/groups/rtspproxy/htdocs
-			</url>
-		</site>
-	</distributionManagement>
-
-	<dependencies>
-		<dependency>
-			<groupId>log4j</groupId>
-			<artifactId>log4j</artifactId>
-			<version>1.2.9</version>
-		</dependency>
-
-		<dependency>
-			<groupId>org.apache.directory.network</groupId>
-			<artifactId>mina</artifactId>
-			<version>0.9.0</version>
-		</dependency>
-		
-		<dependency>
-			<groupId>mx4j</groupId>
-			<artifactId>mx4j-tools</artifactId>
-			<version>2.1.1</version>
-		</dependency>
-
-		<dependency>
-			<groupId>dom4j</groupId>
-			<artifactId>dom4j</artifactId>
-			<version>1.6.1</version>
-		</dependency>
-
-		<dependency>
-			<groupId>junit</groupId>
-			<artifactId>junit</artifactId>
-			<version>3.8.1</version>
-			<scope>test</scope>
-		</dependency>
-	</dependencies>
-<!--
-	<repositories>
-		<repository>
-		<id>Apache repository</id>
-		<url>http://svn.apache.org/repository/</url>
-		</repository>
-	</repositories>
--->
-
-	<build>
-		<defaultGoal>assembly:directory</defaultGoal>
-
-		<resources>
-			<resource>
-				<directory>src/main/resources</directory>
-				<filtering>true</filtering>
-			</resource>
-		</resources>
-
-		<plugins>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-compiler-plugin</artifactId>
-				<configuration>
-					<source>1.5</source>
-					<target>1.5</target>
-					<showWarnings>true</showWarnings>
-				</configuration>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-assembly-plugin</artifactId>
-				<configuration>
-					<descriptor>
-						src/resources/release/default.xml
-					</descriptor>
-				</configuration>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-site-plugin</artifactId>
-				<configuration>
-					<outputEncoding>UTF-8</outputEncoding>
-				</configuration>
-				<!--  <version>2.0-beta-2</version> -->
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>changes-maven-plugin</artifactId>
-				<executions>
-					<execution>
-						<goals>
-							<goal>announcement-generate</goal>
-						</goals>
-						<id>announcement-generate</id>
-					</execution>
-					<execution>
-						<goals>
-							<goal>announcement-mail</goal>
-						</goals>
-						<id>announcement-mail</id>
-					</execution>
-				</executions>
-				<configuration>
-					<xmlPath>src/changes</xmlPath>
-
-					<smtpHost>mail.yourhost.com</smtpHost>
-					<smtpPort implementation="java.lang.Integer">
-						25
-					</smtpPort>
-					<toAddresses>
-						<toAddress implementation="java.lang.String">
-							someones at email.com
-						</toAddress>
-						<toAddress implementation="java.lang.String">
-							anothersomeone at email.com
-						</toAddress>
-					</toAddresses>
-				</configuration>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-pmd-plugin</artifactId>
-				<configuration>
-					<targetJdk implementation="java.lang.String">
-						1.5
-					</targetJdk>
-				</configuration>
-			</plugin>
-		</plugins>
-	</build>
-
-	<reporting>
-		<plugins>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>
-					maven-project-info-reports-plugin
-				</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>changelog-maven-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>surefire-report-maven-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>changes-maven-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>taglist-maven-plugin</artifactId>
-			</plugin>
-<!-- 
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-javadoc-plugin</artifactId>
-				<configuration>
-					<charset>UTF-8</charset>
-					<docencoding>UTF-8</docencoding>
-					<link>
-						http://java.sun.com/j2se/1.5.0/docs/api/,
-						http://www.junit.org/junit/javadoc/3.8.1/,
-						http://directory.apache.org/subprojects/network/apidocs/
-					</link>
-				</configuration>
-			</plugin>
--->
-			<!-- 
-				<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-pmd-plugin</artifactId>
-				<configuration>
-				<targetJdk implementation="java.lang.String">1.5</targetJdk>
-				</configuration>
-				</plugin>
-			-->
-		</plugins>
-	</reporting>
-
-</project>



From rbieniek at berlios.de  Wed Jan  4 02:06:20 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Wed, 4 Jan 2006 02:06:20 +0100
Subject: [Rtspproxy-devel] r372 - in trunk: . RTSPProxy-Core RTSPProxy-Core/src/changes src src/changes
Message-ID: <200601040106.k0416KgC026375@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-04 02:06:01 +0100 (Wed, 04 Jan 2006)
New Revision: 372

Added:
   trunk/pom.xml
   trunk/src/
   trunk/src/changes/
   trunk/src/changes/changes.xml
Modified:
   trunk/RTSPProxy-Core/pom.xml
   trunk/RTSPProxy-Core/src/changes/changes.xml
Log:
- added stuff to set up a preliminary multi-module project.
-- TODO: documentation and site need to be refactored and distributed among
   top-level project and sub-project


Modified: trunk/RTSPProxy-Core/pom.xml
===================================================================
--- trunk/RTSPProxy-Core/pom.xml	2006-01-04 00:10:41 UTC (rev 371)
+++ trunk/RTSPProxy-Core/pom.xml	2006-01-04 01:06:01 UTC (rev 372)
@@ -12,7 +12,7 @@
 	<name>RTSP Proxy</name>
 	<groupId>net.merlimat</groupId>
 	<artifactId>rtspproxy-core</artifactId>
-	<version>3.0-ALPHA3-SNAPSHOT</version>
+	<version>3.0-ALPHA4-SNAPSHOT</version>
 	<url>http://rtspproxy.berlios.de</url>
 	<inceptionYear>2003</inceptionYear>
 

Modified: trunk/RTSPProxy-Core/src/changes/changes.xml
===================================================================
--- trunk/RTSPProxy-Core/src/changes/changes.xml	2006-01-04 00:10:41 UTC (rev 371)
+++ trunk/RTSPProxy-Core/src/changes/changes.xml	2006-01-04 01:06:01 UTC (rev 372)
@@ -6,6 +6,12 @@
 	</properties>
 	<body>
 
+		<release version="3.0-ALPHA4-SNAPSHOT" date="in SVN">
+			<action dev="rbieniek" type="add">
+				Added support for XML based comfiguration files.
+			</action>
+		</release>
+
 		<release version="3.0-ALPHA3-SNAPSHOT" date="in SVN">
 			<action dev="merlimat" type="add">
 				Added support for RDT transport and RealVideo streams.

Copied: trunk/pom.xml (from rev 371, trunk/RTSPProxy-Core/pom.xml)
===================================================================
--- trunk/RTSPProxy-Core/pom.xml	2006-01-04 00:10:41 UTC (rev 371)
+++ trunk/pom.xml	2006-01-04 01:06:01 UTC (rev 372)
@@ -0,0 +1,188 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xsi:noNamespaceSchemaLocation="http://maven.apache.org/maven-v4_0_0.xsd">
+  
+  <!-- 
+  $Id$
+  $URL$
+  -->
+  
+  <modelVersion>4.0.0</modelVersion>
+  
+  <name>RTSP Proxy</name>
+  <groupId>net.merlimat</groupId>
+  <artifactId>rtspproxy</artifactId>
+  <packaging>pom</packaging>
+  <version>3.0-ALPHA4-SNAPSHOT</version>
+  <url>http://rtspproxy.berlios.de</url>
+  <inceptionYear>2003</inceptionYear>
+  
+  <organization>
+    <name>Matteo Merli</name>
+    <url>http://merlimat.net</url>
+  </organization>
+  
+  <issueManagement>
+    <system>Berlios</system>
+    <url>http://developer.berlios.de/bugs/?group_id=4526</url>
+  </issueManagement>
+  
+  <licenses>
+    <license>
+      <name>GNU General Public License</name>
+      <url>LICENSE.txt</url>
+    </license>
+  </licenses>
+
+  <developers>
+    <developer>
+      <id>merlimat</id>
+      <name>Matteo Merli</name>
+      <email>matteo.merli at gmail.com</email>
+      <!-- <timezone>+1</timezone> -->
+      <url>http://merlimat.net/about</url>
+    </developer>
+    <developer>
+      <id>rbieniek</id>
+      <name>Rainer Bieniek</name>
+      <email>Rainer.Bieniek at vodafone.com</email>
+      <!-- <timezone>+1</timezone> -->
+      <!-- <url>http://merlimat.net/about</url> -->
+    </developer>
+  </developers>
+  
+  <scm>
+    <connection>
+      scm:svn:http://svn.berlios.de/svnroot/repos/rtspproxy/trunk
+    </connection>
+    <developerConnection>
+      scm:svn:https://svn.berlios.de/svnroot/repos/rtspproxy/trunk
+    </developerConnection>
+    <url>http://svn.berlios.de/wsvn/rtspproxy/</url>
+  </scm>
+  
+  <mailingLists>
+    <mailingList>
+      <name>Development list</name>
+      <post>rtspproxy-devel at lists.berlios.de</post>
+      
+      <archive>
+	http://www.nabble.com/RtspProxy-Devel-f6753.html
+      </archive>
+      <subscribe>
+	https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
+      </subscribe>
+      <unsubscribe>
+	https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
+      </unsubscribe>
+    </mailingList>
+  </mailingLists>
+  
+  <distributionManagement>
+    <downloadUrl>
+      http://rtspproxy.berlios.de/download.html
+    </downloadUrl>
+    <site>
+      <id>rtspproxy.website</id>
+      <name>Default Site</name>
+      <url>
+	scp://shell.berlios.de/home/groups/rtspproxy/htdocs
+      </url>
+    </site>
+  </distributionManagement>
+
+  <modules>
+    <module>RTSPProxy-Core</module>
+  </modules>
+    
+  <build>
+    <defaultGoal>assembly:directory</defaultGoal>
+    
+    <resources>
+      <resource>
+	<directory>src/main/resources</directory>
+	<filtering>true</filtering>
+      </resource>
+    </resources>
+    
+    <plugins>
+      <plugin>
+	<groupId>org.apache.maven.plugins</groupId>
+	<artifactId>maven-assembly-plugin</artifactId>
+	<configuration>
+	  <descriptor>
+	    src/resources/release/default.xml
+	  </descriptor>
+	</configuration>
+      </plugin>
+      <plugin>
+	<groupId>org.apache.maven.plugins</groupId>
+	<artifactId>maven-site-plugin</artifactId>
+	<configuration>
+	  <outputEncoding>UTF-8</outputEncoding>
+	</configuration>
+	<!--  <version>2.0-beta-2</version> -->
+      </plugin>
+      <plugin>
+	<groupId>org.apache.maven.plugins</groupId>
+	<artifactId>maven-pmd-plugin</artifactId>
+	<configuration>
+	  <targetJdk implementation="java.lang.String">
+	    1.5
+	  </targetJdk>
+	</configuration>
+      </plugin>
+    </plugins>
+  </build>
+  
+  <reporting>
+    <plugins>
+      <plugin>
+	<groupId>org.apache.maven.plugins</groupId>
+	<artifactId>
+	  maven-project-info-reports-plugin
+	</artifactId>
+      </plugin>
+      <plugin>
+	<groupId>org.codehaus.mojo</groupId>
+	<artifactId>changelog-maven-plugin</artifactId>
+      </plugin>
+      <plugin>
+	<groupId>org.codehaus.mojo</groupId>
+	<artifactId>surefire-report-maven-plugin</artifactId>
+      </plugin>
+      <plugin>
+	<groupId>org.codehaus.mojo</groupId>
+	<artifactId>changes-maven-plugin</artifactId>
+      </plugin>
+      <plugin>
+	<groupId>org.codehaus.mojo</groupId>
+	<artifactId>taglist-maven-plugin</artifactId>
+      </plugin>
+      <!-- 
+      <plugin>
+      <groupId>org.apache.maven.plugins</groupId>
+      <artifactId>maven-javadoc-plugin</artifactId>
+      <configuration>
+      <charset>UTF-8</charset>
+      <docencoding>UTF-8</docencoding>
+      <link>
+      http://java.sun.com/j2se/1.5.0/docs/api/,
+      http://www.junit.org/junit/javadoc/3.8.1/,
+      http://directory.apache.org/subprojects/network/apidocs/
+    </link>
+    </configuration>
+    </plugin>
+      -->
+      <!-- 
+      <plugin>
+      <groupId>org.apache.maven.plugins</groupId>
+      <artifactId>maven-pmd-plugin</artifactId>
+      <configuration>
+      <targetJdk implementation="java.lang.String">1.5</targetJdk>
+    </configuration>
+    </plugin>
+      -->
+    </plugins>
+  </reporting>
+  
+</project>

Copied: trunk/src/changes/changes.xml (from rev 371, trunk/RTSPProxy-Core/src/changes/changes.xml)
===================================================================
--- trunk/RTSPProxy-Core/src/changes/changes.xml	2006-01-04 00:10:41 UTC (rev 371)
+++ trunk/src/changes/changes.xml	2006-01-04 01:06:01 UTC (rev 372)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<document>
+  <properties>
+    <title>Changes History</title>
+    <author email="Rainer.Bieniek at vodafone.com">Rainer Bieniek</author>
+  </properties>
+  <body>
+    
+    <release version="3.0-ALPHA4-SNAPSHOT" date="in SVN">
+      <action dev="rbieniek" type="change">
+	Restructured project for multi-module project
+      </action>
+    </release>
+  </body>
+</document>



From rbieniek at berlios.de  Wed Jan  4 17:50:08 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Wed, 4 Jan 2006 17:50:08 +0100
Subject: [Rtspproxy-devel] r373 - in trunk: . RTSPProxy-Core RTSPProxy-OSGi RTSPProxy-OSGi/src RTSPProxy-OSGi/src/changes RTSPProxy-OSGi/src/main RTSPProxy-OSGi/src/test src/changes
Message-ID: <200601041650.k04Go8Ir015935@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-04 17:50:02 +0100 (Wed, 04 Jan 2006)
New Revision: 373

Added:
   trunk/RTSPProxy-OSGi/
   trunk/RTSPProxy-OSGi/pom.xml
   trunk/RTSPProxy-OSGi/src/
   trunk/RTSPProxy-OSGi/src/changes/
   trunk/RTSPProxy-OSGi/src/changes/changes.xml
   trunk/RTSPProxy-OSGi/src/main/
   trunk/RTSPProxy-OSGi/src/main/java/
   trunk/RTSPProxy-OSGi/src/test/
   trunk/RTSPProxy-OSGi/src/test/java/
Modified:
   trunk/RTSPProxy-Core/pom.xml
   trunk/pom.xml
   trunk/src/changes/changes.xml
Log:
- added OSGi bundle skeleton


Modified: trunk/RTSPProxy-Core/pom.xml
===================================================================
--- trunk/RTSPProxy-Core/pom.xml	2006-01-04 01:06:01 UTC (rev 372)
+++ trunk/RTSPProxy-Core/pom.xml	2006-01-04 16:50:02 UTC (rev 373)
@@ -6,12 +6,17 @@
 		$Id$
 		$URL$
 	-->
+        <parent>
+                <groupId>net.merlimat</groupId>
+                <artifactId>rtspproxy</artifactId>
+                <version>3.0-ALPHA4-SNAPSHOT</version>
+        </parent>
 
 	<modelVersion>4.0.0</modelVersion>
 
 	<name>RTSP Proxy</name>
 	<groupId>net.merlimat</groupId>
-	<artifactId>rtspproxy-core</artifactId>
+	<artifactId>RTSPProxy-Core</artifactId>
 	<version>3.0-ALPHA4-SNAPSHOT</version>
 	<url>http://rtspproxy.berlios.de</url>
 	<inceptionYear>2003</inceptionYear>
@@ -97,7 +102,7 @@
 		</dependency>
 
 		<dependency>
-			<groupId>org.apache.directory.network</groupId>
+			<groupId>directory-network</groupId>
 			<artifactId>mina</artifactId>
 			<version>0.9.0</version>
 		</dependency>

Added: trunk/RTSPProxy-OSGi/pom.xml
===================================================================
--- trunk/RTSPProxy-OSGi/pom.xml	2006-01-04 01:06:01 UTC (rev 372)
+++ trunk/RTSPProxy-OSGi/pom.xml	2006-01-04 16:50:02 UTC (rev 373)
@@ -0,0 +1,274 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <parent>
+    <groupId>net.merlimat</groupId>
+    <artifactId>rtspproxy</artifactId>
+    <version>3.0-ALPHA4-SNAPSHOT</version>
+  </parent>
+  
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>net.merlimat</groupId>
+  <artifactId>RTSPProxy-OSGi</artifactId>
+  <packaging>osgi-bundle</packaging>
+  <version>3.0-ALPHA4-SNAPSHOT</version>
+  <name>RTSP Proxy OSGi bundle</name>
+  <url>http://rtspproxy.berlios.de</url>
+  <inceptionYear>2003</inceptionYear>
+
+  <organization>
+    <name>Matteo Merli</name>
+    <url>http://merlimat.net</url>
+  </organization>
+  
+  <issueManagement>
+    <system>Berlios</system>
+    <url>http://developer.berlios.de/bugs/?group_id=4526</url>
+  </issueManagement>
+  
+  <licenses>
+    <license>
+      <name>GNU General Public License</name>
+      <url>LICENSE.txt</url>
+    </license>
+  </licenses>
+  <developers>
+    <developer>
+      <id>merlimat</id>
+      <name>Matteo Merli</name>
+      <email>matteo.merli at gmail.com</email>
+      <!-- <timezone>+1</timezone> -->
+      <url>http://merlimat.net/about</url>
+    </developer>
+    <developer>
+      <id>rbieniek</id>
+      <name>Rainer Bieniek</name>
+      <email>Rainer.Bieniek at vodafone.com</email>
+      <!-- <timezone>+1</timezone> -->
+      <!-- <url>http://merlimat.net/about</url> -->
+    </developer>
+  </developers>
+  
+  <scm>
+    <connection>
+      scm:svn:http://svn.berlios.de/svnroot/repos/rtspproxy/trunk
+    </connection>
+    <developerConnection>
+      scm:svn:https://svn.berlios.de/svnroot/repos/rtspproxy/trunk
+    </developerConnection>
+    <url>http://svn.berlios.de/wsvn/rtspproxy/</url>
+  </scm>
+  
+  <mailingLists>
+    <mailingList>
+      <name>Development list</name>
+      <post>rtspproxy-devel at lists.berlios.de</post>
+      
+      <archive>
+	http://www.nabble.com/RtspProxy-Devel-f6753.html
+      </archive>
+      <subscribe>
+	https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
+      </subscribe>
+      <unsubscribe>
+	https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
+      </unsubscribe>
+    </mailingList>
+  </mailingLists>
+  
+  <distributionManagement>
+    <downloadUrl>
+      http://rtspproxy.berlios.de/download.html
+    </downloadUrl>
+    <site>
+      <id>rtspproxy.website</id>
+      <name>Default Site</name>
+      <url>
+	scp://shell.berlios.de/home/groups/rtspproxy/htdocs
+      </url>
+    </site>
+  </distributionManagement>
+    
+  <dependencies>
+
+    <dependency>
+      <groupId>net.merlimat</groupId>
+      <artifactId>RTSPProxy-Core</artifactId>
+      <version>3.0-ALPHA4-SNAPSHOT</version>
+    </dependency>
+
+    <dependency>
+      <groupId>org.osgi</groupId>
+      <artifactId>org.osgi</artifactId>
+      <version>3.0</version>
+      <scope>provided</scope>
+    </dependency>
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>3.8.1</version>
+      <scope>test</scope>
+    </dependency>
+
+  </dependencies>
+
+  <build>
+    <defaultGoal>assembly:directory</defaultGoal>
+    
+    <resources>
+      <resource>
+	<directory>src/main/resources</directory>
+	<filtering>true</filtering>
+      </resource>
+    </resources>
+    
+    <plugins>
+      <plugin>
+	<groupId>org.apache.maven.plugins</groupId>
+	<artifactId>maven-compiler-plugin</artifactId>
+	<configuration>
+	  <source>1.5</source>
+	  <target>1.5</target>
+	  <showWarnings>true</showWarnings>
+	</configuration>
+      </plugin>
+      <plugin>
+	<groupId>org.apache.maven.plugins</groupId>
+	<artifactId>maven-assembly-plugin</artifactId>
+	<configuration>
+	  <descriptor>
+	    src/resources/release/default.xml
+	  </descriptor>
+	</configuration>
+      </plugin>
+      <plugin>
+	<groupId>org.apache.maven.plugins</groupId>
+	<artifactId>maven-site-plugin</artifactId>
+	<configuration>
+	  <outputEncoding>UTF-8</outputEncoding>
+	</configuration>
+	<!--  <version>2.0-beta-2</version> -->
+      </plugin>
+      <plugin>
+	<groupId>org.codehaus.mojo</groupId>
+	<artifactId>changes-maven-plugin</artifactId>
+	<executions>
+	  <execution>
+	    <goals>
+	      <goal>announcement-generate</goal>
+	    </goals>
+	    <id>announcement-generate</id>
+	  </execution>
+	  <execution>
+	    <goals>
+	      <goal>announcement-mail</goal>
+	    </goals>
+	    <id>announcement-mail</id>
+	  </execution>
+	</executions>
+	<configuration>
+	  <xmlPath>src/changes</xmlPath>
+	  
+	  <smtpHost>mail.yourhost.com</smtpHost>
+	  <smtpPort implementation="java.lang.Integer">
+	    25
+	  </smtpPort>
+	  <toAddresses>
+	    <toAddress implementation="java.lang.String">
+	      someones at email.com
+	    </toAddress>
+	    <toAddress implementation="java.lang.String">
+	      anothersomeone at email.com
+	    </toAddress>
+	  </toAddresses>
+	</configuration>
+      </plugin>
+      <plugin>
+	<groupId>org.apache.maven.plugins</groupId>
+	<artifactId>maven-pmd-plugin</artifactId>
+	<configuration>
+	  <targetJdk implementation="java.lang.String">
+	    1.5
+	  </targetJdk>
+	</configuration>
+      </plugin>
+
+      <!-- see http://docs.safehaus.org/display/OSGI/OSGi+Plugin+for+Maven+2.0 for further instructions -->
+      <plugin>
+        <groupId>org.apache.felix.plugins</groupId>
+        <artifactId>maven-osgi-plugin</artifactId>
+        <extensions>true</extensions>
+        <version>0.3.0</version>
+        <configuration>
+          <osgiManifest>
+            <bundleActivator>rtspproxy.bundle.Activator</bundleActivator>
+            <bundleName>RTSP Proxy bundle</bundleName>
+            <bundleDescription>RTSP Proxy bundle</bundleDescription>
+            <bundleVendor>rbieniek</bundleVendor>
+	    <importPackage>org.osgi.service.log</importPackage>
+          </osgiManifest>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+  <repositories>
+    <repository>
+      <id>safehaus-repository</id>
+      <name>Safehaus Repository</name>
+      <url>http://m2.safehaus.org</url>
+    </repository>
+  </repositories>
+   
+  <reporting>
+    <plugins>
+      <plugin>
+	<groupId>org.apache.maven.plugins</groupId>
+	<artifactId>
+	  maven-project-info-reports-plugin
+	</artifactId>
+      </plugin>
+      <plugin>
+	<groupId>org.codehaus.mojo</groupId>
+	<artifactId>changelog-maven-plugin</artifactId>
+      </plugin>
+      <plugin>
+	<groupId>org.codehaus.mojo</groupId>
+	<artifactId>surefire-report-maven-plugin</artifactId>
+      </plugin>
+      <plugin>
+	<groupId>org.codehaus.mojo</groupId>
+	<artifactId>changes-maven-plugin</artifactId>
+      </plugin>
+      <plugin>
+	<groupId>org.codehaus.mojo</groupId>
+	<artifactId>taglist-maven-plugin</artifactId>
+      </plugin>
+      <!-- 
+      <plugin>
+      <groupId>org.apache.maven.plugins</groupId>
+      <artifactId>maven-javadoc-plugin</artifactId>
+      <configuration>
+      <charset>UTF-8</charset>
+      <docencoding>UTF-8</docencoding>
+      <link>
+      http://java.sun.com/j2se/1.5.0/docs/api/,
+      http://www.junit.org/junit/javadoc/3.8.1/,
+      http://directory.apache.org/subprojects/network/apidocs/
+    </link>
+    </configuration>
+    </plugin>
+      -->
+      <!-- 
+      <plugin>
+      <groupId>org.apache.maven.plugins</groupId>
+      <artifactId>maven-pmd-plugin</artifactId>
+      <configuration>
+      <targetJdk implementation="java.lang.String">1.5</targetJdk>
+    </configuration>
+    </plugin>
+      -->
+    </plugins>
+  </reporting>
+  
+</project>

Copied: trunk/RTSPProxy-OSGi/src/changes/changes.xml (from rev 372, trunk/src/changes/changes.xml)
===================================================================
--- trunk/src/changes/changes.xml	2006-01-04 01:06:01 UTC (rev 372)
+++ trunk/RTSPProxy-OSGi/src/changes/changes.xml	2006-01-04 16:50:02 UTC (rev 373)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<document>
+  <properties>
+    <title>Changes History</title>
+    <author email="Rainer.Bieniek at vodafone.com">Rainer Bieniek</author>
+  </properties>
+  <body>
+    
+    <release version="3.0-ALPHA4-SNAPSHOT" date="in SVN">
+      <action dev="rbieniek" type="change">
+	Restructured project for multi-module project.
+      </action>
+
+      <action dev="rbieniek" type="add">
+	Added OSGi bundle skeleton.
+      </action>
+    </release>
+  </body>
+</document>

Modified: trunk/pom.xml
===================================================================
--- trunk/pom.xml	2006-01-04 01:06:01 UTC (rev 372)
+++ trunk/pom.xml	2006-01-04 16:50:02 UTC (rev 373)
@@ -92,10 +92,11 @@
 
   <modules>
     <module>RTSPProxy-Core</module>
+    <module>RTSPProxy-OSGi</module>
   </modules>
     
   <build>
-    <defaultGoal>assembly:directory</defaultGoal>
+    <defaultGoal>package</defaultGoal>
     
     <resources>
       <resource>

Modified: trunk/src/changes/changes.xml
===================================================================
--- trunk/src/changes/changes.xml	2006-01-04 01:06:01 UTC (rev 372)
+++ trunk/src/changes/changes.xml	2006-01-04 16:50:02 UTC (rev 373)
@@ -8,8 +8,12 @@
     
     <release version="3.0-ALPHA4-SNAPSHOT" date="in SVN">
       <action dev="rbieniek" type="change">
-	Restructured project for multi-module project
+	Restructured project for multi-module project.
       </action>
+
+      <action dev="rbieniek" type="add">
+	Added OSGi bundle skeleton.
+      </action>
     </release>
   </body>
 </document>



From rbieniek at berlios.de  Thu Jan  5 20:15:23 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Thu, 5 Jan 2006 20:15:23 +0100
Subject: [Rtspproxy-devel] r375 - in trunk: . RTSPProxy-App RTSPProxy-App/src RTSPProxy-App/src/changes RTSPProxy-App/src/main RTSPProxy-App/src/main/java RTSPProxy-App/src/main/java/rtspproxy RTSPProxy-App/src/main/java/rtspproxy/filter RTSPProxy-App/src/main/java/rtspproxy/filter/accounting RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/accounting RTSPProxy-App/src/main/java/rtspproxy/filter/authentication RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/ipaddress RTSPProxy-App/src/resources RTSPProxy-App/src/resources/conf RTSPProxy-App/src/test RTSPProxy-App/src/test/java RTSPProxy-App/src/test/java/rtspproxy RTSPProxy-App/src/test/java/rtspproxy/filter RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress RTSPProxy-Core RTSPProxy-Core/src/main/java/rtspproxy RTSPProxy-Core/src/main/java/rtspproxy/filter RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication RTSPProxy-Core/src/resources RTSPProxy-Core/src/resourc!
 es/conf RTSPProxy-Core/src/test/java/rtspproxy/filter
Message-ID: <200601051915.k05JFNJX017692@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-05 20:14:44 +0100 (Thu, 05 Jan 2006)
New Revision: 375

Added:
   trunk/RTSPProxy-App/
   trunk/RTSPProxy-App/LICENSE.txt
   trunk/RTSPProxy-App/pom.xml
   trunk/RTSPProxy-App/src/
   trunk/RTSPProxy-App/src/changes/
   trunk/RTSPProxy-App/src/changes/changes.xml
   trunk/RTSPProxy-App/src/main/
   trunk/RTSPProxy-App/src/main/java/
   trunk/RTSPProxy-App/src/main/java/rtspproxy/
   trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/accounting/
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/accounting/AccountingFilter.java
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/authentication/
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/ipaddress/
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/ipaddress/IpAddressFilter.java
   trunk/RTSPProxy-App/src/main/resources/
   trunk/RTSPProxy-App/src/resources/
   trunk/RTSPProxy-App/src/resources/conf/
   trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml
   trunk/RTSPProxy-App/src/resources/conf/rtspproxy.log4j.xml
   trunk/RTSPProxy-App/src/resources/release/
   trunk/RTSPProxy-App/src/resources/scripts/
   trunk/RTSPProxy-App/src/test/
   trunk/RTSPProxy-App/src/test/java/
   trunk/RTSPProxy-App/src/test/java/rtspproxy/
   trunk/RTSPProxy-App/src/test/java/rtspproxy/filter/
   trunk/RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress/
   trunk/RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress/ipaddress/
Removed:
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/accounting/AccountingFilter.java
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/ipaddress/IpAddressFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/Main.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/
   trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.conf.xml
   trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.log4j.xml
   trunk/RTSPProxy-Core/src/resources/release/
   trunk/RTSPProxy-Core/src/resources/scripts/
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/filter/ipaddress/
Modified:
   trunk/RTSPProxy-Core/pom.xml
   trunk/pom.xml
Log:
- Factored standalone java rtsproxy out


Copied: trunk/RTSPProxy-App/LICENSE.txt (from rev 373, trunk/RTSPProxy-Core/LICENSE.txt)

Copied: trunk/RTSPProxy-App/pom.xml (from rev 373, trunk/RTSPProxy-Core/pom.xml)
===================================================================
--- trunk/RTSPProxy-Core/pom.xml	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-App/pom.xml	2006-01-05 19:14:44 UTC (rev 375)
@@ -0,0 +1,267 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project
+	xsi:noNamespaceSchemaLocation="http://maven.apache.org/maven-v4_0_0.xsd">
+
+	<!-- 
+		$Id$
+		$URL$
+	-->
+        <parent>
+                <groupId>net.merlimat</groupId>
+                <artifactId>rtspproxy</artifactId>
+                <version>3.0-ALPHA4-SNAPSHOT</version>
+        </parent>
+
+	<modelVersion>4.0.0</modelVersion>
+
+	<name>RTSP Proxy standalone application</name>
+	<groupId>net.merlimat</groupId>
+	<artifactId>RTSPProxy-App</artifactId>
+	<version>3.0-ALPHA4-SNAPSHOT</version>
+	<url>http://rtspproxy.berlios.de</url>
+	<inceptionYear>2003</inceptionYear>
+
+	<organization>
+		<name>Matteo Merli</name>
+		<url>http://merlimat.net</url>
+	</organization>
+
+	<issueManagement>
+		<system>Berlios</system>
+		<url>http://developer.berlios.de/bugs/?group_id=4526</url>
+	</issueManagement>
+
+	<licenses>
+		<license>
+			<name>GNU General Public License</name>
+			<url>LICENSE.txt</url>
+		</license>
+	</licenses>
+	<developers>
+		<developer>
+			<id>merlimat</id>
+			<name>Matteo Merli</name>
+			<email>matteo.merli at gmail.com</email>
+			<!-- <timezone>+1</timezone> -->
+			<url>http://merlimat.net/about</url>
+		</developer>
+		<developer>
+			<id>rbieniek</id>
+			<name>Rainer Bieniek</name>
+			<email>Rainer.Bieniek at vodafone.com</email>
+			<!-- <timezone>+1</timezone> -->
+			<!-- <url>http://merlimat.net/about</url> -->
+		</developer>
+	</developers>
+
+	<scm>
+		<connection>
+			scm:svn:http://svn.berlios.de/svnroot/repos/rtspproxy/trunk
+		</connection>
+		<developerConnection>
+			scm:svn:https://svn.berlios.de/svnroot/repos/rtspproxy/trunk
+		</developerConnection>
+		<url>http://svn.berlios.de/wsvn/rtspproxy/</url>
+	</scm>
+
+	<mailingLists>
+		<mailingList>
+			<name>Development list</name>
+			<post>rtspproxy-devel at lists.berlios.de</post>
+
+			<archive>
+				http://www.nabble.com/RtspProxy-Devel-f6753.html
+			</archive>
+			<subscribe>
+				https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
+			</subscribe>
+			<unsubscribe>
+				https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
+			</unsubscribe>
+		</mailingList>
+	</mailingLists>
+
+	<distributionManagement>
+		<downloadUrl>
+			http://rtspproxy.berlios.de/download.html
+		</downloadUrl>
+		<site>
+			<id>rtspproxy.website</id>
+			<name>Default Site</name>
+			<url>
+				scp://shell.berlios.de/home/groups/rtspproxy/htdocs
+			</url>
+		</site>
+	</distributionManagement>
+
+	<dependencies>
+
+    <dependency>
+      <groupId>net.merlimat</groupId>
+      <artifactId>RTSPProxy-Core</artifactId>
+      <version>3.0-ALPHA4-SNAPSHOT</version>
+    </dependency>
+
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-log4j12</artifactId>
+			<version>1.0-rc3</version>
+		</dependency>
+
+		<dependency>
+			<groupId>log4j</groupId>
+			<artifactId>log4j</artifactId>
+			<version>1.2.9</version>
+		</dependency>
+
+		<dependency>
+			<groupId>junit</groupId>
+			<artifactId>junit</artifactId>
+			<version>3.8.1</version>
+			<scope>test</scope>
+		</dependency>
+	</dependencies>
+<!--
+	<repositories>
+		<repository>
+		<id>Apache repository</id>
+		<url>http://svn.apache.org/repository/</url>
+		</repository>
+	</repositories>
+-->
+
+	<build>
+		<defaultGoal>assembly:directory</defaultGoal>
+
+		<resources>
+			<resource>
+				<directory>src/main/resources</directory>
+				<filtering>true</filtering>
+			</resource>
+		</resources>
+
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-compiler-plugin</artifactId>
+				<configuration>
+					<source>1.5</source>
+					<target>1.5</target>
+					<showWarnings>true</showWarnings>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-assembly-plugin</artifactId>
+				<configuration>
+					<descriptor>
+						src/resources/release/default.xml
+					</descriptor>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-site-plugin</artifactId>
+				<configuration>
+					<outputEncoding>UTF-8</outputEncoding>
+				</configuration>
+				<!--  <version>2.0-beta-2</version> -->
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>changes-maven-plugin</artifactId>
+				<executions>
+					<execution>
+						<goals>
+							<goal>announcement-generate</goal>
+						</goals>
+						<id>announcement-generate</id>
+					</execution>
+					<execution>
+						<goals>
+							<goal>announcement-mail</goal>
+						</goals>
+						<id>announcement-mail</id>
+					</execution>
+				</executions>
+				<configuration>
+					<xmlPath>src/changes</xmlPath>
+
+					<smtpHost>mail.yourhost.com</smtpHost>
+					<smtpPort implementation="java.lang.Integer">
+						25
+					</smtpPort>
+					<toAddresses>
+						<toAddress implementation="java.lang.String">
+							someones at email.com
+						</toAddress>
+						<toAddress implementation="java.lang.String">
+							anothersomeone at email.com
+						</toAddress>
+					</toAddresses>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-pmd-plugin</artifactId>
+				<configuration>
+					<targetJdk implementation="java.lang.String">
+						1.5
+					</targetJdk>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+
+	<reporting>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>
+					maven-project-info-reports-plugin
+				</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>changelog-maven-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>surefire-report-maven-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>changes-maven-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>taglist-maven-plugin</artifactId>
+			</plugin>
+<!-- 
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-javadoc-plugin</artifactId>
+				<configuration>
+					<charset>UTF-8</charset>
+					<docencoding>UTF-8</docencoding>
+					<link>
+						http://java.sun.com/j2se/1.5.0/docs/api/,
+						http://www.junit.org/junit/javadoc/3.8.1/,
+						http://directory.apache.org/subprojects/network/apidocs/
+					</link>
+				</configuration>
+			</plugin>
+-->
+			<!-- 
+				<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-pmd-plugin</artifactId>
+				<configuration>
+				<targetJdk implementation="java.lang.String">1.5</targetJdk>
+				</configuration>
+				</plugin>
+			-->
+		</plugins>
+	</reporting>
+
+</project>

Copied: trunk/RTSPProxy-App/src/changes/changes.xml (from rev 373, trunk/RTSPProxy-OSGi/src/changes/changes.xml)
===================================================================
--- trunk/RTSPProxy-OSGi/src/changes/changes.xml	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-App/src/changes/changes.xml	2006-01-05 19:14:44 UTC (rev 375)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<document>
+  <properties>
+    <title>Changes History</title>
+    <author email="Rainer.Bieniek at vodafone.com">Rainer Bieniek</author>
+  </properties>
+  <body>
+    
+    <release version="3.0-ALPHA4-SNAPSHOT" date="in SVN">
+      <action dev="rbieniek" type="change">
+	Restructured project for multi-module project.
+      </action>
+
+      <action dev="rbieniek" type="change">
+	Moved standalone RTSP proxy application into seperate subproject.
+      </action>
+    </release>
+  </body>
+</document>

Copied: trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java (from rev 374, trunk/RTSPProxy-Core/src/main/java/rtspproxy/Main.java)

Copied: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/accounting (from rev 373, trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting)

Deleted: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/accounting/AccountingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/accounting/AccountingFilter.java	2006-01-05 19:14:44 UTC (rev 375)
@@ -1,99 +0,0 @@
-package rtspproxy.filter.accounting;
-
-import org.apache.log4j.Logger;
-import org.apache.mina.common.IoFilterAdapter;
-import org.apache.mina.common.IoSession;
-
-import rtspproxy.Reactor;
-import rtspproxy.config.Config;
-import rtspproxy.rtsp.RtspMessage;
-
-/**
- * 
- * @author Matteo Merli
- */
-public class AccountingFilter extends IoFilterAdapter
-{
-
-	private static Logger log = Logger.getLogger( AccountingFilter.class );
-
-	private AccountingProvider provider = null;
-
-	public AccountingFilter()
-	{
-		// Check which backend implementation to use
-		// Default is plain-text implementation
-		String className = Config.proxyFilterAccountingImplementationClass.getValue();
-
-		Class providerClass;
-		try {
-			providerClass = Class.forName( className );
-
-		} catch ( ClassNotFoundException e ) {
-			log.fatal( "Invalid AccountingProvider class: " + className );
-			Reactor.stop();
-			return;
-		}
-
-		// Check if the class implements the IpAddressProvider interfaces
-		boolean found = false;
-		for ( Class interFace : providerClass.getInterfaces() ) {
-			if ( AccountingProvider.class.equals( interFace ) ) {
-				found = true;
-				break;
-			}
-		}
-
-		if ( !found ) {
-			log.fatal( "Class (" + providerClass
-					+ ") does not implement the AccountingProvider interface." );
-			Reactor.stop();
-			return;
-		}
-
-		try {
-			provider = (AccountingProvider) providerClass.newInstance();
-			provider.init();
-
-		} catch ( Exception e ) {
-			log.fatal( "Error starting AccountingProvider: " + e );
-			Reactor.stop();
-			return;
-		}
-
-		log.info( "Using AccountingFilter " + " (" + className + ")" );
-	}
-
-	@Override
-	public void messageReceived( NextFilter nextFilter, IoSession session, Object message )
-			throws Exception
-	{
-		if ( provider != null ) {
-			if ( message instanceof RtspMessage )
-				provider.messageReceived( session, (RtspMessage) message );
-			else
-				log.error( "Expecting a RtspMessage. Received a "
-						+ message.getClass().getName() );
-		}
-
-		// Forward message
-		nextFilter.messageReceived( session, message );
-	}
-
-	@Override
-	public void messageSent( NextFilter nextFilter, IoSession session, Object message )
-			throws Exception
-	{
-		if ( provider != null ) {
-			if ( message instanceof RtspMessage )
-				provider.messageSent( session, (RtspMessage) message );
-			else
-				log.error( "Expecting a RtspMessage. Received a "
-						+ message.getClass().getName() );
-		}
-		
-		// Forward message
-		nextFilter.messageSent( session, message );
-	}
-
-}

Copied: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/accounting/AccountingFilter.java (from rev 374, trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java)

Copied: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java (from rev 373, trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java)

Copied: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/ipaddress (from rev 373, trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress)

Deleted: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/ipaddress/IpAddressFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/ipaddress/IpAddressFilter.java	2006-01-05 19:14:44 UTC (rev 375)
@@ -1,114 +0,0 @@
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
- *                                                                         *
- ***************************************************************************/
-
-/*
- * $Id$
- * 
- * $URL$
- * 
- */
-
-package rtspproxy.filter.ipaddress;
-
-import java.net.InetSocketAddress;
-
-import org.apache.log4j.Logger;
-import org.apache.mina.common.IoFilterAdapter;
-import org.apache.mina.common.IoSession;
-
-import rtspproxy.Reactor;
-import rtspproxy.config.Config;
-
-/**
- * @author Matteo Merli
- *
- */
-public class IpAddressFilter extends IoFilterAdapter
-{
-
-	private static Logger log = Logger.getLogger( IpAddressFilter.class );
-
-	private IpAddressProvider provider;
-
-	public IpAddressFilter()
-	{
-		// Check which backend implementation to use
-		// Default is plain-text implementation
-		String className = Config.proxyFilterIpaddressImplementationClass.getValue();
-
-		Class providerClass;
-		try {
-			providerClass = Class.forName( className );
-
-		} catch ( ClassNotFoundException e ) {
-			log.fatal( "Invalid IpAddressProvider class: " + className );
-			Reactor.stop();
-			return;
-		}
-
-		// Check if the class implements the IpAddressProvider interfaces
-		boolean found = false;
-		for ( Class interFace : providerClass.getInterfaces() ) {
-			if ( IpAddressProvider.class.equals( interFace ) ) {
-				found = true;
-				break;
-			}
-		}
-
-		if ( !found ) {
-			log.fatal( "Class (" + provider
-					+ ") does not implement the IpAddressProvider interface." );
-			Reactor.stop();
-			return;
-		}
-
-		try {
-			provider = (IpAddressProvider) providerClass.newInstance();
-			provider.init();
-		} catch ( Exception e ) {
-			log.fatal( "Error starting IpAddressProvider: " + e );
-			Reactor.stop();
-			return;
-		}
-
-		log.info( "Using IpAddressFilter (" + className + ")" );
-	}
-
-	@Override
-	public void messageReceived( NextFilter nextFilter, IoSession session, Object message )
-			throws Exception
-	{
-		if ( !provider.isBlocked( ( (InetSocketAddress) session.getRemoteAddress() ).getAddress() ) ) {
-			// forward if not blocked
-			nextFilter.messageReceived( session, message );
-		} else {
-			blockSession( session );
-		}
-	}
-
-	@Override
-	public void sessionCreated( NextFilter nextFilter, IoSession session )
-			throws Exception
-	{
-		if ( !provider.isBlocked( ( (InetSocketAddress) session.getRemoteAddress() ).getAddress() ) ) {
-			// forward if not blocked
-			nextFilter.sessionCreated( session );
-		} else {
-			blockSession( session );
-		}
-	}
-
-	protected void blockSession( IoSession session )
-	{
-		log.info( "Blocked connection from : " + session.getRemoteAddress() );
-		session.close();
-	}
-}

Copied: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/ipaddress/IpAddressFilter.java (from rev 374, trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java)

Copied: trunk/RTSPProxy-App/src/main/resources (from rev 373, trunk/RTSPProxy-Core/src/main/resources)

Copied: trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml (from rev 374, trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.conf.xml)

Copied: trunk/RTSPProxy-App/src/resources/conf/rtspproxy.log4j.xml (from rev 374, trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.log4j.xml)

Copied: trunk/RTSPProxy-App/src/resources/release (from rev 373, trunk/RTSPProxy-Core/src/resources/release)

Copied: trunk/RTSPProxy-App/src/resources/scripts (from rev 373, trunk/RTSPProxy-Core/src/resources/scripts)

Copied: trunk/RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress/ipaddress (from rev 373, trunk/RTSPProxy-Core/src/test/java/rtspproxy/filter/ipaddress)

Modified: trunk/RTSPProxy-Core/pom.xml
===================================================================
--- trunk/RTSPProxy-Core/pom.xml	2006-01-05 18:29:14 UTC (rev 374)
+++ trunk/RTSPProxy-Core/pom.xml	2006-01-05 19:14:44 UTC (rev 375)
@@ -14,7 +14,7 @@
 
 	<modelVersion>4.0.0</modelVersion>
 
-	<name>RTSP Proxy</name>
+	<name>RTSP Proxy core</name>
 	<groupId>net.merlimat</groupId>
 	<artifactId>RTSPProxy-Core</artifactId>
 	<version>3.0-ALPHA4-SNAPSHOT</version>

Deleted: trunk/RTSPProxy-Core/src/main/java/rtspproxy/Main.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/Main.java	2006-01-05 18:29:14 UTC (rev 374)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/Main.java	2006-01-05 19:14:44 UTC (rev 375)
@@ -1,122 +0,0 @@
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
- *                                                                         *
- ***************************************************************************/
-
-/*
- * $Id$
- * 
- * $URL$
- * 
- */
-package rtspproxy;
-
-import java.io.File;
-import java.util.ArrayList;
-
-import org.apache.log4j.BasicConfigurator;
-import org.apache.log4j.Logger;
-import org.apache.log4j.PropertyConfigurator;
-import org.apache.log4j.xml.DOMConfigurator;
-
-import rtspproxy.config.Config;
-import rtspproxy.config.XMLConfigReader;
-import rtspproxy.lib.Exceptions;
-
-/**
- * 
- */
-public class Main
-{
-
-	static Logger log = Logger.getLogger( "rtspproxy" );
-
-	public static void main( String[] args )
-	{
-		// Configure the logger with default settings
-		// useful to track pre-config file errors
-		BasicConfigurator.configure();
-
-		// Register the signal handler
-		Runtime.getRuntime().addShutdownHook( new ShutdownHandler() );
-
-		try {
-			// Read configuration files
-			new Config();
-
-			// Log4J configuration
-			ArrayList<String> log4jList = new ArrayList<String>();
-			
-			// system wide configuration (typical on un*x-like systems)
-			log4jList.add("/etc/rtspproxy.log4j.");
-			
-			// Per-user configuration
-			log4jList.add(System.getProperty( "user.home", "" ) + "/.rtspproxy.log4j.");
-
-			// RtspProxy home folder
-			if(Config.getHome() != null)
-				log4jList.add(Config.getHome() + "/rtspproxy.log4j.");
-
-			// Current directory configuration
-			log4jList.add("rtspproxy.log4j.");
-
-			// Used for testing purposes:
-			// checks for the configuration file
-			log4jList.add("src/resources/conf/rtspproxy.log4j.");
-
-			for(String path : log4jList) {
-				File propFile = new File(path + "properties");
-				File xmlFile = new File(path + "xml");
-				
-				if(propFile.canRead())
-					PropertyConfigurator.configure(propFile.toURL());
-				else if(xmlFile.canRead())
-					DOMConfigurator.configure(xmlFile.toURL());
-			}
-			
-			ArrayList<String> pathlist = new ArrayList<String>();
-
-			// System wide configuration (tipical in unix systems)
-			pathlist.add("/etc/rtspproxy.conf.xml");
-			
-			// Per user config
-			pathlist.add(System.getProperty( "user.home", "" ) + "/.rtspproxy.conf.xml");
-
-			// RtspProxy home folder
-			if(Config.getHome() != null)
-				pathlist.add(Config.getHome() + "/rtspproxy.conf.xml");
-
-			// Current directory configuration
-			pathlist.add("rtspproxy.conf.xml");
-
-			// Used for testing purposes:
-			// checks for the configuration file
-			pathlist.add("src/resources/conf/rtspproxy.conf.xml");
-
-			XMLConfigReader configReader = new XMLConfigReader();
-			
-			for ( String path : pathlist ) {
-				configReader.readConfig(path);
-			}
-
-			if ( log.isDebugEnabled() ) {
-				log.debug( Config.debugParameters() );
-			}
-			
-			Reactor.setStandalone( true );
-			Reactor.start();
-
-		} catch ( Exception e ) {
-			log.fatal( "Exception in the reactor: " + e );
-			Exceptions.logStackTrace( e );
-			System.exit( -1 );
-		}
-	}
-
-}

Deleted: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java	2006-01-05 18:29:14 UTC (rev 374)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java	2006-01-05 19:14:44 UTC (rev 375)
@@ -1,90 +0,0 @@
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
- *                                                                         *
- ***************************************************************************/
-
-/*
- * $Id$
- * 
- * $URL$
- * 
- */
-
-package rtspproxy.filter.authentication;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.util.Properties;
-
-import org.apache.log4j.Logger;
-
-import rtspproxy.Reactor;
-import rtspproxy.config.Config;
-import rtspproxy.filter.authentication.scheme.Credentials;
-
-/**
- * @author Matteo Merli
- */
-public class PlainTextAuthenticationProvider implements AuthenticationProvider
-{
-
-	private static Logger log = Logger.getLogger( PlainTextAuthenticationProvider.class );
-
-	private static Properties usersDb = new Properties();
-
-	public void init() throws Exception
-	{
-		// Load users from file
-		String fileName = Config.getHome() + File.separator
-				+ Config.proxyFilterAuthenticationTextFile.getValue();
-
-		try {
-			usersDb.load( new FileInputStream( new File( fileName ) ) );
-
-		} catch ( FileNotFoundException e ) {
-			log.fatal( "Users file not found:" + e );
-			Reactor.stop();
-		} catch ( IOException e ) {
-			log.fatal( "Error reading users file: " + e );
-			Reactor.stop();
-		} catch ( IllegalArgumentException e ) {
-			log.fatal( "The users file is not valid" );
-			Reactor.stop();
-		}
-
-	}
-
-	public void shutdown() throws Exception
-	{
-		// Do nothing
-	}
-	
-	public String getPassword( String username )
-	{
-		return usersDb.getProperty( username );
-	}
-
-	public boolean isAuthenticated( Credentials credentials )
-	{
-		String storedPassword = usersDb.getProperty( credentials.getUserName() );
-		if ( storedPassword == null )
-			// User is not present
-			return false;
-
-		if ( storedPassword.compareTo( credentials.getPassword() ) == 0 )
-			// Password is ok
-			return true;
-		else
-			// Password is wrong
-			return false;
-	}
-
-}

Deleted: trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.conf.xml
===================================================================
--- trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.conf.xml	2006-01-05 18:29:14 UTC (rev 374)
+++ trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.conf.xml	2006-01-05 19:14:44 UTC (rev 375)
@@ -1,49 +0,0 @@
-<rtspproxy>
-  <threadPoolSize>10</threadPoolSize>
-  <proxy>
-    <rtspPort>554</rtspPort>
-    <server>
-      <rtpPort>6970</rtpPort>
-      <rtcpPort>6971</rtcpPort>
-      <rdtPort>6972</rdtPort>
-      <interface>10.0.0.24</interface>
-    </server>
-    <client>
-      <rtpPort>6970</rtpPort>
-      <rtcpPort>6971</rtcpPort>
-      <rdtPort>6972</rdtPort>
-      <interface>10.0.0.23</interface>
-    </client>
-  </proxy>
-  <jmx>
-    <manageable>true</manageable>
-    <interface>10.0.0.22</interface>
-    <user>admin</user>
-    <password>admin123</password>
-    <web>
-      <manageable>true</manageable>
-      <port>8080</port>
-    </web>
-    <connectorService>
-      <manageable>true</manageable>
-    </connectorService>
-  </jmx>
-  <filters>
-    <authentication implClass="rtspproxy.filter.authentication.PlainTextAuthenticationProvider">
-      <scheme>Digest</scheme>
-      <user>
-	<name>myuser</name>
-	<password>itspassword</password>
-      </user>
-    </authentication>
-    <authorization implClass="rtspproxy.filter.ipaddress.PlainTextIpAddressProvider">
-      <deny>*</deny>
-      <allow>127.0.0.1</allow>
-      <allow>10.0.0.*</allow>
-      <allow>*.some.domain</allow>
-    </authorization>
-    <accounting implClass="rtspproxy.filter.accounting.PlainTextAccountingProvider" >
-      <log>/tmp/rtspproxy-access.log</log>
-    </accounting>
-  </filters>
-</rtspproxy>
\ No newline at end of file

Deleted: trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.log4j.xml
===================================================================
--- trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.log4j.xml	2006-01-05 18:29:14 UTC (rev 374)
+++ trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.log4j.xml	2006-01-05 19:14:44 UTC (rev 375)
@@ -1,63 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
-
-<!-- ===================================================================== -->
-<!--                                                                       -->
-<!--  Log4j Configuration                                                  -->
-<!--                                                                       -->
-<!-- ===================================================================== -->
-
-<!-- $Id$ -->
-
-<!--
-   | For more configuration infromation and examples see the Jakarta Log4j
-   | owebsite: http://jakarta.apache.org/log4j
- -->
-
-<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
-
-   <!-- ================================= -->
-   <!-- Preserve messages in a local file -->
-   <!-- ================================= -->
-
-   <!-- A time/date based rolling appender -->
-   <appender name="FILE" class="org.apache.log4j.FileAppender">
-      <param name="File" value="/tmp/rtspproxy.log"/>
-      <param name="Append" value="false"/>
-
-      <layout class="org.apache.log4j.PatternLayout">
-         <!-- The default pattern: Date Priority [Category] Message\n -->
-         <param name="ConversionPattern" value="%9r %5p [%t] %c - %m%n"/>
-
-         <!-- The full pattern: Date MS Priority [Category] (Thread:NDC) Message\n
-         <param name="ConversionPattern" value="%d %-5r %-5p [%c] (%t:%x) %m%n"/>
-          -->
-      </layout>
-   </appender>
-
-   <!-- ============================== -->
-   <!-- Append messages to the console -->
-   <!-- ============================== -->
-
-   <appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
-      <param name="Target" value="System.out"/>
-      <param name="Threshold" value="INFO"/>
-
-      <layout class="org.apache.log4j.PatternLayout">
-         <!-- The default pattern: Date Priority [Category] Message\n -->
-         <param name="ConversionPattern" value="%9r %5p [%t] %c - %m%n"/>
-      </layout>
-   </appender>
-
-
-   <!-- ======================= -->
-   <!-- Setup the Root category -->
-   <!-- ======================= -->
-
-   <root>
-      <priority value="DEBUG"/>
-      <appender-ref ref="CONSOLE"/>
-      <appender-ref ref="FILE"/>
-   </root>
-
-</log4j:configuration>

Modified: trunk/pom.xml
===================================================================
--- trunk/pom.xml	2006-01-05 18:29:14 UTC (rev 374)
+++ trunk/pom.xml	2006-01-05 19:14:44 UTC (rev 375)
@@ -92,6 +92,7 @@
 
   <modules>
     <module>RTSPProxy-Core</module>
+    <module>RTSPProxy-App</module>
     <module>RTSPProxy-OSGi</module>
   </modules>
     



From rbieniek at berlios.de  Thu Jan  5 19:30:44 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Thu, 5 Jan 2006 19:30:44 +0100
Subject: [Rtspproxy-devel] r374 - in trunk/RTSPProxy-Core/src: main/java/rtspproxy main/java/rtspproxy/config main/java/rtspproxy/filter/accounting main/java/rtspproxy/filter/authentication main/java/rtspproxy/filter/authentication/scheme main/java/rtspproxy/filter/ipaddress main/java/rtspproxy/filter/rewrite main/java/rtspproxy/jmx main/java/rtspproxy/lib main/java/rtspproxy/proxy main/java/rtspproxy/proxy/track main/java/rtspproxy/rtp main/java/rtspproxy/rtp/rtcp main/java/rtspproxy/rtsp resources/conf
Message-ID: <200601051830.k05IUist023915@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-05 19:29:14 +0100 (Thu, 05 Jan 2006)
New Revision: 374

Added:
   trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.log4j.xml
Removed:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/ConfigReader.java
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/Main.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtspService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ShutdownHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/XMLConfigReader.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/scheme/BasicAuthentication.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/scheme/DigestAuthentication.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/RequestUrlRewritingImpl.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Authenticator.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/Exceptions.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/NetworkInterface.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/PortManager.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRtcpPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRtpPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientSide.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtcpPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RtpTrack.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/RtpPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp/SDESInfo.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspResponse.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspSession.java
   trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.conf.xml
Log:
- Removed property-file based configuration mechanism
- Factored configuration out of the main reactor. The caller must
  have loaded the configuration before starting the reactor.
- switched the core classes from log4j to slf4j logging. This allows
  a flexible logging framework configuration.
- The log4j configuration is now based on a configuration file (either
  properties or xml) which is pulled in by the main class.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/Main.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/Main.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/Main.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -17,9 +17,16 @@
  */
 package rtspproxy;
 
+import java.io.File;
+import java.util.ArrayList;
+
 import org.apache.log4j.BasicConfigurator;
 import org.apache.log4j.Logger;
+import org.apache.log4j.PropertyConfigurator;
+import org.apache.log4j.xml.DOMConfigurator;
 
+import rtspproxy.config.Config;
+import rtspproxy.config.XMLConfigReader;
 import rtspproxy.lib.Exceptions;
 
 /**
@@ -40,6 +47,68 @@
 		Runtime.getRuntime().addShutdownHook( new ShutdownHandler() );
 
 		try {
+			// Read configuration files
+			new Config();
+
+			// Log4J configuration
+			ArrayList<String> log4jList = new ArrayList<String>();
+			
+			// system wide configuration (typical on un*x-like systems)
+			log4jList.add("/etc/rtspproxy.log4j.");
+			
+			// Per-user configuration
+			log4jList.add(System.getProperty( "user.home", "" ) + "/.rtspproxy.log4j.");
+
+			// RtspProxy home folder
+			if(Config.getHome() != null)
+				log4jList.add(Config.getHome() + "/rtspproxy.log4j.");
+
+			// Current directory configuration
+			log4jList.add("rtspproxy.log4j.");
+
+			// Used for testing purposes:
+			// checks for the configuration file
+			log4jList.add("src/resources/conf/rtspproxy.log4j.");
+
+			for(String path : log4jList) {
+				File propFile = new File(path + "properties");
+				File xmlFile = new File(path + "xml");
+				
+				if(propFile.canRead())
+					PropertyConfigurator.configure(propFile.toURL());
+				else if(xmlFile.canRead())
+					DOMConfigurator.configure(xmlFile.toURL());
+			}
+			
+			ArrayList<String> pathlist = new ArrayList<String>();
+
+			// System wide configuration (tipical in unix systems)
+			pathlist.add("/etc/rtspproxy.conf.xml");
+			
+			// Per user config
+			pathlist.add(System.getProperty( "user.home", "" ) + "/.rtspproxy.conf.xml");
+
+			// RtspProxy home folder
+			if(Config.getHome() != null)
+				pathlist.add(Config.getHome() + "/rtspproxy.conf.xml");
+
+			// Current directory configuration
+			pathlist.add("rtspproxy.conf.xml");
+
+			// Used for testing purposes:
+			// checks for the configuration file
+			pathlist.add("src/resources/conf/rtspproxy.conf.xml");
+
+			XMLConfigReader configReader = new XMLConfigReader();
+			
+			for ( String path : pathlist ) {
+				configReader.readConfig(path);
+			}
+
+			if ( log.isDebugEnabled() ) {
+				log.debug( Config.debugParameters() );
+			}
+			
 			Reactor.setStandalone( true );
 			Reactor.start();
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -26,7 +26,8 @@
 import java.util.Observer;
 import java.util.Set;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.IoFilterChainBuilder;
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.IoSession;
@@ -46,7 +47,7 @@
 public abstract class ProxyService extends Singleton implements Observer
 {
 
-	private static Logger log = Logger.getLogger( ProxyService.class );
+	private static Logger log = LoggerFactory.getLogger( ProxyService.class );
 
 	/**
 	 * Main Socket address used by the service. It can be bound on several
@@ -101,7 +102,7 @@
 			log.info( getName() + " Started - Listening on: " + socketAddress );
 
 		} catch ( IOException e ) {
-			log.fatal( "Can't start " + getName() + " " + e );
+			log.error( "Can't start " + getName() + " " + e );
 			throw e;
 		}
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -28,7 +28,8 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.IoAcceptor;
 import org.apache.mina.common.IoFilter;
 import org.apache.mina.common.IoFilterChain;
@@ -52,7 +53,7 @@
 public final class ProxyServiceRegistry extends Singleton implements Observer
 {
 
-	private static Logger log = Logger.getLogger( ProxyServiceRegistry.class );
+	private static Logger log = LoggerFactory.getLogger( ProxyServiceRegistry.class );
 
 	public static final String threadPoolFilterNAME = "threadPoolFilter";
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -18,20 +18,22 @@
 
 package rtspproxy;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import rtspproxy.config.Config;
-import rtspproxy.config.ConfigReader;
 import rtspproxy.jmx.JmxAgent;
 import rtspproxy.lib.Exceptions;
 
 /**
- * 
+ * Main reactor of RTSP proxy. This reactor assembles all required services.
+ * The reactor expects a valid configuration before startup eg the global configuration must
+ * have been filled before starting the reactor.
  */
 public class Reactor
 {
 
-	private static Logger log = Logger.getLogger( Reactor.class );
+	private static Logger log = LoggerFactory.getLogger( Reactor.class );
 
 	private static ProxyServiceRegistry registry = null;
 
@@ -46,37 +48,12 @@
 
 	/**
 	 * Constructor. Creates a new Reactor and starts it.
+	 * The reactor relies on configuration info that has to be provided 
+	 * <b>before</b> starting the reactor.
+	 * @exception Exception reactor startup failed.
 	 */
 	static public void start() throws Exception
 	{
-		// Read configuration files
-		new Config();
-
-		String[] paths = new String[5];
-
-		// Used for testing purposes:
-		// checks for the configuration file
-		paths[4] = "src/resources/conf/rtspproxy.properties";
-
-		// Current directory configuration
-		paths[3] = "rtspproxy.properties";
-
-		// RtspProxy home folder
-		paths[2] = Config.getHome() + "/conf/rtspproxy.properties";
-
-		// Per user config
-		paths[1] = System.getProperty( "user.home", "" ) + "/.rtspproxy.properties";
-		// System wide configuration (tipical in unix systems)
-		paths[0] = "/etc/rtspproxy.properties";
-
-		for ( String path : paths ) {
-			new ConfigReader( path );
-		}
-
-		if ( log.isDebugEnabled() ) {
-			log.debug( Config.debugParameters() );
-		}
-
 		log.info( "Starting " + Config.getName() + " " + Config.getVersion() );
 
 		registry = new ProxyServiceRegistry();

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtspService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtspService.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtspService.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -20,7 +20,8 @@
 
 import java.util.Observable;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.IoAcceptor;
 import org.apache.mina.common.IoFilterChainBuilder;
 import org.apache.mina.common.IoHandler;
@@ -39,7 +40,7 @@
 public final class RtspService extends ProxyService
 {
 
-	private static Logger log = Logger.getLogger( RtspService.class );
+	private static Logger log = LoggerFactory.getLogger( RtspService.class );
 
 	private IoHandler rtspHandler = new ClientSide();
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ShutdownHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ShutdownHandler.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ShutdownHandler.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -18,7 +18,8 @@
 
 package rtspproxy;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import rtspproxy.config.Config;
 import rtspproxy.lib.Exceptions;
@@ -31,7 +32,7 @@
 public class ShutdownHandler extends Thread
 {
 
-	private static Logger log = Logger.getLogger( ShutdownHandler.class );
+	private static Logger log = LoggerFactory.getLogger( ShutdownHandler.class );
 
 	public void run()
 	{
@@ -41,7 +42,7 @@
 			Reactor.stop();
 
 		} catch ( Exception e ) {
-			log.fatal( "Exception in the reactor: " + e );
+			log.error( "Exception in the reactor: " + e );
 			Exceptions.logStackTrace( e );
 		}
 	}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -46,30 +46,7 @@
 	{
 		return parameters;
 	}
-
-	public static final BooleanParameter logDebug = new BooleanParameter( "log.debug", // name
-			false, // default value
-			true, // mutable
-			"This flag let you to enable or disable the debug "
-					+ "output of the program.",
-			"/rtspproxy/log/debug" // xpathExpr
-	);
-
-	public static final BooleanParameter logLogToFile = new BooleanParameter(
-			"log.logtofile", // name
-			false, // default value
-			true, // mutable
-			"If you want to save to a file the debug output	set this to Yes",
-			"/rtspproxy/log/logToFile" // xpathExpr
-	);
-
-	public static final StringParameter logFile = new StringParameter( "log.file", // name
-			"logs/rtspproxy.log", // default value
-			true, // mutable
-			"Here you specify the file to log to.",
-			"/rtspproxy/log/file"  // xpathExpr
-	);
-
+	
 	public static final IntegerParameter threadPoolSize = new IntegerParameter(
 			"thread.pool.size", // name
 			new Integer( 0 ), // min value
@@ -384,8 +361,6 @@
 		rtspproxyHome = System.getProperty( "rtspproxy.home" );
 		if ( rtspproxyHome == null ) {
 			rtspproxyHome = System.getProperty( "user.dir" );
-			if ( rtspproxyHome == null )
-				rtspproxyHome = "";
 		}
 
 		// Read program name and version
@@ -411,10 +386,6 @@
 
 		startDate = new Date();
 
-		// Subscribe to parameter changes notification
-		logDebug.addObserver( this );
-		logFile.addObserver( this );
-		logLogToFile.addObserver( this );
 	}
 
 	/**
@@ -426,15 +397,10 @@
 	{
 		if ( !( o instanceof Parameter ) )
 			throw new IllegalArgumentException( "Only observe parameters" );
-
-		if ( o == logDebug || o == logFile || o == logLogToFile ) {
-			updateDebugSettings();
-			// log.debug( "Updated logger settings." );
-		}
 	}
 
 	/**
-	 * @return the application base dir
+	 * @return the application base dir or null if the home directory cannot be determined.
 	 */
 	public static String getHome()
 	{
@@ -472,53 +438,6 @@
 
 	// /////////////////////////////////////////////////////////
 
-	protected static void updateDebugSettings()
-	{
-		Properties logProperties = new Properties();
-		// common properties
-		logProperties.setProperty( "log4j.appender.A1.layout",
-				"org.apache.log4j.PatternLayout" );
-
-		if ( logDebug.getValue() ) {
-			/*
-			 * For debug messages we want to have a special layout
-			 */
-			logProperties.setProperty( "log4j.appender.A1.layout.ConversionPattern",
-					"%9r %5p [%t] %c - %m%n" );
-			logProperties.setProperty( "log4j.rootLogger", "DEBUG, A1" );
-
-		} else {
-			// only write important messages
-			logProperties.setProperty( "log4j.appender.A1.layout.ConversionPattern",
-					"%5p - %d - %m%n" );
-			logProperties.setProperty( "log4j.rootLogger", "INFO, A1" );
-		}
-
-		if ( logLogToFile.getValue() == true ) {
-			// save logs in a file
-			File file = new File( logFile.getValue() );
-			if ( !file.isAbsolute() ) {
-				file = new File( rtspproxyHome + File.separator + logFile.getValue() );
-			}
-
-			logProperties.setProperty( "log4j.appender.A1",
-					"org.apache.log4j.RollingFileAppender" );
-			logProperties.setProperty( "log4j.appender.A1.File", file.getAbsolutePath() );
-
-			// if logs directory does not exists, create it
-			File logs = file.getParentFile();
-			if ( !logs.exists() )
-				logs.mkdir();
-
-		} else {
-			// Log to console
-			logProperties.setProperty( "log4j.appender.A1",
-					"org.apache.log4j.ConsoleAppender" );
-		}
-
-		PropertyConfigurator.configure( logProperties );
-	}
-
 	/**
 	 * @return a String containing all the parameters
 	 */

Deleted: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/ConfigReader.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/ConfigReader.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/ConfigReader.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -1,58 +0,0 @@
-package rtspproxy.config;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Properties;
-
-import org.apache.log4j.Logger;
-
-public class ConfigReader
-{
-	private static Logger log = Logger.getLogger( ConfigReader.class );
-
-	public ConfigReader( String fileName ) throws IllegalArgumentException
-	{
-		Properties properties = new Properties();
-		
-		File file = new File( fileName );
-
-		try {
-			InputStream is = new FileInputStream( file );
-			properties.load( is );
-		} catch ( FileNotFoundException e ) {
-			// silently ignore
-			return;
-		} catch ( IOException e ) {
-			log.error( "Error reading configuration file: " + e );
-			return;
-		}
-
-		// cycle throuh all the properties
-		for ( Object key : properties.keySet() ) {
-			String name = (String) key;
-			String value = properties.getProperty( name );
-
-			Parameter parameter = Config.getParameter( name );
-			if ( parameter == null ) {
-				// The property name is invalid
-				log.fatal( "Invalid parameter name: " + name );
-				throw new IllegalArgumentException();
-			}
-
-			try {
-				parameter.setValue( value );
-			} catch ( IllegalArgumentException e ) {
-				log.fatal( "Invalid value for parameter " + name + ": " + value );
-				throw e;
-			}
-		}
-
-		Config.updateDebugSettings();
-
-		log.debug( "Reading configurations from '" + file + "'" );
-
-	}
-}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/XMLConfigReader.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/XMLConfigReader.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/XMLConfigReader.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -3,7 +3,8 @@
  */
 package rtspproxy.config;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -25,8 +26,7 @@
 public class XMLConfigReader {
 
 	// logger
-	private static final Logger logger = Logger
-			.getLogger(XMLConfigReader.class);
+	private static final Logger logger = LoggerFactory.getLogger(XMLConfigReader.class);
 	
 	/**
 	 * create the xml config read object

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -1,6 +1,7 @@
 package rtspproxy.filter.accounting;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.IoFilterAdapter;
 import org.apache.mina.common.IoSession;
 
@@ -15,7 +16,7 @@
 public class AccountingFilter extends IoFilterAdapter
 {
 
-	private static Logger log = Logger.getLogger( AccountingFilter.class );
+	private static Logger log = LoggerFactory.getLogger( AccountingFilter.class );
 
 	private AccountingProvider provider = null;
 
@@ -30,7 +31,7 @@
 			providerClass = Class.forName( className );
 
 		} catch ( ClassNotFoundException e ) {
-			log.fatal( "Invalid AccountingProvider class: " + className );
+			log.error( "Invalid AccountingProvider class: " + className );
 			Reactor.stop();
 			return;
 		}
@@ -45,7 +46,7 @@
 		}
 
 		if ( !found ) {
-			log.fatal( "Class (" + providerClass
+			log.error( "Class (" + providerClass
 					+ ") does not implement the AccountingProvider interface." );
 			Reactor.stop();
 			return;
@@ -56,7 +57,7 @@
 			provider.init();
 
 		} catch ( Exception e ) {
-			log.fatal( "Error starting AccountingProvider: " + e );
+			log.error( "Error starting AccountingProvider: " + e );
 			Reactor.stop();
 			return;
 		}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -22,7 +22,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.IoFilterAdapter;
 import org.apache.mina.common.IoSession;
 
@@ -43,7 +44,7 @@
 public class AuthenticationFilter extends IoFilterAdapter
 {
 
-	private static Logger log = Logger.getLogger( AuthenticationFilter.class );
+	private static Logger log = LoggerFactory.getLogger( AuthenticationFilter.class );
 
 	public static final String ATTR = AuthenticationFilter.class.getName() + "Attr";
 
@@ -78,7 +79,7 @@
 			providerClass = Class.forName( className );
 
 		} catch ( ClassNotFoundException e ) {
-			log.fatal( "Invalid AuthenticationProvider class: " + className );
+			log.error( "Invalid AuthenticationProvider class: " + className );
 			Reactor.stop();
 			return;
 		}
@@ -93,7 +94,7 @@
 		}
 
 		if ( !found ) {
-			log.fatal( "Class (" + providerClass
+			log.error( "Class (" + providerClass
 					+ ") does not implement the AuthenticationProvider interface." );
 			Reactor.stop();
 			return;
@@ -104,7 +105,7 @@
 			provider.init();
 
 		} catch ( Exception e ) {
-			log.fatal( "Error starting AuthenticationProvider: " + e );
+			log.error( "Error starting AuthenticationProvider: " + e );
 			Reactor.stop();
 			return;
 		}
@@ -114,7 +115,7 @@
 		Class schemeClass = schemeRegistry.get( schemeName.toLowerCase() );
 		if ( schemeClass == null ) {
 			// scheme not found
-			log.fatal( "Authentication Scheme not found: " + schemeName
+			log.error( "Authentication Scheme not found: " + schemeName
 					+ ". Valid values are: "
 					+ Arrays.toString( schemeRegistry.keySet().toArray() ) );
 			Reactor.stop();

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/scheme/BasicAuthentication.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/scheme/BasicAuthentication.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/scheme/BasicAuthentication.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -18,7 +18,8 @@
 
 package rtspproxy.filter.authentication.scheme;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import rtspproxy.RtspService;
 import rtspproxy.lib.Base64;
@@ -33,7 +34,7 @@
 public class BasicAuthentication implements AuthenticationScheme
 {
 
-	private static Logger log = Logger.getLogger( BasicAuthentication.class );
+	private static Logger log = LoggerFactory.getLogger( BasicAuthentication.class );
 
 	private String realm;
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/scheme/DigestAuthentication.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/scheme/DigestAuthentication.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/scheme/DigestAuthentication.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -10,7 +10,8 @@
 import java.util.Map;
 import java.util.Random;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import rtspproxy.RtspService;
 import rtspproxy.lib.number.UnsignedLong;
@@ -20,7 +21,7 @@
 public class DigestAuthentication implements AuthenticationScheme
 {
 
-	private static Logger log = Logger.getLogger( DigestAuthentication.class );
+	private static Logger log = LoggerFactory.getLogger( DigestAuthentication.class );
 
 	/** This is the value of the validity of a challenge response. */
 	private static final int NONCE_TIMEOUT = 60 * 5; // 5 minutes

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -20,7 +20,8 @@
 
 import java.net.InetSocketAddress;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.IoFilterAdapter;
 import org.apache.mina.common.IoSession;
 
@@ -34,7 +35,7 @@
 public class IpAddressFilter extends IoFilterAdapter
 {
 
-	private static Logger log = Logger.getLogger( IpAddressFilter.class );
+	private static Logger log = LoggerFactory.getLogger( IpAddressFilter.class );
 
 	private IpAddressProvider provider;
 
@@ -49,7 +50,7 @@
 			providerClass = Class.forName( className );
 
 		} catch ( ClassNotFoundException e ) {
-			log.fatal( "Invalid IpAddressProvider class: " + className );
+			log.error( "Invalid IpAddressProvider class: " + className );
 			Reactor.stop();
 			return;
 		}
@@ -64,7 +65,7 @@
 		}
 
 		if ( !found ) {
-			log.fatal( "Class (" + provider
+			log.error( "Class (" + provider
 					+ ") does not implement the IpAddressProvider interface." );
 			Reactor.stop();
 			return;
@@ -74,7 +75,7 @@
 			provider = (IpAddressProvider) providerClass.newInstance();
 			provider.init();
 		} catch ( Exception e ) {
-			log.fatal( "Error starting IpAddressProvider: " + e );
+			log.error( "Error starting IpAddressProvider: " + e );
 			Reactor.stop();
 			return;
 		}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/RequestUrlRewritingImpl.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/RequestUrlRewritingImpl.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/RequestUrlRewritingImpl.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -6,7 +6,8 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.mina.common.IoFilterAdapter;
 import org.apache.mina.common.IoSession;
@@ -25,8 +26,7 @@
 	/**
 	 * Logger for this class
 	 */
-	private static final Logger logger = Logger
-			.getLogger(RequestUrlRewritingImpl.class);
+	private static final Logger logger = LoggerFactory.getLogger(RequestUrlRewritingImpl.class);
 
 	// the filter instance
 	private RequestUrlRewritingFilter filter;
@@ -48,7 +48,7 @@
 			this.filter = (RequestUrlRewritingFilter) filterClazz.newInstance();
 			logger.info("using request URL rewriter " + clazzName);
 		} catch (Exception e) {
-			logger.error(e);
+			logger.error("error instantiating filter", e);
 
 			throw e;
 		}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Authenticator.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Authenticator.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Authenticator.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -26,7 +26,8 @@
 import javax.management.remote.JMXPrincipal;
 import javax.security.auth.Subject;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import rtspproxy.config.Config;
 
@@ -39,7 +40,7 @@
 public class Authenticator implements JMXAuthenticator
 {
 
-	private static Logger log = Logger.getLogger( Authenticator.class );
+	private static Logger log = LoggerFactory.getLogger( Authenticator.class );
 
 	public Subject authenticate( Object credentials ) throws SecurityException
 	{

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -30,12 +30,12 @@
 import javax.management.remote.JMXServiceURL;
 
 import mx4j.log.Log;
-import mx4j.log.Log4JLogger;
 import mx4j.tools.adaptor.http.HttpAdaptor;
 import mx4j.tools.adaptor.http.XSLTProcessor;
 import mx4j.tools.naming.NamingService;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import rtspproxy.ProxyService;
 import rtspproxy.RdtClientService;
@@ -56,7 +56,7 @@
 public class JmxAgent
 {
 
-	private static Logger log = Logger.getLogger( JmxAgent.class );
+	private static Logger log = LoggerFactory.getLogger( JmxAgent.class );
 
 	private static final String DOMAIN = "RtspProxy";
 
@@ -72,7 +72,7 @@
 		System.setProperty( "mx4j.log.priority", "warn" );
 
 		// Redirect mx4j messages to our own logger
-		Log.redirectTo( new Log4JLogger() );
+		Log.redirectTo( new Slf4JLogger() );
 
 		mbeanServer = MBeanServerFactory.createMBeanServer();
 
@@ -105,7 +105,7 @@
 			startConnectorServer();
 
 		} catch ( Exception e ) {
-			log.fatal( "Exception: ", e );
+			log.error( "Exception: ", e );
 			Reactor.stop();
 		}
 	}
@@ -179,4 +179,55 @@
 		log.info( "Started JMX connector server. Service url: " + uri );
 	}
 
+	/**
+	 * simple wrapper to log mx4j logging info into slf4j subsystem
+	 * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+	 *
+	 */
+	public static class Slf4JLogger extends mx4j.log.Logger {
+
+		private Logger m_logger;
+		
+		/**
+		 * default no-op constructor
+		 */
+		public Slf4JLogger() {}
+		
+		/* (non-Javadoc)
+		 * @see mx4j.log.Logger#log(int, java.lang.Object, java.lang.Throwable)
+		 */
+		@Override
+		protected void log(int level, Object msg, Throwable t) {
+			switch(level) {
+			case mx4j.log.Logger.DEBUG:
+				this.m_logger.debug(msg.toString(), t);
+				break;
+			case mx4j.log.Logger.ERROR:
+				this.m_logger.error(msg.toString(), t);
+				break;
+			case mx4j.log.Logger.FATAL:
+				this.m_logger.error(msg.toString(), t);
+				break;
+			case mx4j.log.Logger.INFO:
+				this.m_logger.info(msg.toString(), t);
+				break;
+			case mx4j.log.Logger.TRACE:
+				this.m_logger.debug(msg.toString(), t);
+				break;
+			case mx4j.log.Logger.WARN:
+				this.m_logger.warn(msg.toString(), t);
+				break;
+			}
+		}
+
+		/* (non-Javadoc)
+		 * @see mx4j.log.Logger#setCategory(java.lang.String)
+		 */
+		@Override
+		protected void setCategory(String arg0) {
+			super.setCategory(arg0);
+			
+			this.m_logger = LoggerFactory.getLogger(arg0);
+		}		
+	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/Exceptions.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/Exceptions.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/Exceptions.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -18,7 +18,8 @@
 
 package rtspproxy.lib;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Provide logging for stack trace of exceptions.
@@ -28,7 +29,7 @@
 public class Exceptions
 {
 
-	private static Logger log = Logger.getRootLogger();
+	private static Logger log = LoggerFactory.getLogger("");
 
 	private final static String CRLF = "\r\n";
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/NetworkInterface.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/NetworkInterface.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/NetworkInterface.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -26,7 +26,8 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Utility used to get all the addresses of the network interfaces found on the
@@ -37,7 +38,7 @@
 public class NetworkInterface
 {
 
-	private static Logger log = Logger.getLogger( NetworkInterface.class );
+	private static Logger log = LoggerFactory.getLogger( NetworkInterface.class );
 
 	/**
 	 * Return all the addresses associated with the given interface. If the
@@ -58,7 +59,7 @@
 				addresses.addAll( getAddresses( networkInterface ) );
 
 			} catch ( Exception e ) {
-				log.fatal( "Cannot register network interface: " + interfaceAddress, e );
+				log.error( "Cannot register network interface: " + interfaceAddress, e );
 				return null;
 			}
 		} else {
@@ -68,7 +69,7 @@
 			try {
 				interfaces = java.net.NetworkInterface.getNetworkInterfaces();
 			} catch ( SocketException se ) {
-				log.fatal( "Cannot get the interfaces list." );
+				log.error( "Cannot get the interfaces list." );
 				return null;
 			}
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/PortManager.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/PortManager.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/PortManager.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -24,7 +24,8 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * The PortManager will keep a list of reserved ports
@@ -32,7 +33,7 @@
 public class PortManager
 {
 
-	private static Logger log = Logger.getLogger( PortManager.class );
+	private static Logger log = LoggerFactory.getLogger( PortManager.class );
 
 	protected static final int minUdpPort = 6790;
 	protected static final int maxUdpPort = 49151;

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -20,7 +20,8 @@
 
 import java.net.InetSocketAddress;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.ByteBuffer;
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
@@ -38,7 +39,7 @@
 public class ClientRdtPacketHandler extends IoHandlerAdapter
 {
 
-	private static Logger log = Logger.getLogger( ClientRdtPacketHandler.class );
+	private static Logger log = LoggerFactory.getLogger( ClientRdtPacketHandler.class );
 
 	@Override
 	public void sessionCreated( IoSession session ) throws Exception

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRtcpPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRtcpPacketHandler.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRtcpPacketHandler.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -20,7 +20,8 @@
 
 import java.net.InetSocketAddress;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.ByteBuffer;
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
@@ -39,7 +40,7 @@
 public class ClientRtcpPacketHandler extends IoHandlerAdapter
 {
 
-	private static Logger log = Logger.getLogger( ClientRtcpPacketHandler.class );
+	private static Logger log = LoggerFactory.getLogger( ClientRtcpPacketHandler.class );
 
 	@Override
 	public void sessionCreated( IoSession session ) throws Exception

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRtpPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRtpPacketHandler.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRtpPacketHandler.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -20,7 +20,8 @@
 
 import java.net.InetSocketAddress;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.ByteBuffer;
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
@@ -40,7 +41,7 @@
 public class ClientRtpPacketHandler extends IoHandlerAdapter
 {
 
-	private static Logger log = Logger.getLogger( ClientRtpPacketHandler.class );
+	private static Logger log = LoggerFactory.getLogger( ClientRtpPacketHandler.class );
 
 	@Override
 	public void sessionCreated( IoSession session ) throws Exception

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientSide.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientSide.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientSide.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -18,7 +18,8 @@
 
 package rtspproxy.proxy;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
 import org.apache.mina.filter.codec.ProtocolDecoderException;
@@ -35,7 +36,7 @@
 public class ClientSide extends IoHandlerAdapter
 {
 
-	private static Logger log = Logger.getLogger( ClientSide.class );
+	private static Logger log = LoggerFactory.getLogger( ClientSide.class );
 
 	@Override
 	public void sessionCreated( IoSession session ) throws Exception

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -26,7 +26,8 @@
 import java.net.UnknownHostException;
 import java.nio.channels.UnresolvedAddressException;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.ConnectFuture;
 import org.apache.mina.common.IoSession;
 import org.apache.mina.transport.socket.nio.SocketConnector;
@@ -55,7 +56,7 @@
 public class ProxyHandler
 {
 
-	private static Logger log = Logger.getLogger( ProxyHandler.class );
+	private static Logger log = LoggerFactory.getLogger( ProxyHandler.class );
 
 	/** Used to save a reference to this handler in the IoSession */
 	protected static final String ATTR = ProxyHandler.class.toString() + "Attr";
@@ -109,7 +110,7 @@
 				connectServerSide( request.getUrl() );
 
 			} catch ( IOException e ) {
-				log.error( e );
+				log.error( "I/O exception", e );
 				// closeAll();
 			} finally {
 				if ( serverSession == null )
@@ -494,7 +495,7 @@
 		try {
 			session.write( request );
 		} catch ( Exception e ) {
-			log.error( e.getCause() );
+			log.error( "exception sending request", e.getCause() );
 		}
 	}
 
@@ -512,7 +513,7 @@
 		try {
 			session.write( response );
 		} catch ( Exception e ) {
-			log.error( e.getCause() );
+			log.error( "exception sending response", e.getCause() );
 		}
 	}
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -22,7 +22,8 @@
 import java.util.Random;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import rtspproxy.lib.number.UnsignedLong;
 import rtspproxy.proxy.track.RdtTrack;
@@ -37,7 +38,7 @@
 public class ProxySession
 {
 
-	private static Logger log = Logger.getLogger( ProxySession.class );
+	private static Logger log = LoggerFactory.getLogger( ProxySession.class );
 
 	protected static final String ATTR = ProxySession.class.toString() + "Attr";
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -20,7 +20,8 @@
 
 import java.net.InetSocketAddress;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.ByteBuffer;
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
@@ -38,7 +39,7 @@
 public class ServerRdtPacketHandler extends IoHandlerAdapter
 {
 
-	private static Logger log = Logger.getLogger( ServerRdtPacketHandler.class );
+	private static Logger log = LoggerFactory.getLogger( ServerRdtPacketHandler.class );
 
 	@Override
 	public void sessionCreated( IoSession session ) throws Exception

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtcpPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtcpPacketHandler.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtcpPacketHandler.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -20,7 +20,8 @@
 
 import java.net.InetSocketAddress;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.ByteBuffer;
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
@@ -36,7 +37,7 @@
 public class ServerRtcpPacketHandler extends IoHandlerAdapter
 {
 
-	private static Logger log = Logger.getLogger( ServerRtcpPacketHandler.class );
+	private static Logger log = LoggerFactory.getLogger( ServerRtcpPacketHandler.class );
 
 	@Override
 	public void messageReceived( IoSession session, Object buffer ) throws Exception

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -20,7 +20,8 @@
 
 import java.net.InetSocketAddress;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.ByteBuffer;
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
@@ -36,7 +37,7 @@
 public class ServerRtpPacketHandler extends IoHandlerAdapter
 {
 
-	private static Logger log = Logger.getLogger( ServerRtpPacketHandler.class );
+	private static Logger log = LoggerFactory.getLogger( ServerRtpPacketHandler.class );
 
 	/*
 	 * @see org.apache.mina.io.IoHandlerAdapter#dataRead(org.apache.mina.io.IoSession,

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -13,7 +13,8 @@
 
 package rtspproxy.proxy;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
 
@@ -29,7 +30,7 @@
 public class ServerSide extends IoHandlerAdapter
 {
 
-	private static Logger log = Logger.getLogger( ServerSide.class );
+	private static Logger log = LoggerFactory.getLogger( ServerSide.class );
 
 	@Override
 	public void sessionCreated( IoSession session ) throws Exception
@@ -199,7 +200,7 @@
 
 		ProxyHandler proxyHandler = (ProxyHandler) ( session.getAttribute( ProxyHandler.ATTR ) );
 		if ( proxyHandler == null ) {
-			log.fatal( "proxyHandler is null" );
+			log.error( "proxyHandler is null" );
 			throw new NullPointerException( "proxyHandler in session is null" );
 		}
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -3,7 +3,8 @@
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.ByteBuffer;
 import org.apache.mina.common.IoSession;
 
@@ -13,7 +14,7 @@
 public class RdtTrack extends Track
 {
 
-	private static Logger log = Logger.getLogger( RdtTrack.class );
+	private static Logger log = LoggerFactory.getLogger( RdtTrack.class );
 
 	/**
 	 * Cached references to IoSession objects used to send packets to server and

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RtpTrack.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RtpTrack.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RtpTrack.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -9,7 +9,8 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.IoSession;
 
 import rtspproxy.RtcpClientService;
@@ -23,7 +24,7 @@
 public class RtpTrack extends Track
 {
 
-	private static Logger log = Logger.getLogger( RtpTrack.class );
+	private static Logger log = LoggerFactory.getLogger( RtpTrack.class );
 
 	/** Maps a server SSRC id to a Track */
 	private static Map<UnsignedInt, RtpTrack> serverSsrcMap = new ConcurrentHashMap<UnsignedInt, RtpTrack>();

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/RtpPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/RtpPacket.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/RtpPacket.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -18,7 +18,8 @@
 
 package rtspproxy.rtp;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.ByteBuffer;
 
 import rtspproxy.lib.number.UnsignedByte;
@@ -55,7 +56,7 @@
  */
 public class RtpPacket implements Packet {
 
-	private static Logger log = Logger.getLogger(RtpPacket.class);
+	private static Logger log = LoggerFactory.getLogger(RtpPacket.class);
 
 	/**
 	 * This field identifies the version of RTP. The version defined by this

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp/SDESInfo.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp/SDESInfo.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp/SDESInfo.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -20,7 +20,8 @@
 
 import java.nio.ByteBuffer;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * @author mat
@@ -28,7 +29,7 @@
  */
 public class SDESInfo implements RtcpInfo
 {
-	static Logger log = Logger.getLogger( SDESInfo.class );
+	static Logger log = LoggerFactory.getLogger( SDESInfo.class );
 	
 	public enum Type {
 		END(0), CNAME(1), NAME(2), EMAIL(3), PHONE(4), LOC(5), TOOL(6), NOTE(7), PRIV(8);

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -21,7 +21,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.ByteBuffer;
 import org.apache.mina.common.IoSession;
 import org.apache.mina.filter.codec.ProtocolDecoder;
@@ -64,7 +65,7 @@
 		Dispatch
 	}
 
-	private static Logger log = Logger.getLogger( RtspDecoder.class );
+	private static Logger log = LoggerFactory.getLogger( RtspDecoder.class );
 
 	private static final Pattern rtspRequestPattern = Pattern.compile( "([A-Z_]+) ([^ ]+) RTSP/1.0" );
 	private static final Pattern rtspResponsePattern = Pattern.compile( "RTSP/1.0 ([0-9]+) .+" );
@@ -147,7 +148,7 @@
 								try {
 									url = new URL( strUrl );
 								} catch ( MalformedURLException e ) {
-									log.info( e );
+									log.info( "malformed URL: " + url, e );
 									url = null;
 									session.setAttribute( readStateATTR, ReadState.Failed );
 									throw new ProtocolDecoderException( "Invalid URL" );

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspResponse.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspResponse.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspResponse.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -18,7 +18,8 @@
 
 package rtspproxy.rtsp;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.mina.common.ByteBuffer;
 
 /**
@@ -27,7 +28,7 @@
 public class RtspResponse extends RtspMessage
 {
 
-	private static Logger log = Logger.getLogger( RtspResponse.class );
+	private static Logger log = LoggerFactory.getLogger( RtspResponse.class );
 
 	RtspCode code;
 	RtspRequest.Verb requestVerb = RtspRequest.Verb.None;

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspSession.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspSession.java	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspSession.java	2006-01-05 18:29:14 UTC (rev 374)
@@ -22,7 +22,8 @@
 import java.util.Random;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import rtspproxy.lib.number.UnsignedLong;
 
@@ -34,7 +35,7 @@
 public class RtspSession
 {
 
-	private static Logger log = Logger.getLogger( RtspSession.class );
+	private static Logger log = LoggerFactory.getLogger( RtspSession.class );
 
 	private static Map<String, RtspSession> sessions = new ConcurrentHashMap<String, RtspSession>();
 

Modified: trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.conf.xml
===================================================================
--- trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.conf.xml	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.conf.xml	2006-01-05 18:29:14 UTC (rev 374)
@@ -1,9 +1,4 @@
 <rtspproxy>
-  <log>
-    <debug>false</debug>
-    <logToFile>true</logToFile>
-    <file>/tmp/rtspproxy.log</file>
-  </log>
   <threadPoolSize>10</threadPoolSize>
   <proxy>
     <rtspPort>554</rtspPort>

Added: trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.log4j.xml
===================================================================
--- trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.log4j.xml	2006-01-04 16:50:02 UTC (rev 373)
+++ trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.log4j.xml	2006-01-05 18:29:14 UTC (rev 374)
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
+
+<!-- ===================================================================== -->
+<!--                                                                       -->
+<!--  Log4j Configuration                                                  -->
+<!--                                                                       -->
+<!-- ===================================================================== -->
+
+<!-- $Id$ -->
+
+<!--
+   | For more configuration infromation and examples see the Jakarta Log4j
+   | owebsite: http://jakarta.apache.org/log4j
+ -->
+
+<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
+
+   <!-- ================================= -->
+   <!-- Preserve messages in a local file -->
+   <!-- ================================= -->
+
+   <!-- A time/date based rolling appender -->
+   <appender name="FILE" class="org.apache.log4j.FileAppender">
+      <param name="File" value="/tmp/rtspproxy.log"/>
+      <param name="Append" value="false"/>
+
+      <layout class="org.apache.log4j.PatternLayout">
+         <!-- The default pattern: Date Priority [Category] Message\n -->
+         <param name="ConversionPattern" value="%9r %5p [%t] %c - %m%n"/>
+
+         <!-- The full pattern: Date MS Priority [Category] (Thread:NDC) Message\n
+         <param name="ConversionPattern" value="%d %-5r %-5p [%c] (%t:%x) %m%n"/>
+          -->
+      </layout>
+   </appender>
+
+   <!-- ============================== -->
+   <!-- Append messages to the console -->
+   <!-- ============================== -->
+
+   <appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
+      <param name="Target" value="System.out"/>
+      <param name="Threshold" value="INFO"/>
+
+      <layout class="org.apache.log4j.PatternLayout">
+         <!-- The default pattern: Date Priority [Category] Message\n -->
+         <param name="ConversionPattern" value="%9r %5p [%t] %c - %m%n"/>
+      </layout>
+   </appender>
+
+
+   <!-- ======================= -->
+   <!-- Setup the Root category -->
+   <!-- ======================= -->
+
+   <root>
+      <priority value="DEBUG"/>
+      <appender-ref ref="CONSOLE"/>
+      <appender-ref ref="FILE"/>
+   </root>
+
+</log4j:configuration>


Property changes on: trunk/RTSPProxy-Core/src/resources/conf/rtspproxy.log4j.xml
___________________________________________________________________
Name: svn:keywords
   + HeadURL Id LastChangedBy LastChangedDate LastChangedRevision



From rbieniek at berlios.de  Thu Jan  5 20:42:58 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Thu, 5 Jan 2006 20:42:58 +0100
Subject: [Rtspproxy-devel] r376 - in trunk: RTSPProxy-App RTSPProxy-App/src/main/java/rtspproxy/filter/accounting RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress RTSPProxy-App/src/resources/release RTSPProxy-Core RTSPProxy-Core/src/main/java/rtspproxy/config RTSPProxy-Core/src/main/java/rtspproxy/filter RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress
Message-ID: <200601051942.k05Jgwwe000437@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-05 20:42:18 +0100 (Thu, 05 Jan 2006)
New Revision: 376

Added:
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/PlainTextAccountingProvider.java
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingProvider.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressProvider.java
Removed:
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/accounting/
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/ipaddress/
Modified:
   trunk/RTSPProxy-App/pom.xml
   trunk/RTSPProxy-App/src/resources/release/bin.xml
   trunk/RTSPProxy-App/src/resources/release/default.xml
   trunk/RTSPProxy-Core/pom.xml
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
Log:
- Fixed source moving problems that were created while refactoring the 
  application


Modified: trunk/RTSPProxy-App/pom.xml
===================================================================
--- trunk/RTSPProxy-App/pom.xml	2006-01-05 19:14:44 UTC (rev 375)
+++ trunk/RTSPProxy-App/pom.xml	2006-01-05 19:42:18 UTC (rev 376)
@@ -10,6 +10,7 @@
                 <groupId>net.merlimat</groupId>
                 <artifactId>rtspproxy</artifactId>
                 <version>3.0-ALPHA4-SNAPSHOT</version>
+		<relativePath>../pom.xml</relativePath>
         </parent>
 
 	<modelVersion>4.0.0</modelVersion>

Copied: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/PlainTextAccountingProvider.java (from rev 375, trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/accounting/PlainTextAccountingProvider.java)

Copied: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java (from rev 375, trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/ipaddress/PlainTextIpAddressProvider.java)

Modified: trunk/RTSPProxy-App/src/resources/release/bin.xml
===================================================================
--- trunk/RTSPProxy-App/src/resources/release/bin.xml	2006-01-05 19:14:44 UTC (rev 375)
+++ trunk/RTSPProxy-App/src/resources/release/bin.xml	2006-01-05 19:42:18 UTC (rev 376)
@@ -8,7 +8,7 @@
 		<fileSet>
 			<directory>target</directory>
 			<includes>
-				<include>rtspproxy*.jar</include>
+				<include>RTSPProxy*.jar</include>
 			</includes>
 			<outputDirectory>/lib</outputDirectory>
 		</fileSet>

Modified: trunk/RTSPProxy-App/src/resources/release/default.xml
===================================================================
--- trunk/RTSPProxy-App/src/resources/release/default.xml	2006-01-05 19:14:44 UTC (rev 375)
+++ trunk/RTSPProxy-App/src/resources/release/default.xml	2006-01-05 19:42:18 UTC (rev 376)
@@ -8,7 +8,7 @@
 		<fileSet>
 			<directory>target</directory>
 			<includes>
-				<include>rtspproxy*.jar</include>
+				<include>RTSPProxy*.jar</include>
 			</includes>
 			<outputDirectory>/lib</outputDirectory>
 		</fileSet>

Modified: trunk/RTSPProxy-Core/pom.xml
===================================================================
--- trunk/RTSPProxy-Core/pom.xml	2006-01-05 19:14:44 UTC (rev 375)
+++ trunk/RTSPProxy-Core/pom.xml	2006-01-05 19:42:18 UTC (rev 376)
@@ -95,11 +95,6 @@
 	</distributionManagement>
 
 	<dependencies>
-		<dependency>
-			<groupId>log4j</groupId>
-			<artifactId>log4j</artifactId>
-			<version>1.2.9</version>
-		</dependency>
 
 		<dependency>
 			<groupId>directory-network</groupId>

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-01-05 19:14:44 UTC (rev 375)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-01-05 19:42:18 UTC (rev 376)
@@ -14,8 +14,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
-import org.apache.log4j.PropertyConfigurator;
-
 import rtspproxy.lib.Singleton;
 import rtspproxy.rtsp.Handler;
 

Copied: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java (from rev 375, trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/accounting/AccountingFilter.java)

Copied: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingProvider.java (from rev 375, trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/accounting/AccountingProvider.java)

Copied: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java (from rev 375, trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/ipaddress/IpAddressFilter.java)

Copied: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressProvider.java (from rev 375, trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/ipaddress/IpAddressProvider.java)



From rbieniek at berlios.de  Thu Jan  5 21:14:16 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Thu, 5 Jan 2006 21:14:16 +0100
Subject: [Rtspproxy-devel] r377 - trunk/RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress
Message-ID: <200601052014.k05KEGov009079@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-05 21:14:13 +0100 (Thu, 05 Jan 2006)
New Revision: 377

Added:
   trunk/RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProviderTest.java
Removed:
   trunk/RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress/ipaddress/
Log:
- Fixed source moving problem


Copied: trunk/RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProviderTest.java (from rev 375, trunk/RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress/ipaddress/PlainTextIpAddressProviderTest.java)



From rbieniek at berlios.de  Sat Jan  7 00:46:42 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Sat, 7 Jan 2006 00:46:42 +0100
Subject: [Rtspproxy-devel] r379 - trunk/RTSPProxy-OSGi
Message-ID: <200601062346.k06NkgRd031317@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-07 00:46:38 +0100 (Sat, 07 Jan 2006)
New Revision: 379

Added:
   trunk/RTSPProxy-OSGi/LICENSE.txt
Log:
- added missing license file


Copied: trunk/RTSPProxy-OSGi/LICENSE.txt (from rev 378, trunk/LICENSE.txt)



From rbieniek at berlios.de  Sat Jan  7 02:31:59 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Sat, 7 Jan 2006 02:31:59 +0100
Subject: [Rtspproxy-devel] r380 - in trunk: . RTSPProxy-Core/src RTSPProxy-Core/src/resources RTSPProxy-OSGi src src/resources src/site
Message-ID: <200601070131.k071Vxq8026156@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-07 02:30:53 +0100 (Sat, 07 Jan 2006)
New Revision: 380

Added:
   trunk/src/resources/
   trunk/src/resources/images/
   trunk/src/site/
Removed:
   trunk/RTSPProxy-Core/src/resources/conf/
   trunk/RTSPProxy-Core/src/resources/images/
   trunk/RTSPProxy-Core/src/site/
Modified:
   trunk/RTSPProxy-OSGi/pom.xml
   trunk/pom.xml
   trunk/src/site/site.xml
Log:
- Started documentation refactoring


Modified: trunk/RTSPProxy-OSGi/pom.xml
===================================================================
--- trunk/RTSPProxy-OSGi/pom.xml	2006-01-06 23:46:38 UTC (rev 379)
+++ trunk/RTSPProxy-OSGi/pom.xml	2006-01-07 01:30:53 UTC (rev 380)
@@ -192,7 +192,6 @@
 	  </targetJdk>
 	</configuration>
       </plugin>
-
       <!-- see http://docs.safehaus.org/display/OSGI/OSGi+Plugin+for+Maven+2.0 for further instructions -->
       <plugin>
         <groupId>org.apache.felix.plugins</groupId>

Modified: trunk/pom.xml
===================================================================
--- trunk/pom.xml	2006-01-06 23:46:38 UTC (rev 379)
+++ trunk/pom.xml	2006-01-07 01:30:53 UTC (rev 380)
@@ -122,6 +122,7 @@
 	<groupId>org.apache.maven.plugins</groupId>
 	<artifactId>maven-site-plugin</artifactId>
 	<configuration>
+          <addModules>true</addModules>
 	  <outputEncoding>UTF-8</outputEncoding>
 	</configuration>
 	<!--  <version>2.0-beta-2</version> -->

Copied: trunk/src/resources/images (from rev 378, trunk/RTSPProxy-Core/src/resources/images)

Copied: trunk/src/site (from rev 378, trunk/RTSPProxy-Core/src/site)

Modified: trunk/src/site/site.xml
===================================================================
--- trunk/RTSPProxy-Core/src/site/site.xml	2006-01-06 20:36:11 UTC (rev 378)
+++ trunk/src/site/site.xml	2006-01-07 01:30:53 UTC (rev 380)
@@ -90,5 +90,8 @@
 			-->
 		</menu>
 
+               ${modules}
+
+               ${reports}
 	</body>
 </project>
\ No newline at end of file



From rbieniek at berlios.de  Sat Jan  7 02:57:56 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Sat, 7 Jan 2006 02:57:56 +0100
Subject: [Rtspproxy-devel] r381 - in trunk: RTSPProxy-App RTSPProxy-Core RTSPProxy-OSGi src/site
Message-ID: <200601070157.k071vuGa032305@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-07 02:57:24 +0100 (Sat, 07 Jan 2006)
New Revision: 381

Modified:
   trunk/RTSPProxy-App/pom.xml
   trunk/RTSPProxy-Core/pom.xml
   trunk/RTSPProxy-OSGi/pom.xml
   trunk/src/site/site.xml
Log:
- simplified sub-project POMs


Modified: trunk/RTSPProxy-App/pom.xml
===================================================================
--- trunk/RTSPProxy-App/pom.xml	2006-01-07 01:30:53 UTC (rev 380)
+++ trunk/RTSPProxy-App/pom.xml	2006-01-07 01:57:24 UTC (rev 381)
@@ -22,79 +22,7 @@
 	<url>http://rtspproxy.berlios.de</url>
 	<inceptionYear>2003</inceptionYear>
 
-	<organization>
-		<name>Matteo Merli</name>
-		<url>http://merlimat.net</url>
-	</organization>
 
-	<issueManagement>
-		<system>Berlios</system>
-		<url>http://developer.berlios.de/bugs/?group_id=4526</url>
-	</issueManagement>
-
-	<licenses>
-		<license>
-			<name>GNU General Public License</name>
-			<url>LICENSE.txt</url>
-		</license>
-	</licenses>
-	<developers>
-		<developer>
-			<id>merlimat</id>
-			<name>Matteo Merli</name>
-			<email>matteo.merli at gmail.com</email>
-			<!-- <timezone>+1</timezone> -->
-			<url>http://merlimat.net/about</url>
-		</developer>
-		<developer>
-			<id>rbieniek</id>
-			<name>Rainer Bieniek</name>
-			<email>Rainer.Bieniek at vodafone.com</email>
-			<!-- <timezone>+1</timezone> -->
-			<!-- <url>http://merlimat.net/about</url> -->
-		</developer>
-	</developers>
-
-	<scm>
-		<connection>
-			scm:svn:http://svn.berlios.de/svnroot/repos/rtspproxy/trunk
-		</connection>
-		<developerConnection>
-			scm:svn:https://svn.berlios.de/svnroot/repos/rtspproxy/trunk
-		</developerConnection>
-		<url>http://svn.berlios.de/wsvn/rtspproxy/</url>
-	</scm>
-
-	<mailingLists>
-		<mailingList>
-			<name>Development list</name>
-			<post>rtspproxy-devel at lists.berlios.de</post>
-
-			<archive>
-				http://www.nabble.com/RtspProxy-Devel-f6753.html
-			</archive>
-			<subscribe>
-				https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
-			</subscribe>
-			<unsubscribe>
-				https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
-			</unsubscribe>
-		</mailingList>
-	</mailingLists>
-
-	<distributionManagement>
-		<downloadUrl>
-			http://rtspproxy.berlios.de/download.html
-		</downloadUrl>
-		<site>
-			<id>rtspproxy.website</id>
-			<name>Default Site</name>
-			<url>
-				scp://shell.berlios.de/home/groups/rtspproxy/htdocs
-			</url>
-		</site>
-	</distributionManagement>
-
 	<dependencies>
 
     <dependency>
@@ -160,109 +88,7 @@
 					</descriptor>
 				</configuration>
 			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-site-plugin</artifactId>
-				<configuration>
-					<outputEncoding>UTF-8</outputEncoding>
-				</configuration>
-				<!--  <version>2.0-beta-2</version> -->
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>changes-maven-plugin</artifactId>
-				<executions>
-					<execution>
-						<goals>
-							<goal>announcement-generate</goal>
-						</goals>
-						<id>announcement-generate</id>
-					</execution>
-					<execution>
-						<goals>
-							<goal>announcement-mail</goal>
-						</goals>
-						<id>announcement-mail</id>
-					</execution>
-				</executions>
-				<configuration>
-					<xmlPath>src/changes</xmlPath>
-
-					<smtpHost>mail.yourhost.com</smtpHost>
-					<smtpPort implementation="java.lang.Integer">
-						25
-					</smtpPort>
-					<toAddresses>
-						<toAddress implementation="java.lang.String">
-							someones at email.com
-						</toAddress>
-						<toAddress implementation="java.lang.String">
-							anothersomeone at email.com
-						</toAddress>
-					</toAddresses>
-				</configuration>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-pmd-plugin</artifactId>
-				<configuration>
-					<targetJdk implementation="java.lang.String">
-						1.5
-					</targetJdk>
-				</configuration>
-			</plugin>
 		</plugins>
 	</build>
 
-	<reporting>
-		<plugins>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>
-					maven-project-info-reports-plugin
-				</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>changelog-maven-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>surefire-report-maven-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>changes-maven-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>taglist-maven-plugin</artifactId>
-			</plugin>
-<!-- 
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-javadoc-plugin</artifactId>
-				<configuration>
-					<charset>UTF-8</charset>
-					<docencoding>UTF-8</docencoding>
-					<link>
-						http://java.sun.com/j2se/1.5.0/docs/api/,
-						http://www.junit.org/junit/javadoc/3.8.1/,
-						http://directory.apache.org/subprojects/network/apidocs/
-					</link>
-				</configuration>
-			</plugin>
--->
-			<!-- 
-				<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-pmd-plugin</artifactId>
-				<configuration>
-				<targetJdk implementation="java.lang.String">1.5</targetJdk>
-				</configuration>
-				</plugin>
-			-->
-		</plugins>
-	</reporting>
-
 </project>

Modified: trunk/RTSPProxy-Core/pom.xml
===================================================================
--- trunk/RTSPProxy-Core/pom.xml	2006-01-07 01:30:53 UTC (rev 380)
+++ trunk/RTSPProxy-Core/pom.xml	2006-01-07 01:57:24 UTC (rev 381)
@@ -21,79 +21,6 @@
 	<url>http://rtspproxy.berlios.de</url>
 	<inceptionYear>2003</inceptionYear>
 
-	<organization>
-		<name>Matteo Merli</name>
-		<url>http://merlimat.net</url>
-	</organization>
-
-	<issueManagement>
-		<system>Berlios</system>
-		<url>http://developer.berlios.de/bugs/?group_id=4526</url>
-	</issueManagement>
-
-	<licenses>
-		<license>
-			<name>GNU General Public License</name>
-			<url>LICENSE.txt</url>
-		</license>
-	</licenses>
-	<developers>
-		<developer>
-			<id>merlimat</id>
-			<name>Matteo Merli</name>
-			<email>matteo.merli at gmail.com</email>
-			<!-- <timezone>+1</timezone> -->
-			<url>http://merlimat.net/about</url>
-		</developer>
-		<developer>
-			<id>rbieniek</id>
-			<name>Rainer Bieniek</name>
-			<email>Rainer.Bieniek at vodafone.com</email>
-			<!-- <timezone>+1</timezone> -->
-			<!-- <url>http://merlimat.net/about</url> -->
-		</developer>
-	</developers>
-
-	<scm>
-		<connection>
-			scm:svn:http://svn.berlios.de/svnroot/repos/rtspproxy/trunk
-		</connection>
-		<developerConnection>
-			scm:svn:https://svn.berlios.de/svnroot/repos/rtspproxy/trunk
-		</developerConnection>
-		<url>http://svn.berlios.de/wsvn/rtspproxy/</url>
-	</scm>
-
-	<mailingLists>
-		<mailingList>
-			<name>Development list</name>
-			<post>rtspproxy-devel at lists.berlios.de</post>
-
-			<archive>
-				http://www.nabble.com/RtspProxy-Devel-f6753.html
-			</archive>
-			<subscribe>
-				https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
-			</subscribe>
-			<unsubscribe>
-				https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
-			</unsubscribe>
-		</mailingList>
-	</mailingLists>
-
-	<distributionManagement>
-		<downloadUrl>
-			http://rtspproxy.berlios.de/download.html
-		</downloadUrl>
-		<site>
-			<id>rtspproxy.website</id>
-			<name>Default Site</name>
-			<url>
-				scp://shell.berlios.de/home/groups/rtspproxy/htdocs
-			</url>
-		</site>
-	</distributionManagement>
-
 	<dependencies>
 
 		<dependency>
@@ -150,118 +77,7 @@
 					<showWarnings>true</showWarnings>
 				</configuration>
 			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-assembly-plugin</artifactId>
-				<configuration>
-					<descriptor>
-						src/resources/release/default.xml
-					</descriptor>
-				</configuration>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-site-plugin</artifactId>
-				<configuration>
-					<outputEncoding>UTF-8</outputEncoding>
-				</configuration>
-				<!--  <version>2.0-beta-2</version> -->
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>changes-maven-plugin</artifactId>
-				<executions>
-					<execution>
-						<goals>
-							<goal>announcement-generate</goal>
-						</goals>
-						<id>announcement-generate</id>
-					</execution>
-					<execution>
-						<goals>
-							<goal>announcement-mail</goal>
-						</goals>
-						<id>announcement-mail</id>
-					</execution>
-				</executions>
-				<configuration>
-					<xmlPath>src/changes</xmlPath>
-
-					<smtpHost>mail.yourhost.com</smtpHost>
-					<smtpPort implementation="java.lang.Integer">
-						25
-					</smtpPort>
-					<toAddresses>
-						<toAddress implementation="java.lang.String">
-							someones at email.com
-						</toAddress>
-						<toAddress implementation="java.lang.String">
-							anothersomeone at email.com
-						</toAddress>
-					</toAddresses>
-				</configuration>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-pmd-plugin</artifactId>
-				<configuration>
-					<targetJdk implementation="java.lang.String">
-						1.5
-					</targetJdk>
-				</configuration>
-			</plugin>
 		</plugins>
 	</build>
 
-	<reporting>
-		<plugins>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>
-					maven-project-info-reports-plugin
-				</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>changelog-maven-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>surefire-report-maven-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>changes-maven-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>taglist-maven-plugin</artifactId>
-			</plugin>
-<!-- 
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-javadoc-plugin</artifactId>
-				<configuration>
-					<charset>UTF-8</charset>
-					<docencoding>UTF-8</docencoding>
-					<link>
-						http://java.sun.com/j2se/1.5.0/docs/api/,
-						http://www.junit.org/junit/javadoc/3.8.1/,
-						http://directory.apache.org/subprojects/network/apidocs/
-					</link>
-				</configuration>
-			</plugin>
--->
-			<!-- 
-				<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-pmd-plugin</artifactId>
-				<configuration>
-				<targetJdk implementation="java.lang.String">1.5</targetJdk>
-				</configuration>
-				</plugin>
-			-->
-		</plugins>
-	</reporting>
-
 </project>

Modified: trunk/RTSPProxy-OSGi/pom.xml
===================================================================
--- trunk/RTSPProxy-OSGi/pom.xml	2006-01-07 01:30:53 UTC (rev 380)
+++ trunk/RTSPProxy-OSGi/pom.xml	2006-01-07 01:57:24 UTC (rev 381)
@@ -15,79 +15,6 @@
   <url>http://rtspproxy.berlios.de</url>
   <inceptionYear>2003</inceptionYear>
 
-  <organization>
-    <name>Matteo Merli</name>
-    <url>http://merlimat.net</url>
-  </organization>
-  
-  <issueManagement>
-    <system>Berlios</system>
-    <url>http://developer.berlios.de/bugs/?group_id=4526</url>
-  </issueManagement>
-  
-  <licenses>
-    <license>
-      <name>GNU General Public License</name>
-      <url>LICENSE.txt</url>
-    </license>
-  </licenses>
-  <developers>
-    <developer>
-      <id>merlimat</id>
-      <name>Matteo Merli</name>
-      <email>matteo.merli at gmail.com</email>
-      <!-- <timezone>+1</timezone> -->
-      <url>http://merlimat.net/about</url>
-    </developer>
-    <developer>
-      <id>rbieniek</id>
-      <name>Rainer Bieniek</name>
-      <email>Rainer.Bieniek at vodafone.com</email>
-      <!-- <timezone>+1</timezone> -->
-      <!-- <url>http://merlimat.net/about</url> -->
-    </developer>
-  </developers>
-  
-  <scm>
-    <connection>
-      scm:svn:http://svn.berlios.de/svnroot/repos/rtspproxy/trunk
-    </connection>
-    <developerConnection>
-      scm:svn:https://svn.berlios.de/svnroot/repos/rtspproxy/trunk
-    </developerConnection>
-    <url>http://svn.berlios.de/wsvn/rtspproxy/</url>
-  </scm>
-  
-  <mailingLists>
-    <mailingList>
-      <name>Development list</name>
-      <post>rtspproxy-devel at lists.berlios.de</post>
-      
-      <archive>
-	http://www.nabble.com/RtspProxy-Devel-f6753.html
-      </archive>
-      <subscribe>
-	https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
-      </subscribe>
-      <unsubscribe>
-	https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
-      </unsubscribe>
-    </mailingList>
-  </mailingLists>
-  
-  <distributionManagement>
-    <downloadUrl>
-      http://rtspproxy.berlios.de/download.html
-    </downloadUrl>
-    <site>
-      <id>rtspproxy.website</id>
-      <name>Default Site</name>
-      <url>
-	scp://shell.berlios.de/home/groups/rtspproxy/htdocs
-      </url>
-    </site>
-  </distributionManagement>
-    
   <dependencies>
 
     <dependency>
@@ -132,66 +59,7 @@
 	  <showWarnings>true</showWarnings>
 	</configuration>
       </plugin>
-      <plugin>
-	<groupId>org.apache.maven.plugins</groupId>
-	<artifactId>maven-assembly-plugin</artifactId>
-	<configuration>
-	  <descriptor>
-	    src/resources/release/default.xml
-	  </descriptor>
-	</configuration>
-      </plugin>
-      <plugin>
-	<groupId>org.apache.maven.plugins</groupId>
-	<artifactId>maven-site-plugin</artifactId>
-	<configuration>
-	  <outputEncoding>UTF-8</outputEncoding>
-	</configuration>
-	<!--  <version>2.0-beta-2</version> -->
-      </plugin>
-      <plugin>
-	<groupId>org.codehaus.mojo</groupId>
-	<artifactId>changes-maven-plugin</artifactId>
-	<executions>
-	  <execution>
-	    <goals>
-	      <goal>announcement-generate</goal>
-	    </goals>
-	    <id>announcement-generate</id>
-	  </execution>
-	  <execution>
-	    <goals>
-	      <goal>announcement-mail</goal>
-	    </goals>
-	    <id>announcement-mail</id>
-	  </execution>
-	</executions>
-	<configuration>
-	  <xmlPath>src/changes</xmlPath>
-	  
-	  <smtpHost>mail.yourhost.com</smtpHost>
-	  <smtpPort implementation="java.lang.Integer">
-	    25
-	  </smtpPort>
-	  <toAddresses>
-	    <toAddress implementation="java.lang.String">
-	      someones at email.com
-	    </toAddress>
-	    <toAddress implementation="java.lang.String">
-	      anothersomeone at email.com
-	    </toAddress>
-	  </toAddresses>
-	</configuration>
-      </plugin>
-      <plugin>
-	<groupId>org.apache.maven.plugins</groupId>
-	<artifactId>maven-pmd-plugin</artifactId>
-	<configuration>
-	  <targetJdk implementation="java.lang.String">
-	    1.5
-	  </targetJdk>
-	</configuration>
-      </plugin>
+
       <!-- see http://docs.safehaus.org/display/OSGI/OSGi+Plugin+for+Maven+2.0 for further instructions -->
       <plugin>
         <groupId>org.apache.felix.plugins</groupId>
@@ -218,56 +86,5 @@
       <url>http://m2.safehaus.org</url>
     </repository>
   </repositories>
-   
-  <reporting>
-    <plugins>
-      <plugin>
-	<groupId>org.apache.maven.plugins</groupId>
-	<artifactId>
-	  maven-project-info-reports-plugin
-	</artifactId>
-      </plugin>
-      <plugin>
-	<groupId>org.codehaus.mojo</groupId>
-	<artifactId>changelog-maven-plugin</artifactId>
-      </plugin>
-      <plugin>
-	<groupId>org.codehaus.mojo</groupId>
-	<artifactId>surefire-report-maven-plugin</artifactId>
-      </plugin>
-      <plugin>
-	<groupId>org.codehaus.mojo</groupId>
-	<artifactId>changes-maven-plugin</artifactId>
-      </plugin>
-      <plugin>
-	<groupId>org.codehaus.mojo</groupId>
-	<artifactId>taglist-maven-plugin</artifactId>
-      </plugin>
-      <!-- 
-      <plugin>
-      <groupId>org.apache.maven.plugins</groupId>
-      <artifactId>maven-javadoc-plugin</artifactId>
-      <configuration>
-      <charset>UTF-8</charset>
-      <docencoding>UTF-8</docencoding>
-      <link>
-      http://java.sun.com/j2se/1.5.0/docs/api/,
-      http://www.junit.org/junit/javadoc/3.8.1/,
-      http://directory.apache.org/subprojects/network/apidocs/
-    </link>
-    </configuration>
-    </plugin>
-      -->
-      <!-- 
-      <plugin>
-      <groupId>org.apache.maven.plugins</groupId>
-      <artifactId>maven-pmd-plugin</artifactId>
-      <configuration>
-      <targetJdk implementation="java.lang.String">1.5</targetJdk>
-    </configuration>
-    </plugin>
-      -->
-    </plugins>
-  </reporting>
-  
+
 </project>

Modified: trunk/src/site/site.xml
===================================================================
--- trunk/src/site/site.xml	2006-01-07 01:30:53 UTC (rev 380)
+++ trunk/src/site/site.xml	2006-01-07 01:57:24 UTC (rev 381)
@@ -91,7 +91,5 @@
 		</menu>
 
                ${modules}
-
-               ${reports}
 	</body>
 </project>
\ No newline at end of file



From rbieniek at berlios.de  Fri Jan  6 21:36:31 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Fri, 6 Jan 2006 21:36:31 +0100
Subject: [Rtspproxy-devel] r378 - in trunk: . RTSPProxy-App/src/changes RTSPProxy-App/src/main/java/rtspproxy RTSPProxy-App/src/main/java/rtspproxy/filter/accounting RTSPProxy-App/src/main/java/rtspproxy/filter/authentication RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress RTSPProxy-App/src/resources/conf RTSPProxy-Core/src/changes RTSPProxy-Core/src/main/java/rtspproxy RTSPProxy-Core/src/main/java/rtspproxy/config RTSPProxy-Core/src/main/java/rtspproxy/filter RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress RTSPProxy-Core/src/main/java/rtspproxy/jmx RTSPProxy-Core/src/main/java/rtspproxy/lib
Message-ID: <200601062036.k06KaVYb030054@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-06 21:36:11 +0100 (Fri, 06 Jan 2006)
New Revision: 378

Added:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/AAAConfigurable.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingProviderAdapter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Filter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/FilterMBean.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/Side.java
Modified:
   trunk/RTSPProxy-App/src/changes/changes.xml
   trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/PlainTextAccountingProvider.java
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java
   trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml
   trunk/RTSPProxy-App/src/resources/conf/rtspproxy.log4j.xml
   trunk/RTSPProxy-Core/src/changes/changes.xml
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtspService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/AAAConfig.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/XMLConfigReader.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingProvider.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationProvider.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java
   trunk/pom.xml
Log:
- removed property-based configuration support. 
- Added support for dynamic, multiple filters per type filter chains.
- Fixed smaller configration file reading bugs.
- adapted filters for standalone implementation to new configuration framework
- Added JMX support to filters.


Modified: trunk/RTSPProxy-App/src/changes/changes.xml
===================================================================
--- trunk/RTSPProxy-App/src/changes/changes.xml	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-App/src/changes/changes.xml	2006-01-06 20:36:11 UTC (rev 378)
@@ -6,14 +6,19 @@
   </properties>
   <body>
     
-    <release version="3.0-ALPHA4-SNAPSHOT" date="in SVN">
-      <action dev="rbieniek" type="change">
-	Restructured project for multi-module project.
-      </action>
-
-      <action dev="rbieniek" type="change">
-	Moved standalone RTSP proxy application into seperate subproject.
-      </action>
-    </release>
+	<release version="3.0-ALPHA4-SNAPSHOT" date="in SVN">
+		<action dev="rbieniek" type="change"> Restructured project for multi-module
+			project. </action>
+		
+		<action dev="rbieniek" type="change"> Moved standalone RTSP proxy application
+			into seperate subproject. </action>
+		
+		<action dev="rbieniek" type="change"> Adapted filter implementations to the new xml-based 
+			configuration framework. The old property-based configuration files are no longer supported.</action>
+		
+		<action dev="rbieniek" type="change"> Logging configuration has been taken out of the java source
+		 and moved into a separate configuration file.</action>
+		
+	</release>
   </body>
 </document>

Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -61,7 +61,7 @@
 
 			// RtspProxy home folder
 			if(Config.getHome() != null)
-				log4jList.add(Config.getHome() + "/rtspproxy.log4j.");
+				log4jList.add(Config.getHome() + "/conf/rtspproxy.log4j.");
 
 			// Current directory configuration
 			log4jList.add("rtspproxy.log4j.");
@@ -90,7 +90,7 @@
 
 			// RtspProxy home folder
 			if(Config.getHome() != null)
-				pathlist.add(Config.getHome() + "/rtspproxy.conf.xml");
+				pathlist.add(Config.getHome() + "/conf/rtspproxy.conf.xml");
 
 			// Current directory configuration
 			pathlist.add("rtspproxy.conf.xml");
@@ -113,7 +113,7 @@
 			Reactor.start();
 
 		} catch ( Exception e ) {
-			log.fatal( "Exception in the reactor: " + e );
+			log.fatal( "Exception in the reactor: ", e );
 			Exceptions.logStackTrace( e );
 			System.exit( -1 );
 		}

Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/PlainTextAccountingProvider.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/PlainTextAccountingProvider.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/PlainTextAccountingProvider.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -4,6 +4,7 @@
 import java.net.InetSocketAddress;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.List;
 import java.util.Observable;
 import java.util.Observer;
 
@@ -14,7 +15,9 @@
 import org.apache.log4j.PatternLayout;
 import org.apache.log4j.RollingFileAppender;
 import org.apache.mina.common.IoSession;
+import org.dom4j.Element;
 
+import rtspproxy.config.AAAConfigurable;
 import rtspproxy.config.Config;
 import rtspproxy.filter.authentication.AuthenticationFilter;
 import rtspproxy.rtsp.RtspMessage;
@@ -23,7 +26,8 @@
 /**
  * @author Matteo Merli
  */
-public class PlainTextAccountingProvider implements AccountingProvider, Observer
+public class PlainTextAccountingProvider extends AccountingProviderAdapter 
+implements AccountingProvider,  AAAConfigurable
 {
 
 	private static String datePattern = "yyyy-MM-dd HH:mm:ss Z";
@@ -35,30 +39,11 @@
 	public PlainTextAccountingProvider()
 	{
 		accessLog = Logger.getLogger( "accessLog" );
-
-		// Subcribe to changes notification
-		Config.proxyFilterAccountingTextFile.addObserver( this );
 	}
 
 	public void init() throws Exception
 	{
-		// Set the file appender
-		String fileName = Config.proxyFilterAccountingTextFile.getValue();
-		File file = new File( fileName );
-		if ( !file.isAbsolute() ) {
-			file = new File( Config.getHome() + File.separator + fileName );
-		}
-
-		// if logs directory does not exists, create it
-		File logs = file.getParentFile();
-		if ( !logs.exists() )
-			logs.mkdir();
-
-		Layout layout = new PatternLayout( "%m%n" );
-		Appender appender = new RollingFileAppender( layout, file.getAbsolutePath() );
-		accessLog.setAdditivity( false );
-		accessLog.addAppender( appender );
-		accessLog.setLevel( Level.INFO );
+		// Do nothing
 	}
 
 	public void shutdown() throws Exception
@@ -78,21 +63,10 @@
 
 	public void messageSent( IoSession session, RtspMessage message )
 	{
-		// StringBuilder sb = new StringBuilder();
-		// sb.append( "ciao" );
-		// accessLog.info( buildLogMessage( session, message, sb ) );
+		StringBuilder logMessage = new StringBuilder();
+		accessLog.info( buildLogMessage( session, message, logMessage ) );
 	}
 
-	public void update( Observable o, Object arg )
-	{
-		if ( o == Config.proxyFilterAccountingTextFile ) {
-			try {
-				// Reload the configuration
-				init();
-			} catch ( Exception e ) {
-			}
-		}
-	}
 
 	private static String buildLogMessage( IoSession session, RtspMessage message,
 			StringBuilder logMessage )
@@ -114,4 +88,17 @@
 
 		return sb.toString();
 	}
+
+	public void configure(List<Element> configElements) throws Exception {
+		for(Element el : configElements) {
+			if(el.getName().equals("category")) {
+				String category = el.getTextTrim();
+				
+				if(category == null || category.length() == 0) 					
+					throw new IllegalArgumentException("invalid log category given");
+				
+				accessLog = Logger.getLogger(category);
+			}
+		}
+	}
 }

Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -22,18 +22,21 @@
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.util.List;
 import java.util.Properties;
 
 import org.apache.log4j.Logger;
+import org.dom4j.Element;
 
 import rtspproxy.Reactor;
+import rtspproxy.config.AAAConfigurable;
 import rtspproxy.config.Config;
 import rtspproxy.filter.authentication.scheme.Credentials;
 
 /**
  * @author Matteo Merli
  */
-public class PlainTextAuthenticationProvider implements AuthenticationProvider
+public class PlainTextAuthenticationProvider implements AuthenticationProvider, AAAConfigurable
 {
 
 	private static Logger log = Logger.getLogger( PlainTextAuthenticationProvider.class );
@@ -42,6 +45,7 @@
 
 	public void init() throws Exception
 	{
+		/*
 		// Load users from file
 		String fileName = Config.getHome() + File.separator
 				+ Config.proxyFilterAuthenticationTextFile.getValue();
@@ -59,7 +63,7 @@
 			log.fatal( "The users file is not valid" );
 			Reactor.stop();
 		}
-
+		*/
 	}
 
 	public void shutdown() throws Exception
@@ -87,4 +91,28 @@
 			return false;
 	}
 
+	public void configure(List<Element> configElements) throws Exception {
+		for(Element el : configElements) {
+			if(el.getName().equals("user")) {
+				Element nameEl = el.element("name");
+				Element passwordEl = el.element("password");
+				
+				if(nameEl == null)
+					throw new IllegalArgumentException("no name element available in user configuration");
+				if(passwordEl == null)
+					throw new IllegalArgumentException("no password element available in user configuration");
+				
+				String name = nameEl.getTextTrim();
+				String password = passwordEl.getTextTrim();
+				
+				if(name == null || name.length() == 0)
+					throw new IllegalArgumentException("invalid username given");
+				if(password ==  null || password.length() == 0)
+					throw new IllegalArgumentException("invalid password given");
+				
+					this.usersDb.put(name, password);
+			}
+		}
+	}
+
 }

Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -29,7 +29,9 @@
 import java.util.regex.Pattern;
 
 import org.apache.log4j.Logger;
+import org.dom4j.Element;
 
+import rtspproxy.config.AAAConfigurable;
 import rtspproxy.config.Config;
 
 /**
@@ -38,7 +40,7 @@
  * 
  * @author Matteo Merli
  */
-public class PlainTextIpAddressProvider implements IpAddressProvider
+public class PlainTextIpAddressProvider implements IpAddressProvider, AAAConfigurable
 {
 
 	private static Logger log = Logger.getLogger( PlainTextIpAddressProvider.class );
@@ -64,12 +66,13 @@
 	 */
 	public void init() throws Exception
 	{
+		/*
 		// Load rules from file
 		String fileName = Config.getHome() + File.separator
 				+ Config.proxyFilterIpaddressTextFile.getValue();
 
 		loadRules( new FileReader( new File( fileName ) ) );
-
+		*/
 	}
 
 	/*
@@ -164,4 +167,30 @@
 			throw e;
 		}
 	}
+
+	public void configure(List<Element> configElements) throws Exception {
+		for(Element el : configElements) {
+			RuleType ruleType = null;
+			
+			if ( el.getName().equals( "allow" ) )
+				ruleType = RuleType.Allow;
+			else if ( el.getName().equals( "deny" ) )
+				ruleType = RuleType.Deny;
+			else
+				throw new IllegalArgumentException( "Invalid filter pattern (element " + el	+ ")" );
+			
+			String pattern = el.getTextTrim();
+			log.debug( "Rule: " + ruleType + " " + pattern );
+
+			// Transform the patterns escaping "." and "*" characters
+			pattern = pattern.replaceAll( "\\.", "\\\\." );
+			pattern = pattern.replaceAll( "\\*", ".*" );
+
+			Rule rule = new Rule();
+			rule.type = ruleType;
+			rule.pattern = Pattern.compile( pattern );
+			rules.add( rule );
+			
+		}
+	}
 }

Modified: trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml
===================================================================
--- trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml	2006-01-06 20:36:11 UTC (rev 378)
@@ -29,21 +29,26 @@
     </connectorService>
   </jmx>
   <filters>
-    <authentication implClass="rtspproxy.filter.authentication.PlainTextAuthenticationProvider">
-      <scheme>Digest</scheme>
+    <authentication implClass="rtspproxy.filter.authentication.PlainTextAuthenticationProvider" scheme="Digest" side="client">
       <user>
 	<name>myuser</name>
 	<password>itspassword</password>
       </user>
     </authentication>
-    <authorization implClass="rtspproxy.filter.ipaddress.PlainTextIpAddressProvider">
+    <ipaddress implClass="rtspproxy.filter.ipaddress.PlainTextIpAddressProvider" side="client">
       <deny>*</deny>
       <allow>127.0.0.1</allow>
       <allow>10.0.0.*</allow>
       <allow>*.some.domain</allow>
-    </authorization>
+    </ipaddress>
+    <ipaddress implClass="rtspproxy.filter.ipaddress.PlainTextIpAddressProvider" side="server">
+      <deny>*</deny>
+      <allow>127.0.0.1</allow>
+      <allow>10.0.0.*</allow>
+      <allow>*.some.domain</allow>
+    </ipaddress>
     <accounting implClass="rtspproxy.filter.accounting.PlainTextAccountingProvider" >
-      <log>/tmp/rtspproxy-access.log</log>
+      <category>accounting.rtspproxy</category>
     </accounting>
   </filters>
-</rtspproxy>
\ No newline at end of file
+</rtspproxy>

Modified: trunk/RTSPProxy-App/src/resources/conf/rtspproxy.log4j.xml
===================================================================
--- trunk/RTSPProxy-App/src/resources/conf/rtspproxy.log4j.xml	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-App/src/resources/conf/rtspproxy.log4j.xml	2006-01-06 20:36:11 UTC (rev 378)
@@ -35,6 +35,17 @@
       </layout>
    </appender>
 
+   <!-- A time/date based rolling appender -->
+   <appender name="ACCOUNTING" class="org.apache.log4j.FileAppender">
+      <param name="File" value="/tmp/rtspproxy-accounting.log"/>
+      <param name="Append" value="true"/>
+
+      <layout class="org.apache.log4j.PatternLayout">
+         <!-- The default pattern: Date Priority [Category] Message\n -->
+         <param name="ConversionPattern" value="%m%n"/>
+      </layout>
+   </appender>
+
    <!-- ============================== -->
    <!-- Append messages to the console -->
    <!-- ============================== -->
@@ -49,6 +60,10 @@
       </layout>
    </appender>
 
+   <category name="accounting.rtspproxy" >
+      <priority value="INFO" />
+      <appender-ref ref="ACCOUNTING" />
+   </category>
 
    <!-- ======================= -->
    <!-- Setup the Root category -->

Modified: trunk/RTSPProxy-Core/src/changes/changes.xml
===================================================================
--- trunk/RTSPProxy-Core/src/changes/changes.xml	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/changes/changes.xml	2006-01-06 20:36:11 UTC (rev 378)
@@ -10,6 +10,35 @@
 			<action dev="rbieniek" type="add">
 				Added support for XML based comfiguration files.
 			</action>
+			
+			<action dev="rbieniek" type="change">
+				Configuration has been changed from property-file to XML config file. The configuration has been changed
+				to allow multiple filters per type and each filter may take its configuration information from a 
+				central configuration file.
+			</action>
+			
+			<action dev="rbieniek" type="change" >
+				Changed logging framework from log4j to slf4j (Simple Logging Facade for Java). This change streamlines
+				the logging framework with the underlying mina logging approach. This changes also allows an easier
+				integration into containers which provide their own logging mechanisms (like OSGi).
+			</action>
+			
+			<action dev="rbieniek" type="add">
+				Added a concept of filters being applied to the upstream (remote server) connection and the downstream
+				client connection. This allows for example IP addess based filters which might constrain access to either
+				the streaming proxy, to remote streaming servers or both.
+			</action>
+			
+			<action dev="rbieniek" type="add" >
+				Made installed filters manageable through JMX. An individual filter can be suspended or resumed via
+				JMX and may provide addtional management capabilites by exposing an linked MBean.
+			</action>
+			
+			<action dev="rbieniek" type="add" >
+				All RTSP filters (except URL rewriting) are now managed through a central filter registry. This will
+				allow the dynamic reconfiguration of the applied filter chain per new session.
+			</action>
+			
 		</release>
 
 		<release version="3.0-ALPHA3-SNAPSHOT" date="in SVN">

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -102,7 +102,7 @@
 			log.info( getName() + " Started - Listening on: " + socketAddress );
 
 		} catch ( IOException e ) {
-			log.error( "Can't start " + getName() + " " + e );
+			log.error( "Can't start " + getName(), e );
 			throw e;
 		}
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -22,6 +22,7 @@
 import org.slf4j.LoggerFactory;
 
 import rtspproxy.config.Config;
+import rtspproxy.filter.FilterRegistry;
 import rtspproxy.jmx.JmxAgent;
 import rtspproxy.lib.Exceptions;
 
@@ -40,6 +41,8 @@
 	private static JmxAgent jmxAgent = null;
 
 	private static boolean isStandalone = false;
+	
+	private static FilterRegistry filterRegistry = null;
 
 	public static void setStandalone( boolean standalone )
 	{
@@ -85,6 +88,9 @@
 		boolean enableJmx = Config.proxyManagementEnable.getValue();
 		if ( enableJmx )
 			jmxAgent = new JmxAgent();
+
+		filterRegistry = new FilterRegistry();
+		filterRegistry.populateRegistry();		
 	}
 
 	static public void stop()

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtspService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtspService.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtspService.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -56,10 +56,6 @@
 		Config.proxyClientInterface.addObserver( this );
 		Config.proxyRtspPort.addObserver( this );
 
-		// Subscribe to filter chain changes notification
-		Config.proxyFilterAuthenticationEnable.addObserver( this );
-		Config.proxyFilterIpaddressEnable.addObserver( this );
-		Config.proxyFilterAccountingEnable.addObserver( this );
 	}
 
 	@Override
@@ -121,45 +117,9 @@
 		if ( !(o instanceof Parameter) )
 			throw new IllegalArgumentException( "Only observe parameters" );
 
-		if ( o == Config.proxyFilterAuthenticationEnable
-				|| o == Config.proxyFilterIpaddressEnable
-				|| o == Config.proxyFilterAccountingEnable ) {
-
-			/*
-			 * Change the filter chain builder to reflect new parameters
-			 * directives.
-			 */
-			IoAcceptor acceptor = ProxyServiceRegistry.getInstance().getAcceptor( this );
-			acceptor.setFilterChainBuilder( new IoFilterChainBuilderWrapper( this,
-					new RtspClientFilters() ) );
-
-			/*
-			 * Print a meaningful info message
-			 */
-			if ( o == Config.proxyFilterAuthenticationEnable ) {
-				if ( Config.proxyFilterAuthenticationEnable.getValue() == true )
-					log.info( "Activated the Authentication filter." );
-				else
-					log.info( "Disabled the Authentication filter." );
-			}
-			if ( o == Config.proxyFilterIpaddressEnable ) {
-				if ( Config.proxyFilterIpaddressEnable.getValue() == true )
-					log.info( "Activated the IP address filter." );
-				else
-					log.info( "Disabled the IP address filter." );
-			}
-			if ( o == Config.proxyFilterAccountingEnable ) {
-				if ( Config.proxyFilterAccountingEnable.getValue() == true )
-					log.info( "Activated the Accounting filter." );
-				else
-					log.info( "Disabled the Accounting filter." );
-			}
-
-		} else {
-			/*
-			 * Other parameters are observed by base class
-			 */
-			super.update( o, arg );
-		}
+		/*
+		 * Other parameters are observed by base class
+		 */
+		super.update( o, arg );
 	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/AAAConfig.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/AAAConfig.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/AAAConfig.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -3,10 +3,13 @@
  */
 package rtspproxy.config;
 
+import java.util.HashMap;
 import java.util.List;
 
 import org.dom4j.Element;
 
+import rtspproxy.lib.Side;
+
 /**
  * This class contains the configuration for an AAA filter.
  * 
@@ -20,12 +23,19 @@
 	// list of configuration elements
 	private List<Element> configElements;
 	
+	// filter application
+	private Side side = Side.Any;
+	
+	// any additional attributes given
+	private HashMap<String, String> attrs = new HashMap<String, String>();
+	
 	/**
 	 * 
 	 */
-	AAAConfig(String implClass, List<Element> configElements) {
+	AAAConfig(String implClass, Side side, List<Element> configElements) {
 		this.implClass = implClass;
 		this.configElements = configElements;
+		this.side = side;
 	}
 
 	public final List<Element> getConfigElements() {
@@ -36,4 +46,22 @@
 		return implClass;
 	}
 
+	public final Side getSide() {
+		return this.side;
+	}
+	
+	final void setAttribute(String name, String value) {
+		this.attrs.put(name, value);
+	}
+	
+	public final String getAttribute(String name) {
+		return this.getAttribute(name, null);
+	}
+
+	public final String getAttribute(String name, String defValue) {
+		if(this.attrs.containsKey(name))
+			return this.attrs.get(name);
+		
+		return defValue;
+	}
 }

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/AAAConfigurable.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/AAAConfigurable.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/AAAConfigurable.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -0,0 +1,21 @@
+/**
+ * 
+ */
+package rtspproxy.config;
+
+import java.util.List;
+
+import org.dom4j.Element;
+
+/**
+ * This interface is implemented by filters which can be configured via the XML 
+ * mechanism
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ */
+public interface AAAConfigurable {
+	/**
+	 * configure the filter.
+	 * @param configElements a list of dom4j elements containing the actual configuration
+	 */
+	public void configure(List<Element> configElements) throws Exception;
+}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -140,80 +140,13 @@
 			new Integer( 8022 ), // default value
 			true, // mutable
 			"Port to listen for RDT packets arriving from clients.",
-			"/rtspproxy/proxy/server/rdtPort" // xpathExpr
+			"/rtspproxy/proxy/client/rdtPort" // xpathExpr
 			);
 
-	// // IP address filter
-
-	public static final BooleanParameter proxyFilterIpaddressEnable = new BooleanParameter(
-			"proxy.filter.ipaddress.enable", // name
-			false, // default value
-			true, // mutable
-			"Enable or disable the IP address filtering system.",
-			null // xpathExpr
-			);
-
-	public static final StringParameter proxyFilterIpaddressImplementationClass = new StringParameter(
-			"proxy.filter.ipaddress.implementationClass", // name
-			"rtspproxy.filter.ipaddress.PlainTextIpAddressProvider", // default
-			// value
-			false, // mutable
-			"Use an alternative backend class. This can be any class "
-					+ "that implements the rtspproxy.filter.ipaddress.IpAddressProvider "
-					+ "interface.",
-			null // xpathExpr
-			);
-
-	public static final StringParameter proxyFilterIpaddressTextFile = new StringParameter(
-			"proxy.filter.ipaddress.text.file", // name
-			"conf/ipfilter.txt", // default value
-			false, // mutable
-			"Plain Text based implementation specific configuration",
-			null // xpathExpr
-			);
-
-	// // Authentication filter
-
-	public static final BooleanParameter proxyFilterAuthenticationEnable = new BooleanParameter(
-			"proxy.filter.authentication.enable", // name
-			false, // default value
-			true, // mutable
-			"Enable or disable the authentication system.",
-			null // xpathExpr
-			 );
-
-	public static final StringParameter proxyFilterAuthenticationScheme = new StringParameter(
-			"proxy.filter.authentication.scheme", // name
-			"Basic", // default value
-			false, // mutable
-			"Authentication Scheme. This could be Basic (the default), Digest or any "
-					+ "other supported scheme.",
-					null // xpathExpr
-					 );
-
-	public static final StringParameter proxyFilterAuthenticationImplementationClass = new StringParameter(
-			"proxy.filter.authentication.implementationClass", // name
-			"rtspproxy.filter.authentication.PlainTextAuthenticationProvider", // default
-			// value
-			false, // mutable
-			"Use an alternative backend class. This can be any class "
-					+ "that implements the rtspproxy.filter.authentication.AuthenticationProvider "
-					+ "interface.",
-					null // xpathExpr
-					 );
-
-	public static final StringParameter proxyFilterAuthenticationTextFile = new StringParameter(
-			"proxy.filter.authentication.text.file", // name
-			"conf/users.txt", // default value
-			false, // mutable
-			"Plain Text based implementation specific configuration",
-			null // xpathExpr
-			 );
-
 	// /////////////////////////////////////////////////////////
 
 	// Accounting filter
-
+	/*
 	public static final BooleanParameter proxyFilterAccountingEnable = new BooleanParameter(
 			"proxy.filter.accounting.enable", // name
 			true, // default value
@@ -240,7 +173,9 @@
 			"Plain Text based implementation specific configuration",
 			null // xpathExpr
 			 );
-
+			 
+	*/
+	
 	// /////////////////////////////////////////////////////////
 
 	// JMX
@@ -322,7 +257,7 @@
 	private static List<AAAConfig> authenticationFilters = new ArrayList<AAAConfig>();
 
 	// filter configurations from XML
-	private static List<AAAConfig> authorizationFilters = new ArrayList<AAAConfig>();
+	private static List<AAAConfig> ipAddressFilters = new ArrayList<AAAConfig>();
 
 	// filter configurations from XML
 	private static List<AAAConfig> accountingFilters = new ArrayList<AAAConfig>();
@@ -331,8 +266,8 @@
 		authenticationFilters.add(config);
 	}
 	
-	static void addAuthorizationFilter(AAAConfig config) {
-		authorizationFilters.add(config);
+	static void addIpAddressFilter(AAAConfig config) {
+		ipAddressFilters.add(config);
 	}
 	
 	static void addAccountingFilter(AAAConfig config) {
@@ -343,8 +278,8 @@
 		return Collections.unmodifiableList(authenticationFilters);
 	}
 	
-	public static List<AAAConfig> getAuthorizationFilters() {
-		return Collections.unmodifiableList(authorizationFilters);
+	public static List<AAAConfig> getIpAddressFilters() {
+		return Collections.unmodifiableList(ipAddressFilters);
 	}
 	
 	public static List<AAAConfig> getAccountingFilters() {

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/XMLConfigReader.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/XMLConfigReader.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/XMLConfigReader.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -6,6 +6,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -18,6 +19,8 @@
 import org.dom4j.Node;
 import org.dom4j.io.SAXReader;
 
+import rtspproxy.lib.Side;
+
 /**
  * This class implements a parser for XML configuration files.
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
@@ -40,7 +43,11 @@
 	 * @throws DocumentException parsing the config file failed.
 	 */ 
 	public final void readConfig(String fName) throws IOException, DocumentException {
-		this.readConfig(new FileInputStream(fName));
+		logger.debug("radConfig, fName=" + fName);
+		File fFile = new File(fName);
+		
+		if(fFile.canRead())
+			this.readConfig(new FileInputStream(fFile));
 	}
 	
 	/**
@@ -98,21 +105,28 @@
 		for(Node aaaNode : (List<Node>)doc.selectNodes("/rtspproxy/filters/*")) {
 			String name = aaaNode.getName();
 			String implClass = ((Element)aaaNode).attributeValue("implClass");
+			Side side = Side.fromString(((Element)aaaNode).attributeValue("side"));
 			
-			logger.debug("element name=" + name + ", implClass=" + implClass);
+			logger.debug("element name=" + name + ", implClass=" + implClass + ",side=" + side);
 			
 			if(implClass == null || implClass.length() == 0)
 				throw new IllegalArgumentException("no implementation class given");
+
+			AAAConfig aaa = new AAAConfig(implClass, side, 
+					(List<Element>)((Element)aaaNode).elements());
 			
+			for(Attribute attr : (List<Attribute>)((Element)aaaNode).attributes()) {
+				if(attr.getName().equals("implClass") || attr.getName().equals("side"))
+					continue;
+				aaa.setAttribute(attr.getName(), attr.getText().trim());
+			}
+			
 			if(name.equals("authentication")) {
-				Config.addAuthenticationFilter(new AAAConfig(implClass, 
-						(List<Element>)((Element)aaaNode).elements()));
-			} else if(name.equals("authorization")) {
-				Config.addAuthorizationFilter(new AAAConfig(implClass, 
-						(List<Element>)((Element)aaaNode).elements()));
+				Config.addAuthenticationFilter(aaa);
+			} else if(name.equals("ipaddress")) {
+				Config.addIpAddressFilter(aaa);
 			} else if(name.equals("accounting")) {
-				Config.addAccountingFilter(new AAAConfig(implClass, 
-						(List<Element>)((Element)aaaNode).elements()));				
+				Config.addAccountingFilter(aaa);				
 			} else
 				throw new IllegalArgumentException("invalid AAA element given, name=" + name);
 		}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -0,0 +1,130 @@
+/**
+ * 
+ */
+package rtspproxy.filter;
+
+import javax.management.ObjectName;
+
+import org.apache.mina.common.IoFilterAdapter;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import rtspproxy.lib.Side;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class FilterBase extends IoFilterAdapter {
+
+	private static Logger logger = LoggerFactory.getLogger(FilterBase.class);
+	
+	// filter name
+	private String filterName;
+	
+	// class name
+	private String className;
+	
+	// filter type
+	private String typeName;
+	
+	// running flag
+	protected boolean running = true; 
+	
+	// side
+	private Side side;
+	
+	// MBean name assigned by JMX interface
+	private ObjectName mbeanName;
+	
+	/**
+	 * 
+	 */
+	public FilterBase(String filterName, String className, String typeName) {
+		this.filterName = filterName;
+		this.className = className;
+		this.typeName = typeName;
+	}
+
+	/**
+	 * query running flag
+	 */
+	public final boolean isRunning() {
+		return this.running;
+	}
+	
+	/**
+	 * suspend the filter
+	 */
+	public final void suspend() {
+		this.running = false;
+		logger.info("filter " + this.typeName + "/" + this.className + " suspended");
+	}
+	
+	/**
+	 * resume the filter
+	 */
+	public final void resume() {
+		this.running = true;
+		logger.info("filter " + this.typeName + "/" + this.className + " resumed");
+	}
+	
+	/**
+	 * get the object name of a more specific MBean 
+	 */
+	public ObjectName getDetailMBean() {
+		return null;
+	}
+	
+	/**
+	 * get the side 
+	 */
+	public Side getSide() {
+		return this.side;
+	}
+	
+	/**
+	 * set the side
+	 */
+	public void setSide(Side side) {
+		this.side = side;
+	}
+
+	/**
+	 * @return Returns the mbeanName.
+	 */
+	public ObjectName getMbeanName() {
+		return mbeanName;
+	}
+
+	/**
+	 * Set the name of the MBean used for filter management. This property is write-once.
+	 * @param mbeanName The mbeanName to set.
+	 */
+	public void setMbeanName(ObjectName mbeanName) {
+		// once set it can not change
+		if(this.mbeanName == null)
+			this.mbeanName = mbeanName;
+	}
+
+	/**
+	 * @return Returns the className.
+	 */
+	public String getClassName() {
+		return className;
+	}
+
+	/**
+	 * @return Returns the typeName.
+	 */
+	public String getTypeName() {
+		return typeName;
+	}
+	
+	/**
+	 * get the chain name for the filter. 
+	 */
+	public String getChainName() {
+		return this.filterName +  "/" + this.typeName + "/" + this.className;
+	}
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -0,0 +1,170 @@
+/**
+ * 
+ */
+package rtspproxy.filter;
+
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import rtspproxy.Reactor;
+import rtspproxy.config.AAAConfig;
+import rtspproxy.config.Config;
+import rtspproxy.filter.accounting.AccountingFilter;
+import rtspproxy.filter.authentication.AuthenticationFilter;
+import rtspproxy.filter.ipaddress.IpAddressFilter;
+import rtspproxy.jmx.JmxAgent;
+import rtspproxy.lib.Side;
+import rtspproxy.lib.Singleton;
+
+/**
+ * Filter registry. This registry is populated from the configuration on reactor startup
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ */
+public class FilterRegistry extends Singleton {
+
+	private static Logger logger = LoggerFactory.getLogger(FilterRegistry.class);
+
+	// client side address filters
+	private LinkedList<IpAddressFilter> clientAddressFilters = new LinkedList<IpAddressFilter>();
+	
+	// server side address filters
+	private LinkedList<IpAddressFilter> serverAddressFilters = new LinkedList<IpAddressFilter>();
+
+	// client side authentication filters
+	private LinkedList<AuthenticationFilter> clientAuthenticationFilters = new LinkedList<AuthenticationFilter>();
+	
+	// client side accounting filter
+	private LinkedList<AccountingFilter> clientAccountingFilters = new LinkedList<AccountingFilter>();
+	
+	// server side accounting filter
+	private LinkedList<AccountingFilter> serverAccountingFilters = new LinkedList<AccountingFilter>();
+	
+	/**
+	 * 
+	 */
+	public FilterRegistry() {
+	}
+
+	/**
+	 * get the active registry instance
+	 */
+	public static FilterRegistry getInstance() {
+		return (FilterRegistry)Singleton.getInstance(FilterRegistry.class);
+	}
+	
+	// flag to determine if already populated
+	private boolean populated = false;
+	
+	/**
+	 * populate from configuration
+	 */
+	public void populateRegistry() {
+		if(this.populated) {
+			logger.debug("filter registry already populated");
+			return;
+		}
+		
+		try {
+			for(AAAConfig filterConfig : Config.getIpAddressFilters()) {
+				IpAddressFilter ipAddressFilter = new IpAddressFilter(filterConfig.getImplClass(), 
+						filterConfig.getConfigElements());
+				
+				ipAddressFilter.setSide(filterConfig.getSide());
+				registerFilterMBean(ipAddressFilter);
+
+				if(filterConfig.getSide() == Side.Client) {
+					this.clientAddressFilters.add(ipAddressFilter);
+				} else if(filterConfig.getSide() == Side.Server) {
+					this.serverAddressFilters.add(ipAddressFilter);
+				} else {
+					this.clientAddressFilters.add(ipAddressFilter);
+					this.serverAddressFilters.add(ipAddressFilter);
+				}
+			}
+			
+			for(AAAConfig filterConfig : Config.getAuthenticationFilters()) {
+				if(filterConfig.getSide() == Side.Client) {
+					AuthenticationFilter authFilter = new AuthenticationFilter(filterConfig.getImplClass(), 
+							filterConfig.getAttribute("scheme", "Basic"),
+							filterConfig.getConfigElements());
+					
+					authFilter.setSide(filterConfig.getSide());
+					registerFilterMBean(authFilter);
+
+					this.clientAuthenticationFilters.add(authFilter);
+				}
+			}
+			
+			for(AAAConfig filterConfig : Config.getAccountingFilters()) {
+				AccountingFilter accountingFilter = new AccountingFilter(filterConfig.getImplClass(), 
+						filterConfig.getConfigElements());
+				
+				accountingFilter.setSide(filterConfig.getSide());
+				registerFilterMBean(accountingFilter);
+
+				if(filterConfig.getSide() == Side.Client) {
+					this.clientAccountingFilters.add(accountingFilter);
+				} else if(filterConfig.getSide() == Side.Server) {
+					this.serverAccountingFilters.add(accountingFilter);
+				} else {
+					this.clientAccountingFilters.add(accountingFilter);
+					this.serverAccountingFilters.add(accountingFilter);
+				}
+			}
+
+		} catch (Throwable t) {
+			logger.error("failed to populate filter registry", t);
+			
+			Reactor.stop();
+			System.exit(-1);
+		}
+		
+		this.populated = true;
+	}
+	
+	private void registerFilterMBean(FilterBase filter) {
+		if(Config.proxyManagementEnable.getValue())
+			JmxAgent.getInstance().registerFilter(filter);
+	}
+
+	/**
+	 * @return Returns the clientAddressFilters.
+	 */
+	public List<IpAddressFilter> getClientAddressFilters() {
+		return Collections.unmodifiableList(clientAddressFilters);
+	}
+
+	/**
+	 * @return Returns the serverAddressFilters.
+	 */
+	public List<IpAddressFilter> getServerAddressFilters() {
+		return Collections.unmodifiableList(serverAddressFilters);
+	}
+
+	/**
+	 * @return Returns the clientAuthenticationFilters.
+	 */
+	public List<AuthenticationFilter> getClientAuthenticationFilters() {
+		return Collections.unmodifiableList(clientAuthenticationFilters);
+	}
+
+	/**
+	 * @return Returns the clientAccountingFilters.
+	 */
+	public LinkedList<AccountingFilter> getClientAccountingFilters() {
+		return clientAccountingFilters;
+	}
+
+	/**
+	 * @return Returns the serverAccountingFilters.
+	 */
+	public LinkedList<AccountingFilter> getServerAccountingFilters() {
+		return serverAccountingFilters;
+	}
+	
+}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -20,6 +20,8 @@
 
 import org.apache.mina.common.IoFilterChain;
 
+import rtspproxy.lib.Side;
+
 /**
  * Builds the filter chain used for connection from RTSP client.
  * 
@@ -30,10 +32,10 @@
 
 	public void buildFilterChain( IoFilterChain chain ) throws Exception
 	{
-		addIpAddressFilter( chain );
+		addIpAddressFilter( chain, Side.Client );
 		addRtspCodecFilter( chain );
 		addAuthenticationFilter( chain );
-		addAccountingFilter( chain );
+		addAccountingFilter( chain, Side.Client );
 	}
 
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -18,6 +18,8 @@
 
 package rtspproxy.filter;
 
+import java.util.List;
+
 import org.apache.mina.common.IoFilter;
 import org.apache.mina.common.IoFilterChain;
 import org.apache.mina.common.IoFilterChainBuilder;
@@ -33,6 +35,7 @@
 import rtspproxy.filter.authentication.AuthenticationFilter;
 import rtspproxy.filter.ipaddress.IpAddressFilter;
 import rtspproxy.filter.rewrite.RequestUrlRewritingImpl;
+import rtspproxy.lib.Side;
 import rtspproxy.rtsp.RtspDecoder;
 import rtspproxy.rtsp.RtspEncoder;
 
@@ -65,21 +68,12 @@
 
 	private static final IoFilter codecFilter = new ProtocolCodecFilter( codecFactory );
 
-	// These filters are instanciated only one time, when requested
-	private static IpAddressFilter ipAddressFilter = null;
-
 	private static AuthenticationFilter authenticationFilter = null;
 
 	private static AccountingFilter accountingFilter = null;
 
 	public static final String rtspCodecNAME = "rtspCodec";
 
-	public static final String ipAddressFilterNAME = "ipAddressFilter";
-
-	public static final String authenticationFilterNAME = "authenticationFilter";
-
-	public static final String accountingFilterNAME = "accountingFilter";
-
 	public static final String rewriteFilterNAME = "rewriteFilter";
 
 	/**
@@ -89,17 +83,22 @@
 	 * in the early stage of the connection, preventing network and computation
 	 * load from unwanted hosts.
 	 */
-	protected void addIpAddressFilter( IoFilterChain chain )
+	protected void addIpAddressFilter( IoFilterChain chain, Side side )
 	{
-		boolean enableIpAddressFilter = Config.proxyFilterIpaddressEnable.getValue();
+		List<IpAddressFilter> filters;
+		
+		if(side == Side.Client)
+			filters = FilterRegistry.getInstance().getClientAddressFilters();
+		else
+			filters = FilterRegistry.getInstance().getServerAddressFilters();
+		
+		for(IpAddressFilter ipAddressFilter : filters) {
 
-		if ( enableIpAddressFilter ) {
-			if ( ipAddressFilter == null )
-				ipAddressFilter = new IpAddressFilter();
-
 			chain.addAfter( ProxyServiceRegistry.threadPoolFilterNAME,
-					ipAddressFilterNAME, ipAddressFilter );
+					ipAddressFilter.getChainName(), ipAddressFilter );
+			
 		}
+		
 	}
 
 	/**
@@ -116,20 +115,34 @@
 	 */
 	protected void addAuthenticationFilter( IoFilterChain chain )
 	{
-		boolean enableAuthenticationFilter = Config.proxyFilterAuthenticationEnable
-				.getValue();
-
-		if ( enableAuthenticationFilter ) {
-			if ( authenticationFilter == null )
-				authenticationFilter = new AuthenticationFilter();
-			chain
-					.addAfter( rtspCodecNAME, authenticationFilterNAME,
-							authenticationFilter );
+		for(AuthenticationFilter authenticationFilter : FilterRegistry.getInstance().getClientAuthenticationFilters()) {
+			chain.addAfter( rtspCodecNAME, authenticationFilter.getChainName(),
+					authenticationFilter );
+			
 		}
 	}
 
-	protected void addAccountingFilter( IoFilterChain chain )
+	protected void addAccountingFilter( IoFilterChain chain, Side side )
 	{
+		List<AccountingFilter> filters;
+		
+		if(side == Side.Client) {
+			filters = FilterRegistry.getInstance().getClientAccountingFilters();
+
+			for(AccountingFilter accountingFilter : filters) {
+				chain.addAfter( rtspCodecNAME,
+						authenticationFilter.getChainName(), authenticationFilter );
+			}
+		} else {
+			filters = FilterRegistry.getInstance().getServerAccountingFilters();
+
+			for(AccountingFilter accountingFilter : filters) {
+				chain.addAfter( rtspCodecNAME,
+						authenticationFilter.getChainName(), authenticationFilter );
+			}
+		}
+		
+		/*
 		boolean enableAccountingFilter = Config.proxyFilterAccountingEnable.getValue();
 
 		if ( enableAccountingFilter ) {
@@ -137,21 +150,22 @@
 				accountingFilter = new AccountingFilter();
 			}
 			if ( chain.contains( authenticationFilterNAME ) ) {
-				/*
+				/ *
 				 * If we have the authentication filter in the chain, it's
 				 * preferable to have the accounting after that, to see the user
 				 * identity if authenticated.
-				 */
+				 * /
 				chain.addAfter( authenticationFilterNAME, accountingFilterNAME,
 						accountingFilter );
 			} else {
-				/*
+				/ *
 				 * At least we want to have it after the RTSP codec, because it
 				 * deals with already parsed RTSP messages.
-				 */
+				 * /
 				chain.addAfter( rtspCodecNAME, accountingFilterNAME, accountingFilter );
 			}
 		}
+		*/
 	}
 
 	protected void addRewriteFilter( IoFilterChain chain )

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -20,6 +20,8 @@
 
 import org.apache.mina.common.IoFilterChain;
 
+import rtspproxy.lib.Side;
+
 /**
  * Builds the filter chain used when connecting to a RTSP server.
  * 
@@ -30,8 +32,9 @@
 
 	public void buildFilterChain( IoFilterChain chain ) throws Exception
 	{
-		// When connecting to the server we don't need to use AAA filters
+		addIpAddressFilter( chain, Side.Server );
 		addRtspCodecFilter( chain );
+		addAccountingFilter( chain, Side.Server );
 	}
 
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -1,37 +1,44 @@
 package rtspproxy.filter.accounting;
 
+import java.util.List;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.apache.mina.common.IdleStatus;
 import org.apache.mina.common.IoFilterAdapter;
 import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoFilter.NextFilter;
+import org.dom4j.Element;
 
 import rtspproxy.Reactor;
+import rtspproxy.config.AAAConfigurable;
 import rtspproxy.config.Config;
+import rtspproxy.filter.FilterBase;
 import rtspproxy.rtsp.RtspMessage;
 
 /**
  * 
  * @author Matteo Merli
  */
-public class AccountingFilter extends IoFilterAdapter
+public class AccountingFilter extends FilterBase
 {
 
 	private static Logger log = LoggerFactory.getLogger( AccountingFilter.class );
 
+	public static final String FilterNAME = "accountingFilter";
+
 	private AccountingProvider provider = null;
 
-	public AccountingFilter()
+	public AccountingFilter(String className, List<Element> configElements)
 	{
-		// Check which backend implementation to use
-		// Default is plain-text implementation
-		String className = Config.proxyFilterAccountingImplementationClass.getValue();
-
+		super(FilterNAME, className, "accounting");
+		
 		Class providerClass;
 		try {
 			providerClass = Class.forName( className );
 
-		} catch ( ClassNotFoundException e ) {
-			log.error( "Invalid AccountingProvider class: " + className );
+		} catch ( Throwable t ) {
+			log.error( "Invalid AccountingProvider class: " + className, t );
 			Reactor.stop();
 			return;
 		}
@@ -54,6 +61,10 @@
 
 		try {
 			provider = (AccountingProvider) providerClass.newInstance();
+			
+			if(provider instanceof AAAConfigurable)
+				((AAAConfigurable)provider).configure(configElements);
+
 			provider.init();
 
 		} catch ( Exception e ) {
@@ -69,7 +80,7 @@
 	public void messageReceived( NextFilter nextFilter, IoSession session, Object message )
 			throws Exception
 	{
-		if ( provider != null ) {
+		if ( provider != null && isRunning()) {
 			if ( message instanceof RtspMessage )
 				provider.messageReceived( session, (RtspMessage) message );
 			else
@@ -85,7 +96,7 @@
 	public void messageSent( NextFilter nextFilter, IoSession session, Object message )
 			throws Exception
 	{
-		if ( provider != null ) {
+		if ( provider != null  && isRunning()) {
 			if ( message instanceof RtspMessage )
 				provider.messageSent( session, (RtspMessage) message );
 			else
@@ -97,4 +108,48 @@
 		nextFilter.messageSent( session, message );
 	}
 
+	/* (non-Javadoc)
+	 * @see org.apache.mina.common.IoFilterAdapter#sessionClosed(org.apache.mina.common.IoFilter.NextFilter, org.apache.mina.common.IoSession)
+	 */
+	@Override
+	public void sessionClosed(NextFilter nextFilter, IoSession session) throws Exception {
+		if ( provider != null  && isRunning())
+			provider.sessionClosed( session );
+
+		super.sessionClosed(nextFilter, session);
+	}
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.common.IoFilterAdapter#sessionCreated(org.apache.mina.common.IoFilter.NextFilter, org.apache.mina.common.IoSession)
+	 */
+	@Override
+	public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {
+		if ( provider != null && isRunning() )
+			provider.sessionCreated( session );
+
+		super.sessionCreated(nextFilter, session);
+	}
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.common.IoFilterAdapter#sessionIdle(org.apache.mina.common.IoFilter.NextFilter, org.apache.mina.common.IoSession, org.apache.mina.common.IdleStatus)
+	 */
+	@Override
+	public void sessionIdle(NextFilter nextFilter, IoSession session, IdleStatus status) throws Exception {
+		if ( provider != null && isRunning() )
+			provider.sessionIdle( session, status );
+
+		super.sessionIdle(nextFilter, session, status);
+	}
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.common.IoFilterAdapter#sessionOpened(org.apache.mina.common.IoFilter.NextFilter, org.apache.mina.common.IoSession)
+	 */
+	@Override
+	public void sessionOpened(NextFilter nextFilter, IoSession session) throws Exception {
+		if ( provider != null && isRunning() )
+			provider.sessionOpened( session );
+
+		super.sessionOpened(nextFilter, session);
+	}
+
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingProvider.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingProvider.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingProvider.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -1,5 +1,6 @@
 package rtspproxy.filter.accounting;
 
+import org.apache.mina.common.IdleStatus;
 import org.apache.mina.common.IoSession;
 
 import rtspproxy.rtsp.RtspMessage;
@@ -28,5 +29,13 @@
 	public void messageReceived( IoSession session, RtspMessage message );
 
 	public void messageSent( IoSession session, RtspMessage message );
+	
+	public void sessionCreated(IoSession session);
+	
+	public void sessionOpened(IoSession session);
+	
+	public void sessionClosed(IoSession session);
+	
+	public void sessionIdle(IoSession session, IdleStatus status);
 
 }

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingProviderAdapter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingProviderAdapter.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/accounting/AccountingProviderAdapter.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -0,0 +1,74 @@
+/**
+ * 
+ */
+package rtspproxy.filter.accounting;
+
+import org.apache.mina.common.IdleStatus;
+import org.apache.mina.common.IoSession;
+
+import rtspproxy.rtsp.RtspMessage;
+
+/**
+ * Default implementation of the AccountingProvider interface.
+ * Provides no-op method implementations.
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class AccountingProviderAdapter implements AccountingProvider {
+
+	/**
+	 * 
+	 */
+	public AccountingProviderAdapter() {
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.accounting.AccountingProvider#init()
+	 */
+	public void init() throws Exception {
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.accounting.AccountingProvider#shutdown()
+	 */
+	public void shutdown() throws Exception {
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.accounting.AccountingProvider#messageReceived(org.apache.mina.common.IoSession, rtspproxy.rtsp.RtspMessage)
+	 */
+	public void messageReceived(IoSession session, RtspMessage message) {
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.accounting.AccountingProvider#messageSent(org.apache.mina.common.IoSession, rtspproxy.rtsp.RtspMessage)
+	 */
+	public void messageSent(IoSession session, RtspMessage message) {
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.accounting.AccountingProvider#sessionCreated(org.apache.mina.common.IoSession)
+	 */
+	public void sessionCreated(IoSession session) {
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.accounting.AccountingProvider#sessionOpened(org.apache.mina.common.IoSession)
+	 */
+	public void sessionOpened(IoSession session) {
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.accounting.AccountingProvider#sessionClosed(org.apache.mina.common.IoSession)
+	 */
+	public void sessionClosed(IoSession session) {
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.accounting.AccountingProvider#sessionIdle(org.apache.mina.common.IoSession, org.apache.mina.common.IdleStatus)
+	 */
+	public void sessionIdle(IoSession session, IdleStatus status) {
+	}
+
+}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -20,15 +20,19 @@
 
 import java.util.Arrays;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.apache.mina.common.IoFilterAdapter;
 import org.apache.mina.common.IoSession;
+import org.dom4j.Element;
 
 import rtspproxy.Reactor;
+import rtspproxy.config.AAAConfigurable;
 import rtspproxy.config.Config;
+import rtspproxy.filter.FilterBase;
 import rtspproxy.filter.authentication.scheme.AuthenticationScheme;
 import rtspproxy.filter.authentication.scheme.BasicAuthentication;
 import rtspproxy.filter.authentication.scheme.Credentials;
@@ -41,11 +45,13 @@
 /**
  * @author Matteo Merli
  */
-public class AuthenticationFilter extends IoFilterAdapter
+public class AuthenticationFilter extends FilterBase
 {
 
 	private static Logger log = LoggerFactory.getLogger( AuthenticationFilter.class );
 
+	public static final String FilterNAME = "authenticationFilter";
+
 	public static final String ATTR = AuthenticationFilter.class.getName() + "Attr";
 
 	private static final Map<String, Class> schemeRegistry = new HashMap<String, Class>();
@@ -68,18 +74,17 @@
 	 * Construct a new AuthenticationFilter. Looks at the configuration to load
 	 * the choseen backend implementation.
 	 */
-	public AuthenticationFilter()
+	public AuthenticationFilter(String className, String schemeName, List<Element> configElements)
 	{
-		// Check which backend implementation to use
-		// Default is plain-text implementation
-		String className = Config.proxyFilterAuthenticationImplementationClass.getValue();
+		super(FilterNAME, className, "authentication");
+		
 
 		Class providerClass;
 		try {
 			providerClass = Class.forName( className );
 
-		} catch ( ClassNotFoundException e ) {
-			log.error( "Invalid AuthenticationProvider class: " + className );
+		} catch ( Throwable t ) {
+			log.error( "Invalid AuthenticationProvider class: " + className, t );
 			Reactor.stop();
 			return;
 		}
@@ -102,6 +107,9 @@
 
 		try {
 			provider = (AuthenticationProvider) providerClass.newInstance();
+			
+			if(provider instanceof AAAConfigurable)
+				((AAAConfigurable)provider).configure(configElements);
 			provider.init();
 
 		} catch ( Exception e ) {
@@ -111,7 +119,6 @@
 		}
 
 		// Validate the choosen authentication scheme
-		String schemeName = Config.proxyFilterAuthenticationScheme.getValue();
 		Class schemeClass = schemeRegistry.get( schemeName.toLowerCase() );
 		if ( schemeClass == null ) {
 			// scheme not found
@@ -141,65 +148,73 @@
 			return;
 		}
 
-		if ( session.getAttribute( ATTR ) != null ) {
-			// Client already autheticated
-			log.debug( "Already authenticaed: " + session.getAttribute( ATTR ) );
-			nextFilter.messageReceived( session, message );
-		}
+		if (isRunning()) {
+			if (session.getAttribute(ATTR) != null) {
+				// Client already autheticated
+				log
+						.debug("Already authenticaed: "
+								+ session.getAttribute(ATTR));
+				nextFilter.messageReceived(session, message);
+			}
 
-		String authString = ((RtspMessage) message).getHeader( "Proxy-Authorization" );
-		if ( authString == null ) {
-			log.debug( "RTSP message: \n" + message );
-			RtspResponse response = RtspResponse
-					.errorResponse( RtspCode.ProxyAuthenticationRequired );
-			response.setHeader( "Proxy-Authenticate", scheme.getName() + " "
-					+ scheme.getChallenge() );
+			String authString = ((RtspMessage) message)
+					.getHeader("Proxy-Authorization");
+			if (authString == null) {
+				log.debug("RTSP message: \n" + message);
+				RtspResponse response = RtspResponse
+						.errorResponse(RtspCode.ProxyAuthenticationRequired);
+				response.setHeader("Proxy-Authenticate", scheme.getName() + " "
+						+ scheme.getChallenge());
 
-			log.debug( "Sending RTSP message: \n" + response );
+				log.debug("Sending RTSP message: \n" + response);
 
-			session.write( response );
-			return;
-		}
+				session.write(response);
+				return;
+			}
 
-		if ( !validateAuthenticationScheme( authString ) ) {
-			RtspResponse response = RtspResponse.errorResponse( RtspCode.BadRequest );
+			if (!validateAuthenticationScheme(authString)) {
+				RtspResponse response = RtspResponse
+						.errorResponse(RtspCode.BadRequest);
 
-			session.write( response );
-			return;
-		}
+				session.write(response);
+				return;
+			}
 
-		log.debug( "RTSP message: \n" + message );
+			log.debug("RTSP message: \n" + message);
 
-		// Check the authentication credentials
-		Credentials credentials = scheme.getCredentials( (RtspMessage) message );
+			// Check the authentication credentials
+			Credentials credentials = scheme
+					.getCredentials((RtspMessage) message);
 
-		boolean authenticationOk = false;
-		if ( credentials != null ) {
-			String password = provider.getPassword( credentials.getUserName() );
-			if ( password != null )
-				if ( scheme.computeAuthentication( credentials, password ) == true )
-					authenticationOk = true;
-		}
+			boolean authenticationOk = false;
+			if (credentials != null) {
+				String password = provider.getPassword(credentials
+						.getUserName());
+				if (password != null)
+					if (scheme.computeAuthentication(credentials, password) == true)
+						authenticationOk = true;
+			}
 
-		if ( !authenticationOk ) {
-			log.warn( "Authentication failed for user: " + credentials );
-			RtspResponse response = RtspResponse
-					.errorResponse( RtspCode.ProxyAuthenticationRequired );
-			response.setHeader( "Proxy-Authenticate", scheme.getName() + " "
-					+ scheme.getChallenge() );
+			if (!authenticationOk) {
+				log.warn("Authentication failed for user: " + credentials);
+				RtspResponse response = RtspResponse
+						.errorResponse(RtspCode.ProxyAuthenticationRequired);
+				response.setHeader("Proxy-Authenticate", scheme.getName() + " "
+						+ scheme.getChallenge());
 
-			session.write( response );
-			return;
-		}
+				session.write(response);
+				return;
+			}
 
-		log.debug( "Authentication succesfull for user: " + credentials );
+			log.debug("Authentication succesfull for user: " + credentials);
 
-		/*
-		 * Mark the session with an "authenticated" attribute. This will prevent
-		 * the check for the credentials for every message received.
-		 */
-		session.setAttribute( ATTR, credentials.getUserName() );
-
+			/*
+			 * Mark the session with an "authenticated" attribute. This will
+			 * prevent the check for the credentials for every message received.
+			 */
+			session.setAttribute(ATTR, credentials.getUserName());
+		}
+		
 		// Forward message
 		nextFilter.messageReceived( session, message );
 	}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationProvider.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationProvider.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationProvider.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -54,5 +54,5 @@
 	 */
 	public boolean isAuthenticated( Credentials credentials );
 	
-	public String getPassword( String username );
+	public String getPassword( String username );	
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -19,38 +19,45 @@
 package rtspproxy.filter.ipaddress;
 
 import java.net.InetSocketAddress;
+import java.util.List;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.apache.mina.common.IoFilterAdapter;
 import org.apache.mina.common.IoSession;
+import org.dom4j.Element;
 
 import rtspproxy.Reactor;
+import rtspproxy.config.AAAConfigurable;
 import rtspproxy.config.Config;
+import rtspproxy.filter.FilterBase;
+import rtspproxy.filter.RtspFilters;
 
 /**
  * @author Matteo Merli
  *
  */
-public class IpAddressFilter extends IoFilterAdapter
+public class IpAddressFilter extends FilterBase
 {
 
 	private static Logger log = LoggerFactory.getLogger( IpAddressFilter.class );
+	
+	public static final String FilterNAME = "ipAddressFilter";
 
 	private IpAddressProvider provider;
 
-	public IpAddressFilter()
+	public IpAddressFilter(String className, List<Element> configElements)
 	{
-		// Check which backend implementation to use
-		// Default is plain-text implementation
-		String className = Config.proxyFilterIpaddressImplementationClass.getValue();
-
+		super(FilterNAME, className, "ipaddress");
+		
 		Class providerClass;
 		try {
 			providerClass = Class.forName( className );
 
-		} catch ( ClassNotFoundException e ) {
+		} catch ( Throwable t ) {
+			log.debug("cant load IpAddressProvider class", t);
 			log.error( "Invalid IpAddressProvider class: " + className );
+
 			Reactor.stop();
 			return;
 		}
@@ -73,6 +80,9 @@
 
 		try {
 			provider = (IpAddressProvider) providerClass.newInstance();
+			
+			if(provider instanceof AAAConfigurable)
+				((AAAConfigurable)provider).configure(configElements);
 			provider.init();
 		} catch ( Exception e ) {
 			log.error( "Error starting IpAddressProvider: " + e );
@@ -87,7 +97,10 @@
 	public void messageReceived( NextFilter nextFilter, IoSession session, Object message )
 			throws Exception
 	{
-		if ( !provider.isBlocked( ( (InetSocketAddress) session.getRemoteAddress() ).getAddress() ) ) {
+		if(!isRunning()) {
+			// forward because filter is suspended
+			nextFilter.messageReceived( session, message );			
+		} else if ( !provider.isBlocked( ( (InetSocketAddress) session.getRemoteAddress() ).getAddress() ) ) {
 			// forward if not blocked
 			nextFilter.messageReceived( session, message );
 		} else {
@@ -99,7 +112,10 @@
 	public void sessionCreated( NextFilter nextFilter, IoSession session )
 			throws Exception
 	{
-		if ( !provider.isBlocked( ( (InetSocketAddress) session.getRemoteAddress() ).getAddress() ) ) {
+		if(!isRunning()) {
+			// forward because filter is suspended
+			nextFilter.sessionCreated( session );
+		} else if ( !provider.isBlocked( ( (InetSocketAddress) session.getRemoteAddress() ).getAddress() ) ) {
 			// forward if not blocked
 			nextFilter.sessionCreated( session );
 		} else {

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Filter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Filter.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Filter.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -0,0 +1,80 @@
+/**
+ * 
+ */
+package rtspproxy.jmx;
+
+import javax.management.MBeanException;
+import javax.management.MalformedObjectNameException;
+import javax.management.ObjectName;
+
+import java.util.Hashtable;
+
+import rtspproxy.filter.FilterBase;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class Filter implements FilterMBean {
+
+	// managed filter
+	private FilterBase filter;
+	
+	// object name
+	private ObjectName name;
+	
+	/**
+	 * @throws NullPointerException 
+	 * @throws MalformedObjectNameException 
+	 * 
+	 */
+	Filter(FilterBase filter) throws MalformedObjectNameException, NullPointerException {
+		this.filter = filter;
+		
+		// build the MBean name
+		Hashtable<String, String> keys = new Hashtable<String, String>();
+		
+		keys.put("filter", filter.getTypeName());
+		keys.put("side", filter.getSide().toString());
+		keys.put("classname", filter.getClassName());
+		keys.put("id", Long.toHexString(System.identityHashCode(filter)));
+		
+		this.name = new ObjectName(JmxAgent.DOMAIN, keys);
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.FilterMBean#getDetailMBean()
+	 */
+	public ObjectName getDetailMBean() {
+		return this.filter.getDetailMBean();
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.FilterMBean#isRunning()
+	 */
+	public boolean isRunning() {
+		return this.filter.isRunning();
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.FilterMBean#suspend()
+	 */
+	public void suspend() throws MBeanException {
+		this.filter.suspend();
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.FilterMBean#resume()
+	 */
+	public void resume() throws MBeanException {
+		this.filter.resume();
+	}
+
+	/**
+	 * @return Returns the name.
+	 */
+	public ObjectName getName() {
+		return name;
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/FilterMBean.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/FilterMBean.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/FilterMBean.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -0,0 +1,25 @@
+/**
+ * 
+ */
+package rtspproxy.jmx;
+
+import javax.management.MBeanException;
+import javax.management.ObjectName;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public interface FilterMBean {
+
+	public ObjectName getDetailMBean();
+	
+	public boolean isRunning();
+
+	/* Actions */
+
+	public void suspend() throws MBeanException;
+
+	public void resume() throws MBeanException;
+
+}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -47,18 +47,20 @@
 import rtspproxy.RtpServerService;
 import rtspproxy.RtspService;
 import rtspproxy.config.Config;
+import rtspproxy.filter.FilterBase;
+import rtspproxy.lib.Singleton;
 
 /**
  * Entry point class for all the JMX interface.
  * 
  * @author Matteo Merli
  */
-public class JmxAgent
+public class JmxAgent extends Singleton
 {
 
 	private static Logger log = LoggerFactory.getLogger( JmxAgent.class );
 
-	private static final String DOMAIN = "RtspProxy";
+	static final String DOMAIN = "RtspProxy";
 
 	private MBeanServer mbeanServer = null;
 
@@ -180,6 +182,31 @@
 	}
 
 	/**
+	 * get the singleton instance
+	 */
+	public static JmxAgent getInstance() {
+		return (JmxAgent)Singleton.getInstance(JmxAgent.class);
+	}
+	
+	/**
+	 * register a MBean as a management facade to a filter implementation
+	 */
+	public void registerFilter(FilterBase filter) {
+		boolean enabled = Config.proxyManagementRemoteEnable.getValue();
+		if ( !enabled )
+			return;
+
+		try {
+			Filter mbean = new Filter(filter);
+			
+			mbeanServer.registerMBean(mbean, mbean.getName());
+			filter.setMbeanName(mbean.getName());
+		} catch(Exception e) {
+			log.error( "failed to register filter MBean: filter=" + filter, e );			
+		}
+	}
+	
+	/**
 	 * simple wrapper to log mx4j logging info into slf4j subsystem
 	 * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
 	 *

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/Side.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/Side.java	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/Side.java	2006-01-06 20:36:11 UTC (rev 378)
@@ -0,0 +1,45 @@
+/**
+ * 
+ */
+package rtspproxy.lib;
+
+/**
+ * This enumeration defines the direction a filter is applied on.
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ */
+public enum Side {
+	Any,     // filter is meant for any side
+	Client,  // select filters that are applied on the client-side session
+	Server;  // select filters that are applied on the server-side session
+	
+	public String toString() {
+		switch(this) {
+		case Any:
+			return "any";
+		case Client:
+			return "client";
+		case Server:
+			return "server";
+		default:
+			return "unknown";
+		}
+	}
+	
+	public static Side fromString(String value) throws IllegalArgumentException {
+		Side side;
+		
+		if(value == null || value.length() == 0)
+			side = Any;
+		else if(value.equalsIgnoreCase("server"))
+			side = Server;
+		else if(value.equalsIgnoreCase("client"))
+			side = Client;
+		else if(value.equalsIgnoreCase("any"))
+			side = Any;
+		else
+			throw new IllegalArgumentException("invalid side value given: " + value);
+		
+		return side;
+	}
+}
\ No newline at end of file

Modified: trunk/pom.xml
===================================================================
--- trunk/pom.xml	2006-01-05 20:14:13 UTC (rev 377)
+++ trunk/pom.xml	2006-01-06 20:36:11 UTC (rev 378)
@@ -107,6 +107,7 @@
     </resources>
     
     <plugins>
+<!--
       <plugin>
 	<groupId>org.apache.maven.plugins</groupId>
 	<artifactId>maven-assembly-plugin</artifactId>
@@ -116,6 +117,7 @@
 	  </descriptor>
 	</configuration>
       </plugin>
+-->
       <plugin>
 	<groupId>org.apache.maven.plugins</groupId>
 	<artifactId>maven-site-plugin</artifactId>



From rbieniek at berlios.de  Mon Jan  9 01:05:06 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Mon, 9 Jan 2006 01:05:06 +0100
Subject: [Rtspproxy-devel] r383 - in trunk: RTSPProxy-App/src/resources/conf RTSPProxy-Core/src/main/java/rtspproxy/config RTSPProxy-Core/src/main/java/rtspproxy/rtsp RTSPProxy-Core/src/test/java/rtspproxy/rtsp
Message-ID: <200601090005.k09056dt013128@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-09 01:04:58 +0100 (Mon, 09 Jan 2006)
New Revision: 383

Modified:
   trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransport.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransportList.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java
Log:
- made RTSP transport mode filed conformant to RFC2326
- added the ability to disable transport protocol on an adminstrative way.
- added hack to suppress the lower transport in the header field.


Modified: trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml
===================================================================
--- trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml	2006-01-08 02:32:52 UTC (rev 382)
+++ trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml	2006-01-09 00:04:58 UTC (rev 383)
@@ -14,6 +14,13 @@
       <rdtPort>6972</rdtPort>
       <interface>10.0.0.23</interface>
     </client>
+	<transport>
+		<rtp>true</rtp>
+		<rdt>true</rdt>
+		<hacks>
+			<lowerTransportSuppress>false</lowerTransportSuppress>
+		</hacks>
+	</transport>
   </proxy>
   <jmx>
     <manageable>true</manageable>

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-01-08 02:32:52 UTC (rev 382)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-01-09 00:04:58 UTC (rev 383)
@@ -142,6 +142,32 @@
 			"/rtspproxy/proxy/client/rdtPort" // xpathExpr
 			);
 
+	public static final BooleanParameter proxyTransportRtpEnable = new BooleanParameter(
+			"proxy.transport.rtp.enable", // name
+			true, // default value
+			false, // mutable
+			"Enables the UDP/AVP/RTP transport.",
+			"/rtspproxy/proxy/transport/rtp" // xpathExpr
+			);
+	
+
+	public static final BooleanParameter proxyTransportRdtEnable = new BooleanParameter(
+			"proxy.transport.rdt.enable", // name
+			true, // default value
+			false, // mutable
+			"Enables the x-udp-rdt transport.",
+			"/rtspproxy/proxy/transport/rdt" // xpathExpr
+			);	
+	
+
+	public static final BooleanParameter proxyLowerTransportSuppress = new BooleanParameter(
+			"proxy.transport.rtp.protocol.disable", // name
+			false, // default value
+			false, // mutable
+			"Enables the x-udp-rdt transport.",
+			"/rtspproxy/proxy/transport/hacks/lowerTransportSuppress" // xpathExpr
+			);	
+	
 	// /////////////////////////////////////////////////////////
 
 	// JMX

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransport.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransport.java	2006-01-08 02:32:52 UTC (rev 382)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransport.java	2006-01-09 00:04:58 UTC (rev 383)
@@ -18,6 +18,12 @@
 
 package rtspproxy.rtsp;
 
+import org.apache.commons.collections.functors.NonePredicate;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import rtspproxy.config.Config;
+
 /**
  * Parse the RTSP Transport header field. Reference Grammar:
  * 
@@ -56,6 +62,8 @@
 public class RtspTransport
 {
 
+	private static Logger logger = LoggerFactory.getLogger(RtspTransport.class);
+	
 	/** Transport Protocol */
 	public enum TransportProtocol {
 		None,
@@ -113,6 +121,22 @@
 		None, unicast, multicast
 	}
 
+	/** mode */
+	public enum Mode {
+		None, PLAY, RECORD;
+		
+		public static Mode fromString ( String modeName ) {
+			if( "PLAY".equalsIgnoreCase( modeName ))
+				return PLAY;
+			else if( "RECORD".equalsIgnoreCase( modeName ))
+				return RECORD;
+			else {
+				logger.debug("unknown mode string passed (ignored): " + modeName);
+				return None;
+			}
+		}
+	}
+	
 	TransportProtocol transportProtocol = null;
 	Profile profile = null;
 	LowerTransport lowerTransport = null;
@@ -127,7 +151,7 @@
 	int[] client_port = new int[2];
 	int[] server_port = new int[2];
 	String ssrc;
-	String mode;
+	Mode mode = Mode.None;
 	String source;
 
 	/**
@@ -152,7 +176,7 @@
 		server_port[0] = 0;
 		server_port[1] = 0;
 		ssrc = null;
-		mode = null;
+		mode = Mode.None;
 		source = null;
 
 		parseTransport( transport );
@@ -218,7 +242,7 @@
 														setSSRC( _getStrValue( tok ) );
 													else
 														if ( tok.startsWith( "mode" ) )
-															setMode( _getStrValue( tok ) );
+															setMode( Mode.fromString( _getStrValue( tok ) ) );
 														else
 															if ( tok.startsWith( "source" ) )
 																setSource( _getStrValue( tok ) );
@@ -258,7 +282,8 @@
 			sb.append( transportProtocol );
 			if ( profile != Profile.None ) {
 				sb.append( "/" ).append( profile );
-				if ( lowerTransport != LowerTransport.None )
+				if ( !Config.proxyLowerTransportSuppress.getValue() 
+						&& lowerTransport != LowerTransport.None )
 					sb.append( "/" ).append( lowerTransport );
 			}
 			if ( deliveryType != DeliveryType.None )
@@ -293,8 +318,8 @@
 			sb.append( ";ssrc=" ).append( ssrc );
 		if ( source != null )
 			sb.append( ";source=" ).append( source );
-		if ( mode != null )
-			sb.append( ";mode=" ).append( mode );
+		if ( mode != Mode.None )
+			sb.append( ";mode=\"" ).append( mode ) . append("\"");
 		return sb.toString();
 	}
 
@@ -309,12 +334,14 @@
 		 * At now, the only transport supported by the server is
 		 * "RTP/AVP/UDP;unicast"
 		 */
-		if ( transportProtocol == TransportProtocol.RTP && profile == Profile.AVP
+		if ( Config.proxyTransportRtpEnable.getValue()
+				&& transportProtocol == TransportProtocol.RTP && profile == Profile.AVP
 				&& lowerTransport == LowerTransport.UDP
 				&& deliveryType == DeliveryType.unicast )
 			return true;
 		else
-			if ( transportProtocol == TransportProtocol.RDT
+			if ( Config.proxyTransportRdtEnable.getValue()
+					&& transportProtocol == TransportProtocol.RDT
 					&& lowerTransport == LowerTransport.UDP
 					&& deliveryType == DeliveryType.unicast )
 				return true;
@@ -453,16 +480,17 @@
 	/**
 	 * @return Returns the mode.
 	 */
-	public String getMode()
+	public Mode getMode()
 	{
 		return mode;
 	}
 
 	/**
+	 * Set the mode. The 
 	 * @param mode
 	 *        The mode to set.
 	 */
-	public void setMode( String mode )
+	public void setMode( Mode mode )
 	{
 		this.mode = mode;
 	}
@@ -610,11 +638,17 @@
 	 */
 	private static String _getStrValue( String str )
 	{
+		String val = null;
+		
 		String[] list = str.split( "=" );
 		if ( list.length != 2 )
 			return null;
 
-		return list[1];
+		val = list[1];
+		if(val.startsWith("\"") && val.endsWith("\""))
+			val = val.substring(1, val.length()-2);
+		
+		return val;
 	}
 
 	/**

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransportList.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransportList.java	2006-01-08 02:32:52 UTC (rev 382)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransportList.java	2006-01-09 00:04:58 UTC (rev 383)
@@ -73,5 +73,4 @@
 		}
 		return buf.toString();
 	}
-
 }

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java	2006-01-08 02:32:52 UTC (rev 382)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java	2006-01-09 00:04:58 UTC (rev 383)
@@ -48,8 +48,8 @@
 
 	public void testToString()
 	{
-		String expected = "x-real-rdt/udp;client_port=6972;mode=play,"
-				+ "RTP/AVP/UDP;unicast;client_port=6972-6973;mode=play";
+		String expected = "x-real-rdt/udp;client_port=6972;mode=\"PLAY\","
+				+ "RTP/AVP/UDP;unicast;client_port=6972-6973;mode=\"PLAY\"";
 		assertEquals( expected, transportList.toString() );
 	}
 



From rbieniek at berlios.de  Mon Jan  9 23:03:38 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Mon, 9 Jan 2006 23:03:38 +0100
Subject: [Rtspproxy-devel] r384 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: . proxy rdt
Message-ID: <200601092203.k09M3cuQ029419@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-09 23:03:33 +0100 (Mon, 09 Jan 2006)
New Revision: 384

Added:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtAckPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtControlPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtDataPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtLatencyReportPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttRequestPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttResponsePacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtStreamEndPacket.java
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java
Log:
- started RDT packet assembly / disassembly package for use with RDT transport
support.
-- RDT packet (dis)assembly needs some unit tests
- RDT transport does not seem to work. I think the RDTTrack logic is broken.


Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java	2006-01-09 00:04:58 UTC (rev 383)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java	2006-01-09 22:03:33 UTC (rev 384)
@@ -29,6 +29,8 @@
 import rtspproxy.lib.Exceptions;
 import rtspproxy.proxy.track.RdtTrack;
 import rtspproxy.proxy.track.Track;
+import rtspproxy.rdt.RdtPacket;
+import rtspproxy.rdt.RdtPacketDecoder;
 
 /**
  * Handles RDT packets from client and forward them to server. The RTSP session
@@ -52,6 +54,14 @@
 		// RtcpPacket packet = new RtcpPacket( (ByteBuffer) buffer );
 		log.debug( "Received RDT packet from client" );
 
+		ByteBuffer receivedBuffer = (ByteBuffer) buffer;
+		byte[] bytes = new byte[receivedBuffer.limit()];
+		receivedBuffer.get( bytes );
+		
+		RdtPacket decPacket = RdtPacketDecoder.decode(bytes, 0, 0);
+		
+		log.debug("client received packet: " + decPacket);
+
 		RdtTrack track = (RdtTrack) Track.getByClientAddress( (InetSocketAddress) session.getRemoteAddress() );
 
 		if ( track == null ) {
@@ -63,9 +73,6 @@
 			return;
 		}
 
-		ByteBuffer receivedBuffer = (ByteBuffer) buffer;
-		byte[] bytes = new byte[receivedBuffer.limit()];
-		receivedBuffer.get( bytes );
 		ByteBuffer rdtPacket = ByteBuffer.wrap( bytes );
 		track.forwardRdtToServer( rdtPacket );
 	}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java	2006-01-09 00:04:58 UTC (rev 383)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java	2006-01-09 22:03:33 UTC (rev 384)
@@ -29,6 +29,8 @@
 import rtspproxy.lib.Exceptions;
 import rtspproxy.proxy.track.RdtTrack;
 import rtspproxy.proxy.track.Track;
+import rtspproxy.rdt.RdtPacket;
+import rtspproxy.rdt.RdtPacketDecoder;
 
 /**
  * Handles RDT packets from server and forward them to client. The RTSP 
@@ -52,6 +54,14 @@
 		// RtcpPacket packet = new RtcpPacket( (ByteBuffer) buffer );
 		log.debug( "Received RDT packet from server" );
 
+		ByteBuffer receivedBuffer = (ByteBuffer) buffer;
+		byte[] bytes = new byte[receivedBuffer.limit()];
+		receivedBuffer.get( bytes );
+		
+		RdtPacket decPacket = RdtPacketDecoder.decode(bytes, 0, 0);
+		
+		log.debug("client received packet: " + decPacket);
+
 		RdtTrack track = (RdtTrack)Track.getByServerAddress( (InetSocketAddress) session.getRemoteAddress() );
 
 		if ( track == null ) {
@@ -63,11 +73,9 @@
 			return;
 		}
 
-		ByteBuffer receivedBuffer = (ByteBuffer) buffer;
-		byte[] bytes = new byte[receivedBuffer.limit()];
-		receivedBuffer.get( bytes );
 		ByteBuffer rdtPacket = ByteBuffer.wrap( bytes );
 		track.forwardRdtToClient( rdtPacket );
+
 	}
 
 	@Override

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtAckPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtAckPacket.java	2006-01-09 00:04:58 UTC (rev 383)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtAckPacket.java	2006-01-09 22:03:33 UTC (rev 384)
@@ -0,0 +1,56 @@
+package rtspproxy.rdt;
+
+import org.apache.mina.common.ByteBuffer;
+
+
+public class RdtAckPacket extends RdtControlPacket {
+
+	private boolean lostHigh;
+
+	public RdtAckPacket(boolean lostHigh) {
+		super(Type.Ack, (byte)0);
+		
+		this.lostHigh = lostHigh;
+	}
+
+	@Override
+	protected void toStringHelper(StringBuffer buffer) {
+		buffer.append(" lostHigh=" + lostHigh);
+	}
+
+	/**
+	 * @return Returns the lostHigh.
+	 */
+	public boolean isLostHigh() {
+		return lostHigh;
+	}
+
+	/**
+	 * @param lostHigh The lostHigh to set.
+	 */
+	public void setLostHigh(boolean lostHigh) {
+		this.lostHigh = lostHigh;
+	}
+
+	@Override
+	protected ByteBuffer buildHeader() {
+		ByteBuffer buf = ByteBuffer.allocate(3, true);
+		byte marker = 0;
+		
+		if(isLengthIncluded())
+			marker |= (1<<7);
+		if(this.lostHigh)
+			marker |= (1<<6);
+		buf.put(marker);
+		buf.put(getType().toByteArray());
+		
+		if(isLengthIncluded()) {
+			// add 2 bytes for length to packet size of 3
+			// TODO find a cleaner way.
+			buf.put(encodeShort((short)5));
+		}
+		
+		return buf;
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtControlPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtControlPacket.java	2006-01-09 00:04:58 UTC (rev 383)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtControlPacket.java	2006-01-09 22:03:33 UTC (rev 384)
@@ -0,0 +1,25 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+
+/**
+ * Common base class for all RDT control packets.
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public abstract class RdtControlPacket extends RdtPacket {
+
+	/**
+	 * @param type
+	 * @param needReliable
+	 * @param streamId
+	 */
+	public RdtControlPacket(Type type, byte streamId) {
+		super(type, false, streamId);
+	}
+
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtDataPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtDataPacket.java	2006-01-09 00:04:58 UTC (rev 383)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtDataPacket.java	2006-01-09 22:03:33 UTC (rev 384)
@@ -0,0 +1,183 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import org.apache.mina.common.ByteBuffer;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtDataPacket extends RdtPacket {
+
+	private boolean reliable;
+	private boolean backToBack;
+	private boolean slowData;
+	private byte asmRule;
+	private int timestamp;
+	private short totalReliable;
+	private short sequence;
+
+	public RdtDataPacket(boolean needReliable, boolean reliable, byte streamId, short sequence, boolean backToBack, 
+			boolean slowData, byte asmRule, int timestamp) {
+		super(Type.Data, needReliable, streamId);
+		
+		this.reliable = reliable;
+		this.sequence = sequence;
+		this.backToBack = backToBack;
+		this.slowData = slowData;
+		this.asmRule = asmRule;
+		this.timestamp = timestamp;
+	}
+
+	/**
+	 * @return Returns the asmRule.
+	 */
+	public byte getAsmRule() {
+		return asmRule;
+	}
+
+	/**
+	 * @param asmRule The asmRule to set.
+	 */
+	public void setAsmRule(byte asmRule) {
+		this.asmRule = asmRule;
+	}
+
+	/**
+	 * @return Returns the backToBack.
+	 */
+	public boolean isBackToBack() {
+		return backToBack;
+	}
+
+	/**
+	 * @param backToBack The backToBack to set.
+	 */
+	public void setBackToBack(boolean backToBack) {
+		this.backToBack = backToBack;
+	}
+
+	/**
+	 * @return Returns the reliable.
+	 */
+	public boolean isReliable() {
+		return reliable;
+	}
+
+	/**
+	 * @param reliable The reliable to set.
+	 */
+	public void setReliable(boolean reliable) {
+		this.reliable = reliable;
+	}
+
+	/**
+	 * @return Returns the slowData.
+	 */
+	public boolean isSlowData() {
+		return slowData;
+	}
+
+	/**
+	 * @param slowData The slowData to set.
+	 */
+	public void setSlowData(boolean slowData) {
+		this.slowData = slowData;
+	}
+
+	/**
+	 * @return Returns the timestamp.
+	 */
+	public int getTimestamp() {
+		return timestamp;
+	}
+
+	/**
+	 * @param timestamp The timestamp to set.
+	 */
+	public void setTimestamp(int timestamp) {
+		this.timestamp = timestamp;
+	}
+
+	/**
+	 * @return Returns the totalReliable.
+	 */
+	public short getTotalReliable() {
+		return totalReliable;
+	}
+
+	/**
+	 * @param totalReliable The totalReliable to set.
+	 */
+	public void setTotalReliable(short totalReliable) {
+		this.totalReliable = totalReliable;
+	}
+
+	@Override
+	protected void toStringHelper(StringBuffer buffer) {
+		buffer.append(" reliable=" + this.reliable);
+		buffer.append(" sequence="  + this.sequence);
+		buffer.append(" backToback="+ backToBack);
+		buffer.append(" slowData= " + slowData);
+		buffer.append(" asmRule=" + asmRule);
+		buffer.append(" timestamp=" + timestamp);
+		buffer.append(" totalReliable=" + totalReliable);
+	}
+
+	/**
+	 * @return Returns the sequence.
+	 */
+	public short getSequence() {
+		return sequence;
+	}
+
+	/**
+	 * @param sequence The sequence to set.
+	 */
+	public void setSequence(short sequence) {
+		this.sequence = sequence;
+	}
+
+	@Override
+	protected ByteBuffer buildHeader() {
+		ByteBuffer buf = ByteBuffer.allocate(8, true);
+		byte marker = 0, control = 0;
+		
+		if(isLengthIncluded())
+			marker |= (1<<7);
+		if(isNeedReliable())
+			marker |= (1<<6);
+		marker |= (getStreamId() << 1);
+		if(this.reliable)
+			marker |= (1<<0);		
+		buf.put(marker);		
+
+		buf.put(getType().toByteArray());
+
+		if(isLengthIncluded()) {
+			short length = 8;
+			
+			if(isNeedReliable())
+				length += 2;
+			
+			buf.put(encodeShort(length));
+		}
+		
+		if(this.backToBack)
+			control |= (1<<7);
+		if(slowData)
+			control |= (1<<6);
+		control |= this.asmRule;
+		buf.put(control);
+		
+		buf.put(encodeInt(this.timestamp));
+
+		if(isNeedReliable())
+			buf.put(encodeShort(this.totalReliable));
+		
+		return buf;
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtLatencyReportPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtLatencyReportPacket.java	2006-01-09 00:04:58 UTC (rev 383)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtLatencyReportPacket.java	2006-01-09 22:03:33 UTC (rev 384)
@@ -0,0 +1,70 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import org.apache.mina.common.ByteBuffer;
+
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtLatencyReportPacket extends RdtControlPacket {
+
+	private int serverTimeout;
+
+	/**
+	 * @param type
+	 * @param needReliable
+	 * @param streamId
+	 */
+	public RdtLatencyReportPacket(int serverTimeout) {
+		super(Type.LatencyReport, (byte)0);
+		
+		this.serverTimeout = serverTimeout;
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.rdt.RdtPacket#toStringHelper(java.lang.StringBuffer)
+	 */
+	@Override
+	protected void toStringHelper(StringBuffer buffer) {
+		buffer.append(" serverTimeout=" + this.serverTimeout);
+	}
+
+	/**
+	 * @return Returns the serverTimeout.
+	 */
+	public int getServerTimeout() {
+		return serverTimeout;
+	}
+
+	/**
+	 * @param serverTimeout The serverTimeout to set.
+	 */
+	public void setServerTimeout(int serverTimeout) {
+		this.serverTimeout = serverTimeout;
+	}
+	
+	@Override
+	protected ByteBuffer buildHeader() {
+		ByteBuffer buf = ByteBuffer.allocate(3, true);
+		byte marker = 0;
+		
+		if(isLengthIncluded())
+			marker |= (1<<7);
+		buf.put(marker);
+		buf.put(getType().toByteArray());
+		
+		if(isLengthIncluded()) {
+			// add 2 bytes for length to packet size of 3
+			// TODO find a cleaner way.
+			buf.put(encodeShort((short)9));
+		}
+		buf.put(encodeInt(this.serverTimeout));
+		
+		return buf;
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java	2006-01-09 00:04:58 UTC (rev 383)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java	2006-01-09 22:03:33 UTC (rev 384)
@@ -0,0 +1,265 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import java.util.HashMap;
+
+import org.apache.commons.collections.functors.NonePredicate;
+import org.apache.mina.common.ByteBuffer;
+
+import rtspproxy.rtp.RtpPacket;
+
+/**
+ * Base class of specific RDT packet types.
+ * The knowledge of packet types, codes and bit packing was taken from analyzing
+ * RDT streams with ethereal 0.10.14
+ *  
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ * @see <a href="http://www.ethereal.com/">ethereal homepage</a>
+ */
+public abstract class RdtPacket {
+	
+	/**
+	 * Defines the various packet types
+	 * The knowledge of packet types, codes and bit packing was taken from analyzing
+	 * RDT streams with ethereal 0.10.14
+	 *  
+	 * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+	 * @see <a href="http://www.ethereal.com/">ethereal homepage</a>
+	 */
+	public enum Type {
+		None, RttRequest, RttResponse, LatencyReport, Ack, StreamEnd, Data;
+		
+		private static HashMap<Type, Short> typeCodeMap = new HashMap<Type, Short>();
+		private static HashMap<Short, Type> codeTypeMap = new HashMap<Short, Type>();
+		private static void populateMaps(Type type, short code) {
+			typeCodeMap.put(type, code);
+			codeTypeMap.put(code, type);
+		}
+		static {
+			populateMaps(RttRequest, (short)0xff03);
+			populateMaps(RttResponse, (short)0xff04);
+			populateMaps(LatencyReport, (short)0xff08);
+			populateMaps(Ack, (short)0xff02);
+			populateMaps(StreamEnd, (short)0xff06);
+		};
+		
+		public short toCode() {
+			short code = 0;
+
+			if(typeCodeMap.containsKey(this))
+				code = typeCodeMap.get(this);
+			
+			return code;
+		};
+		
+		public static Type fromCode(short code) {
+			Type type = None;
+
+			if(codeTypeMap.containsKey(code))
+				type = codeTypeMap.get(code);
+			
+			return type;
+		}
+		
+		public byte[] toByteArray() {
+			byte[] rep = new byte[2];
+			short code;
+			
+			if(typeCodeMap.containsKey(this)) {
+				code = typeCodeMap.get(this);
+				
+				rep[0] = (byte)((code >> 8) & 0x0ff);
+				rep[1] = (byte)(code  & 0x0ff);
+			} else 
+				rep[0] = rep[1] = -1;
+			
+			return rep;
+		}
+	};
+	
+	// type field
+	private Type type = Type.None;
+	
+	// payload
+	private byte[] payload = null;
+	
+	// need reliable flag
+	private boolean needReliable = false;
+
+	// stream id
+	private byte streamId = -1;
+	
+	// attached sub packet
+	private RdtPacket subPacket = null;
+	
+	/**
+	 * constructor
+	 */
+	protected RdtPacket(Type type, boolean needReliable, byte streamId) {
+		this.type = type;
+		this.needReliable = needReliable;
+		this.streamId = streamId;
+	}
+	
+	/**
+	 * @return Returns the type.
+	 */
+	public Type getType() {
+		return type;
+	}
+
+	/**
+	 * @return Returns the needReliable.
+	 */
+	public boolean isNeedReliable() {
+		return needReliable;
+	}
+
+	/**
+	 * @param needReliable The needReliable to set.
+	 */
+	public void setNeedReliable(boolean needReliable) {
+		this.needReliable = needReliable;
+	}
+	
+	/**
+	 * encode packet as byte buffer
+	 */
+	public ByteBuffer toByteBuffer() {
+		ByteBuffer buf = ByteBuffer.allocate(128, true);
+
+		buf.put(buildHeader());
+		if(this.payload != null)
+			buf.put(this.payload);
+		if(this.subPacket != null)
+			buf.put(this.subPacket.toByteBuffer());
+
+		return buf;
+	}
+
+	
+	/**
+	 * build the package header
+	 */
+	protected abstract ByteBuffer buildHeader(); 
+	
+	/**
+	 * @return Returns the subPacket.
+	 */
+	public RdtPacket getSubPacket() {
+		return subPacket;
+	}
+
+	/**
+	 * @param subPacket The subPacket to set.
+	 */
+	public void setSubPacket(RdtPacket subPacket) {
+		this.subPacket = subPacket;
+	}
+
+	/**
+	 * @return Returns the payload.
+	 */
+	public byte[] getPayload() {
+		return payload;
+	}
+
+	/**
+	 * get the payload size
+	 */
+	public short getPayloadSize() {
+		if(this.payload == null)
+			return 0;
+		return (short)this.payload.length;
+	}
+	
+	/**
+	 * @param payload The payload to set.
+	 */
+	public void setPayload(byte[] payload) {
+		this.payload = payload;
+	}
+	
+	/**
+	 * debug output
+	 */
+	public final String toString() {
+		StringBuffer buf = new StringBuffer();
+
+		buf.append("packet[type=" + type);
+		buf.append(" needReliable=" + this.needReliable);
+		buf.append(" streamId=" + this.streamId);
+		toStringHelper(buf);
+		
+		if(this.payload != null)
+			buf.append(" data[" + this.payload.length + "]");
+		if(this.subPacket != null)
+			buf.append(" subpacket[" + this.subPacket + "]");
+
+		buf.append("]");
+
+		return buf.toString();
+	}
+	
+	/**
+	 * per packet-type specific toString output
+	 */
+	protected abstract void toStringHelper(StringBuffer buffer);
+
+	/**
+	 * @return Returns the streamId.
+	 */
+	public byte getStreamId() {
+		return streamId;
+	}
+
+	/**
+	 * @param streamId The streamId to set.
+	 */
+	public void setStreamId(byte streamId) {
+		this.streamId = streamId;
+	}
+
+	/**
+	 * @param type The type to set.
+	 */
+	public void setType(Type type) {
+		this.type = type;
+	}
+	
+	/**
+	 * query if encoded packet should contain length field included
+	 */
+	protected boolean isLengthIncluded() {
+		return (this.subPacket != null);
+	}
+	
+	/**
+	 * encode a short 
+	 */
+	protected byte[] encodeShort(short v) {
+		byte[] buf = new byte[2];
+		
+		buf[0] = (byte)((v >> 8) & 0xff);
+		buf[1] = (byte)(v & 0xff);
+		
+		return buf;
+	}
+	
+	/**
+	 * encode a short 
+	 */
+	protected byte[] encodeInt(int v) {
+		byte[] buf = new byte[4];
+		
+		buf[0] = (byte)((v >> 24) & 0xff);
+		buf[1] = (byte)((v >> 16) & 0xff);
+		buf[2] = (byte)((v >> 8) & 0xff);
+		buf[3] = (byte)(v & 0xff);
+		
+		return buf;
+	}
+	
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-09 00:04:58 UTC (rev 383)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-09 22:03:33 UTC (rev 384)
@@ -0,0 +1,197 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import java.lang.reflect.Array;
+
+import org.apache.mina.common.ByteBuffer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+/**
+ * Decoder for RDT packets.
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ */
+public class RdtPacketDecoder {
+
+	// logger
+	private static Logger logger = LoggerFactory.getLogger(RdtPacketDecoder.class);
+	
+	/**
+	 * not instaniable
+	 */
+	private RdtPacketDecoder() {}
+	
+	/**
+	 * decode packet
+	 * @param buffer the byte buffer to decode packet from
+	 */
+	public static RdtPacket decode(ByteBuffer buffer) {
+		byte[] data = new byte[buffer.limit()];
+
+		// copy buffer content into temp array
+		buffer.get(data);
+
+		return decode(data, 0, 0);
+	}
+
+	/**
+	 * decode packet
+	 * @param buffer the byte buffer to decode packet from
+	 */
+	public static RdtPacket decode(byte[] data, int ind, int depth) {
+		RdtPacket packet = null;
+		byte markerByte;
+		byte seqLo, seqHi;
+		short sequence;
+		boolean lengthIncluded = false;
+		short packetLength = -1;
+
+		if(depth > 1) {
+			logger.error("detected packet-decoding recursion overrun, aborting");
+			
+			return null;
+		}
+		
+		// process marker byte
+		markerByte = data[ind++];
+		lengthIncluded = ((markerByte & (1<<7)) > 0);
+
+		// process sequence / type field
+		seqHi = data[ind++];
+		seqLo = data[ind++];
+		sequence = (short)(seqHi << 8 | seqLo);
+		
+		if(seqHi < 0 ) {
+			logger.debug("decoding control packet");
+
+			// extract streamid from marker byte
+			byte streamId = (byte)((markerByte & 0x7c) >> 2);
+
+			// control packet
+			RdtPacket.Type type = RdtPacket.Type.fromCode(sequence);
+			
+			switch(type) {
+			case RttRequest:
+				// process packet length (if included)
+				if(lengthIncluded)
+					packetLength = (short)((data[ind++] << 8) | data[ind++]);
+				
+				packet = new RdtRttRequestPacket();
+				break;
+			case RttResponse:
+				// process packet length (if included)
+				if(lengthIncluded)
+					packetLength = (short)((data[ind++] << 8) | data[ind++]);
+				
+				int roundtripTimestampSeconds = ((data[ind++] << 24) | (data[ind++] << 16) 
+						| (data[ind++] << 8) | data[ind++]);
+				int roundtripTimestampMicroeconds = ((data[ind++] << 24) | (data[ind++] << 16) 
+						| (data[ind++] << 8) | data[ind++]);
+				
+				packet = new RdtRttResponsePacket(roundtripTimestampSeconds, roundtripTimestampMicroeconds);
+				break;
+			case LatencyReport:
+				// process packet length (if included)
+				if(lengthIncluded)
+					packetLength = (short)((data[ind++] << 8) | data[ind++]);
+				
+				int serverTimeout = ((data[ind++] << 24) | (data[ind++] << 16) | (data[ind++] << 8) | data[ind++]);
+				
+				packet = new RdtLatencyReportPacket(serverTimeout);
+				break;
+			case Ack:
+				// process packet length (if included)
+				if(lengthIncluded)
+					packetLength = (short)((data[ind++] << 8) | data[ind++]);
+				
+				boolean lostHigh = ((markerByte & (1<<6)) > 0);
+				int payloadSize = (lengthIncluded ? packetLength : (data.length - ind));
+
+				packet = new RdtAckPacket(lostHigh);
+				if(payloadSize > 0)
+					ind = attachPayload(packet, data, ind, payloadSize);
+				
+				break;
+			case StreamEnd:
+				// in the stream end packet, the length-included serves as need reliable field
+				boolean packetSent = ((markerByte & (1<<1)) > 0);
+				boolean extFlag = ((markerByte & (1<<0)) > 0);
+				short streamEndSequenceNumber = (short)((data[ind++] << 8) | data[ind++]);
+				int timeout = ((data[ind++] << 24) | (data[ind++] << 16) | (data[ind++] << 8) | data[ind++]);
+				short totalReliable = (short)((data[ind++] << 8) | data[ind++]);
+				
+				break;
+			}
+		} else {
+			logger.debug("decoding data packet");
+			
+			// data packet
+			// process packet length (if included)
+			if(lengthIncluded)
+				packetLength = (short)((data[ind++] << 8) | data[ind++]);
+			
+			// process marker byte
+			boolean needReliable = ((markerByte & (1<<6)) > 0);
+			boolean isReliable = ((markerByte & (1<<0)) > 0);
+			byte streamId = (byte)((markerByte & 0x3e) >> 1);
+			
+			// process next control byte
+			if(lengthIncluded)
+				packetLength--;
+			byte controlByte = data[ind++];
+			boolean backToBack = ((controlByte & (1<<7)) > 0);
+			boolean slowData = ((controlByte & (1<<6)) > 0);
+			byte asmRule = (byte)(controlByte & 0x3f);
+			
+			// process timestamp
+			if(lengthIncluded)
+				packetLength -= 4;
+			int timestamp = ((data[ind++] << 24) | (data[ind++] << 16) | (data[ind++] << 8) | data[ind++]);
+			
+			// process total reliable count
+			if(lengthIncluded)
+				packetLength -= 2;
+
+			packet = new RdtDataPacket(needReliable, isReliable, streamId,
+					sequence, backToBack, slowData, asmRule, timestamp);
+			if(needReliable) {
+				short totalReliable = (short)((data[ind++] << 8) | data[ind++]);
+
+				((RdtDataPacket)packet).setTotalReliable(totalReliable);
+				packetLength -= 2;
+			}
+
+			int payloadSize = (lengthIncluded ? packetLength : (data.length - ind));
+			
+			if(payloadSize > 0)
+				ind = attachPayload(packet, data, ind, payloadSize);
+		}
+		
+		if(ind != data.length) {
+			// handle attached subpacket
+			logger.debug("handling attached sub-packet");
+			
+			packet.setSubPacket(decode(data, ind, depth+1));
+		}
+		
+		if(logger.isDebugEnabled())
+			logger.debug("decoded packet: " + packet);
+		
+		return packet;
+	}
+	
+	/**
+	 * attach payload to packet
+	 */
+	private static int attachPayload(RdtPacket packet, byte[] data, int ind, int size) {
+		byte[] buf = new byte[size];
+		
+		System.arraycopy(data, ind, buf, 0, size);
+		packet.setPayload(buf);
+		
+		return (ind + size);
+	}
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttRequestPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttRequestPacket.java	2006-01-09 00:04:58 UTC (rev 383)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttRequestPacket.java	2006-01-09 22:03:33 UTC (rev 384)
@@ -0,0 +1,42 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import org.apache.mina.common.ByteBuffer;
+
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtRttRequestPacket extends RdtControlPacket {
+
+	/**
+	 * @param type
+	 * @param needReliable
+	 * @param streamId
+	 */
+	public RdtRttRequestPacket() {
+		super(Type.RttRequest, (byte)0);
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.rdt.RdtPacket#toStringHelper(java.lang.StringBuffer)
+	 */
+	@Override
+	protected void toStringHelper(StringBuffer buffer) {
+	}
+
+	@Override
+	protected ByteBuffer buildHeader() {
+		ByteBuffer buf = ByteBuffer.allocate(3, true);
+		byte marker = 0;
+		
+		buf.put(marker);
+		buf.put(getType().toByteArray());
+		
+		return buf;
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttResponsePacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttResponsePacket.java	2006-01-09 00:04:58 UTC (rev 383)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttResponsePacket.java	2006-01-09 22:03:33 UTC (rev 384)
@@ -0,0 +1,82 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import org.apache.mina.common.ByteBuffer;
+
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtRttResponsePacket extends RdtControlPacket {
+
+	private int roundtripTimestampSeconds;
+	private int roundtripTimestampMicroseconds;
+	
+	/**
+	 * @param type
+	 * @param needReliable
+	 * @param streamId
+	 */
+	public RdtRttResponsePacket(int roundtripTimestampSeconds, 
+			int roundtripTimestampMicroseconds) {
+		super(Type.RttResponse, (byte)0);
+		
+		this.roundtripTimestampMicroseconds = roundtripTimestampMicroseconds;
+		this.roundtripTimestampSeconds = roundtripTimestampSeconds;
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.rdt.RdtPacket#toStringHelper(java.lang.StringBuffer)
+	 */
+	@Override
+	protected void toStringHelper(StringBuffer buffer) {
+		buffer.append(" roundtripTimestampSeconds=" + roundtripTimestampSeconds);
+		buffer.append(" roundtripTimestampMicroseconds=" + roundtripTimestampMicroseconds);
+	}
+
+	/**
+	 * @return Returns the roundtripTimestampMicroseconds.
+	 */
+	public int getRoundtripTimestampMicroseconds() {
+		return roundtripTimestampMicroseconds;
+	}
+
+	/**
+	 * @param roundtripTimestampMicroseconds The roundtripTimestampMicroseconds to set.
+	 */
+	public void setRoundtripTimestampMicroseconds(int roundtripTimestampMicroseconds) {
+		this.roundtripTimestampMicroseconds = roundtripTimestampMicroseconds;
+	}
+
+	/**
+	 * @return Returns the roundtripTimestampSeconds.
+	 */
+	public int getRoundtripTimestampSeconds() {
+		return roundtripTimestampSeconds;
+	}
+
+	/**
+	 * @param roundtripTimestampSeconds The roundtripTimestampSeconds to set.
+	 */
+	public void setRoundtripTimestampSeconds(int roundtripTimestampSeconds) {
+		this.roundtripTimestampSeconds = roundtripTimestampSeconds;
+	}
+
+	@Override
+	protected ByteBuffer buildHeader() {
+		ByteBuffer buf = ByteBuffer.allocate(11, true);
+		byte marker = 0;
+		
+		buf.put(marker);
+		buf.put(getType().toByteArray());
+		
+		buf.put(encodeInt(this.roundtripTimestampSeconds));
+		buf.put(encodeInt(this.roundtripTimestampMicroseconds));
+		
+		return buf;
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtStreamEndPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtStreamEndPacket.java	2006-01-09 00:04:58 UTC (rev 383)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtStreamEndPacket.java	2006-01-09 22:03:33 UTC (rev 384)
@@ -0,0 +1,141 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import org.apache.mina.common.ByteBuffer;
+
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtStreamEndPacket extends RdtPacket {
+
+	private boolean packetSent;
+	private boolean extFlag;
+	private short streamEndSequenceNumber;
+	private int timestamp;
+	private short totalReliable;
+
+	/**
+	 * @param type
+	 * @param needReliable
+	 * @param streamId
+	 */
+	public RdtStreamEndPacket(boolean needReliable, byte streamId, boolean packetSent, boolean extFlag,
+			short streamEndSequenceNumber, int timestamp, short totalReliable) {
+		super(Type.StreamEnd, needReliable, streamId);
+		this.packetSent = packetSent;
+		this.extFlag = extFlag;
+		this.streamEndSequenceNumber = streamEndSequenceNumber;
+		this.timestamp = timestamp;
+		this.totalReliable = totalReliable;
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.rdt.RdtPacket#toStringHelper(java.lang.StringBuffer)
+	 */
+	@Override
+	protected void toStringHelper(StringBuffer buffer) {
+		buffer.append(" packetSent=" + packetSent);
+		buffer.append(" extFlag=" + extFlag);
+		buffer.append(" streamEndSequenceNumber=" + streamEndSequenceNumber);
+		buffer.append(" timestamp=" + timestamp);
+		buffer.append(" totalReliable=" + totalReliable);
+	}
+
+	/**
+	 * @return Returns the extFlag.
+	 */
+	public boolean isExtFlag() {
+		return extFlag;
+	}
+
+	/**
+	 * @param extFlag The extFlag to set.
+	 */
+	public void setExtFlag(boolean extFlag) {
+		this.extFlag = extFlag;
+	}
+
+	/**
+	 * @return Returns the packetSent.
+	 */
+	public boolean isPacketSent() {
+		return packetSent;
+	}
+
+	/**
+	 * @param packetSent The packetSent to set.
+	 */
+	public void setPacketSent(boolean packetSent) {
+		this.packetSent = packetSent;
+	}
+
+	/**
+	 * @return Returns the streamEndSequenceNumber.
+	 */
+	public short getStreamEndSequenceNumber() {
+		return streamEndSequenceNumber;
+	}
+
+	/**
+	 * @param streamEndSequenceNumber The streamEndSequenceNumber to set.
+	 */
+	public void setStreamEndSequenceNumber(short streamEndSequenceNumber) {
+		this.streamEndSequenceNumber = streamEndSequenceNumber;
+	}
+
+	/**
+	 * @return Returns the timestamp.
+	 */
+	public int getTimestamp() {
+		return timestamp;
+	}
+
+	/**
+	 * @param timestamp The timestamp to set.
+	 */
+	public void setTimestamp(int timestamp) {
+		this.timestamp = timestamp;
+	}
+
+	/**
+	 * @return Returns the totalReliable.
+	 */
+	public short getTotalReliable() {
+		return totalReliable;
+	}
+
+	/**
+	 * @param totalReliable The totalReliable to set.
+	 */
+	public void setTotalReliable(short totalReliable) {
+		this.totalReliable = totalReliable;
+	}
+
+	@Override
+	protected ByteBuffer buildHeader() {
+		ByteBuffer buf = ByteBuffer.allocate(11, true);
+		byte marker = 0;
+		
+		if(isNeedReliable())
+			marker |= (1<<7);
+		marker |= getStreamId() << 2;
+		if(packetSent)
+			marker |= (1<<1);
+		if(extFlag)
+			marker |= (1<<0);
+		
+		buf.put(marker);
+		buf.put(getType().toByteArray());
+		
+		buf.put(encodeShort(this.streamEndSequenceNumber));
+		buf.put(encodeInt(this.timestamp));
+		buf.put(encodeShort(this.totalReliable));
+		
+		return buf;
+	}
+
+}



From merlimat at berlios.de  Tue Jan 10 15:58:43 2006
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 10 Jan 2006 15:58:43 +0100
Subject: [Rtspproxy-devel] r385 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: rdt rtsp
Message-ID: <200601101458.k0AEwhuL023942@sheep.berlios.de>

Author: merlimat
Date: 2006-01-10 15:58:38 +0100 (Tue, 10 Jan 2006)
New Revision: 385

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransport.java
Log:
Removed unused "import" from commons-collections

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java	2006-01-09 22:03:33 UTC (rev 384)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java	2006-01-10 14:58:38 UTC (rev 385)
@@ -5,11 +5,8 @@
 
 import java.util.HashMap;
 
-import org.apache.commons.collections.functors.NonePredicate;
 import org.apache.mina.common.ByteBuffer;
 
-import rtspproxy.rtp.RtpPacket;
-
 /**
  * Base class of specific RDT packet types.
  * The knowledge of packet types, codes and bit packing was taken from analyzing

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransport.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransport.java	2006-01-09 22:03:33 UTC (rev 384)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransport.java	2006-01-10 14:58:38 UTC (rev 385)
@@ -18,7 +18,6 @@
 
 package rtspproxy.rtsp;
 
-import org.apache.commons.collections.functors.NonePredicate;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 



From rbieniek at berlios.de  Tue Jan 10 19:48:55 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Tue, 10 Jan 2006 19:48:55 +0100
Subject: [Rtspproxy-devel] r386 - in trunk/RTSPProxy-Core/src: main/java/rtspproxy/rdt test test/java/rtspproxy test/java/rtspproxy/rdt test/resources test/resources/rtspproxy test/resources/rtspproxy/rdt
Message-ID: <200601101848.k0AImtm5029119@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-10 19:48:44 +0100 (Tue, 10 Jan 2006)
New Revision: 386

Added:
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtAckPacketTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtDataPacketTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtLatencyRepostPacketTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttRequestPacketTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttResponsePacketTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtStreamEndPacketTest.java
   trunk/RTSPProxy-Core/src/test/resources/
   trunk/RTSPProxy-Core/src/test/resources/rtspproxy/
   trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/
   trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtAckPacket.txt
   trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketStream0.txt
   trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketStream1.txt
   trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtLatencyReportWithDataPacket.txt
   trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtRttRequestPacket.txt
   trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtRttResponsePacket.txt
   trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtStreamEndPacketStream0.txt
   trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtStreamEndPacketStream1.txt
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtAckPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtDataPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtLatencyReportPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttRequestPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttResponsePacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtStreamEndPacket.java
Log:
- Fixed RDT packet assembly / disassembly.
- added unit test for all known RDT packet types. All unit tests are passed
  successfully. Check values are taken from network traces.


Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtAckPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtAckPacket.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtAckPacket.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -34,9 +34,10 @@
 
 	@Override
 	protected ByteBuffer buildHeader() {
-		ByteBuffer buf = ByteBuffer.allocate(3, true);
+		ByteBuffer buf = ByteBuffer.allocate(3);
 		byte marker = 0;
-		
+
+		buf.setAutoExpand(true);
 		if(isLengthIncluded())
 			marker |= (1<<7);
 		if(this.lostHigh)
@@ -49,6 +50,7 @@
 			// TODO find a cleaner way.
 			buf.put(encodeShort((short)5));
 		}
+		buf.limit(buf.position());
 		
 		return buf;
 	}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtDataPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtDataPacket.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtDataPacket.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -142,9 +142,10 @@
 
 	@Override
 	protected ByteBuffer buildHeader() {
-		ByteBuffer buf = ByteBuffer.allocate(8, true);
+		ByteBuffer buf = ByteBuffer.allocate(8);
 		byte marker = 0, control = 0;
 		
+		buf.setAutoExpand(true);
 		if(isLengthIncluded())
 			marker |= (1<<7);
 		if(isNeedReliable())
@@ -154,7 +155,7 @@
 			marker |= (1<<0);		
 		buf.put(marker);		
 
-		buf.put(getType().toByteArray());
+		buf.put(encodeShort(this.sequence));
 
 		if(isLengthIncluded()) {
 			short length = 8;
@@ -177,6 +178,8 @@
 		if(isNeedReliable())
 			buf.put(encodeShort(this.totalReliable));
 		
+		buf.limit(buf.position());
+		
 		return buf;
 	}
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtLatencyReportPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtLatencyReportPacket.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtLatencyReportPacket.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -49,11 +49,12 @@
 	
 	@Override
 	protected ByteBuffer buildHeader() {
-		ByteBuffer buf = ByteBuffer.allocate(3, true);
+		ByteBuffer buf = ByteBuffer.allocate(3);
 		byte marker = 0;
 		
+		buf.setAutoExpand(true);
 		if(isLengthIncluded())
-			marker |= (1<<7);
+			marker |= (1<<7) | (1<<1); // bit 1 is needed because it appears in the trace
 		buf.put(marker);
 		buf.put(getType().toByteArray());
 		
@@ -63,6 +64,7 @@
 			buf.put(encodeShort((short)9));
 		}
 		buf.put(encodeInt(this.serverTimeout));
+		buf.limit(buf.position());
 		
 		return buf;
 	}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -125,15 +125,17 @@
 	 * encode packet as byte buffer
 	 */
 	public ByteBuffer toByteBuffer() {
-		ByteBuffer buf = ByteBuffer.allocate(128, true);
+		ByteBuffer buf = ByteBuffer.allocate(128);
 
-		buf.put(buildHeader());
+		buf.setAutoExpand(true);
+		buf.put(buildHeader().rewind());
 		if(this.payload != null)
 			buf.put(this.payload);
 		if(this.subPacket != null)
 			buf.put(this.subPacket.toByteBuffer());
-
-		return buf;
+		buf.limit(buf.position());
+		
+		return buf.rewind();
 	}
 
 	

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -29,9 +29,10 @@
 	 * @param buffer the byte buffer to decode packet from
 	 */
 	public static RdtPacket decode(ByteBuffer buffer) {
-		byte[] data = new byte[buffer.limit()];
+		byte[] data = new byte[buffer.position()];
 
 		// copy buffer content into temp array
+		buffer.rewind();
 		buffer.get(data);
 
 		return decode(data, 0, 0);
@@ -48,6 +49,7 @@
 		short sequence;
 		boolean lengthIncluded = false;
 		short packetLength = -1;
+		int payloadSize = -1;
 
 		if(depth > 1) {
 			logger.error("detected packet-decoding recursion overrun, aborting");
@@ -62,7 +64,7 @@
 		// process sequence / type field
 		seqHi = data[ind++];
 		seqLo = data[ind++];
-		sequence = (short)(seqHi << 8 | seqLo);
+		sequence = decodeShort(seqHi, seqLo);
 		
 		if(seqHi < 0 ) {
 			logger.debug("decoding control packet");
@@ -76,39 +78,53 @@
 			switch(type) {
 			case RttRequest:
 				// process packet length (if included)
-				if(lengthIncluded)
-					packetLength = (short)((data[ind++] << 8) | data[ind++]);
+				if(lengthIncluded) {
+					packetLength = decodeShort(data, ind);
+					ind += 2;
+				}
 				
 				packet = new RdtRttRequestPacket();
 				break;
 			case RttResponse:
 				// process packet length (if included)
-				if(lengthIncluded)
-					packetLength = (short)((data[ind++] << 8) | data[ind++]);
+				if(lengthIncluded) {
+					packetLength = decodeShort(data, ind);
+					ind += 2;
+				}
 				
-				int roundtripTimestampSeconds = ((data[ind++] << 24) | (data[ind++] << 16) 
-						| (data[ind++] << 8) | data[ind++]);
-				int roundtripTimestampMicroeconds = ((data[ind++] << 24) | (data[ind++] << 16) 
-						| (data[ind++] << 8) | data[ind++]);
+				int roundtripTimestampSeconds = decodeInt(data, ind);
+				int roundtripTimestampMicroeconds = decodeInt(data, ind+4);
 				
+				ind += 8;
 				packet = new RdtRttResponsePacket(roundtripTimestampSeconds, roundtripTimestampMicroeconds);
+				
+				payloadSize = (lengthIncluded ? packetLength : (data.length - ind));
+				
+				if(payloadSize > 0)
+					ind = attachPayload(packet, data, ind, payloadSize);
+				
 				break;
 			case LatencyReport:
 				// process packet length (if included)
-				if(lengthIncluded)
-					packetLength = (short)((data[ind++] << 8) | data[ind++]);
+				if(lengthIncluded) {
+					packetLength = decodeShort(data, ind);
+					ind += 2;
+				}
 				
-				int serverTimeout = ((data[ind++] << 24) | (data[ind++] << 16) | (data[ind++] << 8) | data[ind++]);
+				int serverTimeout = decodeInt(data, ind);
 				
+				ind += 4;
 				packet = new RdtLatencyReportPacket(serverTimeout);
 				break;
 			case Ack:
 				// process packet length (if included)
-				if(lengthIncluded)
-					packetLength = (short)((data[ind++] << 8) | data[ind++]);
+				if(lengthIncluded) {
+					packetLength = decodeShort(data, ind);
+					ind += 2;
+				}
 				
 				boolean lostHigh = ((markerByte & (1<<6)) > 0);
-				int payloadSize = (lengthIncluded ? packetLength : (data.length - ind));
+				payloadSize = (lengthIncluded ? packetLength : (data.length - ind));
 
 				packet = new RdtAckPacket(lostHigh);
 				if(payloadSize > 0)
@@ -119,10 +135,19 @@
 				// in the stream end packet, the length-included serves as need reliable field
 				boolean packetSent = ((markerByte & (1<<1)) > 0);
 				boolean extFlag = ((markerByte & (1<<0)) > 0);
-				short streamEndSequenceNumber = (short)((data[ind++] << 8) | data[ind++]);
-				int timeout = ((data[ind++] << 24) | (data[ind++] << 16) | (data[ind++] << 8) | data[ind++]);
-				short totalReliable = (short)((data[ind++] << 8) | data[ind++]);
+				short streamEndSequenceNumber = decodeShort(data, ind);
+				int timeout = decodeInt(data, ind+2);
+				short totalReliable = decodeShort(data, ind+6);
 				
+				ind += 8;
+				
+				// length included servers as need reliable (speical case)
+				packet = new RdtStreamEndPacket(lengthIncluded, streamId, packetSent, extFlag, 
+						streamEndSequenceNumber, timeout, totalReliable);
+				
+				payloadSize = (data.length - ind);
+				if(payloadSize > 0)
+					ind = attachPayload(packet, data, ind, payloadSize);
 				break;
 			}
 		} else {
@@ -130,8 +155,10 @@
 			
 			// data packet
 			// process packet length (if included)
-			if(lengthIncluded)
-				packetLength = (short)((data[ind++] << 8) | data[ind++]);
+			if(lengthIncluded) {
+				packetLength = decodeShort(data, ind);
+				ind += 2;
+			}
 			
 			// process marker byte
 			boolean needReliable = ((markerByte & (1<<6)) > 0);
@@ -149,7 +176,8 @@
 			// process timestamp
 			if(lengthIncluded)
 				packetLength -= 4;
-			int timestamp = ((data[ind++] << 24) | (data[ind++] << 16) | (data[ind++] << 8) | data[ind++]);
+			int timestamp = decodeInt(data, ind);
+			ind += 4;
 			
 			// process total reliable count
 			if(lengthIncluded)
@@ -158,14 +186,15 @@
 			packet = new RdtDataPacket(needReliable, isReliable, streamId,
 					sequence, backToBack, slowData, asmRule, timestamp);
 			if(needReliable) {
-				short totalReliable = (short)((data[ind++] << 8) | data[ind++]);
+				short totalReliable = decodeShort(data, ind);
 
+				ind += 2;
 				((RdtDataPacket)packet).setTotalReliable(totalReliable);
-				packetLength -= 2;
+				if(lengthIncluded)
+					packetLength -= 2;
 			}
 
-			int payloadSize = (lengthIncluded ? packetLength : (data.length - ind));
-			
+			payloadSize = (lengthIncluded ? packetLength : (data.length - ind));
 			if(payloadSize > 0)
 				ind = attachPayload(packet, data, ind, payloadSize);
 		}
@@ -194,4 +223,26 @@
 		
 		return (ind + size);
 	}
+	
+	/**
+	 * decode a short from a byte array
+	 */
+	private static final short decodeShort(byte[] bytes, int ind) {
+		return decodeShort(bytes[ind], bytes[ind+1]);
+	}
+
+	private static final short decodeShort(byte hi, byte lo) {
+		return (short)((hi & 0xff) * 256 + (lo & 0xff));
+	}
+	
+	/**
+	 * decode an int 
+	 */
+	private static final int decodeInt(byte[] bytes, int ind) {
+		return decodeInt(bytes[ind], bytes[ind+1], bytes[ind+2], bytes[ind+3]);
+	}
+	
+	private static final int decodeInt(byte b3, byte b2, byte b1, byte b0) {
+		return ((b3 & 0xff) * 16777216) + ((b2 & 0xff) * 65536) + ((b1 & 0xff) * 256) + (b0 & 0xff);
+	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttRequestPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttRequestPacket.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttRequestPacket.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -30,11 +30,12 @@
 
 	@Override
 	protected ByteBuffer buildHeader() {
-		ByteBuffer buf = ByteBuffer.allocate(3, true);
+		ByteBuffer buf = ByteBuffer.allocate(3, false);
 		byte marker = 0;
 		
 		buf.put(marker);
 		buf.put(getType().toByteArray());
+		buf.limit(buf.position());
 		
 		return buf;
 	}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttResponsePacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttResponsePacket.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtRttResponsePacket.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -67,7 +67,7 @@
 
 	@Override
 	protected ByteBuffer buildHeader() {
-		ByteBuffer buf = ByteBuffer.allocate(11, true);
+		ByteBuffer buf = ByteBuffer.allocate(11);
 		byte marker = 0;
 		
 		buf.put(marker);
@@ -75,6 +75,7 @@
 		
 		buf.put(encodeInt(this.roundtripTimestampSeconds));
 		buf.put(encodeInt(this.roundtripTimestampMicroseconds));
+		buf.limit(buf.position());
 		
 		return buf;
 	}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtStreamEndPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtStreamEndPacket.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtStreamEndPacket.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -117,7 +117,7 @@
 
 	@Override
 	protected ByteBuffer buildHeader() {
-		ByteBuffer buf = ByteBuffer.allocate(11, true);
+		ByteBuffer buf = ByteBuffer.allocate(11);
 		byte marker = 0;
 		
 		if(isNeedReliable())
@@ -134,6 +134,7 @@
 		buf.put(encodeShort(this.streamEndSequenceNumber));
 		buf.put(encodeInt(this.timestamp));
 		buf.put(encodeShort(this.totalReliable));
+		buf.limit(buf.position());
 		
 		return buf;
 	}

Added: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,100 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.LineNumberReader;
+
+import org.apache.mina.common.ByteBuffer;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class BufferUtils {
+
+	/**
+	 * 
+	 */
+	private BufferUtils() {
+	}
+
+	public static ByteBuffer loadBuffer(String fName) throws IOException {
+		ByteBuffer buffer = ByteBuffer.allocate(16);
+		
+		buffer.setAutoExpand(true);
+
+		File baseDir = new File(System.getProperty("basedir"));
+		File packetDump = new File(baseDir, 	"src/test/resources/rtspproxy/rdt/" + fName);
+
+		buffer = ByteBuffer.allocate(32); 
+		buffer.setAutoExpand(true);
+		
+		LineNumberReader lnr = new LineNumberReader(new InputStreamReader(
+				new FileInputStream(packetDump)));
+		String line;
+
+		while ((line = lnr.readLine()) != null) {
+			int pos = 0;
+			int nibblePos = 0;
+			byte b = 0;
+
+			for (pos = 0; pos < line.length(); ++pos) {
+				char c = line.charAt(pos);
+				if (!Character.isWhitespace(c)) {
+					byte n = 0;
+
+					if (c >= '0' && c <= '9') {
+						n = (byte) (c - '0');
+					} else if (c >= 'a' && c <= 'f') {
+						n = (byte) (c - 'a' + 10);
+					} else if (c >= 'A' && c <= 'F') {
+						n = (byte) (c - 'A' + 10);
+					} else
+						throw new IllegalArgumentException(
+								"invalid character '" + c + "' in packet dump");
+					if (nibblePos == 0) {
+						b = (byte)(n << 4);
+						nibblePos++;
+					} else {
+						b |= n;
+						nibblePos = 0;
+						buffer.put(b);
+					}
+				}
+			}
+		}
+		buffer.limit(buffer.position());
+		
+		return buffer;
+	}
+	
+	/**
+	 * compare two buffers for equality
+	 */
+	public static final boolean buffersEqual(ByteBuffer first, ByteBuffer second) {
+		boolean equal = false;
+		
+		System.out.println("first limit=" + first.limit() + ", second position=" + second.limit());
+		if(first.limit() == second.limit()) {
+			int i;
+			
+			for(i=0; i<first.limit(); ++i) {
+				if(first.get(i) != second.get(i)) {
+					System.out.println("index " + i + ": expected=" + Integer.toHexString(first.get(i))
+							+ ": got=" + Integer.toHexString(second.get(i)));
+					break;
+				}
+			}
+
+			if(i == first.limit())
+				equal = true;
+		}
+		
+		return equal;
+	}
+}

Added: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtAckPacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtAckPacketTest.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtAckPacketTest.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,31 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import java.io.IOException;
+
+import org.apache.mina.common.ByteBuffer;
+
+import junit.framework.TestCase;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtAckPacketTest extends TestCase {
+
+	public void testRdtAckPacketLoad() throws IOException {
+		RdtAckPacket packet = (RdtAckPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtAckPacket.txt"));
+		
+		assertEquals(packet.isLengthIncluded(), false);
+		assertEquals(packet.isLostHigh(), false);
+	}
+	
+	public void testRdtAckPacketSave() throws IOException {
+		ByteBuffer buffer = BufferUtils.loadBuffer("RdtAckPacket.txt");
+		RdtAckPacket packet = (RdtAckPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtAckPacket.txt"));
+		
+		assertTrue(BufferUtils.buffersEqual(buffer, packet.toByteBuffer()));
+	}
+}

Added: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtDataPacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtDataPacketTest.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtDataPacketTest.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,59 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import java.io.IOException;
+
+import junit.framework.TestCase;
+
+import org.apache.mina.common.ByteBuffer;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtDataPacketTest extends TestCase {
+
+	public void testRdtPacketStream0Load() throws IOException {
+		RdtDataPacket packet = (RdtDataPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtDataPacketStream0.txt"));
+		
+		assertEquals(packet.isNeedReliable(), true);
+		assertEquals(packet.getStreamId(), 0);
+		assertEquals(packet.isReliable(), false);
+		assertEquals(packet.getSequence(), 1438);
+		assertEquals(packet.isBackToBack(), false);
+		assertEquals(packet.isSlowData(), false);
+		assertEquals(packet.getAsmRule(), 1);
+		assertEquals(packet.getTimestamp(), 23993);
+		assertEquals(packet.getTotalReliable(), 0);
+	}
+	
+	public void testRdtPacketStream0Save() throws IOException {
+		ByteBuffer origBuffer = BufferUtils.loadBuffer("RdtDataPacketStream0.txt");
+		RdtDataPacket packet = (RdtDataPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtDataPacketStream0.txt"));
+
+		assertTrue(BufferUtils.buffersEqual(origBuffer, packet.toByteBuffer()));
+	}
+
+	public void testRdtPacketStream1Load() throws IOException {
+		RdtDataPacket packet = (RdtDataPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtDataPacketStream1.txt"));
+		
+		assertEquals(packet.isNeedReliable(), true);
+		assertEquals(packet.getStreamId(), 1);
+		assertEquals(packet.isReliable(), false);
+		assertEquals(packet.getSequence(), 3);
+		assertEquals(packet.isBackToBack(), false);
+		assertEquals(packet.isSlowData(), false);
+		assertEquals(packet.getAsmRule(), 1);
+		assertEquals(packet.getTimestamp(), 348);
+		assertEquals(packet.getTotalReliable(), 0);
+	}
+	
+	public void testRdtPacketStream1Save() throws IOException {
+		ByteBuffer origBuffer = BufferUtils.loadBuffer("RdtDataPacketStream1.txt");
+		RdtDataPacket packet = (RdtDataPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtDataPacketStream1.txt"));
+
+		assertTrue(BufferUtils.buffersEqual(origBuffer, packet.toByteBuffer()));
+	}
+}

Added: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtLatencyRepostPacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtLatencyRepostPacketTest.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtLatencyRepostPacketTest.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,51 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+
+import java.io.IOException;
+
+import org.apache.mina.common.ByteBuffer;
+
+import junit.framework.TestCase;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtLatencyRepostPacketTest extends TestCase {
+
+	public void testRdtLatencyReportPacketLoad() throws IOException {
+		RdtLatencyReportPacket packet = (RdtLatencyReportPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtLatencyReportWithDataPacket.txt"));
+		
+		assertEquals(packet.isLengthIncluded(), true);
+		assertEquals(packet.getServerTimeout(), 0);
+	}
+
+	public void testRdtLatencyReportPacketDataLoad() throws IOException {
+		RdtLatencyReportPacket packet = (RdtLatencyReportPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtLatencyReportWithDataPacket.txt"));
+		
+		assertEquals(packet.isLengthIncluded(), true);
+		assertEquals(packet.getServerTimeout(), 0);
+		
+		RdtDataPacket subPacket = (RdtDataPacket)packet.getSubPacket();
+		
+		assertEquals(subPacket.isLengthIncluded(), false);
+		assertEquals(subPacket.isNeedReliable(), true);
+		assertEquals(subPacket.getStreamId(), 0);
+		assertEquals(subPacket.getSequence(), 0);
+		assertEquals(subPacket.isBackToBack(), false);
+		assertEquals(subPacket.isSlowData(), false);
+		assertEquals(subPacket.getAsmRule(), 0);
+		assertEquals(subPacket.getTimestamp(), 0);
+		assertEquals(subPacket.getTotalReliable(), 0);
+	}
+
+	public void testRdtLatencyReportPacketSave() throws IOException {
+		ByteBuffer buffer = BufferUtils.loadBuffer("RdtLatencyReportWithDataPacket.txt");
+		RdtLatencyReportPacket packet = (RdtLatencyReportPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtLatencyReportWithDataPacket.txt"));
+		
+		assertTrue(BufferUtils.buffersEqual(buffer, packet.toByteBuffer()));
+	}
+}

Added: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttRequestPacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttRequestPacketTest.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttRequestPacketTest.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,32 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import java.io.IOException;
+
+import org.apache.mina.common.ByteBuffer;
+
+import junit.framework.TestCase;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtRttRequestPacketTest extends TestCase {
+
+	public void testRdtRttRequestPacketLoad() throws IOException {
+		RdtRttRequestPacket packet = 
+			(RdtRttRequestPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtRttRequestPacket.txt"));
+		
+		assertEquals(packet.isLengthIncluded(), false);
+	}
+
+	public void testRdtRttRequestPacketSave() throws IOException {
+		ByteBuffer buffer = BufferUtils.loadBuffer("RdtRttRequestPacket.txt");
+		RdtRttRequestPacket packet = 
+			(RdtRttRequestPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtRttRequestPacket.txt"));
+		
+		assertTrue(BufferUtils.buffersEqual(buffer, packet.toByteBuffer()));
+	}
+}

Added: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttResponsePacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttResponsePacketTest.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttResponsePacketTest.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,34 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import java.io.IOException;
+
+import org.apache.mina.common.ByteBuffer;
+
+import junit.framework.TestCase;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtRttResponsePacketTest extends TestCase {
+
+
+	public void testRdtRttResponsePacketLoad() throws IOException {
+		RdtRttResponsePacket packet = (RdtRttResponsePacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtRttResponsePacket.txt"));
+
+		assertEquals(packet.isLengthIncluded(), false);
+		assertEquals(packet.getRoundtripTimestampSeconds(), 1136818556);
+		assertEquals(packet.getRoundtripTimestampMicroseconds(), 101211);
+	}
+	
+	public void testRdtRttResponsePacketSave() throws IOException {
+		ByteBuffer buffer = BufferUtils.loadBuffer("RdtRttResponsePacket.txt");
+		RdtRttResponsePacket packet = (RdtRttResponsePacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtRttResponsePacket.txt"));
+		
+		assertTrue(BufferUtils.buffersEqual(buffer, packet.toByteBuffer()));
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtStreamEndPacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtStreamEndPacketTest.java	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtStreamEndPacketTest.java	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,56 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import java.io.IOException;
+
+import org.apache.mina.common.ByteBuffer;
+
+import junit.framework.TestCase;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtStreamEndPacketTest extends TestCase {
+
+		public void testRdtStreamEndPacketStream0Load() throws IOException {
+			RdtStreamEndPacket packet = (RdtStreamEndPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtStreamEndPacketStream0.txt"));
+			
+			assertEquals(packet.isNeedReliable(), true);
+			assertEquals(packet.getStreamId(), 0);
+			assertEquals(packet.isPacketSent(), true);
+			assertEquals(packet.isExtFlag(), false);
+			assertEquals(packet.getStreamEndSequenceNumber(), 1423);
+			assertEquals(packet.getTimestamp(), 23726);
+			assertEquals(packet.getTotalReliable(), 0);
+		}
+		
+		public void testRdtStreamEndPacketStream0Save() throws IOException {
+			ByteBuffer buffer = BufferUtils.loadBuffer("RdtStreamEndPacketStream0.txt");
+			RdtStreamEndPacket packet = (RdtStreamEndPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtStreamEndPacketStream0.txt"));
+	
+			assertTrue(BufferUtils.buffersEqual(buffer, packet.toByteBuffer()));
+		}
+
+
+		public void testRdtStreamEndPacketStream1Load() throws IOException {
+			RdtStreamEndPacket packet = (RdtStreamEndPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtStreamEndPacketStream1.txt"));
+			
+			assertEquals(packet.isNeedReliable(), true);
+			assertEquals(packet.getStreamId(), 1);
+			assertEquals(packet.isPacketSent(), true);
+			assertEquals(packet.isExtFlag(), false);
+			assertEquals(packet.getStreamEndSequenceNumber(), 271);
+			assertEquals(packet.getTimestamp(), 31462);
+			assertEquals(packet.getTotalReliable(), 0);
+		}
+		
+		public void testRdtStreamEndPacketStream1Save() throws IOException {
+			ByteBuffer buffer = BufferUtils.loadBuffer("RdtStreamEndPacketStream1.txt");
+			RdtStreamEndPacket packet = (RdtStreamEndPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtStreamEndPacketStream1.txt"));
+	
+			assertTrue(BufferUtils.buffersEqual(buffer, packet.toByteBuffer()));
+		}
+}

Added: trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtAckPacket.txt
===================================================================
--- trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtAckPacket.txt	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtAckPacket.txt	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,6 @@
+00 ff 02 00 00 00
+ef 00 ef 20 ff ff ff ff ff ff ff ff ff ff ff ff
+ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
+ff 7f 00 00 00 01 00 21 00 21 20 ff ff ff ff 01
+00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+00 00 00 00 00 00 00 00 00 00 00

Added: trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketStream0.txt
===================================================================
--- trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketStream0.txt	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketStream0.txt	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,5 @@
+40 05 9e 01 00 00
+5d b9 00 00 01 01 40 80 40 00 b8 7a 17 65 60 0e
+4b 1d e3 de f7 24 7d e7 de f7 91 cc 1e f7 bc 8e
+db de f7 bd ef 23 ef 7b dd bd ef 7b c2 fb de ed
+cb b7 bd b9 0f 7b de f7 bd ef 78

Added: trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketStream1.txt
===================================================================
--- trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketStream1.txt	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketStream1.txt	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,42 @@
+42 00 03 01 00 00
+01 5c 00 00 77 c5 1a d5 6c 64 a0 2a ea a8 d1 9c
+cc 29 3b 08 9c a1 d9 cd 3a d7 95 7b a8 c8 03 76
+be 50 f0 ee 1d 35 9f e0 db 12 43 88 f1 83 23 de
+5c d1 93 8f a0 29 b7 94 d1 b0 62 97 9d 3f 62 b2
+86 29 1b 59 27 f0 41 91 46 20 9b 8c 79 75 14 83
+59 2d 0f e4 f7 10 7d fd 18 d2 75 3c a5 eb 67 31
+a9 e7 c6 90 03 b3 c3 03 0c 32 98 e5 a4 7d 08 dc
+68 af bb 13 86 29 01 1a c4 6b e0 83 fb dd 0e 87
+d7 7c a1 f2 77 c5 00 59 6c a9 58 e6 26 de 9d fa
+f1 f4 be 0b 32 21 f9 23 ea 0e d3 56 6e 04 0b c9
+8e bd 45 79 0f fe ce 89 bc 40 04 b5 4c 2a 60 82
+95 6d c6 ab 43 9c 67 9b bb 2b dd 37 71 3a 11 4c
+ee 22 2d 48 8e d9 58 82 84 1e 60 c0 1c 30 31 b3
+f7 0d fc a1 96 84 3f e3 f0 db dd 55 ed fd f3 60
+b2 dc ac 84 41 b6 ce 96 cd b5 3b e9 c4 23 12 92
+f9 5a bb b8 7b 44 dc 87 73 4c 25 10 84 70 1c 45
+95 4e fd b2 77 c5 00 d2 83 43 b0 e2 34 91 72 d1
+15 49 28 0d d6 bb db a1 56 1a 6a c6 5e 98 85 2a
+40 1b dc e8 60 ae be ec 83 60 3d 8f e3 2b ad 88
+e5 51 a0 05 64 41 f0 fd c7 93 47 d2 38 62 33 87
+e7 37 65 54 0a cb 5b 58 d5 50 2d 83 b4 70 51 24
+ed 72 6b 48 57 da 88 a9 89 a0 63 1e f5 6b 81 b0
+6b 7d 01 8a c2 ef 25 fb df 7a f8 d7 d7 46 5b b2
+56 3d 25 75 a1 25 bf 8b 5a 93 03 86 d4 02 77 c5
+24 33 51 f2 77 c5 00 d2 96 50 80 26 03 cf 29 c5
+2e dd 3e 0d 23 b2 82 1e 50 f3 4c 45 c3 de b8 2f
+68 2c bd 95 01 98 a6 06 2c 6c cc ad de 6e 70 33
+b2 a7 2e f7 7d 1d 61 93 6f 4a d0 a1 7e 7c e4 17
+55 7f 40 e3 40 1c b9 9f 27 23 e6 5e 2a 35 ce 82
+b1 ee 21 21 da 7c d3 e7 80 02 fd fa 39 52 97 0e
+eb dc 91 2e 6d 74 03 2c 18 4e eb 27 31 d7 5f 1a
+64 b4 8d 60 6b 3c 91 fd 26 52 85 eb 6d 2e 2b 4b
+ad c6 59 f2 77 c5 01 56 81 5d 64 b7 36 c1 50 c0
+8f 4d 3e 0d 27 9b 5a 88 00 9a c3 43 40 cc c9 54
+c4 1f 6b de 0d d6 94 8a ce 4b 74 e8 bf 98 b8 ed
+06 09 b2 a3 3c 70 02 71 c6 25 01 6a 92 fe 6c 3a
+02 7c 22 bd c4 6e e5 8b 4e 26 8d 69 3a 7c 79 25
+0d 77 21 ed b7 31 e8 29 30 a6 f4 85 43 7c a6 c4
+da ba 98 4c a1 17 a8 94 25 5e 64 24 03 a3 9d af
+2d be c7 5a 22 aa c8 96 32 11 ed cb 50 e7 2b f6
+2b cc 06 52
\ No newline at end of file

Added: trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtLatencyReportWithDataPacket.txt
===================================================================
--- trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtLatencyReportWithDataPacket.txt	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtLatencyReportWithDataPacket.txt	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,9 @@
+82 ff 08 00 09 00
+00 00 00 40 00 00 00 00 00 00 00 00 00 01 01 40
+dd 40 00 00 14 20 00 1b 00 46 db ff f1 18 42 10
+84 21 08 42 10 84 21 08 42 10 84 21 11 84 21 08
+42 10 84 21 08 42 11 18 42 14 84 22 38 e4 21 08
+42 10 84 21 0c 63 9c e4 21 08 63 1c c6 32 30 c6
+39 08 44 71 08 63 98 84 46 10 88 e2 18 c4 22 30
+85 21 08 42 10 84 21 08 52 10 88 42 90 84 21 08
+44 fc e4 21 08 44 31 08 87 31 00
\ No newline at end of file

Added: trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtRttRequestPacket.txt
===================================================================
--- trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtRttRequestPacket.txt	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtRttRequestPacket.txt	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1 @@
+00 ff 03
\ No newline at end of file

Added: trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtRttResponsePacket.txt
===================================================================
--- trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtRttResponsePacket.txt	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtRttResponsePacket.txt	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,2 @@
+00 ff 04 43 c2 79
+7c 00 01 8b 5b 00 00 00 00 00 00 00
\ No newline at end of file

Added: trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtStreamEndPacketStream0.txt
===================================================================
--- trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtStreamEndPacketStream0.txt	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtStreamEndPacketStream0.txt	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,2 @@
+82 ff 06 05 8f 00
+00 5c ae 00 00 00 00 00 00 00 00 00

Added: trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtStreamEndPacketStream1.txt
===================================================================
--- trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtStreamEndPacketStream1.txt	2006-01-10 14:58:38 UTC (rev 385)
+++ trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtStreamEndPacketStream1.txt	2006-01-10 18:48:44 UTC (rev 386)
@@ -0,0 +1,2 @@
+86 ff 06 01 0f 00
+00 7a e6 00 00 00 00 00 00 00 00 00
\ No newline at end of file



From rbieniek at berlios.de  Wed Jan 11 00:38:58 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Wed, 11 Jan 2006 00:38:58 +0100
Subject: [Rtspproxy-devel] r387 - in trunk/RTSPProxy-Core/src: main/java/rtspproxy main/java/rtspproxy/proxy main/java/rtspproxy/proxy/track main/java/rtspproxy/rdt main/java/rtspproxy/transport main/java/rtspproxy/transport/socket main/java/rtspproxy/transport/socket/nio main/java/rtspproxy/transport/socket/nio/support test/java/rtspproxy/rdt
Message-ID: <200601102338.k0ANcwCR003892@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-11 00:38:43 +0100 (Wed, 11 Jan 2006)
New Revision: 387

Added:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtFilterChainBuilder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolCodecFactory.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolEncoder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramAcceptor.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramConnector.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramSession.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramAcceptorDelegate.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramConnectorDelegate.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramFilterChain.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramSessionImpl.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramSessionManager.java
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java
Log:
- Moved RDT transport implementation to Iofilter / IoHandler based 
  implementation.
- Added datagram connector / acceptor sources from mina 0.9.0 as
  rtspproxy.transport.socket.nio package. This helps to fix bugs
  in the mina 0.9.0 datagram connector / acceptor implementation
  which are related to session management.


Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -123,9 +123,11 @@
 			throws IOException
 	{
 		IoAcceptor acceptor = newAcceptor( service );
-		acceptor.setFilterChainBuilder( new IoFilterChainBuilderWrapper( service,
-				filterChainBuilder ) );
-		acceptor.bind( address, ioHandler );
+		
+		IoFilterChainBuilder builder = new IoFilterChainBuilderWrapper( service,
+				filterChainBuilder );
+		// acceptor.setFilterChainBuilder( builder );
+		acceptor.bind( address, ioHandler, builder );
 
 		services.put( service.getName(), service );
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -18,13 +18,18 @@
 
 package rtspproxy;
 
+import java.net.SocketAddress;
+
+import org.apache.mina.common.IoFilterChainBuilder;
 import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.IoSession;
 import org.apache.mina.common.TransportType;
 
 import rtspproxy.config.Config;
 import rtspproxy.config.Parameter;
 import rtspproxy.lib.Singleton;
 import rtspproxy.proxy.ClientRdtPacketHandler;
+import rtspproxy.rdt.RdtFilterChainBuilder;
 
 /**
  * ProxyService that manages the RDT packets incoming from clients.
@@ -35,6 +40,8 @@
 {
 
 	private IoHandler clientRdtPacketHandler = new ClientRdtPacketHandler();
+	
+	private RdtFilterChainBuilder filterChainBuilder = new RdtFilterChainBuilder();
 
 	/** Service name */
 	private static final String NAME = "RdtClientService";
@@ -98,4 +105,12 @@
 		return Config.proxyClientRdtPort;
 	}
 
+	/* (non-Javadoc)
+	 * @see rtspproxy.ProxyService#getFilterChainBuilder()
+	 */
+	@Override
+	public IoFilterChainBuilder getFilterChainBuilder() {
+		return this.filterChainBuilder;
+	}
+
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -18,13 +18,18 @@
 
 package rtspproxy;
 
+import java.net.SocketAddress;
+
+import org.apache.mina.common.IoFilterChainBuilder;
 import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.IoSession;
 import org.apache.mina.common.TransportType;
 
 import rtspproxy.config.Config;
 import rtspproxy.config.Parameter;
 import rtspproxy.lib.Singleton;
 import rtspproxy.proxy.ServerRdtPacketHandler;
+import rtspproxy.rdt.RdtFilterChainBuilder;
 
 /**
  * ProxyService that manages the RDT packets incoming from servers.
@@ -37,6 +42,8 @@
 
 	private static final String NAME = "RdtServerService";
 
+	private RdtFilterChainBuilder filterChainBuilder = new RdtFilterChainBuilder();
+
 	public RdtServerService()
 	{
 		super();
@@ -95,4 +102,12 @@
 	{
 		return Config.proxyServerRdtPort;
 	}
+	/* (non-Javadoc)
+	 * @see rtspproxy.ProxyService#getFilterChainBuilder()
+	 */
+	@Override
+	public IoFilterChainBuilder getFilterChainBuilder() {
+		return this.filterChainBuilder;
+	}
+
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -20,17 +20,18 @@
 
 import java.net.InetSocketAddress;
 
+import org.apache.mina.common.IoFilterChain;
+import org.apache.mina.common.IoHandlerAdapter;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.TrafficMask;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.apache.mina.common.ByteBuffer;
-import org.apache.mina.common.IoHandlerAdapter;
-import org.apache.mina.common.IoSession;
 
 import rtspproxy.lib.Exceptions;
 import rtspproxy.proxy.track.RdtTrack;
 import rtspproxy.proxy.track.Track;
+import rtspproxy.rdt.RdtFilterChainBuilder;
 import rtspproxy.rdt.RdtPacket;
-import rtspproxy.rdt.RdtPacketDecoder;
 
 /**
  * Handles RDT packets from client and forward them to server. The RTSP session
@@ -43,40 +44,57 @@
 
 	private static Logger log = LoggerFactory.getLogger( ClientRdtPacketHandler.class );
 
+	/**
+	 * this sessionCreated method is an ugly hack. It suspends the session for a moment and
+	 * checks the filter chain if the protocol filter has already been applied to the 
+	 * session. If not, it assembles the filter chain. This should have been done by the acceptor
+	 * (which he does not do (in mina 0.9.0))
+	 */
 	@Override
 	public void sessionCreated( IoSession session ) throws Exception
 	{
+		TrafficMask mask = session.getTrafficMask();
+		
+		try {
+			session.setTrafficMask(TrafficMask.NONE);
+			
+			IoFilterChain chain = session.getFilterChain();
+			
+			if(!chain.contains(RdtFilterChainBuilder.rdtCODEC)) 
+				(new RdtFilterChainBuilder()).buildFilterChain(chain);
+		} finally {
+			session.setTrafficMask(mask);
+		}
 	}
 
 	@Override
 	public void messageReceived( IoSession session, Object buffer ) throws Exception
 	{
-		// RtcpPacket packet = new RtcpPacket( (ByteBuffer) buffer );
-		log.debug( "Received RDT packet from client" );
+		if(buffer instanceof RdtPacket) {
+			RdtPacket rdtPacket = (RdtPacket)buffer;
+			
+			log.debug( "Received RDT packet from client, packet=" + rdtPacket );
 
-		ByteBuffer receivedBuffer = (ByteBuffer) buffer;
-		byte[] bytes = new byte[receivedBuffer.limit()];
-		receivedBuffer.get( bytes );
-		
-		RdtPacket decPacket = RdtPacketDecoder.decode(bytes, 0, 0);
-		
-		log.debug("client received packet: " + decPacket);
+			RdtTrack track = (RdtTrack) Track.getByClientAddress( (InetSocketAddress) session.getRemoteAddress() );
 
-		RdtTrack track = (RdtTrack) Track.getByClientAddress( (InetSocketAddress) session.getRemoteAddress() );
+			if ( track == null ) {
+				// drop packet
+				log.debug( "Invalid address: "
+						+ (InetSocketAddress) session.getRemoteAddress()
+						+ " - Class: "
+						+ ( (InetSocketAddress) session.getRemoteAddress() ).getAddress().getClass() );
+				return;
+			}
 
-		if ( track == null ) {
-			// drop packet
-			log.debug( "Invalid address: "
-					+ (InetSocketAddress) session.getRemoteAddress()
-					+ " - Class: "
-					+ ( (InetSocketAddress) session.getRemoteAddress() ).getAddress().getClass() );
-			return;
+			track.forwardRdtToServer( rdtPacket );			
+		} else {
+			log.debug("invalid object passed: " + buffer.getClass().getName());
+			
+			throw new IllegalStateException("invalid packet on chain");
 		}
-
-		ByteBuffer rdtPacket = ByteBuffer.wrap( bytes );
-		track.forwardRdtToServer( rdtPacket );
+		
 	}
-
+	
 	@Override
 	public void exceptionCaught( IoSession session, Throwable cause ) throws Exception
 	{

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -23,12 +23,15 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.apache.mina.common.ByteBuffer;
+import org.apache.mina.common.IoFilterChain;
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
+import org.apache.mina.common.TrafficMask;
 
 import rtspproxy.lib.Exceptions;
 import rtspproxy.proxy.track.RdtTrack;
 import rtspproxy.proxy.track.Track;
+import rtspproxy.rdt.RdtFilterChainBuilder;
 import rtspproxy.rdt.RdtPacket;
 import rtspproxy.rdt.RdtPacketDecoder;
 
@@ -43,39 +46,54 @@
 
 	private static Logger log = LoggerFactory.getLogger( ServerRdtPacketHandler.class );
 
+	/**
+	 * this sessionCreated method is an ugly hack. It suspends the session for a moment and
+	 * checks the filter chain if the protocol filter has already been applied to the 
+	 * session. If not, it assembles the filter chain. This should have been done by the acceptor
+	 * (which he does not do (in mina 0.9.0))
+	 */
 	@Override
 	public void sessionCreated( IoSession session ) throws Exception
 	{
+		TrafficMask mask = session.getTrafficMask();
+		
+		try {
+			session.setTrafficMask(TrafficMask.NONE);
+			
+			IoFilterChain chain = session.getFilterChain();
+			
+			if(!chain.contains(RdtFilterChainBuilder.rdtCODEC)) 
+				(new RdtFilterChainBuilder()).buildFilterChain(chain);
+		} finally {
+			session.setTrafficMask(mask);
+		}
 	}
 
 	@Override
 	public void messageReceived( IoSession session, Object buffer ) throws Exception
 	{
-		// RtcpPacket packet = new RtcpPacket( (ByteBuffer) buffer );
-		log.debug( "Received RDT packet from server" );
+		if(buffer instanceof RdtPacket) {
+			RdtPacket rdtPacket = (RdtPacket)buffer;
+			
+			log.debug( "Received RDT packet from server, packet=" + rdtPacket );
 
-		ByteBuffer receivedBuffer = (ByteBuffer) buffer;
-		byte[] bytes = new byte[receivedBuffer.limit()];
-		receivedBuffer.get( bytes );
-		
-		RdtPacket decPacket = RdtPacketDecoder.decode(bytes, 0, 0);
-		
-		log.debug("client received packet: " + decPacket);
+			RdtTrack track = (RdtTrack)Track.getByServerAddress( (InetSocketAddress) session.getRemoteAddress() );
 
-		RdtTrack track = (RdtTrack)Track.getByServerAddress( (InetSocketAddress) session.getRemoteAddress() );
+			if ( track == null ) {
+				// drop packet
+				log.debug( "Invalid address: "
+						+ (InetSocketAddress) session.getRemoteAddress()
+						+ " - Class: "
+						+ ( (InetSocketAddress) session.getRemoteAddress() ).getAddress().getClass() );
+				return;
+			}
 
-		if ( track == null ) {
-			// drop packet
-			log.debug( "Invalid address: "
-					+ (InetSocketAddress) session.getRemoteAddress()
-					+ " - Class: "
-					+ ( (InetSocketAddress) session.getRemoteAddress() ).getAddress().getClass() );
-			return;
+			track.forwardRdtToClient( rdtPacket );			
+		} else {
+			log.debug("invalid object passed: " + buffer.getClass().getName());
+			
+			throw new IllegalStateException("invalid packet on chain");
 		}
-
-		ByteBuffer rdtPacket = ByteBuffer.wrap( bytes );
-		track.forwardRdtToClient( rdtPacket );
-
 	}
 
 	@Override

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -10,6 +10,7 @@
 
 import rtspproxy.RdtClientService;
 import rtspproxy.RdtServerService;
+import rtspproxy.rdt.RdtPacket;
 
 public class RdtTrack extends Track
 {
@@ -49,7 +50,7 @@
 	 * @param packet
 	 *            a buffer containing a RDT packet
 	 */
-	public void forwardRdtToClient( ByteBuffer packet )
+	public void forwardRdtToClient( RdtPacket packet )
 	{
 		// modify the SSRC for the client
 		// packet.setSsrc( proxySSRC );
@@ -70,7 +71,7 @@
 	 * @param packet
 	 *            a RDT packet
 	 */
-	public void forwardRdtToServer( ByteBuffer packet )
+	public void forwardRdtToServer( RdtPacket packet )
 	{
 		if ( rdtServerSession == null || !rdtServerSession.isConnected() ) {
 			InetSocketAddress remoteAddress = new InetSocketAddress( serverAddress,
@@ -83,7 +84,7 @@
 		// packet.reset();
 		// log.debug("Packet: " + packet );
 		// log.debug( "Written bytes1: " + rdtServerSession.getWrittenBytes() );
-		rdtServerSession.write( packet );
+		rdtServerSession.write( packet.toByteBuffer() );
 		// log.debug( "Written bytes2: " + rdtServerSession.getWrittenBytes() );
 	}
 

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtFilterChainBuilder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtFilterChainBuilder.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtFilterChainBuilder.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -0,0 +1,37 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import org.apache.mina.common.IoFilterChain;
+import org.apache.mina.common.IoFilterChainBuilder;
+import org.apache.mina.filter.codec.ProtocolCodecFilter;
+
+/**
+ * Builds filter chain operating on RDT connection.
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtFilterChainBuilder implements IoFilterChainBuilder {
+
+	private RdtProtocolCodecFactory codecFactory = new RdtProtocolCodecFactory();
+	
+	// filter name fields
+	public static final String rdtCODEC = "rdtProtocolCodec";
+	
+	/**
+	 * 
+	 */
+	public RdtFilterChainBuilder() {
+	}
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.common.IoFilterChainBuilder#buildFilterChain(org.apache.mina.common.IoFilterChain)
+	 */
+	public void buildFilterChain(IoFilterChain chain) throws Exception {
+		
+		chain.addLast(rdtCODEC, new ProtocolCodecFilter(codecFactory));
+	}
+
+}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -29,7 +29,7 @@
 	 * @param buffer the byte buffer to decode packet from
 	 */
 	public static RdtPacket decode(ByteBuffer buffer) {
-		byte[] data = new byte[buffer.position()];
+		byte[] data = new byte[buffer.limit()];
 
 		// copy buffer content into temp array
 		buffer.rewind();
@@ -149,6 +149,9 @@
 				if(payloadSize > 0)
 					ind = attachPayload(packet, data, ind, payloadSize);
 				break;
+			default:
+				logger.error("unknown control packet received, code=" + sequence 
+						+ ", full packet dump: " + formatByteArray(data));
 			}
 		} else {
 			logger.debug("decoding data packet");
@@ -245,4 +248,24 @@
 	private static final int decodeInt(byte b3, byte b2, byte b1, byte b0) {
 		return ((b3 & 0xff) * 16777216) + ((b2 & 0xff) * 65536) + ((b1 & 0xff) * 256) + (b0 & 0xff);
 	}
+
+	private static final char[] digits = new char[] { 
+		'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
+		'a', 'b', 'c', 'd', 'e', 'f'
+	};
+	private static final String formatByteArray(byte[] data) {
+		StringBuffer buf = new StringBuffer();
+		
+		for(int i=0; i<data.length; i++) {
+			if((i % 16) == 0)
+				buf.append('\n');
+			
+			buf.append(digits[data[i] / 16]);
+			buf.append(digits[data[i] % 16]);
+			if((i % 16) != 0)
+				buf.append(' ');
+		}
+ 		
+		return buf.toString();
+	}
 }

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolCodecFactory.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolCodecFactory.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolCodecFactory.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -0,0 +1,42 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import org.apache.mina.filter.codec.ProtocolCodecFactory;
+import org.apache.mina.filter.codec.ProtocolDecoder;
+import org.apache.mina.filter.codec.ProtocolEncoder;
+
+/**
+ * Codec factory for RDT protocol coder and decoder. Uses shared codec instances because
+ * RDT PDU are self-contained and do not contain states across PDUs
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ */
+public class RdtProtocolCodecFactory implements ProtocolCodecFactory {
+
+	private RdtProtocolEncoder encoder = new RdtProtocolEncoder();
+	
+	private RdtProtocolDecoder decoder = new RdtProtocolDecoder();
+	
+	/**
+	 * 
+	 */
+	RdtProtocolCodecFactory() {
+	}
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.filter.codec.ProtocolCodecFactory#getEncoder()
+	 */
+	public ProtocolEncoder getEncoder() {
+		return encoder;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.filter.codec.ProtocolCodecFactory#getDecoder()
+	 */
+	public ProtocolDecoder getDecoder() {
+		return decoder;
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -0,0 +1,57 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import org.apache.mina.common.ByteBuffer;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.filter.codec.ProtocolDecoder;
+import org.apache.mina.filter.codec.ProtocolDecoderOutput;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtProtocolDecoder implements ProtocolDecoder {
+
+	private static Logger logger = LoggerFactory.getLogger(RdtProtocolDecoder.class);
+
+	/**
+	 * 
+	 */
+	RdtProtocolDecoder() {
+	}
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.filter.codec.ProtocolDecoder#decode(org.apache.mina.common.IoSession, org.apache.mina.common.ByteBuffer, org.apache.mina.filter.codec.ProtocolDecoderOutput)
+	 */
+	public void decode(IoSession ioSession, ByteBuffer buffer,
+			ProtocolDecoderOutput out) throws Exception {
+		try {
+		RdtPacket rdtPacket = RdtPacketDecoder.decode(buffer);
+	
+		if(logger.isDebugEnabled())
+			logger.debug("received RDT packet: " + rdtPacket);
+
+		if(rdtPacket == null)
+			throw new IllegalStateException("RDT network packet cannot be decoded");
+		
+		out.write(rdtPacket);
+		} catch(Exception e) {
+			logger.debug("error decoding packet", e);
+			
+			throw e;
+		}
+	}
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.filter.codec.ProtocolDecoder#dispose(org.apache.mina.common.IoSession)
+	 */
+	public void dispose(IoSession arg0) throws Exception {
+		// TODO Auto-generated method stub
+
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolEncoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolEncoder.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolEncoder.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -0,0 +1,46 @@
+/**
+ * 
+ */
+package rtspproxy.rdt;
+
+import org.apache.mina.common.IoSession;
+import org.apache.mina.filter.codec.ProtocolEncoder;
+import org.apache.mina.filter.codec.ProtocolEncoderOutput;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtProtocolEncoder implements ProtocolEncoder {
+
+	private static Logger logger = LoggerFactory.getLogger(RdtProtocolEncoder.class);
+	
+	/**
+	 * 
+	 */
+	RdtProtocolEncoder() {
+	}
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.filter.codec.ProtocolEncoder#encode(org.apache.mina.common.IoSession, java.lang.Object, org.apache.mina.filter.codec.ProtocolEncoderOutput)
+	 */
+	public void encode(IoSession ioSession, Object packet, ProtocolEncoderOutput out)
+			throws Exception {
+		RdtPacket rdtPacket = (RdtPacket)packet;
+
+		if(logger.isDebugEnabled())
+			logger.debug("sending RDP packet: " + rdtPacket);
+		
+		out.write(rdtPacket.toByteBuffer());
+		out.flush();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.filter.codec.ProtocolEncoder#dispose(org.apache.mina.common.IoSession)
+	 */
+	public void dispose(IoSession arg0) throws Exception {
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramAcceptor.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramAcceptor.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramAcceptor.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -0,0 +1,40 @@
+/*
+ *   @(#) $Id: DatagramAcceptor.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio;
+
+import org.apache.mina.common.IoAcceptor;
+import org.apache.mina.common.support.DelegatedIoAcceptor;
+import org.apache.mina.transport.socket.nio.support.DatagramAcceptorDelegate;
+
+/**
+ * {@link IoAcceptor} for datagram transport (UDP/IP).
+ * 
+ * @author The Apache Directory Project (dev at directory.apache.org)
+ * @version $Rev: 355016 $, $Date: 2005-12-08 16:00:30 +0900 (Thu, 08 Dec 2005) $
+ */
+public class DatagramAcceptor extends DelegatedIoAcceptor
+{
+    /**
+     * Creates a new instance.
+     */
+    public DatagramAcceptor()
+    {
+        init( new DatagramAcceptorDelegate( this ) );
+    }
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramConnector.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramConnector.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramConnector.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -0,0 +1,40 @@
+/*
+ *   @(#) $Id: DatagramConnector.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio;
+
+import org.apache.mina.common.IoConnector;
+import org.apache.mina.common.support.DelegatedIoConnector;
+import org.apache.mina.transport.socket.nio.support.DatagramConnectorDelegate;
+
+/**
+ * {@link IoConnector} for datagram transport (UDP/IP).
+ * 
+ * @author The Apache Directory Project (dev at directory.apache.org)
+ * @version $Rev: 355016 $, $Date: 2005-12-08 16:00:30 +0900 (Thu, 08 Dec 2005) $
+ */
+public class DatagramConnector extends DelegatedIoConnector
+{
+    /**
+     * Creates a new instance.
+     */
+    public DatagramConnector()
+    {
+        init( new DatagramConnectorDelegate( this ) );
+    }
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramSession.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramSession.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramSession.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -0,0 +1,37 @@
+/*
+ *   @(#) $Id: DatagramSession.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio;
+
+import java.net.SocketException;
+
+import org.apache.mina.common.IoSession;
+
+/**
+ * An {@link IoSession} for datagram transport (UDP/IP).
+ * 
+ * @author The Apache Directory Project (dev at directory.apache.org)
+ * @version $Rev: 355016 $, $Date: 2005-12-08 16:00:30 +0900 (Thu, 08 Dec 2005) $
+ */
+public interface DatagramSession extends IoSession
+{
+    boolean getReuseAddress() throws SocketException;
+    void setReuseAddress( boolean on ) throws SocketException;
+    int getTrafficClass() throws SocketException;
+    void setTrafficClass( int tc ) throws SocketException;
+}
\ No newline at end of file

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramAcceptorDelegate.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramAcceptorDelegate.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramAcceptorDelegate.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -0,0 +1,615 @@
+/*
+ *   @(#) $Id: DatagramAcceptorDelegate.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio.support;
+
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.nio.channels.DatagramChannel;
+import java.nio.channels.SelectionKey;
+import java.nio.channels.Selector;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.mina.common.ByteBuffer;
+import org.apache.mina.common.ExceptionMonitor;
+import org.apache.mina.common.IoAcceptor;
+import org.apache.mina.common.IoFilterChainBuilder;
+import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoFilter.WriteRequest;
+import org.apache.mina.common.support.BaseIoAcceptor;
+import org.apache.mina.util.ExceptionUtil;
+import org.apache.mina.util.Queue;
+
+/**
+ * {@link IoAcceptor} for datagram transport (UDP/IP).
+ * 
+ * @author The Apache Directory Project (dev at directory.apache.org)
+ * @version $Rev: 355016 $, $Date: 2005-12-08 16:00:30 +0900 (Thu, 08 Dec 2005) $
+ */
+public class DatagramAcceptorDelegate extends BaseIoAcceptor implements IoAcceptor, DatagramSessionManager
+{
+    private static volatile int nextId = 0;
+
+    private final IoAcceptor wrapper;
+    private final int id = nextId ++ ;
+    private Selector selector;
+    private final Map channels = new HashMap();
+    private final Queue registerQueue = new Queue();
+    private final Queue cancelQueue = new Queue();
+    private final Queue flushingSessions = new Queue();
+    private Worker worker;
+
+    /**
+     * Creates a new instance.
+     */
+    public DatagramAcceptorDelegate( IoAcceptor wrapper )
+    {
+        this.wrapper = wrapper;
+    }
+
+    public void bind( SocketAddress address, IoHandler handler, IoFilterChainBuilder filterChainBuilder )
+            throws IOException
+    {
+        if( address == null )
+            throw new NullPointerException( "address" );
+        if( handler == null )
+            throw new NullPointerException( "handler" );
+
+        if( !( address instanceof InetSocketAddress ) )
+            throw new IllegalArgumentException( "Unexpected address type: "
+                                                + address.getClass() );
+        if( ( ( InetSocketAddress ) address ).getPort() == 0 )
+            throw new IllegalArgumentException( "Unsupported port number: 0" );
+        
+        if( filterChainBuilder == null )
+        {
+            filterChainBuilder = IoFilterChainBuilder.NOOP;
+        }
+
+        RegistrationRequest request = new RegistrationRequest( address, handler, filterChainBuilder );
+        synchronized( this )
+        {
+            synchronized( registerQueue )
+            {
+                registerQueue.push( request );
+            }
+            startupWorker();
+        }
+        selector.wakeup();
+        
+        synchronized( request )
+        {
+            while( !request.done )
+            {
+                try
+                {
+                    request.wait();
+                }
+                catch( InterruptedException e )
+                {
+                }
+            }
+        }
+        
+        if( request.exception != null )
+        {
+            ExceptionUtil.throwException( request.exception );
+        }
+    }
+
+    public void unbind( SocketAddress address )
+    {
+        // TODO: DIRMINA-93
+        if( address == null )
+            throw new NullPointerException( "address" );
+
+        CancellationRequest request = new CancellationRequest( address );
+        synchronized( this )
+        {
+            try
+            {
+                startupWorker();
+            }
+            catch( IOException e )
+            {
+                // IOException is thrown only when Worker thread is not
+                // running and failed to open a selector.  We simply throw
+                // IllegalArgumentException here because we can simply
+                // conclude that nothing is bound to the selector.
+                throw new IllegalArgumentException( "Address not bound: " + address );
+            }
+
+            synchronized( cancelQueue )
+            {
+                cancelQueue.push( request );
+            }
+        }
+        selector.wakeup();
+        
+        synchronized( request )
+        {
+            while( !request.done )
+            {
+                try
+                {
+                    request.wait();
+                }
+                catch( InterruptedException e )
+                {
+                }
+            }
+        }
+        
+        if( request.exception != null )
+        {
+            request.exception.fillInStackTrace();
+            throw request.exception;
+        }
+    }
+    
+    public IoSession newSession( SocketAddress remoteAddress, SocketAddress localAddress )
+    {
+        if( remoteAddress == null )
+        {
+            throw new NullPointerException( "remoteAddress" );
+        }
+        if( localAddress == null )
+        {
+            throw new NullPointerException( "localAddress" );
+        }
+        
+        Selector selector = this.selector;
+        DatagramChannel ch = ( DatagramChannel ) channels.get( localAddress );
+        if( selector == null || ch == null )
+        {
+            throw new IllegalArgumentException( "Unknown localAddress: " + localAddress );
+        }
+            
+        SelectionKey key = ch.keyFor( selector );
+        if( key == null )
+        {
+            throw new IllegalArgumentException( "Unknown localAddress: " + localAddress );
+        }
+
+        RegistrationRequest req = ( RegistrationRequest ) key.attachment();
+        DatagramSessionImpl s = new DatagramSessionImpl( wrapper, this, ch, req.handler );
+        s.setRemoteAddress( remoteAddress );
+        s.setSelectionKey( key );
+        
+        try
+        {
+            this.filterChainBuilder.buildFilterChain( s.getFilterChain() );
+            req.filterChainBuilder.buildFilterChain( s.getFilterChain() );
+            ( ( DatagramFilterChain ) s.getFilterChain() ).sessionCreated( s );
+        }
+        catch( Throwable t )
+        {
+            ExceptionMonitor.getInstance().exceptionCaught( t );
+        }
+        
+        return s;
+    }
+
+    private synchronized void startupWorker() throws IOException
+    {
+        if( worker == null )
+        {
+            selector = Selector.open();
+            worker = new Worker();
+            worker.start();
+        }
+    }
+
+    public void flushSession( DatagramSessionImpl session )
+    {
+        scheduleFlush( session );
+        Selector selector = this.selector;
+        if( selector != null )
+        {
+            selector.wakeup();
+        }
+    }
+
+    public void closeSession( DatagramSessionImpl session )
+    {
+    }
+
+    private void scheduleFlush( DatagramSessionImpl session )
+    {
+        synchronized( flushingSessions )
+        {
+            flushingSessions.push( session );
+        }
+    }
+
+    private class Worker extends Thread
+    {
+        public Worker()
+        {
+            super( "DatagramAcceptor-" + id );
+        }
+
+        public void run()
+        {
+            for( ;; )
+            {
+                try
+                {
+                    int nKeys = selector.select();
+
+                    registerNew();
+
+                    if( nKeys > 0 )
+                    {
+                        processReadySessions( selector.selectedKeys() );
+                    }
+
+                    flushSessions();
+                    cancelKeys();
+
+                    if( selector.keys().isEmpty() )
+                    {
+                        synchronized( DatagramAcceptorDelegate.this )
+                        {
+                            if( selector.keys().isEmpty() &&
+                                registerQueue.isEmpty() &&
+                                cancelQueue.isEmpty() )
+                            {
+                                worker = null;
+                                try
+                                {
+                                    selector.close();
+                                }
+                                catch( IOException e )
+                                {
+                                    ExceptionMonitor.getInstance().exceptionCaught( e );
+                                }
+                                finally
+                                {
+                                    selector = null;
+                                }
+                                break;
+                            }
+                        }
+                    }
+                }
+                catch( IOException e )
+                {
+                    ExceptionMonitor.getInstance().exceptionCaught( e );
+
+                    try
+                    {
+                        Thread.sleep( 1000 );
+                    }
+                    catch( InterruptedException e1 )
+                    {
+                    }
+                }
+            }
+        }
+    }
+
+    private void processReadySessions( Set keys )
+    {
+        Iterator it = keys.iterator();
+        while( it.hasNext() )
+        {
+            SelectionKey key = ( SelectionKey ) it.next();
+            it.remove();
+
+            DatagramChannel ch = ( DatagramChannel ) key.channel();
+
+            RegistrationRequest req = ( RegistrationRequest ) key.attachment();
+            DatagramSessionImpl session =
+                new DatagramSessionImpl( wrapper, this, ch, req.handler );
+            session.setSelectionKey( key );
+            
+            try
+            {
+                ( ( DatagramFilterChain ) session.getFilterChain() ).sessionCreated( session );
+
+                if( key.isReadable() )
+                {
+                    readSession( session );
+                }
+
+                if( key.isWritable() )
+                {
+                    scheduleFlush( session );
+                }
+            }
+            catch( Throwable t )
+            {
+                ExceptionMonitor.getInstance().exceptionCaught( t );
+            }
+        }
+    }
+
+    private void readSession( DatagramSessionImpl session )
+    {
+
+        ByteBuffer readBuf = ByteBuffer.allocate( 2048 );
+        try
+        {
+            SocketAddress remoteAddress = session.getChannel().receive(
+                    readBuf.buf() );
+            if( remoteAddress != null )
+            {
+                readBuf.flip();
+                session.setRemoteAddress( remoteAddress );
+
+                ByteBuffer newBuf = ByteBuffer.allocate( readBuf.limit() );
+                newBuf.put( readBuf );
+                newBuf.flip();
+
+                session.increaseReadBytes( newBuf.remaining() );
+                ( ( DatagramFilterChain ) session.getFilterChain() ).messageReceived( session, newBuf );
+            }
+        }
+        catch( IOException e )
+        {
+            ( ( DatagramFilterChain ) session.getFilterChain() ).exceptionCaught( session, e );
+        }
+        finally
+        {
+            readBuf.release();
+        }
+    }
+
+    private void flushSessions()
+    {
+        if( flushingSessions.size() == 0 )
+            return;
+
+        for( ;; )
+        {
+            DatagramSessionImpl session;
+
+            synchronized( flushingSessions )
+            {
+                session = ( DatagramSessionImpl ) flushingSessions.pop();
+            }
+
+            if( session == null )
+                break;
+
+            try
+            {
+                flush( session );
+            }
+            catch( IOException e )
+            {
+                ( ( DatagramFilterChain ) session.getFilterChain() ).exceptionCaught( session, e );
+            }
+        }
+    }
+
+    private void flush( DatagramSessionImpl session ) throws IOException
+    {
+        DatagramChannel ch = session.getChannel();
+
+        Queue writeRequestQueue = session.getWriteRequestQueue();
+
+        WriteRequest req;
+        for( ;; )
+        {
+            synchronized( writeRequestQueue )
+            {
+                req = ( WriteRequest ) writeRequestQueue.first();
+            }
+
+            if( req == null )
+                break;
+
+            ByteBuffer buf = ( ByteBuffer ) req.getMessage();
+            if( buf.remaining() == 0 )
+            {
+                // pop and fire event
+                synchronized( writeRequestQueue )
+                {
+                    writeRequestQueue.pop();
+                }
+
+                req.getFuture().setWritten( true );
+                session.increaseWrittenWriteRequests();
+                ( ( DatagramFilterChain ) session.getFilterChain() ).messageSent( session, buf );
+                continue;
+            }
+
+            SelectionKey key = session.getSelectionKey();
+            if( key == null )
+            {
+                scheduleFlush( session );
+                break;
+            }
+            if( !key.isValid() )
+            {
+                continue;
+            }
+
+            int pos = buf.position();
+            int writtenBytes = ch
+                    .send( buf.buf(), session.getRemoteAddress() );
+
+            if( writtenBytes == 0 )
+            {
+                // Kernel buffer is full
+                key.interestOps( key.interestOps() | SelectionKey.OP_WRITE );
+            }
+            else if( writtenBytes > 0 )
+            {
+                key.interestOps( key.interestOps()
+                                 & ( ~SelectionKey.OP_WRITE ) );
+
+                // pop and fire event
+                synchronized( writeRequestQueue )
+                {
+                    writeRequestQueue.pop();
+                }
+
+                session.increaseWrittenBytes( writtenBytes );
+                req.getFuture().setWritten( true );
+                session.increaseWrittenWriteRequests();
+                ( ( DatagramFilterChain ) session.getFilterChain() ).messageSent( session, buf.position( pos ) );
+            }
+        }
+    }
+
+    private void registerNew()
+    {
+        if( registerQueue.isEmpty() )
+            return;
+
+        for( ;; )
+        {
+            RegistrationRequest req;
+            synchronized( registerQueue )
+            {
+                req = ( RegistrationRequest ) registerQueue.pop();
+            }
+
+            if( req == null )
+                break;
+
+            DatagramChannel ch = null;
+            try
+            {
+                ch = DatagramChannel.open();
+                ch.configureBlocking( false );
+                ch.socket().bind( req.address );
+                ch.register( selector, SelectionKey.OP_READ, req );
+                channels.put( req.address, ch );
+            }
+            catch( Throwable t )
+            {
+                req.exception = t;
+            }
+            finally
+            {
+                synchronized( req )
+                {
+                    req.done = true;
+                    req.notify();
+                }
+
+                if( ch != null && req.exception != null )
+                {
+                    try
+                    {
+                        ch.close();
+                    }
+                    catch( Throwable e )
+                    {
+                        ExceptionMonitor.getInstance().exceptionCaught( e );
+                    }
+                }
+            }
+        }
+    }
+
+    private void cancelKeys()
+    {
+        if( cancelQueue.isEmpty() )
+            return;
+
+        for( ;; )
+        {
+            CancellationRequest request;
+            synchronized( cancelQueue )
+            {
+                request = ( CancellationRequest ) cancelQueue.pop();
+            }
+            
+            if( request == null )
+            {
+                break;
+            }
+
+            DatagramChannel ch = ( DatagramChannel ) channels.remove( request.address );
+            // close the channel
+            try
+            {
+                if( ch == null )
+                {
+                    request.exception = new IllegalArgumentException(
+                            "Address not bound: " + request.address );
+                }
+                else
+                {
+                    SelectionKey key = ch.keyFor( selector );
+                    key.cancel();
+                    selector.wakeup(); // wake up again to trigger thread death
+                    ch.close();
+                }
+            }
+            catch( Throwable t )
+            {
+                ExceptionMonitor.getInstance().exceptionCaught( t );
+            }
+            finally
+            {
+                synchronized( request )
+                {
+                    request.done = true;
+                    request.notify();
+                }
+            }
+        }
+    }
+    
+    public void updateTrafficMask( DatagramSessionImpl session )
+    {
+        // There's no point in changing the traffic mask for sessions originating
+        // from this acceptor since new sessions are created every time data is
+        // received.
+    }
+
+    private static class RegistrationRequest
+    {
+        private final SocketAddress address;
+        private final IoHandler handler;
+        private final IoFilterChainBuilder filterChainBuilder;
+
+        private Throwable exception; 
+        private boolean done;
+        
+        private RegistrationRequest( SocketAddress address, IoHandler handler, IoFilterChainBuilder filterChainBuilder )
+        {
+            this.address = address;
+            this.handler = handler;
+            this.filterChainBuilder = filterChainBuilder;
+        }
+    }
+
+    private static class CancellationRequest
+    {
+        private final SocketAddress address;
+        private boolean done;
+        private RuntimeException exception;
+        
+        private CancellationRequest( SocketAddress address )
+        {
+            this.address = address;
+        }
+    }
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramConnectorDelegate.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramConnectorDelegate.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramConnectorDelegate.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -0,0 +1,603 @@
+/*
+ *   @(#) $Id: DatagramConnectorDelegate.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio.support;
+
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.nio.channels.DatagramChannel;
+import java.nio.channels.SelectionKey;
+import java.nio.channels.Selector;
+import java.util.Iterator;
+import java.util.Set;
+
+import org.apache.mina.common.ByteBuffer;
+import org.apache.mina.common.ConnectFuture;
+import org.apache.mina.common.ExceptionMonitor;
+import org.apache.mina.common.IoConnector;
+import org.apache.mina.common.IoFilterChainBuilder;
+import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.IoFilter.WriteRequest;
+import org.apache.mina.common.support.BaseIoConnector;
+import org.apache.mina.util.Queue;
+
+/**
+ * {@link IoConnector} for datagram transport (UDP/IP).
+ * 
+ * @author The Apache Directory Project (dev at directory.apache.org)
+ * @version $Rev: 355016 $, $Date: 2005-12-08 16:00:30 +0900 (Thu, 08 Dec 2005) $
+ */
+public class DatagramConnectorDelegate extends BaseIoConnector implements DatagramSessionManager
+{
+    private static volatile int nextId = 0;
+
+    private final IoConnector wrapper;
+    private final int id = nextId ++ ;
+    private Selector selector;
+    private final Queue registerQueue = new Queue();
+    private final Queue cancelQueue = new Queue();
+    private final Queue flushingSessions = new Queue();
+    private final Queue trafficControllingSessions = new Queue();
+    private Worker worker;
+
+    /**
+     * Creates a new instance.
+     */
+    public DatagramConnectorDelegate( IoConnector wrapper )
+    {
+        this.wrapper = wrapper;
+    }
+
+    public ConnectFuture connect( SocketAddress address, IoHandler handler, IoFilterChainBuilder filterChainBuilder )
+    {
+        return connect( address, null, handler, filterChainBuilder );
+    }
+
+    public ConnectFuture connect( SocketAddress address, SocketAddress localAddress,
+                                  IoHandler handler, IoFilterChainBuilder filterChainBuilder )
+    {
+        if( address == null )
+            throw new NullPointerException( "address" );
+        if( handler == null )
+            throw new NullPointerException( "handler" );
+
+        if( !( address instanceof InetSocketAddress ) )
+            throw new IllegalArgumentException( "Unexpected address type: "
+                                                + address.getClass() );
+        
+        if( localAddress != null && !( localAddress instanceof InetSocketAddress ) )
+        {
+            throw new IllegalArgumentException( "Unexpected local address type: "
+                                                + localAddress.getClass() );
+        }
+        
+        if( filterChainBuilder == null )
+        {
+            filterChainBuilder = IoFilterChainBuilder.NOOP;
+        }
+        
+        DatagramChannel ch = null;
+        boolean initialized = false;
+        try
+        {
+            ch = DatagramChannel.open();
+            ch.socket().setReuseAddress( true );
+            if( localAddress != null )
+            {
+                ch.socket().bind( localAddress );
+            }
+            ch.connect( address );
+            ch.configureBlocking( false );
+            initialized = true;
+        }
+        catch( IOException e )
+        {
+            return ConnectFuture.newFailedFuture( e );
+        }
+        finally
+        {
+            if( !initialized && ch != null )
+            {
+                try
+                {
+                    ch.close();
+                }
+                catch( IOException e )
+                {
+                    ExceptionMonitor.getInstance().exceptionCaught( e );
+                }
+            }
+        }
+
+        RegistrationRequest request = new RegistrationRequest( ch, handler, filterChainBuilder );
+        synchronized( this )
+        {
+            try
+            {
+                startupWorker();
+            }
+            catch( IOException e )
+            {
+                try
+                {
+                    ch.close();
+                }
+                catch( IOException e2 )
+                {
+                    ExceptionMonitor.getInstance().exceptionCaught( e2 );
+                }
+
+                return ConnectFuture.newFailedFuture( e );
+            }
+            
+            synchronized( registerQueue )
+            {
+                registerQueue.push( request );
+            }
+        }
+
+        selector.wakeup();
+        return request;
+    }
+    
+    private synchronized void startupWorker() throws IOException
+    {
+        if( worker == null )
+        {
+            selector = Selector.open();
+            worker = new Worker();
+            worker.start();
+        }
+    }
+
+    public void closeSession( DatagramSessionImpl session )
+    {
+        synchronized( this )
+        {
+            try
+            {
+                startupWorker();
+            }
+            catch( IOException e )
+            {
+                // IOException is thrown only when Worker thread is not
+                // running and failed to open a selector.  We simply return
+                // silently here because it we can simply conclude that
+                // this session is not managed by this connector or
+                // already closed.
+                return;
+            }
+
+            synchronized( cancelQueue )
+            {
+                cancelQueue.push( session );
+            }
+        }
+
+        selector.wakeup();
+    }
+
+    public void flushSession( DatagramSessionImpl session )
+    {
+        scheduleFlush( session );
+        Selector selector = this.selector;
+        if( selector != null )
+        {
+            selector.wakeup();
+        }
+    }
+
+    private void scheduleFlush( DatagramSessionImpl session )
+    {
+        synchronized( flushingSessions )
+        {
+            flushingSessions.push( session );
+        }
+    }
+
+    public void updateTrafficMask( DatagramSessionImpl session )
+    {
+        scheduleTrafficControl( session );
+        Selector selector = this.selector;
+        if( selector != null )
+        {
+            selector.wakeup();
+        }
+        selector.wakeup();
+    }
+    
+    private void scheduleTrafficControl( DatagramSessionImpl session )
+    {
+        synchronized( trafficControllingSessions )
+        {
+            trafficControllingSessions.push( session );
+        }
+    }
+    
+    private void doUpdateTrafficMask() 
+    {
+        if( trafficControllingSessions.isEmpty() )
+            return;
+
+        for( ;; )
+        {
+            DatagramSessionImpl session;
+
+            synchronized( trafficControllingSessions )
+            {
+                session = ( DatagramSessionImpl ) trafficControllingSessions.pop();
+            }
+
+            if( session == null )
+                break;
+
+            SelectionKey key = session.getSelectionKey();
+            // Retry later if session is not yet fully initialized.
+            // (In case that Session.suspend??() or session.resume??() is 
+            // called before addSession() is processed)
+            if( key == null )
+            {
+                scheduleTrafficControl( session );
+                break;
+            }
+            // skip if channel is already closed
+            if( !key.isValid() )
+            {
+                continue;
+            }
+
+            // The normal is OP_READ and, if there are write requests in the
+            // session's write queue, set OP_WRITE to trigger flushing.
+            int ops = SelectionKey.OP_READ;
+            Queue writeRequestQueue = session.getWriteRequestQueue();
+            synchronized( writeRequestQueue )
+            {
+                if( !writeRequestQueue.isEmpty() )
+                {
+                    ops |= SelectionKey.OP_WRITE;
+                }
+            }
+
+            // Now mask the preferred ops with the mask of the current session
+            int mask = session.getTrafficMask().getInterestOps();
+            key.interestOps( ops & mask );
+        }
+    }
+    
+    private class Worker extends Thread
+    {
+        public Worker()
+        {
+            super( "DatagramConnector-" + id );
+        }
+
+        public void run()
+        {
+            for( ;; )
+            {
+                try
+                {
+                    int nKeys = selector.select();
+
+                    registerNew();
+                    doUpdateTrafficMask();
+
+                    if( nKeys > 0 )
+                    {
+                        processReadySessions( selector.selectedKeys() );
+                    }
+
+                    flushSessions();
+                    cancelKeys();
+
+                    if( selector.keys().isEmpty() )
+                    {
+                        synchronized( DatagramConnectorDelegate.this )
+                        {
+                            if( selector.keys().isEmpty() &&
+                                registerQueue.isEmpty() &&
+                                cancelQueue.isEmpty() )
+                            {
+                                worker = null;
+                                try
+                                {
+                                    selector.close();
+                                }
+                                catch( IOException e )
+                                {
+                                    ExceptionMonitor.getInstance().exceptionCaught( e );
+                                }
+                                finally
+                                {
+                                    selector = null;
+                                }
+                                break;
+                            }
+                        }
+                    }
+                }
+                catch( IOException e )
+                {
+                    ExceptionMonitor.getInstance().exceptionCaught(  e );
+
+                    try
+                    {
+                        Thread.sleep( 1000 );
+                    }
+                    catch( InterruptedException e1 )
+                    {
+                    }
+                }
+            }
+        }
+    }
+
+    private void processReadySessions( Set keys )
+    {
+        Iterator it = keys.iterator();
+        while( it.hasNext() )
+        {
+            SelectionKey key = ( SelectionKey ) it.next();
+            it.remove();
+
+            DatagramSessionImpl session = ( DatagramSessionImpl ) key.attachment();
+
+            if( key.isReadable() && session.getTrafficMask().isReadable() )
+            {
+                readSession( session );
+            }
+
+            if( key.isWritable() && session.getTrafficMask().isWritable() )
+            {
+                scheduleFlush( session );
+            }
+        }
+    }
+
+    private void readSession( DatagramSessionImpl session )
+    {
+
+        ByteBuffer readBuf = ByteBuffer.allocate( 2048 );
+        try
+        {
+            int readBytes = session.getChannel().read( readBuf.buf() );
+            if( readBytes > 0 )
+            {
+                readBuf.flip();
+                ByteBuffer newBuf = ByteBuffer.allocate( readBuf.limit() );
+                newBuf.put( readBuf );
+                newBuf.flip();
+
+                session.increaseReadBytes( readBytes );
+                ( ( DatagramFilterChain ) session.getFilterChain() ).messageReceived( session, newBuf );
+            }
+        }
+        catch( IOException e )
+        {
+            ( ( DatagramFilterChain ) session.getFilterChain() ).exceptionCaught( session, e );
+        }
+        finally
+        {
+            readBuf.release();
+        }
+    }
+
+    private void flushSessions()
+    {
+        if( flushingSessions.size() == 0 )
+            return;
+
+        for( ;; )
+        {
+            DatagramSessionImpl session;
+
+            synchronized( flushingSessions )
+            {
+                session = ( DatagramSessionImpl ) flushingSessions.pop();
+            }
+
+            if( session == null )
+                break;
+
+            try
+            {
+                flush( session );
+            }
+            catch( IOException e )
+            {
+                ( ( DatagramFilterChain ) session.getFilterChain() ).exceptionCaught( session, e );
+            }
+        }
+    }
+
+    private void flush( DatagramSessionImpl session ) throws IOException
+    {
+        DatagramChannel ch = session.getChannel();
+
+        Queue writeRequestQueue = session.getWriteRequestQueue();
+
+        WriteRequest req;
+        for( ;; )
+        {
+            synchronized( writeRequestQueue )
+            {
+                req = ( WriteRequest ) writeRequestQueue.first();
+            }
+
+            if( req == null )
+                break;
+
+            ByteBuffer buf = ( ByteBuffer ) req.getMessage();
+            if( buf.remaining() == 0 )
+            {
+                // pop and fire event
+                synchronized( writeRequestQueue )
+                {
+                    writeRequestQueue.pop();
+                }
+
+                req.getFuture().setWritten( true );
+                session.increaseWrittenWriteRequests();
+                ( ( DatagramFilterChain ) session.getFilterChain() ).messageSent( session, buf );
+                continue;
+            }
+
+            SelectionKey key = session.getSelectionKey();
+            if( key == null )
+            {
+                scheduleFlush( session );
+                break;
+            }
+            if( !key.isValid() )
+            {
+                continue;
+            }
+
+            int pos = buf.position();
+            int writtenBytes = ch.write( buf.buf() );
+
+            if( writtenBytes == 0 )
+            {
+                // Kernel buffer is full
+                key.interestOps( key.interestOps() | SelectionKey.OP_WRITE );
+            }
+            else if( writtenBytes > 0 )
+            {
+                key.interestOps( key.interestOps()
+                                 & ( ~SelectionKey.OP_WRITE ) );
+
+                // pop and fire event
+                synchronized( writeRequestQueue )
+                {
+                    writeRequestQueue.pop();
+                }
+
+                session.increaseWrittenBytes( writtenBytes );
+                req.getFuture().setWritten( true );
+                session.increaseWrittenWriteRequests();
+                ( ( DatagramFilterChain ) session.getFilterChain() ).messageSent( session, buf.position( pos ) );
+            }
+        }
+    }
+
+    private void registerNew()
+    {
+        if( registerQueue.isEmpty() )
+            return;
+
+        for( ;; )
+        {
+            RegistrationRequest req;
+            synchronized( registerQueue )
+            {
+                req = ( RegistrationRequest ) registerQueue.pop();
+            }
+
+            if( req == null )
+                break;
+
+            DatagramSessionImpl session =
+                new DatagramSessionImpl( wrapper, this, req.channel, req.handler );
+
+            boolean success = false;
+            try
+            {
+                this.filterChainBuilder.buildFilterChain( session.getFilterChain() );
+                req.filterChainBuilder.buildFilterChain( session.getFilterChain() );
+                ( ( DatagramFilterChain ) session.getFilterChain() ).sessionCreated( session );
+
+                SelectionKey key = req.channel.register( selector,
+                        SelectionKey.OP_READ, session );
+    
+                session.setSelectionKey( key );
+
+                req.setSession( session );
+                success = true;
+            }
+            catch( Throwable t )
+            {
+                req.setException( t );
+            }
+            finally 
+            {
+                if( !success )
+                {
+                    try
+                    {
+                        req.channel.close();
+                    }
+                    catch (IOException e)
+                    {
+                        ExceptionMonitor.getInstance().exceptionCaught( e );
+                    }
+                }
+            }
+        }
+    }
+
+    private void cancelKeys()
+    {
+        if( cancelQueue.isEmpty() )
+            return;
+
+        for( ;; )
+        {
+            DatagramSessionImpl session;
+            synchronized( cancelQueue )
+            {
+                session = ( DatagramSessionImpl ) cancelQueue.pop();
+            }
+
+            if( session == null )
+                break;
+            else
+            {
+                SelectionKey key = session.getSelectionKey();
+                DatagramChannel ch = ( DatagramChannel ) key.channel();
+                try
+                {
+                    ch.close();
+                }
+                catch( IOException e )
+                {
+                    ExceptionMonitor.getInstance().exceptionCaught( e );
+                }
+                session.getCloseFuture().setClosed();
+                key.cancel();
+                selector.wakeup(); // wake up again to trigger thread death
+            }
+        }
+    }
+
+    private static class RegistrationRequest extends ConnectFuture
+    {
+        private final DatagramChannel channel;
+        private final IoHandler handler;
+        private final IoFilterChainBuilder filterChainBuilder;
+
+        private RegistrationRequest( DatagramChannel channel,
+                                     IoHandler handler,
+                                     IoFilterChainBuilder filterChainBuilder )
+        {
+            this.channel = channel;
+            this.handler = handler;
+            this.filterChainBuilder = filterChainBuilder;
+        }
+    }
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramFilterChain.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramFilterChain.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramFilterChain.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -0,0 +1,51 @@
+package rtspproxy.transport.socket.nio.support;
+
+import org.apache.mina.common.CloseFuture;
+import org.apache.mina.common.IoFilterChain;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoFilter.WriteRequest;
+import org.apache.mina.common.support.AbstractIoFilterChain;
+import org.apache.mina.util.Queue;
+
+/**
+ * An {@link IoFilterChain} for datagram transport (UDP/IP).
+ * 
+ * @author The Apache Directory Project
+ */
+class DatagramFilterChain extends AbstractIoFilterChain {
+
+    DatagramFilterChain( IoSession parent )
+    {
+        super( parent );
+    }
+    
+    protected void doWrite( IoSession session, WriteRequest writeRequest )
+    {
+        DatagramSessionImpl s = ( DatagramSessionImpl ) session;
+        Queue writeRequestQueue = s.getWriteRequestQueue();
+        
+        synchronized( writeRequestQueue )
+        {
+            writeRequestQueue.push( writeRequest );
+            if( writeRequestQueue.size() == 1 && session.getTrafficMask().isWritable() )
+            {
+                // Notify DatagramSessionManager only when writeRequestQueue was empty.
+                s.getManagerDelegate().flushSession( s );
+            }
+        }
+    }
+
+    protected void doClose( IoSession session, CloseFuture closeFuture )
+    {
+        DatagramSessionImpl s = ( DatagramSessionImpl ) session;
+        DatagramSessionManager manager = s.getManagerDelegate();
+        if( manager instanceof DatagramConnectorDelegate )
+        {
+            ( ( DatagramConnectorDelegate ) manager ).closeSession( s );
+        }
+        else
+        {
+            closeFuture.setClosed();
+        }
+    }
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramSessionImpl.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramSessionImpl.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramSessionImpl.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -0,0 +1,174 @@
+/*
+ *   @(#) $Id: DatagramSessionImpl.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio.support;
+
+import java.net.SocketAddress;
+import java.net.SocketException;
+import java.nio.channels.DatagramChannel;
+import java.nio.channels.SelectionKey;
+
+import org.apache.mina.common.CloseFuture;
+import org.apache.mina.common.IoFilterChain;
+import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoSessionManager;
+import org.apache.mina.common.TransportType;
+import org.apache.mina.common.IoFilter.WriteRequest;
+import org.apache.mina.common.support.BaseIoSession;
+import org.apache.mina.transport.socket.nio.DatagramSession;
+import org.apache.mina.util.Queue;
+
+/**
+ * An {@link IoSession} for datagram transport (UDP/IP).
+ * 
+ * @author The Apache Directory Project (dev at directory.apache.org)
+ * @version $Rev: 355016 $, $Date: 2005-12-08 16:00:30 +0900 (Thu, 08 Dec 2005) $
+ */
+class DatagramSessionImpl extends BaseIoSession implements DatagramSession
+{
+    private final IoSessionManager wrapperManager;
+    private final DatagramSessionManager managerDelegate;
+    private final DatagramFilterChain filterChain;
+    private final DatagramChannel ch;
+    private final Queue writeRequestQueue;
+    private final IoHandler handler;
+    private final SocketAddress localAddress;
+    private SocketAddress remoteAddress;
+    private SelectionKey key;
+
+    /**
+     * Creates a new instance.
+     */
+    DatagramSessionImpl( IoSessionManager wrapperManager,
+                         DatagramSessionManager managerDelegate,
+                         DatagramChannel ch, IoHandler defaultHandler )
+    {
+        this.wrapperManager = wrapperManager;
+        this.managerDelegate = managerDelegate;
+        this.filterChain = new DatagramFilterChain( this );
+        this.ch = ch;
+        this.writeRequestQueue = new Queue();
+        this.handler = defaultHandler;
+        this.remoteAddress = ch.socket().getRemoteSocketAddress();
+        this.localAddress = ch.socket().getLocalSocketAddress();
+    }
+    
+    public IoSessionManager getManager()
+    {
+        return wrapperManager;
+    }
+    
+    DatagramSessionManager getManagerDelegate()
+    {
+        return managerDelegate;
+    }
+
+    public IoFilterChain getFilterChain()
+    {
+        return filterChain;
+    }
+
+    DatagramChannel getChannel()
+    {
+        return ch;
+    }
+
+    SelectionKey getSelectionKey()
+    {
+        return key;
+    }
+
+    void setSelectionKey( SelectionKey key )
+    {
+        this.key = key;
+    }
+
+    public IoHandler getHandler()
+    {
+        return handler;
+    }
+    
+    protected void close0( CloseFuture closeFuture )
+    {
+        filterChain.filterClose( this, closeFuture );
+    }
+
+    Queue getWriteRequestQueue()
+    {
+        return writeRequestQueue;
+    }
+
+    protected void write0( WriteRequest writeRequest )
+    {
+        filterChain.filterWrite( this, writeRequest );
+    }
+
+    public int getScheduledWriteRequests()
+    {
+        synchronized( writeRequestQueue )
+        {
+            return writeRequestQueue.size();
+        }
+    }
+
+    public TransportType getTransportType()
+    {
+        return TransportType.DATAGRAM;
+    }
+
+    public SocketAddress getRemoteAddress()
+    {
+        return remoteAddress;
+    }
+
+    void setRemoteAddress( SocketAddress remoteAddress )
+    {
+        this.remoteAddress = remoteAddress;
+    }
+
+    public SocketAddress getLocalAddress()
+    {
+        return localAddress;
+    }
+
+    public boolean getReuseAddress() throws SocketException
+    {
+        return ch.socket().getReuseAddress();
+    }
+
+    public void setReuseAddress( boolean on ) throws SocketException
+    {
+        ch.socket().setReuseAddress( on );
+    }
+
+    public int getTrafficClass() throws SocketException
+    {
+        return ch.socket().getTrafficClass();
+    }
+
+    public void setTrafficClass( int tc ) throws SocketException
+    {
+        ch.socket().setTrafficClass( tc );
+    }
+
+    protected void updateTrafficMask()
+    {
+        managerDelegate.updateTrafficMask( this );
+    }
+}
\ No newline at end of file

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramSessionManager.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramSessionManager.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramSessionManager.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -0,0 +1,48 @@
+/*
+ *   @(#) $Id: DatagramSessionManager.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio.support;
+
+import org.apache.mina.common.IoSessionManager;
+
+/**
+ * A base interface for {@link DatagramAcceptorDelegate} and {@link DatagramConnectorDelegate}.
+ * 
+ * @author The Apache Directory Project (dev at directory.apache.org)
+ * @version $Rev: 355016 $, $Date: 2005-12-08 16:00:30 +0900 (Thu, 08 Dec 2005) $
+ */
+interface DatagramSessionManager extends IoSessionManager
+{
+    /**
+     * Requests this processor to flush the write buffer of the specified
+     * session.  This method is invoked by MINA internally.
+     */
+    void flushSession( DatagramSessionImpl session );
+
+    /**
+     * Requests this processor to close the specified session.
+     * This method is invoked by MINA internally.
+     */
+    void closeSession( DatagramSessionImpl session );
+    
+    /**
+     * Requests this processor to update the traffic mask for the specified
+     * session. This method is invoked by MINA internally.
+     */
+    void updateTrafficMask( DatagramSessionImpl session );    
+}
\ No newline at end of file

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java	2006-01-10 18:48:44 UTC (rev 386)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java	2006-01-10 23:38:43 UTC (rev 387)
@@ -79,14 +79,16 @@
 	public static final boolean buffersEqual(ByteBuffer first, ByteBuffer second) {
 		boolean equal = false;
 		
-		System.out.println("first limit=" + first.limit() + ", second position=" + second.limit());
+		// System.out.println("first limit=" + first.limit() + ", second position=" + second.limit());
 		if(first.limit() == second.limit()) {
 			int i;
 			
 			for(i=0; i<first.limit(); ++i) {
 				if(first.get(i) != second.get(i)) {
+					/*
 					System.out.println("index " + i + ": expected=" + Integer.toHexString(first.get(i))
 							+ ": got=" + Integer.toHexString(second.get(i)));
+					*/
 					break;
 				}
 			}



From rbieniek at berlios.de  Wed Jan 11 05:12:48 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Wed, 11 Jan 2006 05:12:48 +0100
Subject: [Rtspproxy-devel] r388 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: . filter filter/tracking proxy proxy/track rdt transport/socket/nio transport/socket/nio/support
Message-ID: <200601110412.k0B4Cmws017843@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-11 05:12:35 +0100 (Wed, 11 Jan 2006)
New Revision: 388

Added:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionClientTrackingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionServerTrackingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionToken.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionTrackingFilter.java
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtFilterChainBuilder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramAcceptor.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramAcceptorDelegate.java
Log:
- Reworked tracking mechanism for RDT sessions. 
-- establishing the session seems to work now but player does not
 show anything. Need to figure out with a packet sniffer whats
 going on here.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -37,12 +37,12 @@
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
 import org.apache.mina.filter.ThreadPoolFilter;
-import org.apache.mina.transport.socket.nio.DatagramAcceptor;
 import org.apache.mina.transport.socket.nio.SocketAcceptor;
 
 import rtspproxy.config.Config;
 import rtspproxy.config.Parameter;
 import rtspproxy.lib.Singleton;
+import rtspproxy.transport.socket.nio.DatagramAcceptor;
 
 /**
  * Custom implementation of the ServiceRegistry interface. Creates an acceptor

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -42,6 +42,9 @@
 	// MBean name assigned by JMX interface
 	private ObjectName mbeanName;
 	
+	// chain name of filter
+	private String chainName;
+	
 	/**
 	 * 
 	 */
@@ -52,6 +55,14 @@
 	}
 
 	/**
+	 * 
+	 */
+	public FilterBase(String filterName, String typeName) {
+		this.filterName = filterName;
+		this.typeName = typeName;
+	}
+
+	/**
 	 * query running flag
 	 */
 	public final boolean isRunning() {
@@ -63,7 +74,7 @@
 	 */
 	public final void suspend() {
 		this.running = false;
-		logger.info("filter " + this.typeName + "/" + this.className + " suspended");
+		logger.info(getChainName() + " suspended");
 	}
 	
 	/**
@@ -71,7 +82,7 @@
 	 */
 	public final void resume() {
 		this.running = true;
-		logger.info("filter " + this.typeName + "/" + this.className + " resumed");
+		logger.info(getChainName() + " resumed");
 	}
 	
 	/**
@@ -130,7 +141,20 @@
 	 * get the chain name for the filter. 
 	 */
 	public String getChainName() {
-		return this.filterName +  "/" + this.typeName + "/" + this.className;
+		
+		if (this.chainName == null) {
+			StringBuffer buf = new StringBuffer(this.filterName);
+
+			buf.append("/");
+			buf.append(this.typeName);
+			if (this.className != null) {
+				buf.append("/");
+				buf.append(this.className);
+			}
+
+			this.chainName = buf.toString();
+		}
+		return this.chainName;
 	}
 	
 	/**

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -37,6 +37,7 @@
 		addAuthenticationFilter( chain );
 		addRewriteFilter( chain, Side.Client );
 		addAccountingFilter( chain, Side.Client );
+		addRdtSessionTrackingFilter( chain, Side.Client );
 	}
 
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -35,6 +35,9 @@
 import rtspproxy.filter.authentication.AuthenticationFilter;
 import rtspproxy.filter.ipaddress.IpAddressFilter;
 import rtspproxy.filter.rewrite.UrlRewritingFilter;
+import rtspproxy.filter.tracking.RdtSessionClientTrackingFilter;
+import rtspproxy.filter.tracking.RdtSessionServerTrackingFilter;
+import rtspproxy.filter.tracking.RdtSessionTrackingFilter;
 import rtspproxy.lib.Side;
 import rtspproxy.rtsp.RtspDecoder;
 import rtspproxy.rtsp.RtspEncoder;
@@ -70,8 +73,12 @@
 
 	public static final String rtspCodecNAME = "rtspCodec";
 
-	public static final String rewriteFilterNAME = "rewriteFilter";
-
+	private static final RdtSessionClientTrackingFilter rdtClientTrackingFilter = 
+		new RdtSessionClientTrackingFilter();
+	
+	private static final RdtSessionServerTrackingFilter rdtServerTrackingFilter = 
+		new RdtSessionServerTrackingFilter();
+	
 	/**
 	 * IP Address filter.
 	 * <p>
@@ -179,4 +186,15 @@
 			
 		}
 	}
+
+	protected void addRdtSessionTrackingFilter( IoFilterChain chain, Side side )
+	{
+		RdtSessionTrackingFilter filter = null;
+		if(side == Side.Client)
+			filter = rdtClientTrackingFilter;
+		else
+			filter = rdtServerTrackingFilter;
+		
+		chain.addAfter(rtspCodecNAME, filter.getChainName(), filter);
+	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -36,6 +36,7 @@
 		addRtspCodecFilter( chain );
 		addRewriteFilter( chain, Side.Server );
 		addAccountingFilter( chain, Side.Server );
+		addRdtSessionTrackingFilter( chain, Side.Server);
 	}
 
 }

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionClientTrackingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionClientTrackingFilter.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionClientTrackingFilter.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -0,0 +1,108 @@
+/**
+ * 
+ */
+package rtspproxy.filter.tracking;
+
+import java.net.InetSocketAddress;
+import java.net.URL;
+
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoFilter.NextFilter;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import rtspproxy.proxy.track.RdtTrack;
+import rtspproxy.rtsp.RtspRequest;
+import rtspproxy.rtsp.RtspTransport;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtSessionClientTrackingFilter extends RdtSessionTrackingFilter {
+
+	private static Logger logger = LoggerFactory.getLogger(RdtSessionClientTrackingFilter.class);
+	
+	// session attribute
+	private static final String SessionAttribute = "lastSetupURL";
+	
+	/**
+	 * @param filterName
+	 * @param typeName
+	 */
+	public RdtSessionClientTrackingFilter() {
+		super("client");
+	}
+
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.common.IoFilterAdapter#messageSent(org.apache.mina.common.IoFilter.NextFilter, org.apache.mina.common.IoSession, java.lang.Object)
+	 */
+	@Override
+	public void messageSent(NextFilter nextFilter, IoSession session, Object message) throws Exception {
+		handleMessage(session, message);
+		
+		nextFilter.messageSent(session, message);
+	}
+
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.common.IoFilterAdapter#messageReceived(org.apache.mina.common.IoFilter.NextFilter, org.apache.mina.common.IoSession, java.lang.Object)
+	 */
+	@Override
+	public void messageReceived(NextFilter nextFilter, IoSession session, Object message) throws Exception {
+		if(message instanceof RtspRequest) {
+			RtspRequest req = (RtspRequest)message;
+			
+			logger.debug("having RTSP request message, message=" + req);
+			if(req.getVerb() == RtspRequest.Verb.SETUP) {
+				logger.debug("having SETUP request");
+				
+				if(req.getUrl() != null) {
+					URL url = req.getUrl();
+					
+					logger.debug("requesting setup for " + url);
+					session.setAttribute(SessionAttribute, url);
+				}
+			}
+		}
+		
+		nextFilter.messageReceived(session, message);
+	}
+
+
+	@Override
+	protected void handleTransportRdtUdpUnicast(IoSession session, RtspTransport transport) {
+		logger.debug("handling client-side RDT/UDP/unicast header, header=" + transport);
+		
+		if(session.containsAttribute(RdtSessionToken.SessionAttribute)) {
+			RdtSessionToken token = (RdtSessionToken)session.getAttribute(RdtSessionToken.SessionAttribute);
+
+			logger.debug("have session token, server_addr=" + token.getRemoteServer() + ", server_port="
+					+ token.getRemotePort() + ", client_addr=" + session.getRemoteAddress() + 
+					", client_port=" + transport.getClientPort()[0]);
+			
+			// now we can create and initialise 
+			URL url = (URL)session.getAttribute(SessionAttribute);
+			
+			InetSocketAddress serverAddr = 
+				new InetSocketAddress(((InetSocketAddress)token.getRemoteServer()).getAddress(), token.getRemotePort());
+			
+			RdtTrack track;
+			if((track = (RdtTrack)RdtTrack.getByServerAddress(serverAddr)) ==  null) {
+				logger.debug("creating new RdtTrack");
+				
+				track = new RdtTrack(url.toString());
+			
+				track.setClientAddress(((InetSocketAddress)session.getRemoteAddress()).getAddress(), 
+						transport.getClientPort()[0]);
+				track.setServerAddress(serverAddr.getAddress(), serverAddr.getPort());
+			} /*else {
+				logger.debug("patching client parameter into existing track");
+
+				track.setClientAddress(((InetSocketAddress)session.getRemoteAddress()).getAddress(), 
+						transport.getClientPort()[0]);
+			} */
+		}
+	}
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionServerTrackingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionServerTrackingFilter.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionServerTrackingFilter.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -0,0 +1,46 @@
+/**
+ * 
+ */
+package rtspproxy.filter.tracking;
+
+import org.apache.mina.common.IoSession;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import rtspproxy.rtsp.RtspTransport;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtSessionServerTrackingFilter extends RdtSessionTrackingFilter {
+
+	private static Logger logger = LoggerFactory.getLogger(RdtSessionClientTrackingFilter.class);
+	
+	/**
+	 * @param typeName
+	 */
+	public RdtSessionServerTrackingFilter() {
+		super("server");
+	}
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.common.IoFilterAdapter#messageReceived(org.apache.mina.common.IoFilter.NextFilter, org.apache.mina.common.IoSession, java.lang.Object)
+	 */
+	@Override
+	public void messageReceived(NextFilter nextFilter, IoSession session, Object message) throws Exception {
+		handleMessage(session, message);
+		
+		nextFilter.messageReceived(session, message);
+	}
+
+	@Override
+	protected void handleTransportRdtUdpUnicast(IoSession session, RtspTransport transport) {
+		logger.debug("handling server-side RDT/UDP/unicast header, header=" + transport);
+		
+		session.setAttribute(RdtSessionToken.SessionAttribute, new RdtSessionToken(session.getRemoteAddress(),
+				transport.getServerPort()[0]));
+	}
+
+	
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionToken.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionToken.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionToken.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -0,0 +1,42 @@
+/**
+ * 
+ */
+package rtspproxy.filter.tracking;
+
+import java.net.SocketAddress;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RdtSessionToken {
+
+	// session attribute name
+	public static final String SessionAttribute = "rdtSessionTrackingToken";
+	
+	private SocketAddress remoteServer;
+	private int remotePort;
+	
+	/**
+	 * 
+	 */
+	public RdtSessionToken(SocketAddress remoteServer, int remotePort) {
+		this.remoteServer = remoteServer;
+		this.remotePort = remotePort;
+	}
+
+	/**
+	 * @return Returns the remotePort.
+	 */
+	public int getRemotePort() {
+		return remotePort;
+	}
+
+	/**
+	 * @return Returns the remoteServer.
+	 */
+	public SocketAddress getRemoteServer() {
+		return remoteServer;
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionTrackingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionTrackingFilter.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionTrackingFilter.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -0,0 +1,84 @@
+/**
+ * 
+ */
+package rtspproxy.filter.tracking;
+
+import java.net.URL;
+
+import org.apache.mina.common.IoSession;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import rtspproxy.config.Config;
+import rtspproxy.filter.FilterBase;
+import rtspproxy.rtsp.RtspRequest;
+import rtspproxy.rtsp.RtspResponse;
+import rtspproxy.rtsp.RtspTransport;
+import rtspproxy.rtsp.RtspTransportList;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public abstract class RdtSessionTrackingFilter extends FilterBase {
+	
+	private static Logger logger = LoggerFactory.getLogger(RdtSessionTrackingFilter.class);
+
+	public static final String FilterNAME = "rdtTrackingFilter";
+
+	/**
+	 * @param filterName
+	 * @param className
+	 * @param typeName
+	 */
+	public RdtSessionTrackingFilter(String typeName) {
+		super(FilterNAME, typeName);
+	}
+
+	/**
+	 * check the message for following conditions
+	 */
+	protected void handleMessage(IoSession session, Object message) {
+		if(Config.proxyTransportRdtEnable.getValue() && message instanceof RtspResponse) {
+			RtspResponse resp = (RtspResponse)message;
+			
+			logger.debug("analyzing RTSP response message");
+			if(resp.getRequestVerb() == RtspRequest.Verb.SETUP) {
+				logger.debug("found SETUP response");
+				
+				String transHdr = resp.getHeader("Transport");
+				
+				if(transHdr != null) {
+					logger.debug("SETUP response has transport header: " + transHdr);
+					
+					RtspTransportList rtl = new RtspTransportList(transHdr);
+					
+					if(rtl.count() == 1) {
+						// at this point we can only have one transport. Everything else is a protocol violation
+						RtspTransport transport = rtl.get(0);
+						
+						if(transport.getTransportProtocol() == RtspTransport.TransportProtocol.RDT) {
+							logger.debug("found RDT transport protocol");
+							
+							if(transport.getDeliveryType() == RtspTransport.DeliveryType.unicast
+									&& transport.getLowerTransport() == RtspTransport.LowerTransport.UDP) {
+								logger.debug("found RDT/UDP/unicast transport header, server_port=" 
+										+ transport.getServerPort()[0] + ", client_port=" 
+										+ transport.getClientPort()[0]);
+								
+								handleTransportRdtUdpUnicast(session, transport);
+							}
+						}
+					} else 
+						logger.error("found invalid transport header: " + transHdr);
+				}
+			}
+		}
+	}
+	
+	/**
+	 * handle the extracted RTSP response RDT/UDP/unicast transport header
+	 */
+	protected abstract void handleTransportRdtUdpUnicast(IoSession session, RtspTransport transport);
+	
+}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -53,6 +53,9 @@
 	@Override
 	public void sessionCreated( IoSession session ) throws Exception
 	{
+		/*
+		log.debug("new client-side RDT session created");
+
 		TrafficMask mask = session.getTrafficMask();
 		
 		try {
@@ -60,11 +63,14 @@
 			
 			IoFilterChain chain = session.getFilterChain();
 			
-			if(!chain.contains(RdtFilterChainBuilder.rdtCODEC)) 
+			if(!chain.contains(RdtFilterChainBuilder.rdtCODEC)) {
+				log.debug("hot-patching filter chain");
 				(new RdtFilterChainBuilder()).buildFilterChain(chain);
+			}
 		} finally {
 			session.setTrafficMask(mask);
 		}
+		*/
 	}
 
 	@Override

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -25,6 +25,7 @@
 import java.net.URL;
 import java.net.UnknownHostException;
 import java.nio.channels.UnresolvedAddressException;
+import java.util.HashMap;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -279,7 +280,8 @@
 	 * @param response
 	 *            Setup response message
 	 */
-	public void passSetupResponseToClient( RtspResponse response )
+	public void passSetupResponseToClient( RtspResponse response, 
+			HashMap<String, Object> passAlongAttrs )
 	{
 		// If there isn't yet a proxySession, create a new one
 		ProxySession proxySession = ProxySession.getByServerSessionID( response
@@ -296,6 +298,12 @@
 			proxySession.setServerSessionId( response.getHeader( "Session" ) );
 		}
 
+		// enter assed along attributes into session
+		for(String attr : passAlongAttrs.keySet()) {
+			log.debug("passing attribute " + attr + " into client session");
+			clientSession.setAttribute(attr, passAlongAttrs.get(attr));
+		}
+		
 		// Modify transport parameters for the client.
 		RtspTransportList rtspTransportList = new RtspTransportList( response
 				.getHeader( "Transport" ) );
@@ -354,9 +362,10 @@
 		} else if ( transport.getTransportProtocol() == TransportProtocol.RDT ) {
 
 			// Create a new Track object
+			/*
 			RdtTrack track = proxySession.addRdtTrack( (String) clientSession
 					.getAttribute( setupUrlATTR ) );
-
+					*/
 			// Setting client and server info on the track
 			InetAddress serverAddress = null;
 			if ( transport.getSource() != null ) {
@@ -370,7 +379,7 @@
 						.getAddress();
 			}
 			int[] serverPorts = transport.getServerPort();
-			track.setServerAddress( serverAddress, serverPorts[0] );
+			// track.setServerAddress( serverAddress, serverPorts[0] );
 
 			InetAddress clientAddress = null;
 			try {
@@ -382,7 +391,7 @@
 			}
 			int clientRdtPort = ((Integer) clientSession.getAttribute( clientRdtPortATTR ))
 					.intValue();
-			track.setClientAddress( clientAddress, clientRdtPort );
+			// track.setClientAddress( clientAddress, clientRdtPort );
 
 			if ( transport.getLowerTransport() == RtspTransport.LowerTransport.TCP ) {
 				log.debug( "Transport is TCP based." );

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -55,6 +55,9 @@
 	@Override
 	public void sessionCreated( IoSession session ) throws Exception
 	{
+		/*
+		log.debug("new server-side RDT session created");
+
 		TrafficMask mask = session.getTrafficMask();
 		
 		try {
@@ -62,11 +65,14 @@
 			
 			IoFilterChain chain = session.getFilterChain();
 			
-			if(!chain.contains(RdtFilterChainBuilder.rdtCODEC)) 
+			if(!chain.contains(RdtFilterChainBuilder.rdtCODEC))  {
+				log.debug("hot patching IoFilterChain");
 				(new RdtFilterChainBuilder()).buildFilterChain(chain);
+			}
 		} finally {
 			session.setTrafficMask(mask);
 		}
+		*/
 	}
 
 	@Override

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -13,11 +13,14 @@
 
 package rtspproxy.proxy;
 
+import java.util.HashMap;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
 
+import rtspproxy.filter.tracking.RdtSessionToken;
 import rtspproxy.lib.Exceptions;
 import rtspproxy.rtsp.RtspCode;
 import rtspproxy.rtsp.RtspMessage;
@@ -176,14 +179,15 @@
 		proxyHandler.passToClient( response );
 	}
 
-	public void onResponseSetup( ProxyHandler proxyHandler, RtspResponse response )
+	public void onResponseSetup( ProxyHandler proxyHandler, RtspResponse response, 
+			HashMap<String, Object> passAlongAttrs )
 	{
 		log.debug( "RESPONSE SETUP" );
 		if ( response.getCode() != RtspCode.OK )
 			// Report the error to the client
 			proxyHandler.passToClient( response );
 		else
-			proxyHandler.passSetupResponseToClient( response );
+			proxyHandler.passSetupResponseToClient( response, passAlongAttrs );
 	}
 
 	public void onResponseTeardown( ProxyHandler proxyHandler, RtspResponse response )
@@ -277,7 +281,7 @@
 						onResponseSetParam( proxyHandler, response );
 						break;
 					case SETUP:
-						onResponseSetup( proxyHandler, response );
+						onResponseSetup( proxyHandler, response, buildPassAlongAttrs(session) );
 						break;
 					case TEARDOWN:
 						onResponseTeardown( proxyHandler, response );
@@ -290,4 +294,16 @@
 				break;
 		}
 	}
+	
+	private HashMap<String, Object> buildPassAlongAttrs(IoSession session) {
+		HashMap<String, Object> map = new HashMap<String, Object>();
+		
+		if(session.containsAttribute(RdtSessionToken.SessionAttribute)) {
+			log.debug("passing session attribute " + RdtSessionToken.SessionAttribute);
+			map.put(RdtSessionToken.SessionAttribute, 
+					session.getAttribute(RdtSessionToken.SessionAttribute));
+		}
+		
+		return map;
+	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -84,7 +84,7 @@
 		// packet.reset();
 		// log.debug("Packet: " + packet );
 		// log.debug( "Written bytes1: " + rdtServerSession.getWrittenBytes() );
-		rdtServerSession.write( packet.toByteBuffer() );
+		rdtServerSession.write( packet );
 		// log.debug( "Written bytes2: " + rdtServerSession.getWrittenBytes() );
 	}
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtFilterChainBuilder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtFilterChainBuilder.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtFilterChainBuilder.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -20,6 +20,8 @@
 	// filter name fields
 	public static final String rdtCODEC = "rdtProtocolCodec";
 	
+	// shared protocol codec filter
+	private ProtocolCodecFilter codecFilter =  new ProtocolCodecFilter(codecFactory);
 	/**
 	 * 
 	 */
@@ -31,7 +33,7 @@
 	 */
 	public void buildFilterChain(IoFilterChain chain) throws Exception {
 		
-		chain.addLast(rdtCODEC, new ProtocolCodecFilter(codecFactory));
+		chain.addLast(rdtCODEC, codecFilter);
 	}
 
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramAcceptor.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramAcceptor.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/DatagramAcceptor.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -20,7 +20,7 @@
 
 import org.apache.mina.common.IoAcceptor;
 import org.apache.mina.common.support.DelegatedIoAcceptor;
-import org.apache.mina.transport.socket.nio.support.DatagramAcceptorDelegate;
+import rtspproxy.transport.socket.nio.support.DatagramAcceptorDelegate;
 
 /**
  * {@link IoAcceptor} for datagram transport (UDP/IP).

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramAcceptorDelegate.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramAcceptorDelegate.java	2006-01-10 23:38:43 UTC (rev 387)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/DatagramAcceptorDelegate.java	2006-01-11 04:12:35 UTC (rev 388)
@@ -326,6 +326,9 @@
             
             try
             {
+            	
+                this.filterChainBuilder.buildFilterChain( session.getFilterChain() );
+                req.filterChainBuilder.buildFilterChain( session.getFilterChain() );
                 ( ( DatagramFilterChain ) session.getFilterChain() ).sessionCreated( session );
 
                 if( key.isReadable() )



From rbieniek at berlios.de  Thu Jan 12 23:49:31 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Thu, 12 Jan 2006 23:49:31 +0100
Subject: [Rtspproxy-devel] r389 - trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite
Message-ID: <200601122249.k0CMnVwc018299@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-12 23:49:29 +0100 (Thu, 12 Jan 2006)
New Revision: 389

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/ClientUrlRewritingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java
Log:
- reworked the rewriting filter interface a bit by including RTSP
 request verb and client IP address.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/ClientUrlRewritingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/ClientUrlRewritingFilter.java	2006-01-11 04:12:35 UTC (rev 388)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/ClientUrlRewritingFilter.java	2006-01-12 22:49:29 UTC (rev 389)
@@ -46,7 +46,7 @@
 				RtspMessage rtspMessage = (RtspMessage) message;
 
 				if (rtspMessage.getType() == RtspMessage.Type.TypeRequest)
-					processRequest((RtspRequest)rtspMessage);
+					processRequest(session, (RtspRequest)rtspMessage);
 			} else {
 					logger.error("Expecting a RtspMessage. Received a "
 						+ message.getClass().getName());

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-01-11 04:12:35 UTC (rev 388)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-01-12 22:49:29 UTC (rev 389)
@@ -54,9 +54,9 @@
 	/**
 	 * process a request message
 	 */
-	protected void processRequest(RtspRequest req) {
+	protected void processRequest(IoSession session, RtspRequest req) {
 		if (req.getUrl() != null) {
-			URL rewritten = this.provider.rewriteRequestUrl(req.getUrl());
+			URL rewritten = this.provider.rewriteRequestUrl(req.getUrl(), req.getVerb(), session.getRemoteAddress());
 
 			if (rewritten != null) {
 				logger.debug("changed request URL from '" + req.getUrl()

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java	2006-01-11 04:12:35 UTC (rev 388)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java	2006-01-12 22:49:29 UTC (rev 389)
@@ -17,9 +17,11 @@
  */
 package rtspproxy.filter.rewrite;
 
+import java.net.SocketAddress;
 import java.net.URL;
 
 import rtspproxy.filter.GenericProvider;
+import rtspproxy.rtsp.RtspRequest;
 
 /**
  * This filter is used to rewrite the requested URL before passing it
@@ -32,7 +34,7 @@
 	 * rewrite the request URL.
 	 * @return a replacement URL or null if the URL is not to be modified.
 	 */
-	public URL rewriteRequestUrl(URL request);
+	public URL rewriteRequestUrl(URL request, RtspRequest.Verb verb, SocketAddress client);
 
 	/**
 	 * rewrite an URL in a response header.



From rbieniek at berlios.de  Thu Jan 12 23:49:35 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Thu, 12 Jan 2006 23:49:35 +0100
Subject: [Rtspproxy-devel] r390 - trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite
Message-ID: <200601122249.k0CMnZuq018311@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-12 23:49:33 +0100 (Thu, 12 Jan 2006)
New Revision: 390

Modified:
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java
Log:
- reworked the rewriting filter interface a bit by including RTSP
 request verb and client IP address.

Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java	2006-01-12 22:49:29 UTC (rev 389)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java	2006-01-12 22:49:33 UTC (rev 390)
@@ -6,6 +6,7 @@
 import org.apache.log4j.Logger;
 
 import java.net.MalformedURLException;
+import java.net.SocketAddress;
 import java.net.URL;
 import java.util.HashMap;
 import java.util.List;
@@ -14,6 +15,7 @@
 
 import rtspproxy.config.AAAConfigurable;
 import rtspproxy.filter.GenericProviderAdapter;
+import rtspproxy.rtsp.RtspRequest;
 
 /**
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
@@ -36,7 +38,7 @@
 	/* (non-Javadoc)
 	 * @see rtspproxy.filter.rewrite.UrlRewritingProvider#rewriteRequestUrl(java.net.URL)
 	 */
-	public URL rewriteRequestUrl(URL request) {
+	public URL rewriteRequestUrl(URL request, RtspRequest.Verb verb, SocketAddress client) {
 		URL rewritten = null;
 		String req = request.toString();
 		



From rbieniek at berlios.de  Sat Jan 14 00:38:11 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Sat, 14 Jan 2006 00:38:11 +0100
Subject: [Rtspproxy-devel] r391 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: . filter/tracking proxy proxy/track rdt
Message-ID: <200601132338.k0DNcBUP023866@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-14 00:37:40 +0100 (Sat, 14 Jan 2006)
New Revision: 391

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionClientTrackingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionServerTrackingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtFilterChainBuilder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolEncoder.java
Log:
- continued work on RDT traffic handling.
- Found serious bug in RTSP parsing code. RTSPDecoder cannot cope
with back-to-back RTSP request packets (and, of course, RTSP response
messages as well)

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -32,6 +32,7 @@
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.IoSession;
 import org.apache.mina.common.TransportType;
+import org.apache.mina.filter.ThreadPoolFilter;
 
 import rtspproxy.config.Parameter;
 import rtspproxy.lib.Exceptions;
@@ -266,4 +267,20 @@
 			throw new RuntimeException( e );
 		}
 	}
+
+	/**
+	 * service may provide their own ThreadPoolFilter instances.
+	 * @return a ThreadPoolFilter instance or null if the service wants to use the shared instance.
+	 * 
+	 */
+	public ThreadPoolFilter getThreadPoolFilter() {
+		return null;
+	}
+	
+	/**
+	 * flag if the service wants to use a ThreadPoolFilter at all
+	 */
+	public boolean wantThreadPoolFilter() {
+		return true;
+	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -58,7 +58,7 @@
 	public static final String threadPoolFilterNAME = "threadPoolFilter";
 
 	/** Thread pool instance that will be added to all acceptors. */
-	private final ThreadPoolFilter threadPoolFilter = new ThreadPoolFilter();
+	private final ThreadPoolFilter threadPoolFilter = new ThreadPoolFilter("sharedThreadPoolFilter");
 
 	/** All the services, mapped by name. */
 	private final ConcurrentMap<String, ProxyService> services = new ConcurrentHashMap<String, ProxyService>();
@@ -273,11 +273,17 @@
 	}
 
 	/**
+	 * @param service 
+	 * @param service 
 	 * @return the shared thread pool filter instance
 	 */
-	public IoFilter getThreadPoolFilterInstance()
+	public IoFilter getThreadPoolFilterInstance(ProxyService service)
 	{
-		return threadPoolFilter;
+		ThreadPoolFilter filter = service.getThreadPoolFilter();
+
+		if(filter == null)
+			filter = threadPoolFilter;
+		return filter;
 	}
 
 	/**
@@ -312,9 +318,11 @@
 		{
 			chain.getSession().setAttribute( ProxyService.SERVICE, service );
 
-			IoFilter threadPoolFilter = ProxyServiceRegistry.getInstance()
-					.getThreadPoolFilterInstance();
-			chain.addFirst( threadPoolFilterNAME, threadPoolFilter );
+			if(service.wantThreadPoolFilter()) {
+				IoFilter threadPoolFilter = ProxyServiceRegistry.getInstance()
+				.getThreadPoolFilterInstance(service);
+				chain.addFirst( threadPoolFilterNAME, threadPoolFilter );
+			}
 			originalBuilder.buildFilterChain( chain );
 		}
 	}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -24,6 +24,7 @@
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.IoSession;
 import org.apache.mina.common.TransportType;
+import org.apache.mina.filter.ThreadPoolFilter;
 
 import rtspproxy.config.Config;
 import rtspproxy.config.Parameter;
@@ -113,4 +114,22 @@
 		return this.filterChainBuilder;
 	}
 
+	/* (non-Javadoc)
+	 * @see rtspproxy.ProxyService#getThreadPoolFilter()
+	 */
+	@Override
+	public ThreadPoolFilter getThreadPoolFilter() {
+		ThreadPoolFilter filter = new ThreadPoolFilter("rdtClientThreadPoolFilter");
+		
+		filter.setMaximumPoolSize(5);
+		return filter;
+	}
+
+	/**
+	 * flag if the service wants to use a ThreadPoolFilter at all
+	 */
+	public boolean wantThreadPoolFilter() {
+		return false;
+	}
+
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -24,6 +24,7 @@
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.IoSession;
 import org.apache.mina.common.TransportType;
+import org.apache.mina.filter.ThreadPoolFilter;
 
 import rtspproxy.config.Config;
 import rtspproxy.config.Parameter;
@@ -110,4 +111,22 @@
 		return this.filterChainBuilder;
 	}
 
+	/* (non-Javadoc)
+	 * @see rtspproxy.ProxyService#getThreadPoolFilter()
+	 */
+	@Override
+	public ThreadPoolFilter getThreadPoolFilter() {
+		ThreadPoolFilter filter = new ThreadPoolFilter("rdtServerThreadPoolFilter");
+		
+		filter.setMaximumPoolSize(5);
+		return filter;
+	}
+
+	/**
+	 * flag if the service wants to use a ThreadPoolFilter at all
+	 */
+	public boolean wantThreadPoolFilter() {
+		return false;
+	}
+
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionClientTrackingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionClientTrackingFilter.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionClientTrackingFilter.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -11,6 +11,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import rtspproxy.proxy.ProxyHandler;
 import rtspproxy.proxy.track.RdtTrack;
 import rtspproxy.rtsp.RtspRequest;
 import rtspproxy.rtsp.RtspTransport;
@@ -42,6 +43,8 @@
 	public void messageSent(NextFilter nextFilter, IoSession session, Object message) throws Exception {
 		handleMessage(session, message);
 		
+		logger.debug("sending response to client: " + message);
+		
 		nextFilter.messageSent(session, message);
 	}
 
@@ -75,34 +78,34 @@
 	protected void handleTransportRdtUdpUnicast(IoSession session, RtspTransport transport) {
 		logger.debug("handling client-side RDT/UDP/unicast header, header=" + transport);
 		
-		if(session.containsAttribute(RdtSessionToken.SessionAttribute)) {
-			RdtSessionToken token = (RdtSessionToken)session.getAttribute(RdtSessionToken.SessionAttribute);
+		try {
+			if(ProxyHandler.containsSharedSessionAttribute(session, RdtSessionToken.SessionAttribute)) {
+				RdtSessionToken token = (RdtSessionToken)ProxyHandler.getSharedSessionAttribute(session, 
+						RdtSessionToken.SessionAttribute);
 
-			logger.debug("have session token, server_addr=" + token.getRemoteServer() + ", server_port="
-					+ token.getRemotePort() + ", client_addr=" + session.getRemoteAddress() + 
-					", client_port=" + transport.getClientPort()[0]);
-			
-			// now we can create and initialise 
-			URL url = (URL)session.getAttribute(SessionAttribute);
-			
-			InetSocketAddress serverAddr = 
-				new InetSocketAddress(((InetSocketAddress)token.getRemoteServer()).getAddress(), token.getRemotePort());
-			
-			RdtTrack track;
-			if((track = (RdtTrack)RdtTrack.getByServerAddress(serverAddr)) ==  null) {
-				logger.debug("creating new RdtTrack");
+				logger.debug("have session token, server_addr=" + token.getRemoteServer() + ", server_port="
+						+ token.getRemotePort() + ", client_addr=" + session.getRemoteAddress() + 
+						", client_port=" + transport.getClientPort()[0]);
 				
-				track = new RdtTrack(url.toString());
-			
-				track.setClientAddress(((InetSocketAddress)session.getRemoteAddress()).getAddress(), 
-						transport.getClientPort()[0]);
-				track.setServerAddress(serverAddr.getAddress(), serverAddr.getPort());
-			} /*else {
-				logger.debug("patching client parameter into existing track");
-
-				track.setClientAddress(((InetSocketAddress)session.getRemoteAddress()).getAddress(), 
-						transport.getClientPort()[0]);
-			} */
+				// now we can create and initialise 
+				URL url = (URL)session.getAttribute(SessionAttribute);
+				
+				InetSocketAddress serverAddr = 
+					new InetSocketAddress(((InetSocketAddress)token.getRemoteServer()).getAddress(), token.getRemotePort());
+				
+				RdtTrack track;
+				if((track = (RdtTrack)RdtTrack.getByServerAddress(serverAddr)) ==  null) {
+					logger.debug("creating new RdtTrack");
+					
+					track = new RdtTrack(url.toString());
+				
+					track.setClientAddress(((InetSocketAddress)session.getRemoteAddress()).getAddress(), 
+							transport.getClientPort()[0]);
+					track.setServerAddress(serverAddr.getAddress(), serverAddr.getPort());
+				}
+			}
+		} catch (Throwable t) {
+			logger.error("runtime exception in RDP session handling code", t);
 		}
 	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionServerTrackingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionServerTrackingFilter.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionServerTrackingFilter.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -7,6 +7,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import rtspproxy.proxy.ProxyHandler;
 import rtspproxy.rtsp.RtspTransport;
 
 /**
@@ -15,7 +16,7 @@
  */
 public class RdtSessionServerTrackingFilter extends RdtSessionTrackingFilter {
 
-	private static Logger logger = LoggerFactory.getLogger(RdtSessionClientTrackingFilter.class);
+	private static Logger logger = LoggerFactory.getLogger(RdtSessionServerTrackingFilter.class);
 	
 	/**
 	 * @param typeName
@@ -38,7 +39,8 @@
 	protected void handleTransportRdtUdpUnicast(IoSession session, RtspTransport transport) {
 		logger.debug("handling server-side RDT/UDP/unicast header, header=" + transport);
 		
-		session.setAttribute(RdtSessionToken.SessionAttribute, new RdtSessionToken(session.getRemoteAddress(),
+		ProxyHandler.setSharedSessionAttribute(session, RdtSessionToken.SessionAttribute, 
+				new RdtSessionToken(session.getRemoteAddress(),
 				transport.getServerPort()[0]));
 	}
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -75,6 +75,10 @@
 
 	private IoSession serverSession = null;
 
+	private HashMap<String, Object> sharedSessionObjects = new HashMap<String, Object>();
+	
+	private static final String sharedSessionAttribute = "__SharedSessionArttributes";
+	
 	/**
 	 * Creates a new ProxyHandler from a client side protocol session.
 	 * 
@@ -83,6 +87,7 @@
 	public ProxyHandler( IoSession clientSession )
 	{
 		this.clientSession = clientSession;
+		this.clientSession.setAttribute(sharedSessionAttribute, sharedSessionObjects);
 	}
 
 	public void passToServer( RtspMessage message )
@@ -280,8 +285,7 @@
 	 * @param response
 	 *            Setup response message
 	 */
-	public void passSetupResponseToClient( RtspResponse response, 
-			HashMap<String, Object> passAlongAttrs )
+	public void passSetupResponseToClient( RtspResponse response )
 	{
 		// If there isn't yet a proxySession, create a new one
 		ProxySession proxySession = ProxySession.getByServerSessionID( response
@@ -297,12 +301,6 @@
 		if ( proxySession.getServerSessionId() == null ) {
 			proxySession.setServerSessionId( response.getHeader( "Session" ) );
 		}
-
-		// enter assed along attributes into session
-		for(String attr : passAlongAttrs.keySet()) {
-			log.debug("passing attribute " + attr + " into client session");
-			clientSession.setAttribute(attr, passAlongAttrs.get(attr));
-		}
 		
 		// Modify transport parameters for the client.
 		RtspTransportList rtspTransportList = new RtspTransportList( response
@@ -468,10 +466,46 @@
 		// Save current ProxyHandler into the ProtocolSession
 		serverSession.setAttribute( ProxyHandler.ATTR, this );
 
+		serverSession.setAttribute(sharedSessionAttribute, sharedSessionObjects);
+		
 		log.debug( "Server session: " + serverSession.getAttributeKeys() );
 	}
 
 	/**
+	 * set an object in the shared objects map
+	 */
+	public static void setSharedSessionAttribute(IoSession session, String name, Object value) {
+		HashMap<String, Object> map = (HashMap<String, Object>)session.getAttribute(sharedSessionAttribute);
+		
+		synchronized (map) {
+			map.put(name, value);
+		}
+	}
+	
+	public static Object getSharedSessionAttribute(IoSession session, String name) {
+		Object v = null;
+		HashMap<String, Object> map = (HashMap<String, Object>)session.getAttribute(sharedSessionAttribute);
+		
+		synchronized (map) {
+			v = map.get(name);
+		}
+		
+		return v;
+	}
+	
+	public static final boolean containsSharedSessionAttribute(IoSession session, String name) {
+		boolean v = false;
+		HashMap<String, Object> map = (HashMap<String, Object>)session.getAttribute(sharedSessionAttribute);
+		
+		synchronized (map) {
+			v = map.containsKey(name);
+		}
+		
+		return v;
+		
+	}
+	
+	/**
 	 * Closes both sides of communication.
 	 */
 	public synchronized void closeAll()

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -179,15 +179,14 @@
 		proxyHandler.passToClient( response );
 	}
 
-	public void onResponseSetup( ProxyHandler proxyHandler, RtspResponse response, 
-			HashMap<String, Object> passAlongAttrs )
+	public void onResponseSetup( ProxyHandler proxyHandler, RtspResponse response )
 	{
 		log.debug( "RESPONSE SETUP" );
 		if ( response.getCode() != RtspCode.OK )
 			// Report the error to the client
 			proxyHandler.passToClient( response );
 		else
-			proxyHandler.passSetupResponseToClient( response, passAlongAttrs );
+			proxyHandler.passSetupResponseToClient( response );
 	}
 
 	public void onResponseTeardown( ProxyHandler proxyHandler, RtspResponse response )
@@ -281,7 +280,7 @@
 						onResponseSetParam( proxyHandler, response );
 						break;
 					case SETUP:
-						onResponseSetup( proxyHandler, response, buildPassAlongAttrs(session) );
+						onResponseSetup( proxyHandler, response );
 						break;
 					case TEARDOWN:
 						onResponseTeardown( proxyHandler, response );
@@ -294,16 +293,4 @@
 				break;
 		}
 	}
-	
-	private HashMap<String, Object> buildPassAlongAttrs(IoSession session) {
-		HashMap<String, Object> map = new HashMap<String, Object>();
-		
-		if(session.containsAttribute(RdtSessionToken.SessionAttribute)) {
-			log.debug("passing session attribute " + RdtSessionToken.SessionAttribute);
-			map.put(RdtSessionToken.SessionAttribute, 
-					session.getAttribute(RdtSessionToken.SessionAttribute));
-		}
-		
-		return map;
-	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -84,6 +84,7 @@
 		// packet.reset();
 		// log.debug("Packet: " + packet );
 		// log.debug( "Written bytes1: " + rdtServerSession.getWrittenBytes() );
+		
 		rdtServerSession.write( packet );
 		// log.debug( "Written bytes2: " + rdtServerSession.getWrittenBytes() );
 	}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtFilterChainBuilder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtFilterChainBuilder.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtFilterChainBuilder.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -7,6 +7,8 @@
 import org.apache.mina.common.IoFilterChainBuilder;
 import org.apache.mina.filter.codec.ProtocolCodecFilter;
 
+import rtspproxy.ProxyServiceRegistry;
+
 /**
  * Builds filter chain operating on RDT connection.
  * 
@@ -32,7 +34,6 @@
 	 * @see org.apache.mina.common.IoFilterChainBuilder#buildFilterChain(org.apache.mina.common.IoFilterChain)
 	 */
 	public void buildFilterChain(IoFilterChain chain) throws Exception {
-		
 		chain.addLast(rdtCODEC, codecFilter);
 	}
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -76,6 +76,9 @@
 		}
 	};
 	
+	// id field
+	private int id = IdDispenser.nextId();
+	
 	// type field
 	private Type type = Type.None;
 	
@@ -187,7 +190,7 @@
 	public final String toString() {
 		StringBuffer buf = new StringBuffer();
 
-		buf.append("packet[type=" + type);
+		buf.append("packet[id=" + id +" type=" + type);
 		buf.append(" needReliable=" + this.needReliable);
 		buf.append(" streamId=" + this.streamId);
 		toStringHelper(buf);
@@ -261,4 +264,22 @@
 		return buf;
 	}
 	
+	/**
+	 * Simple ID counter
+	 */
+	private static class IdDispenser {
+		private int curId = 0;
+		
+		private static IdDispenser instance = new IdDispenser();
+		
+		private IdDispenser() {}
+		
+		public static final int nextId() {
+			return instance.getNextId();
+		}
+		
+		private synchronized int getNextId() {
+			return curId++;
+		}
+	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -65,6 +65,7 @@
 		seqHi = data[ind++];
 		seqLo = data[ind++];
 		sequence = decodeShort(seqHi, seqLo);
+		logger.debug("decoded sequence: " + Integer.toHexString(sequence));
 		
 		if(seqHi < 0 ) {
 			logger.debug("decoding control packet");

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -33,7 +33,7 @@
 		RdtPacket rdtPacket = RdtPacketDecoder.decode(buffer);
 	
 		if(logger.isDebugEnabled())
-			logger.debug("received RDT packet: " + rdtPacket);
+			logger.debug("received RDT packet: " + rdtPacket + " from client " + ioSession.getRemoteAddress());
 
 		if(rdtPacket == null)
 			throw new IllegalStateException("RDT network packet cannot be decoded");

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolEncoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolEncoder.java	2006-01-12 22:49:33 UTC (rev 390)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolEncoder.java	2006-01-13 23:37:40 UTC (rev 391)
@@ -31,10 +31,10 @@
 		RdtPacket rdtPacket = (RdtPacket)packet;
 
 		if(logger.isDebugEnabled())
-			logger.debug("sending RDP packet: " + rdtPacket);
+			logger.debug("sending RDP packet: " + rdtPacket + " to client " + ioSession.getRemoteAddress());
 		
 		out.write(rdtPacket.toByteBuffer());
-		out.flush();
+		// out.flush();
 	}
 
 	/* (non-Javadoc)



From rbieniek at berlios.de  Sun Jan 15 02:20:13 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Sun, 15 Jan 2006 02:20:13 +0100
Subject: [Rtspproxy-devel] r392 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: rdt rtsp
Message-ID: <200601150120.k0F1KDg0011086@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-15 02:20:04 +0100 (Sun, 15 Jan 2006)
New Revision: 392

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java
Log:
- Fixed bug6095 (Back-to-back RTSP packets)


Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-13 23:37:40 UTC (rev 391)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-15 01:20:04 UTC (rev 392)
@@ -261,8 +261,8 @@
 			if((i % 16) == 0)
 				buf.append('\n');
 			
-			buf.append(digits[data[i] / 16]);
-			buf.append(digits[data[i] % 16]);
+			buf.append(digits[(data[i] & 0xff) / 16]);
+			buf.append(digits[(data[i] & 0xff) % 16]);
 			if((i % 16) != 0)
 				buf.append(' ');
 		}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2006-01-13 23:37:40 UTC (rev 391)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2006-01-15 01:20:04 UTC (rev 392)
@@ -14,6 +14,7 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.io.LineNumberReader;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.nio.CharBuffer;
@@ -87,127 +88,167 @@
 	{
 		BufferedReader reader = null;
 
-		reader = new BufferedReader( new InputStreamReader( buffer.asInputStream(),
-				asciiCharset ) );
+		reader = new BufferedReader(new InputStreamReader( buffer.asInputStream(),
+				asciiCharset ), 256 );
 
 		// Retrieve status from session
 		ReadState state = (ReadState) session.getAttribute( readStateATTR );
-		if ( state == null )
-			state = ReadState.Command;
 		RtspMessage rtspMessage = (RtspMessage) session.getAttribute( rtspMessageATTR );
-
+		log.debug("entered RTSP decode, state=" + state + ", rtsp message in session=" + rtspMessageATTR);
+		
 		try {
 
 			while ( true ) {
-
+				/*
 				if ( state != ReadState.Command && state != ReadState.Header )
 					// the "while" loop is only used to read commands and
 					// headers
 					break;
+					*/
 
+				reader.mark(256);
 				String line = reader.readLine();
-				if ( line == null )
+				if ( line == null ) {
 					// there's no more data in the buffer
-					break;
+					log.debug("seen end-of-message, leaving loop");
+					break;					
+				}
+				
+				if ( state == null ) {
+					log.debug("switching null-state to Command");
+					state = ReadState.Command;
+				}
 
 				if ( line.length() == 0 ) {
 					// This is the empty line that marks the end
 					// of the headers section
-					state = ReadState.Body;
-					break;
+					if(rtspMessage != null) {
+						log.debug("seen emtpy line, switching to Body");
+						state = ReadState.Body;
+					} else {
+						log.debug("seen emtpy line, switching to Sync");
+						state = ReadState.Sync;						
+					}
+					// break;
 				}
 
-				switch ( state ) {
+				switch (state) {
+				case Sync:
+					log.debug("found empty line between command, switching to Command");
+					state = ReadState.Command;
+					break;
+				case Command:
+					log.debug("Command line: " + line);
+					if (line.startsWith("RTSP")) {
+						// this is a RTSP response
+						Matcher m = rtspResponsePattern.matcher(line);
+						if (!m.matches())
+							throw new ProtocolDecoderException(
+									"Malformed response line: " + line);
 
-					case Command:
-						// log.debug( "Command line: " + line );
-						if ( line.startsWith( "RTSP" ) ) {
-							// this is a RTSP response
-							Matcher m = rtspResponsePattern.matcher( line );
-							if ( !m.matches() )
-								throw new ProtocolDecoderException(
-										"Malformed response line: " + line );
+						RtspCode code = RtspCode.fromString(m.group(1));
+						rtspMessage = new RtspResponse();
+						((RtspResponse) (rtspMessage)).setCode(code);
+						RtspRequest.Verb verb = (RtspRequest.Verb) session
+								.getAttribute(RtspMessage.lastRequestVerbATTR);
+						((RtspResponse) (rtspMessage)).setRequestVerb(verb);
 
-							RtspCode code = RtspCode.fromString( m.group( 1 ) );
-							rtspMessage = new RtspResponse();
-							( (RtspResponse) ( rtspMessage ) ).setCode( code );
-							RtspRequest.Verb verb = (RtspRequest.Verb) session.getAttribute( RtspMessage.lastRequestVerbATTR );
-							( (RtspResponse) ( rtspMessage ) ).setRequestVerb( verb );
+					} else {
+						// this is a RTSP request
+						Matcher m = rtspRequestPattern.matcher(line);
+						if (!m.matches())
+							throw new ProtocolDecoderException(
+									"Malformed request line: " + line);
 
-						} else {
-							// this is a RTSP request
-							Matcher m = rtspRequestPattern.matcher( line );
-							if ( !m.matches() )
+						String verb = m.group(1);
+						String strUrl = m.group(2);
+						URL url = null;
+						if (!strUrl.equalsIgnoreCase("*")) {
+							try {
+								url = new URL(strUrl);
+							} catch (MalformedURLException e) {
+								log.info("malformed URL: " + url, e);
+								url = null;
+								session.setAttribute(readStateATTR,
+										ReadState.Failed);
 								throw new ProtocolDecoderException(
-										"Malformed request line: " + line );
-
-							String verb = m.group( 1 );
-							String strUrl = m.group( 2 );
-							URL url = null;
-							if ( !strUrl.equalsIgnoreCase( "*" ) ) {
-								try {
-									url = new URL( strUrl );
-								} catch ( MalformedURLException e ) {
-									log.info( "malformed URL: " + url, e );
-									url = null;
-									session.setAttribute( readStateATTR, ReadState.Failed );
-									throw new ProtocolDecoderException( "Invalid URL" );
-								}
+										"Invalid URL");
 							}
-							rtspMessage = new RtspRequest();
-							( (RtspRequest) rtspMessage ).setVerb( verb );
+						}
+						rtspMessage = new RtspRequest();
+						((RtspRequest) rtspMessage).setVerb(verb);
 
-							if ( ( (RtspRequest) rtspMessage ).getVerb() == RtspRequest.Verb.None ) {
-								session.setAttribute( readStateATTR, ReadState.Failed );
-								throw new ProtocolDecoderException( "Invalid method: "
-										+ verb );
-							}
-
-							( (RtspRequest) rtspMessage ).setUrl( url );
+						if (((RtspRequest) rtspMessage).getVerb() == RtspRequest.Verb.None) {
+							session.setAttribute(readStateATTR,
+									ReadState.Failed);
+							throw new ProtocolDecoderException(
+									"Invalid method: " + verb);
 						}
-						state = ReadState.Header;
-						break;
 
-					case Header:
-						// this is an header
-						Matcher m = rtspHeaderPattern.matcher( line );
+						((RtspRequest) rtspMessage).setUrl(url);
+					}
+					state = ReadState.Header;
+					log.debug("switching from Command to Header, message="
+							+ rtspMessage);
+					break;
 
-						if ( !m.matches() )
-							throw new ProtocolDecoderException( "RTSP header not valid" );
+				case Header:
+					// this is an header
+					log.debug("Header line: " + line);
+					Matcher m = rtspHeaderPattern.matcher(line);
 
-						rtspMessage.setHeader( m.group( 1 ), m.group( 2 ) );
-						break;
+					if (!m.matches())
+						throw new ProtocolDecoderException(
+								"RTSP header not valid");
 
-				}
-			}
+					rtspMessage.setHeader(m.group(1), m.group(2));
+					break;
+				case Body:
+					int bufferLen = Integer.parseInt(rtspMessage.getHeader(
+							"Content-Length", "0"));
 
-			if ( state == ReadState.Body ) {
-				// Read the message body
-				int bufferLen = Integer.parseInt( rtspMessage.getHeader(
-						"Content-Length", "0" ) );
-				if ( bufferLen == 0 ) {
-					// there's no buffer to be read
-					state = ReadState.Dispatch;
+					if (bufferLen == 0) {
+						log.debug("no message body found, switching to Dispatch");
+						// there's no buffer to be read
+						state = ReadState.Dispatch;
 
-				} else {
-					// we have a content buffer to read
-					int bytesToRead = bufferLen - rtspMessage.getBufferSize();
+					} else {
+						// we have a content buffer to read
+						int bytesToRead = bufferLen
+								- rtspMessage.getBufferSize();
 
-					// if ( bytesToRead < reader. decodeBuf.length() ) {
-					// log.warn( "We are reading more bytes than
-					// Content-Length." );
-					// }
+						// if ( bytesToRead < reader. decodeBuf.length() ) {
+						// log.warn( "We are reading more bytes than
+						// Content-Length." );
+						// }
 
-					// read the content buffer
-					CharBuffer bufferContent = CharBuffer.allocate( bytesToRead );
-					reader.read( bufferContent );
-					bufferContent.flip();
-					rtspMessage.appendToBuffer( bufferContent );
-					if ( rtspMessage.getBufferSize() >= bufferLen ) {
-						// The RTSP message parsing is completed
-						state = ReadState.Dispatch;
+						// read the content buffer
+						CharBuffer bufferContent = CharBuffer
+								.allocate(bytesToRead);
+						reader.reset();
+						reader.read(bufferContent);
+						bufferContent.flip();
+						rtspMessage.appendToBuffer(bufferContent);
+						
+						if (rtspMessage.getBufferSize() >= bufferLen) {
+							// The RTSP message parsing is completed
+							state = ReadState.Dispatch;
+						}
 					}
+					break;
 				}
+				if ( state == ReadState.Dispatch ) {
+					log.debug("sending decoded RTSP message");
+					// The message is already formed
+					// send it
+					session.removeAttribute( readStateATTR );
+					session.removeAttribute( rtspMessageATTR );
+					out.write( rtspMessage );
+					
+					state = null;
+					rtspMessage = null;
+				}
+
 			}
 		} catch ( IOException e ) {
 			/*
@@ -216,7 +257,9 @@
 			 */
 			Exceptions.logStackTrace( e );
 			return;
-
+		} catch( Throwable t) {
+			Exceptions.logStackTrace( t );
+			return;
 		} finally {
 			try {
 				reader.close();
@@ -224,18 +267,10 @@
 			}
 		}
 
-		if ( state == ReadState.Dispatch ) {
-			// The message is already formed
-			// send it
-			session.removeAttribute( readStateATTR );
-			session.removeAttribute( rtspMessageATTR );
-			out.write( rtspMessage );
-			return;
-		}
-
 		// log.debug( "INCOMPLETE MESSAGE \n" + rtspMessage );
 
 		// Save attributes in session
+		log.debug("leaving decode loop, state=" + state + ", message in session=" + rtspMessage);
 		session.setAttribute( readStateATTR, state );
 		session.setAttribute( rtspMessageATTR, rtspMessage );
 	}



From rbieniek at berlios.de  Mon Jan 16 01:25:18 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Mon, 16 Jan 2006 01:25:18 +0100
Subject: [Rtspproxy-devel] r393 - in trunk/RTSPProxy-Core/src: main/java/rtspproxy/rdt test/resources/rtspproxy/rdt
Message-ID: <200601160025.k0G0PIMI024373@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-16 01:25:09 +0100 (Mon, 16 Jan 2006)
New Revision: 393

Added:
   trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketDataPacket.txt
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
Log:
- continued work on RDT transport. RDT packet encoding seems to be 
broken in cases were multiple RDT packets need to be packed together,
the packet length calculation does not work correctly.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-15 01:20:04 UTC (rev 392)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-16 00:25:09 UTC (rev 393)
@@ -35,14 +35,14 @@
 		buffer.rewind();
 		buffer.get(data);
 
-		return decode(data, 0, 0);
+		return decode(data, 0);
 	}
 
 	/**
 	 * decode packet
 	 * @param buffer the byte buffer to decode packet from
 	 */
-	public static RdtPacket decode(byte[] data, int ind, int depth) {
+	public static RdtPacket decode(byte[] data, int ind) {
 		RdtPacket packet = null;
 		byte markerByte;
 		byte seqLo, seqHi;
@@ -51,11 +51,8 @@
 		short packetLength = -1;
 		int payloadSize = -1;
 
-		if(depth > 1) {
-			logger.error("detected packet-decoding recursion overrun, aborting");
-			
-			return null;
-		}
+		if(logger.isDebugEnabled()) 
+			logger.debug("decoding packet data: " + formatByteArray(data));
 		
 		// process marker byte
 		markerByte = data[ind++];
@@ -67,7 +64,7 @@
 		sequence = decodeShort(seqHi, seqLo);
 		logger.debug("decoded sequence: " + Integer.toHexString(sequence));
 		
-		if(seqHi < 0 ) {
+		if((seqHi & 0xff) == 0xff ) {
 			logger.debug("decoding control packet");
 
 			// extract streamid from marker byte
@@ -80,7 +77,7 @@
 			case RttRequest:
 				// process packet length (if included)
 				if(lengthIncluded) {
-					packetLength = decodeShort(data, ind);
+					packetLength = (short)(decodeShort(data, ind) - 5);
 					ind += 2;
 				}
 				
@@ -89,7 +86,7 @@
 			case RttResponse:
 				// process packet length (if included)
 				if(lengthIncluded) {
-					packetLength = decodeShort(data, ind);
+					packetLength = (short)(decodeShort(data, ind) - 5);
 					ind += 2;
 				}
 				
@@ -108,19 +105,20 @@
 			case LatencyReport:
 				// process packet length (if included)
 				if(lengthIncluded) {
-					packetLength = decodeShort(data, ind);
+					packetLength = (short)(decodeShort(data, ind) - 5);
 					ind += 2;
 				}
 				
 				int serverTimeout = decodeInt(data, ind);
-				
 				ind += 4;
+				if(lengthIncluded)
+					packetLength -= 4;
 				packet = new RdtLatencyReportPacket(serverTimeout);
 				break;
 			case Ack:
 				// process packet length (if included)
 				if(lengthIncluded) {
-					packetLength = decodeShort(data, ind);
+					packetLength = (short)(decodeShort(data, ind) -  5);
 					ind += 2;
 				}
 				
@@ -160,7 +158,7 @@
 			// data packet
 			// process packet length (if included)
 			if(lengthIncluded) {
-				packetLength = decodeShort(data, ind);
+				packetLength = (short)(decodeShort(data, ind) - 5);
 				ind += 2;
 			}
 			
@@ -184,18 +182,19 @@
 			ind += 4;
 			
 			// process total reliable count
+			/*
 			if(lengthIncluded)
 				packetLength -= 2;
-
+				*/
 			packet = new RdtDataPacket(needReliable, isReliable, streamId,
 					sequence, backToBack, slowData, asmRule, timestamp);
 			if(needReliable) {
 				short totalReliable = decodeShort(data, ind);
 
 				ind += 2;
-				((RdtDataPacket)packet).setTotalReliable(totalReliable);
 				if(lengthIncluded)
 					packetLength -= 2;
+				((RdtDataPacket)packet).setTotalReliable(totalReliable);
 			}
 
 			payloadSize = (lengthIncluded ? packetLength : (data.length - ind));
@@ -207,7 +206,7 @@
 			// handle attached subpacket
 			logger.debug("handling attached sub-packet");
 			
-			packet.setSubPacket(decode(data, ind, depth+1));
+			packet.setSubPacket(decode(data, ind));
 		}
 		
 		if(logger.isDebugEnabled())

Added: trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketDataPacket.txt
===================================================================
--- trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketDataPacket.txt	2006-01-15 01:20:04 UTC (rev 392)
+++ trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketDataPacket.txt	2006-01-16 00:25:09 UTC (rev 393)
@@ -0,0 +1,19 @@
+c0 00 01 00 9d 40 00 00 00 00 00 00 81 02 40 d4 
+40 70 00 1a 20 00 1b 46 46 db fd de 10 84 42 10 
+84 21 08 42 10 84 21 08 42 10 84 22 30 84 21 08 
+42 10 84 21 08 42 10 86 21 11 e4 31 8c 63 1c c6 
+31 8c 42 10 84 22 31 08 63 18 c4 21 08 42 23 0c 
+42 10 84 31 08 42 10 84 21 08 43 1c c4 21 08 42 
+10 84 21 08 42 11 08 42 10 84 21 08 42 10 84 21 
+08 42 10 84 21 08 42 10 84 21 08 42 10 84 21 8c 
+63 98 c1 c0 40 07 40 85 01 59 20 21 60 00 45 19 
+c0 40 07 40 86 02 7c 20 10 a0 00 45 19 c0 00 02 
+00 8b 40 00 00 01 0a 00 00 01 01 40 fe 40 00 03 
+18 20 42 9b 00 46 db fd de 11 9a 8a fc 9f 26 84 
+59 42 21 08 42 23 08 42 10 84 22 14 86 57 63 11 
+18 42 10 85 22 14 84 56 e2 91 08 84 22 34 84 21 
+08 42 10 e6 21 10 ca 21 08 8c 4d 8e 8e 21 11 c9 
+b9 11 c9 ba 78 ae c8 44 79 88 65 74 22 30 84 21 
+8c 43 10 c4 31 08 42 21 08 42 23 8c 42 10 84 22 
+11 0c 42 10 84 21 08 84 22 10 84 21 08 42 10 85 
+21 10 84 22 19 5b 8c 00
\ No newline at end of file



From rbieniek at berlios.de  Mon Jan 16 18:05:37 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Mon, 16 Jan 2006 18:05:37 +0100
Subject: [Rtspproxy-devel] r394 - in trunk/RTSPProxy-Core/src: main/java/rtspproxy main/java/rtspproxy/rdt test/java/rtspproxy/rdt test/resources/rtspproxy/rdt
Message-ID: <200601161705.k0GH5bAk025505@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-16 18:05:29 +0100 (Mon, 16 Jan 2006)
New Revision: 394

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtAckPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtControlPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtDataPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtLatencyReportPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtStreamEndPacket.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtDataPacketTest.java
   trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketDataPacket.txt
Log:
- RDT transport finally working. Transports 512KBit RealVideo streams 
without any measureable CPU load on a P4 host system
- Fixed RDT data packet encoding / decoding.
- Added additional unit test for back-to-back packet data packets.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java	2006-01-16 00:25:09 UTC (rev 393)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java	2006-01-16 17:05:29 UTC (rev 394)
@@ -113,23 +113,4 @@
 	public IoFilterChainBuilder getFilterChainBuilder() {
 		return this.filterChainBuilder;
 	}
-
-	/* (non-Javadoc)
-	 * @see rtspproxy.ProxyService#getThreadPoolFilter()
-	 */
-	@Override
-	public ThreadPoolFilter getThreadPoolFilter() {
-		ThreadPoolFilter filter = new ThreadPoolFilter("rdtClientThreadPoolFilter");
-		
-		filter.setMaximumPoolSize(5);
-		return filter;
-	}
-
-	/**
-	 * flag if the service wants to use a ThreadPoolFilter at all
-	 */
-	public boolean wantThreadPoolFilter() {
-		return false;
-	}
-
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java	2006-01-16 00:25:09 UTC (rev 393)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java	2006-01-16 17:05:29 UTC (rev 394)
@@ -110,23 +110,4 @@
 	public IoFilterChainBuilder getFilterChainBuilder() {
 		return this.filterChainBuilder;
 	}
-
-	/* (non-Javadoc)
-	 * @see rtspproxy.ProxyService#getThreadPoolFilter()
-	 */
-	@Override
-	public ThreadPoolFilter getThreadPoolFilter() {
-		ThreadPoolFilter filter = new ThreadPoolFilter("rdtServerThreadPoolFilter");
-		
-		filter.setMaximumPoolSize(5);
-		return filter;
-	}
-
-	/**
-	 * flag if the service wants to use a ThreadPoolFilter at all
-	 */
-	public boolean wantThreadPoolFilter() {
-		return false;
-	}
-
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtAckPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtAckPacket.java	2006-01-16 00:25:09 UTC (rev 393)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtAckPacket.java	2006-01-16 17:05:29 UTC (rev 394)
@@ -48,7 +48,7 @@
 		if(isLengthIncluded()) {
 			// add 2 bytes for length to packet size of 3
 			// TODO find a cleaner way.
-			buf.put(encodeShort((short)5));
+			buf.put(encodeShort(calculatePacketLength((short)5)));
 		}
 		buf.limit(buf.position());
 		

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtControlPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtControlPacket.java	2006-01-16 00:25:09 UTC (rev 393)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtControlPacket.java	2006-01-16 17:05:29 UTC (rev 394)
@@ -18,8 +18,6 @@
 	 * @param streamId
 	 */
 	public RdtControlPacket(Type type, byte streamId) {
-		super(type, false, streamId);
+		super(type, false, false, streamId);
 	}
-
-
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtDataPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtDataPacket.java	2006-01-16 00:25:09 UTC (rev 393)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtDataPacket.java	2006-01-16 17:05:29 UTC (rev 394)
@@ -19,9 +19,9 @@
 	private short totalReliable;
 	private short sequence;
 
-	public RdtDataPacket(boolean needReliable, boolean reliable, byte streamId, short sequence, boolean backToBack, 
-			boolean slowData, byte asmRule, int timestamp) {
-		super(Type.Data, needReliable, streamId);
+	public RdtDataPacket(boolean lengthRequired, boolean needReliable, boolean reliable, byte streamId, short sequence,
+			boolean backToBack,	boolean slowData, byte asmRule, int timestamp) {
+		super(Type.Data, lengthRequired, needReliable, streamId);
 		
 		this.reliable = reliable;
 		this.sequence = sequence;
@@ -158,12 +158,12 @@
 		buf.put(encodeShort(this.sequence));
 
 		if(isLengthIncluded()) {
-			short length = 8;
+			short length = 10;
 			
 			if(isNeedReliable())
 				length += 2;
 			
-			buf.put(encodeShort(length));
+			buf.put(encodeShort(calculatePacketLength(length)));
 		}
 		
 		if(this.backToBack)

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtLatencyReportPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtLatencyReportPacket.java	2006-01-16 00:25:09 UTC (rev 393)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtLatencyReportPacket.java	2006-01-16 17:05:29 UTC (rev 394)
@@ -61,7 +61,7 @@
 		if(isLengthIncluded()) {
 			// add 2 bytes for length to packet size of 3
 			// TODO find a cleaner way.
-			buf.put(encodeShort((short)9));
+			buf.put(encodeShort(calculatePacketLength((short)9)));
 		}
 		buf.put(encodeInt(this.serverTimeout));
 		buf.limit(buf.position());

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java	2006-01-16 00:25:09 UTC (rev 393)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacket.java	2006-01-16 17:05:29 UTC (rev 394)
@@ -87,6 +87,9 @@
 	
 	// need reliable flag
 	private boolean needReliable = false;
+	
+	// length required flag
+	private boolean lengthRequired;
 
 	// stream id
 	private byte streamId = -1;
@@ -97,10 +100,11 @@
 	/**
 	 * constructor
 	 */
-	protected RdtPacket(Type type, boolean needReliable, byte streamId) {
+	protected RdtPacket(Type type, boolean lengthRequired, boolean needReliable, byte streamId) {
 		this.type = type;
 		this.needReliable = needReliable;
 		this.streamId = streamId;
+		this.lengthRequired = lengthRequired;
 	}
 	
 	/**
@@ -191,6 +195,7 @@
 		StringBuffer buf = new StringBuffer();
 
 		buf.append("packet[id=" + id +" type=" + type);
+		buf.append(" lengthRequired=" + this.lengthRequired);
 		buf.append(" needReliable=" + this.needReliable);
 		buf.append(" streamId=" + this.streamId);
 		toStringHelper(buf);
@@ -235,7 +240,7 @@
 	 * query if encoded packet should contain length field included
 	 */
 	protected boolean isLengthIncluded() {
-		return (this.subPacket != null);
+		return (this.lengthRequired || this.subPacket != null);
 	}
 	
 	/**
@@ -265,6 +270,18 @@
 	}
 	
 	/**
+	 * calculate the total packet length (including payload length, if payload is included)
+	 */
+	protected short calculatePacketLength(short hdrLength) {
+		short length = hdrLength;
+		
+		if(this.payload != null)
+			length += (short)payload.length;
+		
+		return length;
+	}
+	
+	/**
 	 * Simple ID counter
 	 */
 	private static class IdDispenser {

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-16 00:25:09 UTC (rev 393)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtPacketDecoder.java	2006-01-16 17:05:29 UTC (rev 394)
@@ -51,8 +51,10 @@
 		short packetLength = -1;
 		int payloadSize = -1;
 
+		/*
 		if(logger.isDebugEnabled()) 
 			logger.debug("decoding packet data: " + formatByteArray(data));
+		*/
 		
 		// process marker byte
 		markerByte = data[ind++];
@@ -186,7 +188,7 @@
 			if(lengthIncluded)
 				packetLength -= 2;
 				*/
-			packet = new RdtDataPacket(needReliable, isReliable, streamId,
+			packet = new RdtDataPacket(lengthIncluded, needReliable, isReliable, streamId,
 					sequence, backToBack, slowData, asmRule, timestamp);
 			if(needReliable) {
 				short totalReliable = decodeShort(data, ind);

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtStreamEndPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtStreamEndPacket.java	2006-01-16 00:25:09 UTC (rev 393)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtStreamEndPacket.java	2006-01-16 17:05:29 UTC (rev 394)
@@ -25,7 +25,7 @@
 	 */
 	public RdtStreamEndPacket(boolean needReliable, byte streamId, boolean packetSent, boolean extFlag,
 			short streamEndSequenceNumber, int timestamp, short totalReliable) {
-		super(Type.StreamEnd, needReliable, streamId);
+		super(Type.StreamEnd, false, needReliable, streamId);
 		this.packetSent = packetSent;
 		this.extFlag = extFlag;
 		this.streamEndSequenceNumber = streamEndSequenceNumber;

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java	2006-01-16 00:25:09 UTC (rev 393)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java	2006-01-16 17:05:29 UTC (rev 394)
@@ -79,7 +79,9 @@
 	public static final boolean buffersEqual(ByteBuffer first, ByteBuffer second) {
 		boolean equal = false;
 		
-		// System.out.println("first limit=" + first.limit() + ", second position=" + second.limit());
+		/*
+		System.out.println("first limit=" + first.limit() + ", second limit=" + second.limit());
+		*/
 		if(first.limit() == second.limit()) {
 			int i;
 			
@@ -88,7 +90,7 @@
 					/*
 					System.out.println("index " + i + ": expected=" + Integer.toHexString(first.get(i))
 							+ ": got=" + Integer.toHexString(second.get(i)));
-					*/
+							*/
 					break;
 				}
 			}

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtDataPacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtDataPacketTest.java	2006-01-16 00:25:09 UTC (rev 393)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtDataPacketTest.java	2006-01-16 17:05:29 UTC (rev 394)
@@ -56,4 +56,39 @@
 
 		assertTrue(BufferUtils.buffersEqual(origBuffer, packet.toByteBuffer()));
 	}
+
+	public void testRdtPacketBackToBackLoad() throws IOException {
+		RdtDataPacket packet = (RdtDataPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtDataPacketDataPacket.txt"));
+		RdtDataPacket subPacket = (RdtDataPacket)packet.getSubPacket();
+		
+		// packet 0
+		assertEquals(packet.isNeedReliable(), true);
+		assertEquals(packet.getStreamId(), 0);
+		assertEquals(packet.isReliable(), false);
+		assertEquals(packet.getSequence(), 1);
+		assertEquals(packet.isBackToBack(), false);
+		assertEquals(packet.isSlowData(), true);
+		assertEquals(packet.getAsmRule(), 0);
+		assertEquals(packet.getTimestamp(), 0);
+		assertEquals(packet.getTotalReliable(), 0);
+		assertEquals(packet.getPayload().length, 145);
+		
+		assertEquals(subPacket.isNeedReliable(), true);
+		assertEquals(subPacket.getStreamId(), 0);
+		assertEquals(subPacket.isReliable(), false);
+		assertEquals(subPacket.getSequence(), 2);
+		assertEquals(subPacket.isBackToBack(), false);
+		assertEquals(subPacket.isSlowData(), true);
+		assertEquals(subPacket.getAsmRule(), 0);
+		assertEquals(subPacket.getTimestamp(), 266);
+		assertEquals(subPacket.getTotalReliable(), 0);
+		assertEquals(subPacket.getPayload().length, 127);		
+	}
+	
+	public void testRdtPacketBackToBackSave() throws IOException {
+		ByteBuffer origBuffer = BufferUtils.loadBuffer("RdtDataPacketDataPacket.txt");
+		RdtDataPacket packet = (RdtDataPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtDataPacketDataPacket.txt"));
+
+		assertTrue(BufferUtils.buffersEqual(origBuffer, packet.toByteBuffer()));
+	}
 }

Modified: trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketDataPacket.txt
===================================================================
--- trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketDataPacket.txt	2006-01-16 00:25:09 UTC (rev 393)
+++ trunk/RTSPProxy-Core/src/test/resources/rtspproxy/rdt/RdtDataPacketDataPacket.txt	2006-01-16 17:05:29 UTC (rev 394)
@@ -1,19 +1,20 @@
-c0 00 01 00 9d 40 00 00 00 00 00 00 81 02 40 d4 
-40 70 00 1a 20 00 1b 46 46 db fd de 10 84 42 10 
-84 21 08 42 10 84 21 08 42 10 84 22 30 84 21 08 
-42 10 84 21 08 42 10 86 21 11 e4 31 8c 63 1c c6 
-31 8c 42 10 84 22 31 08 63 18 c4 21 08 42 23 0c 
-42 10 84 31 08 42 10 84 21 08 43 1c c4 21 08 42 
-10 84 21 08 42 11 08 42 10 84 21 08 42 10 84 21 
-08 42 10 84 21 08 42 10 84 21 08 42 10 84 21 8c 
-63 98 c1 c0 40 07 40 85 01 59 20 21 60 00 45 19 
-c0 40 07 40 86 02 7c 20 10 a0 00 45 19 c0 00 02 
-00 8b 40 00 00 01 0a 00 00 01 01 40 fe 40 00 03 
-18 20 42 9b 00 46 db fd de 11 9a 8a fc 9f 26 84 
-59 42 21 08 42 23 08 42 10 84 22 14 86 57 63 11 
-18 42 10 85 22 14 84 56 e2 91 08 84 22 34 84 21 
-08 42 10 e6 21 10 ca 21 08 8c 4d 8e 8e 21 11 c9 
-b9 11 c9 ba 78 ae c8 44 79 88 65 74 22 30 84 21 
-8c 43 10 c4 31 08 42 21 08 42 23 8c 42 10 84 22 
-11 0c 42 10 84 21 08 84 22 10 84 21 08 42 10 85 
-21 10 84 22 19 5b 8c 00
\ No newline at end of file
+c0 00 01 00 9d 40 00 00 00 00 00 00 
+81 02 40 d4 40 70 00 1a 20 00 1b 46 46 db fd de 
+10 84 42 10 84 21 08 42 10 84 21 08 42 10 84 22 
+30 84 21 08 42 10 84 21 08 42 10 86 21 11 e4 31 
+8c 63 1c c6 31 8c 42 10 84 22 31 08 63 18 c4 21 
+08 42 23 0c 42 10 84 31 08 42 10 84 21 08 43 1c 
+c4 21 08 42 10 84 21 08 42 11 08 42 10 84 21 08 
+42 10 84 21 08 42 10 84 21 08 42 10 84 21 08 42 
+10 84 21 8c 63 98 c1 c0 40 07 40 85 01 59 20 21 
+60 00 45 19 c0 40 07 40 86 02 7c 20 10 a0 00 45 
+19 
+c0 00 02 00 8b 40 00 00 01 0a 00 00 
+01 01 40 fe 40 00 03 18 20 42 9b 00 46 db fd de 
+11 9a 8a fc 9f 26 84 59 42 21 08 42 23 08 42 10 
+84 22 14 86 57 63 11 18 42 10 85 22 14 84 56 e2 
+91 08 84 22 34 84 21 08 42 10 e6 21 10 ca 21 08 
+8c 4d 8e 8e 21 11 c9 b9 11 c9 ba 78 ae c8 44 79 
+88 65 74 22 30 84 21 8c 43 10 c4 31 08 42 21 08 
+42 23 8c 42 10 84 22 11 0c 42 10 84 21 08 84 22 
+10 84 21 08 42 10 85 21 10 84 22 19 5b 8c 00
\ No newline at end of file



From rbieniek at berlios.de  Mon Jan 16 21:15:34 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Mon, 16 Jan 2006 21:15:34 +0100
Subject: [Rtspproxy-devel] r395 - in trunk: RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite RTSPProxy-Core/src/main/java/rtspproxy/rtsp
Message-ID: <200601162015.k0GKFYrl013986@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-16 21:15:16 +0100 (Mon, 16 Jan 2006)
New Revision: 395

Modified:
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java
Log:
- Fixed off-by-one problem in RTSP parser. It gracefully handles now
a missing terminating CRLF.
- Reworked URL rewriting filter a bit. The correct handling of the OPTIONS
request is not clear yet.


Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java	2006-01-16 17:05:29 UTC (rev 394)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java	2006-01-16 20:15:16 UTC (rev 395)
@@ -32,6 +32,9 @@
 	// map with url from-->to prefix mapping (used in rewriting request URL)
 	private HashMap<String, String> forwardMappings = new HashMap<String, String>();
 	
+	// map with url from-->to prefix mapping (used in rewriting request URL)
+	private HashMap<URL, URL> optionsForwardMappings = new HashMap<URL, URL>();
+	
 	// map with url to-->from prefix mapping (used in rewriting response URL)
 	private HashMap<String, String> reverseMappings = new HashMap<String, String>();
 	
@@ -42,7 +45,17 @@
 		URL rewritten = null;
 		String req = request.toString();
 		
-		logger.debug("checking request URL: " + req);
+		logger.debug("checking request URL: " + req + ", verb=" + verb);
+		
+		if(verb == RtspRequest.Verb.OPTIONS) {
+			logger.debug("handling OPTIONS request");
+			
+			if((rewritten = this.optionsForwardMappings.get(request)) != null) {
+				logger.debug("found special OPTIONS rewrite URL: " + rewritten);
+				
+				return rewritten;
+			}
+		}
 		for(String prefix : this.forwardMappings.keySet()) {
 			if(req.startsWith(prefix)) {
 				logger.debug("found prefix match on " + prefix);
@@ -105,6 +118,26 @@
 
 				this.forwardMappings.put(from, to);
 				this.reverseMappings.put(to, from);
+			} else if(el.getName().equals("map-options")) {
+				Element fromEl = el.element("from");
+				Element toEl = el.element("to");
+				
+				if(fromEl == null || toEl == null)
+					throw new IllegalArgumentException("no from or to element in mapping configuration");
+				
+				String from = fromEl.getTextTrim();
+				String to = toEl.getTextTrim();
+				
+				if(from == null || from.length() == 0 || to == null || to.length() == 0)
+					throw new IllegalArgumentException("invalid from or to element in mapping configuration");
+				
+				URL fromUrl = new URL(from);
+				URL toUrl = new URL(to);
+				
+				this.optionsForwardMappings.put(new URL(fromUrl.getProtocol(), fromUrl.getHost(), 
+						fromUrl.getPort(), "/"),
+						new URL(toUrl.getProtocol(), toUrl.getHost(), 
+								toUrl.getPort(), "/"));
 			}
 		}
 	}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2006-01-16 17:05:29 UTC (rev 394)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2006-01-16 20:15:16 UTC (rev 395)
@@ -89,7 +89,7 @@
 		BufferedReader reader = null;
 
 		reader = new BufferedReader(new InputStreamReader( buffer.asInputStream(),
-				asciiCharset ), 256 );
+				asciiCharset ), 2048 );
 
 		// Retrieve status from session
 		ReadState state = (ReadState) session.getAttribute( readStateATTR );
@@ -106,7 +106,7 @@
 					break;
 					*/
 
-				reader.mark(256);
+				reader.mark(2048);
 				String line = reader.readLine();
 				if ( line == null ) {
 					// there's no more data in the buffer
@@ -125,6 +125,7 @@
 					if(rtspMessage != null) {
 						log.debug("seen emtpy line, switching to Body");
 						state = ReadState.Body;
+						reader.mark(64);
 					} else {
 						log.debug("seen emtpy line, switching to Sync");
 						state = ReadState.Sync;						
@@ -230,6 +231,13 @@
 						bufferContent.flip();
 						rtspMessage.appendToBuffer(bufferContent);
 						
+						// this is an ugly hack to avoid content underruns produced by bogus servers
+						if( rtspMessage.getBufferSize() == (bufferLen - 2))
+							rtspMessage.appendToBuffer("\r\n");
+						if( rtspMessage.getBufferSize() == (bufferLen - 1))
+							rtspMessage.appendToBuffer("\n");
+						
+						// terminate message here
 						if (rtspMessage.getBufferSize() >= bufferLen) {
 							// The RTSP message parsing is completed
 							state = ReadState.Dispatch;

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java	2006-01-16 17:05:29 UTC (rev 394)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java	2006-01-16 20:15:16 UTC (rev 395)
@@ -189,6 +189,15 @@
 	 * @param other
 	 *            buffer with content to be appended
 	 */
+	public void appendToBuffer( String other )
+	{
+		this.buffer.append( other );
+	}
+
+	/**
+	 * @param other
+	 *            buffer with content to be appended
+	 */
 	public void appendToBuffer( CharBuffer other )
 	{
 		this.buffer.append( other );



From rbieniek at berlios.de  Tue Jan 17 01:13:14 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Tue, 17 Jan 2006 01:13:14 +0100
Subject: [Rtspproxy-devel] r396 - trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite
Message-ID: <200601170013.k0H0DExr002528@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-17 01:13:05 +0100 (Tue, 17 Jan 2006)
New Revision: 396

Added:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingResult.java
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/ClientUrlRewritingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java
Log:
- modified URL rewriting filter and provider interface to handle
cases where the filter wishes to pass back a response to the
client instead of just modifying the source URL

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/ClientUrlRewritingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/ClientUrlRewritingFilter.java	2006-01-16 20:15:16 UTC (rev 395)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/ClientUrlRewritingFilter.java	2006-01-17 00:13:05 UTC (rev 396)
@@ -39,6 +39,8 @@
 	@Override
 	public void messageReceived(NextFilter nextFilter, IoSession session,
 			Object message) throws Exception {
+		boolean passOn = true;
+		
 		logger.debug("Received (pre-rewriting) message:\n" + message);
 
 		if (isRunning()) {
@@ -46,7 +48,7 @@
 				RtspMessage rtspMessage = (RtspMessage) message;
 
 				if (rtspMessage.getType() == RtspMessage.Type.TypeRequest)
-					processRequest(session, (RtspRequest)rtspMessage);
+					passOn = processRequest(session, (RtspRequest)rtspMessage);
 			} else {
 					logger.error("Expecting a RtspMessage. Received a "
 						+ message.getClass().getName());
@@ -54,7 +56,8 @@
 			logger.debug("Sent (post-rewriting) message:\n" + message);
 
 		}
-		nextFilter.messageReceived(session, message);
+		if(passOn)
+			nextFilter.messageReceived(session, message);
 	}
 
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-01-16 20:15:16 UTC (rev 395)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-01-17 00:13:05 UTC (rev 396)
@@ -53,18 +53,37 @@
 	
 	/**
 	 * process a request message
+	 * @return true if the caller should pass the message on, false if the message should not be
+	 * passed on
 	 */
-	protected void processRequest(IoSession session, RtspRequest req) {
+	protected boolean processRequest(IoSession session, RtspRequest req) {
+		boolean passOn = true;
+		
 		if (req.getUrl() != null) {
-			URL rewritten = this.provider.rewriteRequestUrl(req.getUrl(), req.getVerb(), session.getRemoteAddress());
+			UrlRewritingResult result = this.provider.rewriteRequestUrl(req.getUrl(), req.getVerb(), 
+					session.getRemoteAddress()); 
+			
+			if(result != null) {
+				URL rewritten = result.getRewrittenUrl();
 
-			if (rewritten != null) {
-				logger.debug("changed request URL from '" + req.getUrl()
+				if (rewritten != null) {
+					logger.debug("changed request URL from '" + req.getUrl()
 						+ "' to '" + rewritten + "'");
 
-				req.setUrl(rewritten);
+					req.setUrl(rewritten);
+				} else if(result.getResponse() != null) {
+					RtspResponse resp = result.getResponse();
+					logger.debug("dropped  request, return response: " + resp);
+
+					resp.setCommonHeaders();
+					resp.setSequenceNumber(req.getSequenceNumber());
+					session.write(resp);
+					passOn = false;
+				}
 			}
 		}
+		
+		return passOn;
 	}
 	
 	/**

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java	2006-01-16 20:15:16 UTC (rev 395)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java	2006-01-17 00:13:05 UTC (rev 396)
@@ -32,9 +32,10 @@
 public interface UrlRewritingProvider extends GenericProvider {
 	/**
 	 * rewrite the request URL.
-	 * @return a replacement URL or null if the URL is not to be modified.
+	 * @return a result object which can contain a modified result URL or a response message
+	 * sent back to the client. If null is returned, the URL is passed on without modification.
 	 */
-	public URL rewriteRequestUrl(URL request, RtspRequest.Verb verb, SocketAddress client);
+	public UrlRewritingResult rewriteRequestUrl(URL request, RtspRequest.Verb verb, SocketAddress client);
 
 	/**
 	 * rewrite an URL in a response header.

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingResult.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingResult.java	2006-01-16 20:15:16 UTC (rev 395)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingResult.java	2006-01-17 00:13:05 UTC (rev 396)
@@ -0,0 +1,47 @@
+/**
+ * 
+ */
+package rtspproxy.filter.rewrite;
+
+import java.net.URL;
+
+import rtspproxy.rtsp.RtspResponse;
+
+/**
+ * This object is passed back as a result of the URL request rewriting process.
+ * It should contain either a modified URL or a RTSP response message o be returned
+ * to the client.
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class UrlRewritingResult {
+	
+	// rewritten URL
+	private URL rewrittenUrl;
+	
+	// response object
+	private RtspResponse response;
+	
+	/**
+	 * construct with URL
+	 */
+	public UrlRewritingResult(URL rewrittenUrl) {
+		this.rewrittenUrl = rewrittenUrl;
+	}
+	
+	/**
+	 * construct with response
+	 */
+	public UrlRewritingResult(RtspResponse response) {
+		this.response = response;
+	}
+
+	public RtspResponse getResponse() {
+		return response;
+	}
+
+	public URL getRewrittenUrl() {
+		return rewrittenUrl;
+	}
+}



From rbieniek at berlios.de  Tue Jan 17 01:13:28 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Tue, 17 Jan 2006 01:13:28 +0100
Subject: [Rtspproxy-devel] r397 - trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite
Message-ID: <200601170013.k0H0DSIR002696@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-17 01:13:17 +0100 (Tue, 17 Jan 2006)
New Revision: 397

Modified:
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java
Log:
- modified URL rewriting filter and provider interface to handle
cases where the filter wishes to pass back a response to the
client instead of just modifying the source URL

Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java	2006-01-17 00:13:05 UTC (rev 396)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java	2006-01-17 00:13:17 UTC (rev 397)
@@ -41,7 +41,8 @@
 	/* (non-Javadoc)
 	 * @see rtspproxy.filter.rewrite.UrlRewritingProvider#rewriteRequestUrl(java.net.URL)
 	 */
-	public URL rewriteRequestUrl(URL request, RtspRequest.Verb verb, SocketAddress client) {
+	public UrlRewritingResult rewriteRequestUrl(URL request, RtspRequest.Verb verb, SocketAddress client) {
+		UrlRewritingResult result = null;
 		URL rewritten = null;
 		String req = request.toString();
 		
@@ -53,7 +54,7 @@
 			if((rewritten = this.optionsForwardMappings.get(request)) != null) {
 				logger.debug("found special OPTIONS rewrite URL: " + rewritten);
 				
-				return rewritten;
+				return new UrlRewritingResult(rewritten);
 			}
 		}
 		for(String prefix : this.forwardMappings.keySet()) {
@@ -69,7 +70,10 @@
 		}
 		logger.debug("rewritten URL: " + rewritten);
 		
-		return rewritten;
+		if(rewritten != null)
+			result = new UrlRewritingResult(rewritten);
+		
+		return result;
 	}
 
 	/* (non-Javadoc)



From rbieniek at berlios.de  Wed Jan 18 11:24:35 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Wed, 18 Jan 2006 11:24:35 +0100
Subject: [Rtspproxy-devel] r398 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: filter/rewrite rtsp
Message-ID: <200601181024.k0IAOZG6004103@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-18 11:24:32 +0100 (Wed, 18 Jan 2006)
New Revision: 398

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/ClientUrlRewritingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java
Log:
- setSequenceNumber in RTSPResponse now sets the "CSeq" header as a
by-product.
- Made logging behaviour in ClientUrlRewritingFilter more 
understandable. Only log the outgoing message if there is a message
being passed onto the next filter

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/ClientUrlRewritingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/ClientUrlRewritingFilter.java	2006-01-17 00:13:17 UTC (rev 397)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/ClientUrlRewritingFilter.java	2006-01-18 10:24:32 UTC (rev 398)
@@ -53,11 +53,13 @@
 					logger.error("Expecting a RtspMessage. Received a "
 						+ message.getClass().getName());
 			}
+
+		}
+		if(passOn) {
 			logger.debug("Sent (post-rewriting) message:\n" + message);
 
+			nextFilter.messageReceived(session, message);
 		}
-		if(passOn)
-			nextFilter.messageReceived(session, message);
 	}
 
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-01-17 00:13:17 UTC (rev 397)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-01-18 10:24:32 UTC (rev 398)
@@ -73,10 +73,11 @@
 					req.setUrl(rewritten);
 				} else if(result.getResponse() != null) {
 					RtspResponse resp = result.getResponse();
-					logger.debug("dropped  request, return response: " + resp);
 
 					resp.setCommonHeaders();
 					resp.setSequenceNumber(req.getSequenceNumber());
+					logger.debug("dropped  request, return response: " + resp);
+
 					session.write(resp);
 					passOn = false;
 				}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java	2006-01-17 00:13:17 UTC (rev 397)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java	2006-01-18 10:24:32 UTC (rev 398)
@@ -231,11 +231,15 @@
 	}
 
 	/**
+	 * Set the sequence number. As a by-product it also sets the CSeq header field to this
+	 * value.
+	 * 
 	 * @param sequenceNumber
 	 *            The sequenceNumber to set.
 	 */
 	public void setSequenceNumber( int sequenceNumber )
 	{
 		this.sequenceNumber = sequenceNumber;
+		this.headers.put("CSeq", String.valueOf(this.sequenceNumber));
 	}
 }



From rbieniek at berlios.de  Wed Jan 18 19:31:02 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Wed, 18 Jan 2006 19:31:02 +0100
Subject: [Rtspproxy-devel] r399 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: filter/rewrite rtsp
Message-ID: <200601181831.k0IIV2Uj001857@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-18 19:30:56 +0100 (Wed, 18 Jan 2006)
New Revision: 399

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java
Log:
- changed URL rewriting interface by adding request headers to it. 
  This is needed by special filter which need to connect to other
  servers to obtain an OPTIONS response.
- exposed header map in RTSPmessage

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-01-18 10:24:32 UTC (rev 398)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-01-18 18:30:56 UTC (rev 399)
@@ -61,7 +61,7 @@
 		
 		if (req.getUrl() != null) {
 			UrlRewritingResult result = this.provider.rewriteRequestUrl(req.getUrl(), req.getVerb(), 
-					session.getRemoteAddress()); 
+					session.getRemoteAddress(), req.getHeaders()); 
 			
 			if(result != null) {
 				URL rewritten = result.getRewrittenUrl();

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java	2006-01-18 10:24:32 UTC (rev 398)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java	2006-01-18 18:30:56 UTC (rev 399)
@@ -19,6 +19,7 @@
 
 import java.net.SocketAddress;
 import java.net.URL;
+import java.util.Map;
 
 import rtspproxy.filter.GenericProvider;
 import rtspproxy.rtsp.RtspRequest;
@@ -35,7 +36,8 @@
 	 * @return a result object which can contain a modified result URL or a response message
 	 * sent back to the client. If null is returned, the URL is passed on without modification.
 	 */
-	public UrlRewritingResult rewriteRequestUrl(URL request, RtspRequest.Verb verb, SocketAddress client);
+	public UrlRewritingResult rewriteRequestUrl(URL request, RtspRequest.Verb verb, SocketAddress client,
+			Map<String, String> requestHeaders);
 
 	/**
 	 * rewrite an URL in a response header.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java	2006-01-18 10:24:32 UTC (rev 398)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java	2006-01-18 18:30:56 UTC (rev 399)
@@ -19,6 +19,8 @@
 package rtspproxy.rtsp;
 
 import java.nio.CharBuffer;
+import java.util.Collections;
+import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -148,6 +150,17 @@
 	}
 
 	/**
+	 * get a map of all headers set in the request
+	 * @return an unmodifiable map of all header fields in this request. 
+	 */
+	public Map<String, String> getHeaders() {
+		if(this.headers != null)
+			return Collections.unmodifiableMap(this.headers);
+		else
+			return Collections.unmodifiableMap(new HashMap<String, String>());
+	}
+	
+	/**
 	 * @return the number of headers owned by the message
 	 */
 	public int getHeadersCount()
@@ -223,10 +236,22 @@
 	public static final String CRLF = "\r\n";
 
 	/**
-	 * @return Returns the sequenceNumber.
+	 * get the sequence number. If the sequence has not been set, the value from the 
+	 * <b>CSeq</b> header is scaned (if the header is set)
+	 * @return Returns the sequenceNumber. Returns 0 if the sequence number has not been set and the
+	 * <b>CSeq</b> header is not available.
 	 */
 	public int getSequenceNumber()
 	{
+		if(this.sequenceNumber == 0) {
+			try {
+				if(this.headers.containsKey("CSeq"))
+					this.sequenceNumber = Integer.parseInt(this.headers.get("CSeq"));
+			} catch(Exception e) {
+				
+			}
+		}
+			
 		return sequenceNumber;
 	}
 



From rbieniek at berlios.de  Wed Jan 18 19:31:07 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Wed, 18 Jan 2006 19:31:07 +0100
Subject: [Rtspproxy-devel] r400 - trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite
Message-ID: <200601181831.k0IIV7S7001896@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-18 19:31:04 +0100 (Wed, 18 Jan 2006)
New Revision: 400

Modified:
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java
Log:
- changed URL rewriting interface by adding request headers to it. 
  This is needed by special filter which need to connect to other
  servers to obtain an OPTIONS response.
- exposed header map in RTSPmessage

Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java	2006-01-18 18:30:56 UTC (rev 399)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java	2006-01-18 18:31:04 UTC (rev 400)
@@ -10,6 +10,7 @@
 import java.net.URL;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 import org.dom4j.Element;
 
@@ -23,6 +24,7 @@
  */
 public class SimpleUrlRewritingProvider extends GenericProviderAdapter
 		implements UrlRewritingProvider, AAAConfigurable {
+	
 	/**
 	 * Logger for this class
 	 */
@@ -41,7 +43,8 @@
 	/* (non-Javadoc)
 	 * @see rtspproxy.filter.rewrite.UrlRewritingProvider#rewriteRequestUrl(java.net.URL)
 	 */
-	public UrlRewritingResult rewriteRequestUrl(URL request, RtspRequest.Verb verb, SocketAddress client) {
+	public UrlRewritingResult rewriteRequestUrl(URL request, RtspRequest.Verb verb, SocketAddress client,
+			Map<String, String> requestHeaders) {
 		UrlRewritingResult result = null;
 		URL rewritten = null;
 		String req = request.toString();



From rbieniek at berlios.de  Thu Jan 19 16:06:46 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Thu, 19 Jan 2006 16:06:46 +0100
Subject: [Rtspproxy-devel] r401 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: filter/rewrite jmx jmx/mbeans proxy
Message-ID: <200601191506.k0JF6kAw009056@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-19 16:06:34 +0100 (Thu, 19 Jan 2006)
New Revision: 401

Added:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxManageable.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxManageable2.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/Filter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/FilterMBean.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/Info.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/InfoMBean.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacade.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacadeMBean.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/Service.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ServiceMBean.java
Removed:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Filter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/FilterMBean.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Info.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/InfoMBean.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Service.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ServiceMBean.java
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java
Log:
- proxy sessions are now vivsible as JMX managed objects.
- a MBean server reference is passed to filters (if they implement
a special interface) which allows filters to add their own 
MBeans which are not covered by the standard mechanism
-- TODO: make client/server session visible as managed objects and
link them to the proxy session managed object
-- TODO: allow proxy session to be closed from the management console.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -7,6 +7,9 @@
 import java.net.URL;
 import java.util.List;
 
+import javax.management.MBeanServer;
+import javax.management.ObjectName;
+
 import org.apache.mina.common.IoFilter;
 import org.apache.mina.common.IoFilterAdapter;
 import org.apache.mina.common.IoSession;
@@ -16,6 +19,8 @@
 import org.slf4j.LoggerFactory;
 
 import rtspproxy.filter.FilterBase;
+import rtspproxy.jmx.JmxManageable;
+import rtspproxy.jmx.JmxManageable2;
 import rtspproxy.rtsp.RtspMessage;
 import rtspproxy.rtsp.RtspRequest;
 import rtspproxy.rtsp.RtspResponse;
@@ -24,7 +29,7 @@
  * @author bieniekr
  * 
  */
-public abstract class UrlRewritingFilter extends FilterBase {
+public abstract class UrlRewritingFilter extends FilterBase implements JmxManageable {
 	/**
 	 * Logger for this class
 	 */
@@ -126,4 +131,25 @@
 			}
 		}
 	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.JmxManageable#setMBeanServer(javax.management.MBeanServer)
+	 */
+	public void setMBeanServer(MBeanServer mbeanServer) {
+		if(this.provider instanceof JmxManageable)
+			((JmxManageable)this.provider).setMBeanServer(mbeanServer);
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.FilterBase#getDetailMBean()
+	 */
+	@Override
+	public ObjectName getDetailMBean() {
+		ObjectName name = null;
+		
+		if(this.provider instanceof JmxManageable2)
+			name = ((JmxManageable2)this.provider).getMBean();
+		
+		return name;
+	}
 }

Deleted: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Filter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Filter.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Filter.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -1,80 +0,0 @@
-/**
- * 
- */
-package rtspproxy.jmx;
-
-import javax.management.MBeanException;
-import javax.management.MalformedObjectNameException;
-import javax.management.ObjectName;
-
-import java.util.Hashtable;
-
-import rtspproxy.filter.FilterBase;
-
-/**
- * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
- *
- */
-public class Filter implements FilterMBean {
-
-	// managed filter
-	private FilterBase filter;
-	
-	// object name
-	private ObjectName name;
-	
-	/**
-	 * @throws NullPointerException 
-	 * @throws MalformedObjectNameException 
-	 * 
-	 */
-	Filter(FilterBase filter) throws MalformedObjectNameException, NullPointerException {
-		this.filter = filter;
-		
-		// build the MBean name
-		Hashtable<String, String> keys = new Hashtable<String, String>();
-		
-		keys.put("filter", filter.getTypeName());
-		keys.put("side", filter.getSide().toString());
-		keys.put("classname", filter.getClassName());
-		keys.put("id", Long.toHexString(System.identityHashCode(filter)));
-		
-		this.name = new ObjectName(JmxAgent.DOMAIN, keys);
-	}
-
-	/* (non-Javadoc)
-	 * @see rtspproxy.jmx.FilterMBean#getDetailMBean()
-	 */
-	public ObjectName getDetailMBean() {
-		return this.filter.getDetailMBean();
-	}
-
-	/* (non-Javadoc)
-	 * @see rtspproxy.jmx.FilterMBean#isRunning()
-	 */
-	public boolean isRunning() {
-		return this.filter.isRunning();
-	}
-
-	/* (non-Javadoc)
-	 * @see rtspproxy.jmx.FilterMBean#suspend()
-	 */
-	public void suspend() throws MBeanException {
-		this.filter.suspend();
-	}
-
-	/* (non-Javadoc)
-	 * @see rtspproxy.jmx.FilterMBean#resume()
-	 */
-	public void resume() throws MBeanException {
-		this.filter.resume();
-	}
-
-	/**
-	 * @return Returns the name.
-	 */
-	public ObjectName getName() {
-		return name;
-	}
-
-}

Deleted: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/FilterMBean.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/FilterMBean.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/FilterMBean.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -1,25 +0,0 @@
-/**
- * 
- */
-package rtspproxy.jmx;
-
-import javax.management.MBeanException;
-import javax.management.ObjectName;
-
-/**
- * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
- *
- */
-public interface FilterMBean {
-
-	public ObjectName getDetailMBean();
-	
-	public boolean isRunning();
-
-	/* Actions */
-
-	public void suspend() throws MBeanException;
-
-	public void resume() throws MBeanException;
-
-}

Deleted: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Info.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Info.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Info.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -1,86 +0,0 @@
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
- *                                                                         *
- ***************************************************************************/
-
-/*
- * $Id$
- * 
- * $URL$
- * 
- */
-package rtspproxy.jmx;
-
-import java.util.Date;
-
-import rtspproxy.config.Config;
-
-public class Info implements InfoMBean
-{
-
-	public String getName()
-	{
-		return Config.getName();
-	}
-
-	public String getVersion()
-	{
-		return Config.getVersion();
-	}
-
-	public Date getStartDate()
-	{
-		return Config.getStartDate();
-	}
-
-	public String getOSInfo()
-	{
-		StringBuilder sb = new StringBuilder();
-		sb.append( System.getProperty( "os.name" ) );
-		sb.append( " / " ).append( System.getProperty( "os.version" ) );
-		sb.append( " / " ).append( System.getProperty( "os.arch" ) );
-		return sb.toString();
-	}
-
-	public String getJVMInfo()
-	{
-		StringBuilder sb = new StringBuilder();
-		sb.append( System.getProperty( "java.vm.vendor" ) );
-		sb.append( " / " );
-		sb.append( System.getProperty( "java.vm.version" ) );
-		return sb.toString();
-	}
-
-	public double getFreeMemoryMB()
-	{
-		double mb = (double) Runtime.getRuntime().freeMemory() / (1024 * 1024);
-		return mb;
-		// Formatter f = new Formatter();
-		// return f.format( "%1$.2f MB", mb ).toString();
-	}
-
-	public double getTotalMemoryMB()
-	{
-		double mb = (double) Runtime.getRuntime().totalMemory() / (1024 * 1024);
-		return mb;
-		//Formatter f = new Formatter();
-		//return f.format( "%1$.2f MB", mb ).toString();
-	}
-
-	public void runGarbageCollector()
-	{
-		Runtime.getRuntime().gc();
-	}
-
-	public int getActiveThreadsNumber()
-	{
-		return Thread.activeCount();
-	}
-
-}

Deleted: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/InfoMBean.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/InfoMBean.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/InfoMBean.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -1,50 +0,0 @@
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
- *                                                                         *
- ***************************************************************************/
-
-/*
- * $Id$
- * 
- * $URL$
- * 
- */
-
-package rtspproxy.jmx;
-
-import java.util.Date;
-
-/**
- * MBean interface for exposing basic proxy informations.
- * 
- * @author Matteo Merli
- */
-public interface InfoMBean
-{
-
-	/** 
-	 * @return the name of the application
-	 */
-	public String getName();
-	public String getVersion();
-	public Date getStartDate();
-	
-	public String getOSInfo();
-	public String getJVMInfo();
-	
-	public double getFreeMemoryMB();
-	public double getTotalMemoryMB();
-	
-	public int getActiveThreadsNumber();
-	
-	// Actions
-	
-	public void runGarbageCollector();
-	
-}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -21,6 +21,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import javax.management.InstanceNotFoundException;
 import javax.management.MBeanServer;
 import javax.management.MBeanServerFactory;
 import javax.management.ObjectName;
@@ -48,7 +49,12 @@
 import rtspproxy.RtspService;
 import rtspproxy.config.Config;
 import rtspproxy.filter.FilterBase;
+import rtspproxy.jmx.mbeans.Filter;
+import rtspproxy.jmx.mbeans.Info;
+import rtspproxy.jmx.mbeans.ProxySessionFacade;
+import rtspproxy.jmx.mbeans.Service;
 import rtspproxy.lib.Singleton;
+import rtspproxy.proxy.ProxySession;
 
 /**
  * Entry point class for all the JMX interface.
@@ -60,7 +66,11 @@
 
 	private static Logger log = LoggerFactory.getLogger( JmxAgent.class );
 
-	static final String DOMAIN = "RtspProxy";
+	public static final String DOMAIN = "RtspProxy";
+	public static final String SERVICES_DOMAIN = "RtspProxy.Services";
+	public static final String FILTERS_DOMAIN = "RtspProxy.Filters";
+	public static final String RTSP_SESSION_DOMAIN = "RtspProxy.Sessions.RTSP";
+	public static final String PROXY_SESSION_DOMAIN = "RtspProxy.Sessions.Proxy";
 
 	private MBeanServer mbeanServer = null;
 
@@ -98,7 +108,7 @@
 					RtpClientService.getInstance(), RtpServerService.getInstance() };
 			ObjectName objectName;
 			for ( ProxyService proxyService : proxyServices ) {
-				objectName = ObjectName.getInstance( DOMAIN + ":name="
+				objectName = ObjectName.getInstance( SERVICES_DOMAIN + ":name="
 						+ proxyService.getName() );
 				mbeanServer.registerMBean( new Service( proxyService ), objectName );
 			}
@@ -201,6 +211,8 @@
 			
 			mbeanServer.registerMBean(mbean, mbean.getName());
 			filter.setMbeanName(mbean.getName());
+			if(filter instanceof JmxManageable)
+				((JmxManageable)filter).setMBeanServer(mbeanServer);
 		} catch(Exception e) {
 			log.error( "failed to register filter MBean: filter=" + filter, e );			
 		}
@@ -257,4 +269,54 @@
 			this.m_logger = LoggerFactory.getLogger(arg0);
 		}		
 	}
+
+	/**
+	 * @return Returns the mbeanServer.
+	 */
+	public MBeanServer getMbeanServer() {
+		return mbeanServer;
+	}
+	
+	/**
+	 * register a proxy session
+	 * 
+	 */
+	public void registerProxySession(ProxySession session) {
+		boolean enabled = Config.proxyManagementRemoteEnable.getValue();
+		if ( !enabled )
+			return;
+
+		try {
+			ProxySessionFacade mbean = new ProxySessionFacade(session);
+			ObjectName name = mbean.buildName();
+		
+			mbeanServer.registerMBean(mbean, name);
+			session.setObjectName(name);
+		} catch(Exception e) {
+			log.error( "failed to register proxy session MBean: session=" + session, e );
+		}
+	}
+	
+	/**
+	 * unregister a proxy session
+	 */
+	public void unregisterProxySession(ProxySession session) {
+		boolean enabled = Config.proxyManagementRemoteEnable.getValue();
+		if ( !enabled )
+			return;
+
+		try {
+			ObjectName name = session.getObjectName();
+		
+			if(name != null) {
+				mbeanServer.unregisterMBean(name);
+				session.setObjectName(null);
+			}
+		} catch(InstanceNotFoundException infe) {
+			log.debug("internal problem: MBean not found, name=" + session.getObjectName(), infe);
+		} catch(Exception e) {
+			log.error( "failed to register proxy session MBean: session=" + session, e );
+		}
+		
+	}
 }

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxManageable.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxManageable.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxManageable.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -0,0 +1,21 @@
+/**
+ * 
+ */
+package rtspproxy.jmx;
+
+import javax.management.MBeanServer;
+
+/**
+ * This interface is implemented by components that wish you expose its own MBeans to the
+ * managment interface.
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ */
+public interface JmxManageable {
+	/**
+	 * set the MBeanServer instance. This method becomes called after the MBean managing the
+	 * component has been created and attached to the MBeanServer.
+	 * @param mbeanServer the MBeanServer instance used to manage the RTSPProxy.
+	 */
+	public void setMBeanServer(MBeanServer mbeanServer);
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxManageable2.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxManageable2.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxManageable2.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -0,0 +1,20 @@
+/**
+ * 
+ */
+package rtspproxy.jmx;
+
+import javax.management.ObjectName;
+
+/**
+ * Extension of the JmxManageable interface for components that wish to make their 
+ * managed csub-components visible.
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public interface JmxManageable2 extends JmxManageable {
+	/**
+	 * get the sub-component object name
+	 */
+	public ObjectName getMBean();
+}

Deleted: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Service.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Service.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Service.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -1,95 +0,0 @@
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
- *                                                                         *
- ***************************************************************************/
-
-/*
- * $Id$
- * 
- * $URL$
- * 
- */
-
-package rtspproxy.jmx;
-
-import javax.management.MBeanException;
-
-import rtspproxy.ProxyService;
-import rtspproxy.config.IntegerParameter;
-import rtspproxy.config.Parameter;
-
-/**
- * Service MBean implementations
- * 
- * @author Matteo Merli
- */
-public class Service implements ServiceMBean
-{
-
-	ProxyService proxyService;
-
-	public Service( ProxyService proxyService )
-	{
-		this.proxyService = proxyService;
-	}
-
-	public String getNetworkInterface()
-	{
-		return proxyService.getNetworkInterfaceParameter().getStringValue();
-	}
-
-	public int getPort()
-	{
-		Parameter parameter = proxyService.getPortParameter();
-		return ((IntegerParameter) parameter).getValue();
-	}
-
-	public void setPort( int port ) throws MBeanException
-	{
-		Parameter parameter = proxyService.getPortParameter();
-		try {
-			parameter.setObjectValue( new Integer( port ) );
-		} catch ( Exception e ) {
-			throw new MBeanException( e );
-		}
-	}
-
-	public boolean isRunning()
-	{
-		return proxyService.isRunning();
-	}
-
-	public void start() throws MBeanException
-	{
-		try {
-			proxyService.start();
-		} catch ( Exception e ) {
-			throw new MBeanException( e );
-		}
-	}
-
-	public void stop() throws MBeanException
-	{
-		try {
-			proxyService.stop();
-		} catch ( Exception e ) {
-			throw new MBeanException( e );
-		}
-	}
-
-	public void restart() throws MBeanException
-	{
-		try {
-			proxyService.restart();
-		} catch ( Exception e ) {
-			throw new MBeanException( e );
-		}
-	}
-
-}

Deleted: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ServiceMBean.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ServiceMBean.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ServiceMBean.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -1,46 +0,0 @@
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
- *                                                                         *
- ***************************************************************************/
-
-/*
- * $Id$
- * 
- * $URL$
- * 
- */
-
-package rtspproxy.jmx;
-
-import javax.management.MBeanException;
-
-/**
- * @author Matteo Merli
- */
-public interface ServiceMBean
-{
-	/* Attributes */
-
-	public String getNetworkInterface();
-
-	public int getPort();
-
-	public void setPort( int port ) throws MBeanException;
-
-	public boolean isRunning();
-
-	/* Actions */
-
-	public void start() throws MBeanException;
-
-	public void stop() throws MBeanException;
-
-	public void restart() throws MBeanException;
-
-}

Copied: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/Filter.java (from rev 400, trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Filter.java)
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Filter.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/Filter.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -0,0 +1,81 @@
+/**
+ * 
+ */
+package rtspproxy.jmx.mbeans;
+
+import javax.management.MBeanException;
+import javax.management.MalformedObjectNameException;
+import javax.management.ObjectName;
+
+import java.util.Hashtable;
+
+import rtspproxy.filter.FilterBase;
+import rtspproxy.jmx.JmxAgent;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class Filter implements FilterMBean {
+
+	// managed filter
+	private FilterBase filter;
+	
+	// object name
+	private ObjectName name;
+	
+	/**
+	 * @throws NullPointerException 
+	 * @throws MalformedObjectNameException 
+	 * 
+	 */
+	public Filter(FilterBase filter) throws MalformedObjectNameException, NullPointerException {
+		this.filter = filter;
+		
+		// build the MBean name
+		Hashtable<String, String> keys = new Hashtable<String, String>();
+		
+		keys.put("filter", filter.getTypeName());
+		keys.put("side", filter.getSide().toString());
+		keys.put("classname", filter.getClassName());
+		keys.put("id", Long.toHexString(System.identityHashCode(filter)));
+		
+		this.name = new ObjectName(JmxAgent.FILTERS_DOMAIN, keys);
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.FilterMBean#getDetailMBean()
+	 */
+	public ObjectName getDetailMBean() {
+		return this.filter.getDetailMBean();
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.FilterMBean#isRunning()
+	 */
+	public boolean isRunning() {
+		return this.filter.isRunning();
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.FilterMBean#suspend()
+	 */
+	public void suspend() throws MBeanException {
+		this.filter.suspend();
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.FilterMBean#resume()
+	 */
+	public void resume() throws MBeanException {
+		this.filter.resume();
+	}
+
+	/**
+	 * @return Returns the name.
+	 */
+	public ObjectName getName() {
+		return name;
+	}
+
+}

Copied: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/FilterMBean.java (from rev 400, trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/FilterMBean.java)
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/FilterMBean.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/FilterMBean.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -0,0 +1,25 @@
+/**
+ * 
+ */
+package rtspproxy.jmx.mbeans;
+
+import javax.management.MBeanException;
+import javax.management.ObjectName;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public interface FilterMBean {
+
+	public ObjectName getDetailMBean();
+	
+	public boolean isRunning();
+
+	/* Actions */
+
+	public void suspend() throws MBeanException;
+
+	public void resume() throws MBeanException;
+
+}

Copied: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/Info.java (from rev 400, trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Info.java)
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Info.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/Info.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -0,0 +1,86 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+package rtspproxy.jmx.mbeans;
+
+import java.util.Date;
+
+import rtspproxy.config.Config;
+
+public class Info implements InfoMBean
+{
+
+	public String getName()
+	{
+		return Config.getName();
+	}
+
+	public String getVersion()
+	{
+		return Config.getVersion();
+	}
+
+	public Date getStartDate()
+	{
+		return Config.getStartDate();
+	}
+
+	public String getOSInfo()
+	{
+		StringBuilder sb = new StringBuilder();
+		sb.append( System.getProperty( "os.name" ) );
+		sb.append( " / " ).append( System.getProperty( "os.version" ) );
+		sb.append( " / " ).append( System.getProperty( "os.arch" ) );
+		return sb.toString();
+	}
+
+	public String getJVMInfo()
+	{
+		StringBuilder sb = new StringBuilder();
+		sb.append( System.getProperty( "java.vm.vendor" ) );
+		sb.append( " / " );
+		sb.append( System.getProperty( "java.vm.version" ) );
+		return sb.toString();
+	}
+
+	public double getFreeMemoryMB()
+	{
+		double mb = (double) Runtime.getRuntime().freeMemory() / (1024 * 1024);
+		return mb;
+		// Formatter f = new Formatter();
+		// return f.format( "%1$.2f MB", mb ).toString();
+	}
+
+	public double getTotalMemoryMB()
+	{
+		double mb = (double) Runtime.getRuntime().totalMemory() / (1024 * 1024);
+		return mb;
+		//Formatter f = new Formatter();
+		//return f.format( "%1$.2f MB", mb ).toString();
+	}
+
+	public void runGarbageCollector()
+	{
+		Runtime.getRuntime().gc();
+	}
+
+	public int getActiveThreadsNumber()
+	{
+		return Thread.activeCount();
+	}
+
+}

Copied: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/InfoMBean.java (from rev 400, trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/InfoMBean.java)
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/InfoMBean.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/InfoMBean.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -0,0 +1,50 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.jmx.mbeans;
+
+import java.util.Date;
+
+/**
+ * MBean interface for exposing basic proxy informations.
+ * 
+ * @author Matteo Merli
+ */
+public interface InfoMBean
+{
+
+	/** 
+	 * @return the name of the application
+	 */
+	public String getName();
+	public String getVersion();
+	public Date getStartDate();
+	
+	public String getOSInfo();
+	public String getJVMInfo();
+	
+	public double getFreeMemoryMB();
+	public double getTotalMemoryMB();
+	
+	public int getActiveThreadsNumber();
+	
+	// Actions
+	
+	public void runGarbageCollector();
+	
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacade.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacade.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacade.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -0,0 +1,60 @@
+/**
+ * 
+ */
+package rtspproxy.jmx.mbeans;
+
+import java.util.Hashtable;
+
+import javax.management.MalformedObjectNameException;
+import javax.management.ObjectName;
+
+import rtspproxy.jmx.JmxAgent;
+import rtspproxy.proxy.ProxySession;
+
+/**
+ * Management implementation of proxy sessions.
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class ProxySessionFacade implements ProxySessionFacadeMBean {
+
+	// reference to proxy session
+	private ProxySession session = null;
+	
+	/**
+	 * 
+	 */
+	public ProxySessionFacade(ProxySession session) {
+		this.session = session;
+	}
+
+	public boolean isClosed() {
+		return session.isClosed();
+	}
+
+	public ObjectName getClientSession() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public ObjectName getServerSession() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	/**
+	 * build the object name
+	 * @throws NullPointerException 
+	 * @throws MalformedObjectNameException 
+	 */
+	public ObjectName buildName() throws MalformedObjectNameException, NullPointerException {
+		Hashtable<String, String> parts = new Hashtable<String, String>();
+		
+		parts.put("clientID", this.session.getClientSessionId());
+		parts.put("serverID", this.session.getServerSessionId());
+		
+		return ObjectName.getInstance(JmxAgent.PROXY_SESSION_DOMAIN, parts);
+	}
+	
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacadeMBean.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacadeMBean.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacadeMBean.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -0,0 +1,29 @@
+/**
+ * 
+ */
+package rtspproxy.jmx.mbeans;
+
+import javax.management.ObjectName;
+
+/**
+ * Management interface to proxy session.
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public interface ProxySessionFacadeMBean {
+	/**
+	 * query if the session is closed
+	 */
+	public boolean isClosed();
+	
+	/**
+	 * get reference to client session
+	 */
+	public ObjectName getClientSession();
+	
+	/**
+	 * get reference to server session
+	 */
+	public ObjectName getServerSession();
+}

Copied: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/Service.java (from rev 400, trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Service.java)
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/Service.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/Service.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -0,0 +1,95 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.jmx.mbeans;
+
+import javax.management.MBeanException;
+
+import rtspproxy.ProxyService;
+import rtspproxy.config.IntegerParameter;
+import rtspproxy.config.Parameter;
+
+/**
+ * Service MBean implementations
+ * 
+ * @author Matteo Merli
+ */
+public class Service implements ServiceMBean
+{
+
+	ProxyService proxyService;
+
+	public Service( ProxyService proxyService )
+	{
+		this.proxyService = proxyService;
+	}
+
+	public String getNetworkInterface()
+	{
+		return proxyService.getNetworkInterfaceParameter().getStringValue();
+	}
+
+	public int getPort()
+	{
+		Parameter parameter = proxyService.getPortParameter();
+		return ((IntegerParameter) parameter).getValue();
+	}
+
+	public void setPort( int port ) throws MBeanException
+	{
+		Parameter parameter = proxyService.getPortParameter();
+		try {
+			parameter.setObjectValue( new Integer( port ) );
+		} catch ( Exception e ) {
+			throw new MBeanException( e );
+		}
+	}
+
+	public boolean isRunning()
+	{
+		return proxyService.isRunning();
+	}
+
+	public void start() throws MBeanException
+	{
+		try {
+			proxyService.start();
+		} catch ( Exception e ) {
+			throw new MBeanException( e );
+		}
+	}
+
+	public void stop() throws MBeanException
+	{
+		try {
+			proxyService.stop();
+		} catch ( Exception e ) {
+			throw new MBeanException( e );
+		}
+	}
+
+	public void restart() throws MBeanException
+	{
+		try {
+			proxyService.restart();
+		} catch ( Exception e ) {
+			throw new MBeanException( e );
+		}
+	}
+
+}

Copied: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ServiceMBean.java (from rev 400, trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ServiceMBean.java)
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ServiceMBean.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ServiceMBean.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -0,0 +1,46 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.jmx.mbeans;
+
+import javax.management.MBeanException;
+
+/**
+ * @author Matteo Merli
+ */
+public interface ServiceMBean
+{
+	/* Attributes */
+
+	public String getNetworkInterface();
+
+	public int getPort();
+
+	public void setPort( int port ) throws MBeanException;
+
+	public boolean isRunning();
+
+	/* Actions */
+
+	public void start() throws MBeanException;
+
+	public void stop() throws MBeanException;
+
+	public void restart() throws MBeanException;
+
+}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java	2006-01-18 18:31:04 UTC (rev 400)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java	2006-01-19 15:06:34 UTC (rev 401)
@@ -22,9 +22,12 @@
 import java.util.Random;
 import java.util.concurrent.ConcurrentHashMap;
 
+import javax.management.ObjectName;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import rtspproxy.jmx.JmxAgent;
 import rtspproxy.lib.number.UnsignedLong;
 import rtspproxy.proxy.track.RdtTrack;
 import rtspproxy.proxy.track.RtpTrack;
@@ -93,7 +96,7 @@
 	private String serverSessionId = null;
 
 	/** Tells whether the proxySession has already been closed. */
-	private boolean isClosed = false;
+	private boolean closedFlag = false;
 
 	/**
 	 * Collection of Track associated with this ProxySession.
@@ -101,6 +104,25 @@
 	private Map<String, Track> trackList = new ConcurrentHashMap<String, Track>();
 
 	/**
+	 * object name of proxy session
+	 */
+	private ObjectName objectName;
+	
+	/**
+	 * @return Returns the objectName.
+	 */
+	public ObjectName getObjectName() {
+		return objectName;
+	}
+
+	/**
+	 * @param objectName The objectName to set.
+	 */
+	public void setObjectName(ObjectName objectName) {
+		this.objectName = objectName;
+	}
+
+	/**
 	 * Construct a new ProxySession. The session ID that will be used when
 	 * communicating with the client will be generated.
 	 */
@@ -175,6 +197,7 @@
 	{
 		this.clientSessionId = clientSessionId;
 		clientSessionIds.put( clientSessionId, this );
+		makeManaged();
 	}
 
 	/**
@@ -188,14 +211,24 @@
 		this.serverSessionId = serverSessionId;
 		if ( serverSessionId != null )
 			serverSessionIds.put( serverSessionId, this );
+		makeManaged();
 	}
 
 	/**
+	 * check if both client and server session id's are set and register proxy session 
+	 * facade MBean
+	 */
+	private void makeManaged() {
+		if(this.clientSessionId != null && this.serverSessionId != null)
+			JmxAgent.getInstance().registerProxySession(this);
+	}
+	
+	/**
 	 * Closes the entire proxy session and frees all associated resources.
 	 */
 	public synchronized void close()
 	{
-		if ( isClosed )
+		if ( closedFlag )
 			return;
 
 		log.debug( "TrackList: " + trackList );
@@ -205,7 +238,7 @@
 			entry.getValue().close();
 		}
 
-		isClosed = true;
+		closedFlag = true;
 		log.debug( "Closed proxySession: " + clientSessionId );
 
 		String s = "";
@@ -223,6 +256,9 @@
 			clientSessionIds.remove( clientSessionId );
 		if ( serverSessionId != null )
 			serverSessionIds.remove( serverSessionId );
+		
+		// unregister session facade in MBean server
+		JmxAgent.getInstance().unregisterProxySession(this);
 	}
 
 	// ///////////////////
@@ -253,4 +289,11 @@
 		}
 	}
 
+	/**
+	 * @return Returns the closedFlag.
+	 */
+	public boolean isClosed() {
+		return closedFlag;
+	}
+
 }



From rbieniek at berlios.de  Mon Jan 23 00:32:45 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Mon, 23 Jan 2006 00:32:45 +0100
Subject: [Rtspproxy-devel] r402 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio: . support
Message-ID: <200601222332.k0MNWj7X026663@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-23 00:32:26 +0100 (Mon, 23 Jan 2006)
New Revision: 402

Added:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/SessionAwareDatagramAcceptor.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/StatefulDatagramSession.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramAcceptorDelegate.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionImpl.java
Log:
- Started work on session-aware datagram acceptor

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/SessionAwareDatagramAcceptor.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/SessionAwareDatagramAcceptor.java	2006-01-19 15:06:34 UTC (rev 401)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/SessionAwareDatagramAcceptor.java	2006-01-22 23:32:26 UTC (rev 402)
@@ -0,0 +1,36 @@
+/**
+ *   @(#) $Id: DatagramAcceptor.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio;
+
+import org.apache.mina.common.support.DelegatedIoAcceptor;
+
+import rtspproxy.transport.socket.nio.support.SessionAwareDatagramAcceptorDelegate;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class SessionAwareDatagramAcceptor extends DelegatedIoAcceptor {
+	/**
+	 * create an instance
+	 */
+	public SessionAwareDatagramAcceptor() {
+		init( new SessionAwareDatagramAcceptorDelegate(this) );
+	}
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/StatefulDatagramSession.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/StatefulDatagramSession.java	2006-01-19 15:06:34 UTC (rev 401)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/StatefulDatagramSession.java	2006-01-22 23:32:26 UTC (rev 402)
@@ -0,0 +1,38 @@
+/**
+ *   @(#) $Id: DatagramAcceptor.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio;
+
+import org.apache.mina.common.IoSession;
+
+public interface StatefulDatagramSession extends IoSession {
+	/**
+	 * set the per-session timeout. If the timeout expires on both up- and downstream
+	 * directions without passing messages along, the session gets closed.
+	 * @param timeout the timeout value in millisecods
+	 */
+	public void setSessionTimeout(int timeout);
+
+	/**
+	 * get the per-session timeout. If the timeout expires on both up- and downstream
+	 * directions without passing messages along, the session gets closed.
+	 * @return timeout the timeout value in millisecods
+	 */
+	public int getSessionTimeout();
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramAcceptorDelegate.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramAcceptorDelegate.java	2006-01-19 15:06:34 UTC (rev 401)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramAcceptorDelegate.java	2006-01-22 23:32:26 UTC (rev 402)
@@ -0,0 +1,101 @@
+/**
+ *   @(#) $Id: DatagramAcceptor.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio.support;
+
+import java.io.IOException;
+import java.net.SocketAddress;
+import java.util.HashMap;
+
+import org.apache.mina.common.IoAcceptor;
+import org.apache.mina.common.IoFilterChainBuilder;
+import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.support.BaseIoAcceptor;
+
+import rtspproxy.transport.socket.nio.DatagramAcceptor;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ * 
+ */
+public class SessionAwareDatagramAcceptorDelegate extends BaseIoAcceptor implements
+		IoAcceptor {
+
+	private IoAcceptor wrapper;
+
+	private HashMap<SocketAddress, HandlerInfo> acceptors = new HashMap<SocketAddress, HandlerInfo>();
+
+	/**
+	 * create an instance
+	 */
+	public SessionAwareDatagramAcceptorDelegate(IoAcceptor wrapper) {
+		this.wrapper = wrapper;
+	}
+
+	public void bind(SocketAddress addr, IoHandler handler,
+			IoFilterChainBuilder chainBuilder) throws IOException {
+		DatagramAcceptor acceptor = new DatagramAcceptor();
+		SessionAwareDatagramHandler sessionHandler = new SessionAwareDatagramHandler(addr, handler, chainBuilder);
+		
+		acceptor.bind(addr, sessionHandler, null);
+		synchronized (acceptors) {
+			acceptors.put(addr, new HandlerInfo(acceptor, sessionHandler));
+		}
+	}
+
+	public void unbind(SocketAddress addr) {
+		synchronized (acceptors) {
+			HandlerInfo info = acceptors.get(addr);
+			
+			if(info != null) {
+				info.acceptor.unbind(addr);
+				info.handler.unbind();
+				acceptors.remove(addr);
+			}
+		}
+	}
+
+	private static class HandlerInfo {
+		private DatagramAcceptor acceptor;
+		private SessionAwareDatagramHandler handler;
+		
+		private HandlerInfo(DatagramAcceptor acceptor, SessionAwareDatagramHandler handler) {
+			this.acceptor = acceptor;
+			this.handler = handler;
+		}
+	}
+
+	@Override
+	public IoFilterChainBuilder getFilterChainBuilder() {
+		// TODO Auto-generated method stub
+		return super.getFilterChainBuilder();
+	}
+
+	@Override
+	public void setFilterChainBuilder(IoFilterChainBuilder builder) {
+		// TODO Auto-generated method stub
+		super.setFilterChainBuilder(builder);
+	}
+
+	@Override
+	public IoSession newSession(SocketAddress arg0, SocketAddress arg1) {
+		// TODO Auto-generated method stub
+		return super.newSession(arg0, arg1);
+	}
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramHandler.java	2006-01-19 15:06:34 UTC (rev 401)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramHandler.java	2006-01-22 23:32:26 UTC (rev 402)
@@ -0,0 +1,115 @@
+/**
+ *   @(#) $Id: DatagramAcceptor.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio.support;
+
+import java.net.SocketAddress;
+import java.util.HashMap;
+
+import org.apache.mina.common.IdleStatus;
+import org.apache.mina.common.IoFilterChainBuilder;
+import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.IoHandlerAdapter;
+import org.apache.mina.common.IoSession;
+
+class SessionAwareDatagramHandler extends IoHandlerAdapter implements IoHandler {
+
+	private SocketAddress localAddress;
+	private IoHandler wrapped;
+	private IoFilterChainBuilder chainBuilder;
+	
+	private StatefulDatagramSessionImpl defaultSession;
+	private HashMap<SocketAddress, StatefulDatagramSessionImpl> sessions = 
+		new HashMap<SocketAddress, StatefulDatagramSessionImpl>();
+	
+	/**
+	 * create an instance
+	 */
+	SessionAwareDatagramHandler(SocketAddress localAddress, IoHandler wrapped, 
+			IoFilterChainBuilder chainBuilder) {
+		this.localAddress = localAddress;
+		this.wrapped = wrapped;
+		this.chainBuilder = chainBuilder;
+	}
+	
+	public void exceptionCaught(IoSession session, Throwable t) {
+		StatefulDatagramSessionImpl relay = getRelaySession(session.getRemoteAddress());
+		
+		relay.setDownsideSession(session);
+		relay.fireExceptionCaught(relay, t);
+	}
+
+	public void messageReceived(IoSession session, Object message) throws Exception {
+		StatefulDatagramSessionImpl relay = getRelaySession(session.getRemoteAddress());
+		
+		relay.setDownsideSession(session);
+		relay.fireMessageReceived(relay, message);
+	}
+
+	public void messageSent(IoSession session, Object message) throws Exception {
+		StatefulDatagramSessionImpl relay = (StatefulDatagramSessionImpl)session;
+		
+		relay.getDownsideSession().write(message);
+	}
+
+	/**
+	 * handle the acceptor unbind operation. Do this by closing all open sessions.
+	 */
+	public void unbind() {
+		// TODO Auto-generated method stub
+		
+	}
+
+	/**
+	 * get a session for a remote peer. If there is no session for the remote peer,
+	 * a fresh one gets created and lifecycle methods are called.
+	 * @param addr the remotem peer address. If null, the default session is used.
+	 */
+	private StatefulDatagramSessionImpl getRelaySession(SocketAddress addr) {
+		StatefulDatagramSessionImpl session = null;
+		
+		if(addr == null) {
+			session = this.defaultSession;
+			
+			if(session == null) {
+				session = createSession(addr);
+				
+				this.defaultSession = session;
+			}
+		} else {
+			session = this.sessions.get(addr);
+			
+			if(session == null) {
+				session = createSession(addr);
+				
+				this.sessions.put(addr, session);
+			}
+		}
+		
+		return session;
+	}
+	
+	/**
+	 * create a session for a remote peer. Lifecycle methods are fired accordingly
+	 */
+	private StatefulDatagramSessionImpl createSession(SocketAddress addr) {
+		StatefulDatagramSessionImpl session = null;
+		
+		return session;
+	}
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionImpl.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionImpl.java	2006-01-19 15:06:34 UTC (rev 401)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionImpl.java	2006-01-22 23:32:26 UTC (rev 402)
@@ -0,0 +1,116 @@
+/**
+ *   @(#) $Id: DatagramAcceptor.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio.support;
+
+import java.net.SocketAddress;
+
+import org.apache.mina.common.IoFilterChain;
+import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoSessionManager;
+import org.apache.mina.common.TransportType;
+import org.apache.mina.common.support.BaseIoSession;
+
+import rtspproxy.transport.socket.nio.StatefulDatagramSession;
+
+class StatefulDatagramSessionImpl extends BaseIoSession implements
+		StatefulDatagramSession {
+
+	private SocketAddress localAddr;
+	private SocketAddress remoteAddr;
+	private IoHandler handler;
+	private IoSession downsideSession;
+	
+	/**
+	 * only constructable from within this package
+	 */
+	StatefulDatagramSessionImpl(IoHandler handler, SocketAddress localAddr, SocketAddress remoteAddr) {
+		this.handler = handler;
+		this.localAddr = localAddr;
+		this.remoteAddr = remoteAddr;
+	}
+	
+	@Override
+	protected void updateTrafficMask() {
+		// TODO Auto-generated method stub
+
+	}
+
+	public IoSessionManager getManager() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public IoHandler getHandler() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public IoFilterChain getFilterChain() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public TransportType getTransportType() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public SocketAddress getRemoteAddress() {
+		return this.localAddr;
+	}
+
+	public SocketAddress getLocalAddress() {
+		return this.remoteAddr;
+	}
+
+	public int getScheduledWriteRequests() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	public void setSessionTimeout(int timeout) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public int getSessionTimeout() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	public void fireExceptionCaught(StatefulDatagramSessionImpl relay, Throwable t) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public void fireMessageReceived(StatefulDatagramSessionImpl relay, Object message) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	IoSession getDownsideSession() {
+		return downsideSession;
+	}
+
+	void setDownsideSession(IoSession downsideSession) {
+		this.downsideSession = downsideSession;
+	}
+
+}



From rbieniek at berlios.de  Mon Jan 23 13:54:44 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Mon, 23 Jan 2006 13:54:44 +0100
Subject: [Rtspproxy-devel] r403 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio: . support
Message-ID: <200601231254.k0NCsimc017078@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-23 13:54:34 +0100 (Mon, 23 Jan 2006)
New Revision: 403

Added:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionFilterChain.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionManager.java
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/SessionAwareDatagramAcceptor.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramAcceptorDelegate.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionImpl.java
Log:
- Further work on session-aware datagram acceptor

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/SessionAwareDatagramAcceptor.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/SessionAwareDatagramAcceptor.java	2006-01-22 23:32:26 UTC (rev 402)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/SessionAwareDatagramAcceptor.java	2006-01-23 12:54:34 UTC (rev 403)
@@ -31,6 +31,6 @@
 	 * create an instance
 	 */
 	public SessionAwareDatagramAcceptor() {
-		init( new SessionAwareDatagramAcceptorDelegate(this) );
+		init( new SessionAwareDatagramAcceptorDelegate() );
 	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramAcceptorDelegate.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramAcceptorDelegate.java	2006-01-22 23:32:26 UTC (rev 402)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramAcceptorDelegate.java	2006-01-23 12:54:34 UTC (rev 403)
@@ -22,6 +22,7 @@
 import java.net.SocketAddress;
 import java.util.HashMap;
 
+import org.apache.mina.common.DefaultIoFilterChainBuilder;
 import org.apache.mina.common.IoAcceptor;
 import org.apache.mina.common.IoFilterChainBuilder;
 import org.apache.mina.common.IoHandler;
@@ -37,22 +38,22 @@
 public class SessionAwareDatagramAcceptorDelegate extends BaseIoAcceptor implements
 		IoAcceptor {
 
-	private IoAcceptor wrapper;
-
+	private DatagramAcceptor acceptor;
 	private HashMap<SocketAddress, HandlerInfo> acceptors = new HashMap<SocketAddress, HandlerInfo>();
-
+	private StatefulDatagramSessionManager sessionManager = new StatefulDatagramSessionManager();
+	
 	/**
 	 * create an instance
 	 */
-	public SessionAwareDatagramAcceptorDelegate(IoAcceptor wrapper) {
-		this.wrapper = wrapper;
+	public SessionAwareDatagramAcceptorDelegate() {
 	}
 
 	public void bind(SocketAddress addr, IoHandler handler,
 			IoFilterChainBuilder chainBuilder) throws IOException {
-		DatagramAcceptor acceptor = new DatagramAcceptor();
-		SessionAwareDatagramHandler sessionHandler = new SessionAwareDatagramHandler(addr, handler, chainBuilder);
+		SessionAwareDatagramHandler sessionHandler = new SessionAwareDatagramHandler(addr, handler, chainBuilder,
+				sessionManager);
 		
+		acceptor = new DatagramAcceptor();
 		acceptor.bind(addr, sessionHandler, null);
 		synchronized (acceptors) {
 			acceptors.put(addr, new HandlerInfo(acceptor, sessionHandler));
@@ -65,7 +66,7 @@
 			
 			if(info != null) {
 				info.acceptor.unbind(addr);
-				info.handler.unbind();
+				this.sessionManager.closeSessions(addr, info.handler);
 				acceptors.remove(addr);
 			}
 		}
@@ -83,19 +84,33 @@
 
 	@Override
 	public IoFilterChainBuilder getFilterChainBuilder() {
-		// TODO Auto-generated method stub
-		return super.getFilterChainBuilder();
+		return this.sessionManager.getFilterChainBuilder();
 	}
 
 	@Override
 	public void setFilterChainBuilder(IoFilterChainBuilder builder) {
-		// TODO Auto-generated method stub
-		super.setFilterChainBuilder(builder);
+		this.sessionManager.setFilterChainBuilder(builder);
 	}
 
 	@Override
-	public IoSession newSession(SocketAddress arg0, SocketAddress arg1) {
-		// TODO Auto-generated method stub
-		return super.newSession(arg0, arg1);
+	public IoSession newSession(SocketAddress remoteAddress, SocketAddress localAddress) {
+		if(remoteAddress == null)
+			throw new IllegalArgumentException("null remote address not allowed");
+		
+		synchronized (this.acceptors) {
+			HandlerInfo info = this.acceptors.get(localAddress);
+			if(info == null)
+				throw new IllegalArgumentException("not bound yet: " + localAddress);
+
+			try {
+				return this.sessionManager.newSession(localAddress, remoteAddress, info.handler.getWrappedHandler(), 
+						info.handler.getFilterChainBuilder());
+			} catch(IllegalArgumentException iae) {
+				throw iae;
+			} catch(Exception e) {
+				// TODO the original exception should be thrown but interface is too narrow.
+				throw new IllegalArgumentException("cant create session", e);
+			}
+		}
 	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramHandler.java	2006-01-22 23:32:26 UTC (rev 402)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramHandler.java	2006-01-23 12:54:34 UTC (rev 403)
@@ -21,6 +21,7 @@
 import java.net.SocketAddress;
 import java.util.HashMap;
 
+import org.apache.mina.common.ExceptionMonitor;
 import org.apache.mina.common.IdleStatus;
 import org.apache.mina.common.IoFilterChainBuilder;
 import org.apache.mina.common.IoHandler;
@@ -32,33 +33,34 @@
 	private SocketAddress localAddress;
 	private IoHandler wrapped;
 	private IoFilterChainBuilder chainBuilder;
+	private StatefulDatagramSessionManager sessionManager;
 	
-	private StatefulDatagramSessionImpl defaultSession;
-	private HashMap<SocketAddress, StatefulDatagramSessionImpl> sessions = 
-		new HashMap<SocketAddress, StatefulDatagramSessionImpl>();
-	
 	/**
 	 * create an instance
+	 * @param sessionManager 
 	 */
 	SessionAwareDatagramHandler(SocketAddress localAddress, IoHandler wrapped, 
-			IoFilterChainBuilder chainBuilder) {
+			IoFilterChainBuilder chainBuilder, StatefulDatagramSessionManager sessionManager) {
 		this.localAddress = localAddress;
 		this.wrapped = wrapped;
 		this.chainBuilder = chainBuilder;
+		this.sessionManager = sessionManager;
 	}
 	
-	public void exceptionCaught(IoSession session, Throwable t) {
-		StatefulDatagramSessionImpl relay = getRelaySession(session.getRemoteAddress());
+	public void exceptionCaught(IoSession session, Throwable t) throws Exception {
+		StatefulDatagramSessionImpl relay = this.sessionManager.getSession(localAddress, session.getRemoteAddress(),
+				this.wrapped, this.chainBuilder);
 		
 		relay.setDownsideSession(session);
-		relay.fireExceptionCaught(relay, t);
+		this.wrapped.exceptionCaught(relay, t);
 	}
 
 	public void messageReceived(IoSession session, Object message) throws Exception {
-		StatefulDatagramSessionImpl relay = getRelaySession(session.getRemoteAddress());
+		StatefulDatagramSessionImpl relay = this.sessionManager.getSession(localAddress, session.getRemoteAddress(),
+				this.wrapped, this.chainBuilder);
 		
 		relay.setDownsideSession(session);
-		relay.fireMessageReceived(relay, message);
+		this.wrapped.messageReceived(relay, message);
 	}
 
 	public void messageSent(IoSession session, Object message) throws Exception {
@@ -67,49 +69,11 @@
 		relay.getDownsideSession().write(message);
 	}
 
-	/**
-	 * handle the acceptor unbind operation. Do this by closing all open sessions.
-	 */
-	public void unbind() {
-		// TODO Auto-generated method stub
-		
+	IoFilterChainBuilder getFilterChainBuilder() {
+		return this.chainBuilder;
 	}
 
-	/**
-	 * get a session for a remote peer. If there is no session for the remote peer,
-	 * a fresh one gets created and lifecycle methods are called.
-	 * @param addr the remotem peer address. If null, the default session is used.
-	 */
-	private StatefulDatagramSessionImpl getRelaySession(SocketAddress addr) {
-		StatefulDatagramSessionImpl session = null;
-		
-		if(addr == null) {
-			session = this.defaultSession;
-			
-			if(session == null) {
-				session = createSession(addr);
-				
-				this.defaultSession = session;
-			}
-		} else {
-			session = this.sessions.get(addr);
-			
-			if(session == null) {
-				session = createSession(addr);
-				
-				this.sessions.put(addr, session);
-			}
-		}
-		
-		return session;
+	IoHandler getWrappedHandler() {
+		return this.wrapped;
 	}
-	
-	/**
-	 * create a session for a remote peer. Lifecycle methods are fired accordingly
-	 */
-	private StatefulDatagramSessionImpl createSession(SocketAddress addr) {
-		StatefulDatagramSessionImpl session = null;
-		
-		return session;
-	}
-}
+}
\ No newline at end of file

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionFilterChain.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionFilterChain.java	2006-01-22 23:32:26 UTC (rev 402)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionFilterChain.java	2006-01-23 12:54:34 UTC (rev 403)
@@ -0,0 +1,42 @@
+/**
+ *   @(#) $Id: DatagramAcceptor.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio.support;
+
+import org.apache.mina.common.CloseFuture;
+import org.apache.mina.common.IoFilterChain;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoFilter.WriteRequest;
+import org.apache.mina.common.support.AbstractIoFilterChain;
+
+class StatefulDatagramSessionFilterChain extends AbstractIoFilterChain
+		implements IoFilterChain {
+
+	StatefulDatagramSessionFilterChain(IoSession session) {
+		super(session);
+	}
+
+	@Override
+	protected void doWrite(IoSession session, WriteRequest writeReq) throws Exception {
+	}
+
+	@Override
+	protected void doClose(IoSession session, CloseFuture closeFuture) throws Exception {
+	}
+
+}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionImpl.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionImpl.java	2006-01-22 23:32:26 UTC (rev 402)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionImpl.java	2006-01-23 12:54:34 UTC (rev 403)
@@ -35,15 +35,21 @@
 	private SocketAddress localAddr;
 	private SocketAddress remoteAddr;
 	private IoHandler handler;
+	private StatefulDatagramSessionManager sessionManager;
 	private IoSession downsideSession;
+	private StatefulDatagramSessionFilterChain filterChain;
 	
 	/**
 	 * only constructable from within this package
 	 */
-	StatefulDatagramSessionImpl(IoHandler handler, SocketAddress localAddr, SocketAddress remoteAddr) {
+	StatefulDatagramSessionImpl(IoHandler handler, SocketAddress localAddr, SocketAddress remoteAddr,
+			StatefulDatagramSessionManager sessionManager) {
 		this.handler = handler;
 		this.localAddr = localAddr;
 		this.remoteAddr = remoteAddr;
+		this.sessionManager = sessionManager;
+		
+		this.filterChain = new StatefulDatagramSessionFilterChain(this);
 	}
 	
 	@Override
@@ -53,18 +59,15 @@
 	}
 
 	public IoSessionManager getManager() {
-		// TODO Auto-generated method stub
-		return null;
+		return this.sessionManager;
 	}
 
 	public IoHandler getHandler() {
-		// TODO Auto-generated method stub
-		return null;
+		return handler;
 	}
 
 	public IoFilterChain getFilterChain() {
-		// TODO Auto-generated method stub
-		return null;
+		return this.filterChain;
 	}
 
 	public TransportType getTransportType() {
@@ -81,8 +84,7 @@
 	}
 
 	public int getScheduledWriteRequests() {
-		// TODO Auto-generated method stub
-		return 0;
+		return this.getDownsideSession().getScheduledWriteRequests();
 	}
 
 	public void setSessionTimeout(int timeout) {
@@ -95,16 +97,6 @@
 		return 0;
 	}
 
-	public void fireExceptionCaught(StatefulDatagramSessionImpl relay, Throwable t) {
-		// TODO Auto-generated method stub
-		
-	}
-
-	public void fireMessageReceived(StatefulDatagramSessionImpl relay, Object message) {
-		// TODO Auto-generated method stub
-		
-	}
-
 	IoSession getDownsideSession() {
 		return downsideSession;
 	}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionManager.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionManager.java	2006-01-22 23:32:26 UTC (rev 402)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionManager.java	2006-01-23 12:54:34 UTC (rev 403)
@@ -0,0 +1,164 @@
+/**
+ *   @(#) $Id: DatagramAcceptor.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio.support;
+
+import java.net.SocketAddress;
+import java.util.HashMap;
+
+import org.apache.mina.common.IoAcceptor;
+import org.apache.mina.common.IoFilterChainBuilder;
+import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoSessionManager;
+import org.apache.mina.common.support.BaseIoSessionManager;
+
+public class StatefulDatagramSessionManager extends BaseIoSessionManager
+		implements IoSessionManager {
+
+	private HashMap<SocketAddress, LocalSessionsHolder> sessions = new HashMap<SocketAddress, LocalSessionsHolder>();
+	
+	StatefulDatagramSessionManager() {
+	}
+
+	/**
+	 * obtain a session for a (local, remote) address pair. If a sessin does not exist,
+	 * create a new one
+	 * @param localAddr the local address
+	 * @param remoteAddr the remote address
+	 * @exception Exception session creation or initialization failed
+	 */
+	StatefulDatagramSessionImpl getSession(SocketAddress localAddr, SocketAddress remoteAddr, 
+			IoHandler handler, IoFilterChainBuilder chainBuilder) throws Exception {
+		synchronized (sessions) {
+			LocalSessionsHolder holder = this.sessions.get(localAddr);
+			
+			if(holder == null) {
+				holder = new LocalSessionsHolder(localAddr);
+				this.sessions.put(localAddr, holder);
+			}
+			
+			return holder.getSession(remoteAddr, handler, chainBuilder);
+		}
+	}
+
+	/**
+	 * obtain a new session for a (local, remote) address pair.
+	 * @param localAddr the local address
+	 * @param remoteAddr the remote address
+	 * @throws Exception 
+	 * @exception Exception session creation or initialization failed
+	 */
+	public IoSession newSession(SocketAddress localAddr, SocketAddress remoteAddr, IoHandler handler,
+			IoFilterChainBuilder chainBuilder) throws Exception {
+		synchronized (sessions) {
+			LocalSessionsHolder holder = this.sessions.get(localAddr);
+			
+			if(holder == null) {
+				holder = new LocalSessionsHolder(localAddr);
+				this.sessions.put(localAddr, holder);
+			}
+			
+			return holder.newSession(remoteAddr, handler, chainBuilder);
+		}
+	}
+
+	void closeSessions(SocketAddress localAddr, IoHandler handler) {
+		synchronized (this.sessions) {
+			LocalSessionsHolder holder = this.sessions.get(localAddr);
+			
+			if(holder != null)
+				holder.closeSessions(handler);
+		}
+	}
+
+	private class LocalSessionsHolder {
+		
+		private SocketAddress localAddr;
+		private StatefulDatagramSessionImpl nullAddrSession;
+		private HashMap<SocketAddress, StatefulDatagramSessionImpl> sessions = 
+			new HashMap<SocketAddress, StatefulDatagramSessionImpl>();
+		
+		private LocalSessionsHolder(SocketAddress localAddr) {
+			this.localAddr = localAddr;
+		}
+
+		public IoSession newSession(SocketAddress remoteAddr, IoHandler handler, IoFilterChainBuilder chainBuilder) throws Exception {
+			if(this.sessions.get(remoteAddr) != null)
+				throw new IllegalArgumentException("remote address already bound to session: " + remoteAddr);
+
+			StatefulDatagramSessionImpl session = createSession(remoteAddr, handler, chainBuilder);
+			this.sessions.put(remoteAddr, session);
+			
+			return session;
+		}
+
+		private void closeSessions(IoHandler handler) {
+			for(SocketAddress addr : this.sessions.keySet()) {
+				StatefulDatagramSessionImpl session = this.sessions.get(addr);
+				
+				try {
+					handler.sessionClosed(session);
+				} catch(Exception e) {
+					try {
+						handler.exceptionCaught(session, e);
+					} catch(Throwable t) {
+						getExceptionMonitor().exceptionCaught(t);
+					}
+				}
+			}
+		}
+
+		private StatefulDatagramSessionImpl getSession(SocketAddress remoteAddr, IoHandler handler, 
+				IoFilterChainBuilder chainBuilder) throws Exception {
+			StatefulDatagramSessionImpl session = null;
+			
+			if(remoteAddr == null) {
+				if(this.nullAddrSession == null)
+					this.nullAddrSession = createSession(remoteAddr, handler, chainBuilder);
+				
+				session = this.nullAddrSession;
+			} else {
+				session = this.sessions.get(remoteAddr);
+				
+				if(session == null) {
+					session = createSession(remoteAddr, handler, chainBuilder);
+					this.sessions.put(remoteAddr, session);
+				}
+			}
+			
+			return session;
+		}
+
+		private StatefulDatagramSessionImpl createSession(SocketAddress remoteAddr, IoHandler handler, 
+				IoFilterChainBuilder chainBuilder) throws Exception {
+			StatefulDatagramSessionImpl session = new StatefulDatagramSessionImpl(handler, this.localAddr, remoteAddr,
+					StatefulDatagramSessionManager.this);
+			
+			StatefulDatagramSessionManager.this.getFilterChainBuilder().buildFilterChain(session.getFilterChain());
+			if(chainBuilder != null)
+				chainBuilder.buildFilterChain(session.getFilterChain());
+			
+			// fire lifecycle events
+			handler.sessionCreated(session);
+			handler.sessionOpened(session);
+
+			return session;
+		}
+	}
+}



From rbieniek at berlios.de  Wed Jan 25 01:00:51 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Wed, 25 Jan 2006 01:00:51 +0100
Subject: [Rtspproxy-devel] r404 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: . filter jmx/mbeans proxy proxy/track transport/socket/nio transport/socket/nio/support
Message-ID: <200601250000.k0P00ppC006224@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-25 01:00:25 +0100 (Wed, 25 Jan 2006)
New Revision: 404

Added:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/ConnectionlessSessionTracker.java
Removed:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacade.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/SessionAwareDatagramAcceptor.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramAcceptorDelegate.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionFilterChain.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionImpl.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionManager.java
Log:
- SessionAwareDatagramAcceptor works up to the extend that it does
  not handle timed-out session correctly. Session timeout is not 
  implemented at all.
- Removed RDT session tracking filters. Their purpose, namely 
  spying on the RDT port numbers, is put back into the RTSP
  transport modification when passing response from remote server
  to client.
- Fixed bug in the JMX instantiation of ProxySessions.
- TODO: expose RDT / RTP tracks in JMX
- TODO: couple RDT / RTP track lifetime to proxy session lifetime.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -28,6 +28,7 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.apache.mina.common.IoAcceptor;
 import org.apache.mina.common.IoFilterChainBuilder;
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.IoSession;
@@ -38,6 +39,7 @@
 import rtspproxy.lib.Exceptions;
 import rtspproxy.lib.NetworkInterface;
 import rtspproxy.lib.Singleton;
+import rtspproxy.transport.socket.nio.ConnectionlessSessionTracker;
 
 /**
  * ProxyService is the base abstract class for all the "Services" that can be
@@ -233,10 +235,18 @@
 	 *            the address of the remote host to connect to.
 	 * @return the newly created IoSession
 	 */
-	public IoSession newSession( SocketAddress remoteAddress )
+	public synchronized IoSession newSession( SocketAddress remoteAddress )
 	{
-		return Reactor.getRegistry().getAcceptor( this ).newSession( remoteAddress,
-				socketAddress );
+		IoSession session = null;
+		IoAcceptor acceptor = Reactor.getRegistry().getAcceptor( this );
+		
+		if(acceptor instanceof ConnectionlessSessionTracker)
+			session = ((ConnectionlessSessionTracker)acceptor).getSession(socketAddress, remoteAddress);
+		
+		if(session == null) 
+		 session = acceptor.newSession( remoteAddress, socketAddress );
+		
+		return session;
 	}
 
 	/**

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -43,6 +43,7 @@
 import rtspproxy.config.Parameter;
 import rtspproxy.lib.Singleton;
 import rtspproxy.transport.socket.nio.DatagramAcceptor;
+import rtspproxy.transport.socket.nio.SessionAwareDatagramAcceptor;
 
 /**
  * Custom implementation of the ServiceRegistry interface. Creates an acceptor

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -37,7 +37,6 @@
 		addAuthenticationFilter( chain );
 		addRewriteFilter( chain, Side.Client );
 		addAccountingFilter( chain, Side.Client );
-		addRdtSessionTrackingFilter( chain, Side.Client );
 	}
 
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -29,15 +29,10 @@
 import org.apache.mina.filter.codec.ProtocolEncoder;
 
 import rtspproxy.ProxyServiceRegistry;
-import rtspproxy.Reactor;
-import rtspproxy.config.Config;
 import rtspproxy.filter.accounting.AccountingFilter;
 import rtspproxy.filter.authentication.AuthenticationFilter;
 import rtspproxy.filter.ipaddress.IpAddressFilter;
 import rtspproxy.filter.rewrite.UrlRewritingFilter;
-import rtspproxy.filter.tracking.RdtSessionClientTrackingFilter;
-import rtspproxy.filter.tracking.RdtSessionServerTrackingFilter;
-import rtspproxy.filter.tracking.RdtSessionTrackingFilter;
 import rtspproxy.lib.Side;
 import rtspproxy.rtsp.RtspDecoder;
 import rtspproxy.rtsp.RtspEncoder;
@@ -73,12 +68,6 @@
 
 	public static final String rtspCodecNAME = "rtspCodec";
 
-	private static final RdtSessionClientTrackingFilter rdtClientTrackingFilter = 
-		new RdtSessionClientTrackingFilter();
-	
-	private static final RdtSessionServerTrackingFilter rdtServerTrackingFilter = 
-		new RdtSessionServerTrackingFilter();
-	
 	/**
 	 * IP Address filter.
 	 * <p>
@@ -187,14 +176,4 @@
 		}
 	}
 
-	protected void addRdtSessionTrackingFilter( IoFilterChain chain, Side side )
-	{
-		RdtSessionTrackingFilter filter = null;
-		if(side == Side.Client)
-			filter = rdtClientTrackingFilter;
-		else
-			filter = rdtServerTrackingFilter;
-		
-		chain.addAfter(rtspCodecNAME, filter.getChainName(), filter);
-	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -36,7 +36,6 @@
 		addRtspCodecFilter( chain );
 		addRewriteFilter( chain, Side.Server );
 		addAccountingFilter( chain, Side.Server );
-		addRdtSessionTrackingFilter( chain, Side.Server);
 	}
 
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacade.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacade.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacade.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -52,8 +52,14 @@
 		Hashtable<String, String> parts = new Hashtable<String, String>();
 		
 		parts.put("clientID", this.session.getClientSessionId());
-		parts.put("serverID", this.session.getServerSessionId());
 		
+		String serverID = this.session.getServerSessionId();
+		int ind = serverID.indexOf(';');
+		
+		if(ind > 0)
+			serverID = serverID.substring(0, ind);
+		parts.put("serverID", serverID);
+		
 		return ObjectName.getInstance(JmxAgent.PROXY_SESSION_DOMAIN, parts);
 	}
 	

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -360,10 +360,8 @@
 		} else if ( transport.getTransportProtocol() == TransportProtocol.RDT ) {
 
 			// Create a new Track object
-			/*
 			RdtTrack track = proxySession.addRdtTrack( (String) clientSession
 					.getAttribute( setupUrlATTR ) );
-					*/
 			// Setting client and server info on the track
 			InetAddress serverAddress = null;
 			if ( transport.getSource() != null ) {
@@ -377,7 +375,7 @@
 						.getAddress();
 			}
 			int[] serverPorts = transport.getServerPort();
-			// track.setServerAddress( serverAddress, serverPorts[0] );
+			track.setServerAddress( serverAddress, serverPorts[0] );
 
 			InetAddress clientAddress = null;
 			try {
@@ -389,7 +387,7 @@
 			}
 			int clientRdtPort = ((Integer) clientSession.getAttribute( clientRdtPortATTR ))
 					.intValue();
-			// track.setClientAddress( clientAddress, clientRdtPort );
+			track.setClientAddress( clientAddress, clientRdtPort );
 
 			if ( transport.getLowerTransport() == RtspTransport.LowerTransport.TCP ) {
 				log.debug( "Transport is TCP based." );

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerSide.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -20,7 +20,6 @@
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
 
-import rtspproxy.filter.tracking.RdtSessionToken;
 import rtspproxy.lib.Exceptions;
 import rtspproxy.rtsp.RtspCode;
 import rtspproxy.rtsp.RtspMessage;

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -105,7 +105,14 @@
 		this.clientAddress = clientAddress;
 		this.clientRdtPort = rdtPort;
 
-		clientAddressMap.put( new InetSocketAddress( clientAddress, rdtPort ), this );
+		InetSocketAddress clientAddr = new InetSocketAddress( clientAddress, rdtPort );
+
+		/*
+		log.debug( "Creating RDT server session to: " + clientAddr );
+		rdtClientSession = RdtClientService.getInstance().newSession( clientAddr );
+		*/
+		
+		clientAddressMap.put( clientAddr , this );
 	}
 
 	/**
@@ -121,7 +128,15 @@
 		this.serverAddress = serverAddress;
 		this.serverRdtPort = rdtPort;
 
-		serverAddressMap.put( new InetSocketAddress( serverAddress, rdtPort ), this );
+		InetSocketAddress remoteAddress = new InetSocketAddress( serverAddress,
+				serverRdtPort );
+		
+		/*
+		log.debug( "Creating RDT server session to: " + remoteAddress );
+		rdtServerSession = RdtServerService.getInstance().newSession( remoteAddress );
+		*/
+		
+		serverAddressMap.put( remoteAddress, this );
 	}
 
 	public synchronized void close()
@@ -129,6 +144,7 @@
 		serverAddressMap.remove( new InetSocketAddress( serverAddress, serverRdtPort ) );
 		clientAddressMap.remove( new InetSocketAddress( clientAddress, clientRdtPort ) );
 
+		
 		log.debug( "Closed track " + url );
 	}
 }

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/ConnectionlessSessionTracker.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/ConnectionlessSessionTracker.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/ConnectionlessSessionTracker.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -0,0 +1,30 @@
+/*
+ *   @(#) $Id: DatagramAcceptor.java 355016 2005-12-08 07:00:30Z trustin $
+ *
+ *   Copyright 2004 The Apache Software Foundation
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package rtspproxy.transport.socket.nio;
+
+import java.net.SocketAddress;
+
+import org.apache.mina.common.IoSession;
+
+public interface ConnectionlessSessionTracker {
+    /** 
+     * @return null if no session is found 
+     */ 
+    IoSession getSession( SocketAddress localAddress, SocketAddress remoteAddress ); 
+}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/SessionAwareDatagramAcceptor.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/SessionAwareDatagramAcceptor.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/SessionAwareDatagramAcceptor.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -18,6 +18,9 @@
  */
 package rtspproxy.transport.socket.nio;
 
+import java.net.SocketAddress;
+
+import org.apache.mina.common.IoSession;
 import org.apache.mina.common.support.DelegatedIoAcceptor;
 
 import rtspproxy.transport.socket.nio.support.SessionAwareDatagramAcceptorDelegate;
@@ -26,11 +29,17 @@
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
  *
  */
-public class SessionAwareDatagramAcceptor extends DelegatedIoAcceptor {
+public class SessionAwareDatagramAcceptor extends DelegatedIoAcceptor implements ConnectionlessSessionTracker  {
+	
+	private SessionAwareDatagramAcceptorDelegate delegate = new SessionAwareDatagramAcceptorDelegate();
 	/**
 	 * create an instance
 	 */
 	public SessionAwareDatagramAcceptor() {
-		init( new SessionAwareDatagramAcceptorDelegate() );
+		init( this.delegate );
 	}
+
+	public IoSession getSession(SocketAddress localAddress, SocketAddress remoteAddress) {
+		return this.delegate.getSession(localAddress, remoteAddress);
+	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramAcceptorDelegate.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramAcceptorDelegate.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramAcceptorDelegate.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -25,10 +25,15 @@
 import org.apache.mina.common.DefaultIoFilterChainBuilder;
 import org.apache.mina.common.IoAcceptor;
 import org.apache.mina.common.IoFilterChainBuilder;
+import org.apache.mina.common.IoFuture;
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.IoSession;
+import org.apache.mina.common.WriteFuture;
+import org.apache.mina.common.IoFilter.WriteRequest;
 import org.apache.mina.common.support.BaseIoAcceptor;
+import org.apache.mina.transport.socket.nio.DatagramSession;
 
+import rtspproxy.transport.socket.nio.ConnectionlessSessionTracker;
 import rtspproxy.transport.socket.nio.DatagramAcceptor;
 
 /**
@@ -36,12 +41,41 @@
  * 
  */
 public class SessionAwareDatagramAcceptorDelegate extends BaseIoAcceptor implements
-		IoAcceptor {
+		IoAcceptor, ConnectionlessSessionTracker {
 
+	
+	private static class HandlerInfo {
+		private DatagramAcceptor acceptor;
+		private SessionAwareDatagramHandler handler;
+		
+		private HandlerInfo(DatagramAcceptor acceptor, SessionAwareDatagramHandler handler) {
+			this.acceptor = acceptor;
+			this.handler = handler;
+		}
+	}
+
+	private class WriteCallback implements IoFuture.Callback {
+
+		private WriteFuture notify;
+		private DatagramSession session;
+		
+		private WriteCallback(WriteFuture notify, DatagramSession session) {
+			this.notify = notify;
+			this.session = session;
+		}
+		
+		public void operationComplete(IoFuture future) {
+			notify.setWritten(true);
+			session.close();
+		}
+
+	}
+
 	private DatagramAcceptor acceptor;
 	private HashMap<SocketAddress, HandlerInfo> acceptors = new HashMap<SocketAddress, HandlerInfo>();
-	private StatefulDatagramSessionManager sessionManager = new StatefulDatagramSessionManager();
-	
+	private StatefulDatagramSessionManager sessionManager;
+	private SessionAwareDatagramHandler sessionHandler;
+
 	/**
 	 * create an instance
 	 */
@@ -50,11 +84,12 @@
 
 	public void bind(SocketAddress addr, IoHandler handler,
 			IoFilterChainBuilder chainBuilder) throws IOException {
-		SessionAwareDatagramHandler sessionHandler = new SessionAwareDatagramHandler(addr, handler, chainBuilder,
+		this.sessionManager = new StatefulDatagramSessionManager(this);
+		this.sessionHandler = new SessionAwareDatagramHandler(addr, handler, chainBuilder,
 				sessionManager);
 		
-		acceptor = new DatagramAcceptor();
-		acceptor.bind(addr, sessionHandler, null);
+		this.acceptor = new DatagramAcceptor();
+		this.acceptor.bind(addr, sessionHandler, null);
 		synchronized (acceptors) {
 			acceptors.put(addr, new HandlerInfo(acceptor, sessionHandler));
 		}
@@ -72,16 +107,11 @@
 		}
 	}
 
-	private static class HandlerInfo {
-		private DatagramAcceptor acceptor;
-		private SessionAwareDatagramHandler handler;
-		
-		private HandlerInfo(DatagramAcceptor acceptor, SessionAwareDatagramHandler handler) {
-			this.acceptor = acceptor;
-			this.handler = handler;
-		}
+
+	public IoSession getSession(SocketAddress localAddress, SocketAddress remoteAddress) {
+		return this.sessionManager.getSession(localAddress,remoteAddress);
 	}
-
+	
 	@Override
 	public IoFilterChainBuilder getFilterChainBuilder() {
 		return this.sessionManager.getFilterChainBuilder();
@@ -113,4 +143,29 @@
 			}
 		}
 	}
+	
+	/**
+	 * write a message to the underlying datagram acceptor
+	 */
+	void doWrite(StatefulDatagramSessionImpl session, WriteRequest req) throws Exception {
+		DatagramSession dSession = (DatagramSession)this.acceptor.newSession(session.getRemoteAddress(), session.getLocalAddress());
+		WriteFuture future;
+		
+		dSession.setReuseAddress(true);
+		dSession.setWriteTimeout(session.getWriteTimeout());
+		future = dSession.write(req.getMessage());
+		
+		/*
+		if(!future.isWritten()) {
+			future.setCallback(new WriteCallback(req.getFuture(), dSession));
+			if(session.getWriteTimeout() > 0)
+				future.join(session.getWriteTimeout());
+			else
+				future.join();
+		} else {
+			req.getFuture().setWritten(true);
+			dSession.close();
+		}
+		*/
+	}	
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramHandler.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/SessionAwareDatagramHandler.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -50,25 +50,19 @@
 	public void exceptionCaught(IoSession session, Throwable t) throws Exception {
 		StatefulDatagramSessionImpl relay = this.sessionManager.getSession(localAddress, session.getRemoteAddress(),
 				this.wrapped, this.chainBuilder);
-		
-		relay.setDownsideSession(session);
-		this.wrapped.exceptionCaught(relay, t);
+
+		relay.fireExceptionCaught(t);
+		// this.wrapped.exceptionCaught(relay, t);
 	}
 
 	public void messageReceived(IoSession session, Object message) throws Exception {
 		StatefulDatagramSessionImpl relay = this.sessionManager.getSession(localAddress, session.getRemoteAddress(),
 				this.wrapped, this.chainBuilder);
 		
-		relay.setDownsideSession(session);
-		this.wrapped.messageReceived(relay, message);
+		relay.fireMessageReceived(message);
+		// this.wrapped.messageReceived(relay, message);
 	}
 
-	public void messageSent(IoSession session, Object message) throws Exception {
-		StatefulDatagramSessionImpl relay = (StatefulDatagramSessionImpl)session;
-		
-		relay.getDownsideSession().write(message);
-	}
-
 	IoFilterChainBuilder getFilterChainBuilder() {
 		return this.chainBuilder;
 	}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionFilterChain.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionFilterChain.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionFilterChain.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -26,17 +26,23 @@
 
 class StatefulDatagramSessionFilterChain extends AbstractIoFilterChain
 		implements IoFilterChain {
-
-	StatefulDatagramSessionFilterChain(IoSession session) {
+	
+	StatefulDatagramSessionFilterChain(StatefulDatagramSessionImpl session) {
 		super(session);
 	}
 
 	@Override
 	protected void doWrite(IoSession session, WriteRequest writeReq) throws Exception {
+		StatefulDatagramSessionImpl ssession = (StatefulDatagramSessionImpl)session;
+		
+		ssession.getDelegate().doWrite(ssession, writeReq);
 	}
 
 	@Override
 	protected void doClose(IoSession session, CloseFuture closeFuture) throws Exception {
+		StatefulDatagramSessionImpl ssession = (StatefulDatagramSessionImpl)session;
+		
+		ssession.doClose(closeFuture);
 	}
 
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionImpl.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionImpl.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionImpl.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -20,24 +20,44 @@
 
 import java.net.SocketAddress;
 
+import org.apache.mina.common.ByteBuffer;
+import org.apache.mina.common.ByteBufferProxy;
+import org.apache.mina.common.CloseFuture;
 import org.apache.mina.common.IoFilterChain;
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.IoSession;
 import org.apache.mina.common.IoSessionManager;
 import org.apache.mina.common.TransportType;
+import org.apache.mina.common.IoFilter.WriteRequest;
 import org.apache.mina.common.support.BaseIoSession;
+import org.apache.mina.util.ByteBufferUtil;
 
 import rtspproxy.transport.socket.nio.StatefulDatagramSession;
 
 class StatefulDatagramSessionImpl extends BaseIoSession implements
 		StatefulDatagramSession {
+	
+	private static class DecoupledByteBuffer extends ByteBufferProxy {
 
+		protected DecoupledByteBuffer(ByteBuffer buffer) {
+			super(buffer);
+		}
+
+		@Override
+		public void acquire() {
+		}
+
+		@Override
+		public void release() {
+		}
+	}
+
 	private SocketAddress localAddr;
 	private SocketAddress remoteAddr;
 	private IoHandler handler;
 	private StatefulDatagramSessionManager sessionManager;
-	private IoSession downsideSession;
 	private StatefulDatagramSessionFilterChain filterChain;
+	private SessionAwareDatagramAcceptorDelegate delegate;
 	
 	/**
 	 * only constructable from within this package
@@ -48,6 +68,7 @@
 		this.localAddr = localAddr;
 		this.remoteAddr = remoteAddr;
 		this.sessionManager = sessionManager;
+		this.delegate = sessionManager.getDelegate();
 		
 		this.filterChain = new StatefulDatagramSessionFilterChain(this);
 	}
@@ -71,20 +92,19 @@
 	}
 
 	public TransportType getTransportType() {
-		// TODO Auto-generated method stub
-		return null;
+		return TransportType.DATAGRAM;
 	}
 
 	public SocketAddress getRemoteAddress() {
-		return this.localAddr;
+		return this.remoteAddr;
 	}
 
 	public SocketAddress getLocalAddress() {
-		return this.remoteAddr;
+		return this.localAddr;
 	}
 
 	public int getScheduledWriteRequests() {
-		return this.getDownsideSession().getScheduledWriteRequests();
+		return 0;
 	}
 
 	public void setSessionTimeout(int timeout) {
@@ -97,12 +117,35 @@
 		return 0;
 	}
 
-	IoSession getDownsideSession() {
-		return downsideSession;
+	SessionAwareDatagramAcceptorDelegate getDelegate() {
+		return delegate;
 	}
 
-	void setDownsideSession(IoSession downsideSession) {
-		this.downsideSession = downsideSession;
+	public void doClose(CloseFuture closeFuture) {
+		this.sessionManager.closeSession(this, handler);
+		
+		closeFuture.setClosed();
 	}
 
+	void fireExceptionCaught(Throwable t) throws Exception {
+		this.filterChain.exceptionCaught(this, t);
+	}
+
+	void fireMessageReceived(Object message) {
+		ByteBufferProxy proxy = new DecoupledByteBuffer((ByteBuffer)message);
+		
+		this.filterChain.messageReceived(this, proxy);
+	}
+
+	@Override
+	protected void write0(WriteRequest wrReq) {
+		this.filterChain.filterWrite(this, wrReq);
+	}
+
+	@Override
+	protected void close0(CloseFuture arg0) {
+		this.sessionManager.closeSession(this, this.handler);
+		
+		super.close0(arg0);
+	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionManager.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionManager.java	2006-01-23 12:54:34 UTC (rev 403)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/transport/socket/nio/support/StatefulDatagramSessionManager.java	2006-01-25 00:00:25 UTC (rev 404)
@@ -32,8 +32,10 @@
 		implements IoSessionManager {
 
 	private HashMap<SocketAddress, LocalSessionsHolder> sessions = new HashMap<SocketAddress, LocalSessionsHolder>();
+	private SessionAwareDatagramAcceptorDelegate delegate;
 	
-	StatefulDatagramSessionManager() {
+	StatefulDatagramSessionManager(SessionAwareDatagramAcceptorDelegate delegate) {
+		this.delegate = delegate;
 	}
 
 	/**
@@ -58,6 +60,28 @@
 	}
 
 	/**
+	 * obtain a session for a (local, remote) address pair.
+	 * @param localAddr the local address
+	 * @param remoteAddr the remote address
+	 * @return the session or null no such session exists.
+	 * @exception Exception session creation or initialization failed
+	 */
+	StatefulDatagramSessionImpl getSession(SocketAddress localAddr, SocketAddress remoteAddr) {
+		StatefulDatagramSessionImpl session = null;
+		
+		synchronized (sessions) {
+			LocalSessionsHolder holder = this.sessions.get(localAddr);
+			
+			if(holder != null)
+				session = holder.getSession(remoteAddr);
+		}
+		
+		return session;
+	}
+
+	
+	
+	/**
 	 * obtain a new session for a (local, remote) address pair.
 	 * @param localAddr the local address
 	 * @param remoteAddr the remote address
@@ -87,6 +111,19 @@
 		}
 	}
 
+	SessionAwareDatagramAcceptorDelegate getDelegate() {
+		return delegate;
+	}
+
+	public void closeSession(StatefulDatagramSessionImpl impl, IoHandler handler) {
+		synchronized (this.sessions) {
+			LocalSessionsHolder holder = this.sessions.get(impl.getLocalAddress());
+			
+			if(holder != null)
+				holder.closeSession(impl, handler);
+		}
+	}
+
 	private class LocalSessionsHolder {
 		
 		private SocketAddress localAddr;
@@ -122,8 +159,25 @@
 					}
 				}
 			}
+			this.sessions.clear();
 		}
 
+		public void closeSession(StatefulDatagramSessionImpl impl, IoHandler handler) {
+			if(this.sessions.containsKey(impl.getRemoteAddress())) {
+				try {
+					handler.sessionClosed(impl);
+				} catch(Exception e) {
+					try {
+						handler.exceptionCaught(impl, e);
+					} catch(Throwable t) {
+						getExceptionMonitor().exceptionCaught(t);
+					}
+				}
+				this.sessions.remove(impl.getRemoteAddress());
+			} else 
+				throw new IllegalStateException("session not managed");
+		}
+
 		private StatefulDatagramSessionImpl getSession(SocketAddress remoteAddr, IoHandler handler, 
 				IoFilterChainBuilder chainBuilder) throws Exception {
 			StatefulDatagramSessionImpl session = null;
@@ -145,6 +199,17 @@
 			return session;
 		}
 
+		private StatefulDatagramSessionImpl getSession(SocketAddress remoteAddr) {
+			StatefulDatagramSessionImpl session = null;
+			
+			if(remoteAddr != null) {
+				session = this.sessions.get(remoteAddr);
+			}
+			
+			return session;
+		}
+
+
 		private StatefulDatagramSessionImpl createSession(SocketAddress remoteAddr, IoHandler handler, 
 				IoFilterChainBuilder chainBuilder) throws Exception {
 			StatefulDatagramSessionImpl session = new StatefulDatagramSessionImpl(handler, this.localAddr, remoteAddr,
@@ -161,4 +226,5 @@
 			return session;
 		}
 	}
+
 }



From rbieniek at berlios.de  Thu Jan 26 20:53:50 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Thu, 26 Jan 2006 20:53:50 +0100
Subject: [Rtspproxy-devel] r405 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: lib proxy rtsp
Message-ID: <200601261953.k0QJrols012981@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-26 20:53:43 +0100 (Thu, 26 Jan 2006)
New Revision: 405

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/Exceptions.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java
Log:
- Changed the construction of the Via:-Header to comply to RFC 2326
- Changed Exceptions logger from root to rtspproxy category
- Fixed NPE on server session (not existent) if the client started 
  its RTSP transaction directly with a SETUP request. 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/Exceptions.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/Exceptions.java	2006-01-25 00:00:25 UTC (rev 404)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/Exceptions.java	2006-01-26 19:53:43 UTC (rev 405)
@@ -29,7 +29,7 @@
 public class Exceptions
 {
 
-	private static Logger log = LoggerFactory.getLogger("");
+	private static Logger log = LoggerFactory.getLogger("rtspproxy");
 
 	private final static String CRLF = "\r\n";
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-01-25 00:00:25 UTC (rev 404)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-01-26 19:53:43 UTC (rev 405)
@@ -216,6 +216,24 @@
 				return;
 			}
 		}
+		
+		if(serverSession == null) {
+			/**
+			 * A mobile handset client may start the RTSP dialogue directly with a 
+			 * SETUP request if it has discovered the streaming media characteristics
+			 * through any other mechanism.
+			 * --> Make sure a server-side session exists in this case.
+			 */
+			try {
+				connectServerSide( request.getUrl() );
+			} catch ( IOException e ) {
+				log.error( "I/O exception", e );
+				// closeAll();
+			} finally {
+				if ( serverSession == null )
+					return;
+			}
+		}
 		serverSession.setAttribute( RtspMessage.lastRequestVerbATTR, request.getVerb() );
 
 		log.debug( "Client Transport:" + request.getHeader( "Transport" ) );

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java	2006-01-25 00:00:25 UTC (rev 404)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java	2006-01-26 19:53:43 UTC (rev 405)
@@ -175,9 +175,21 @@
 	{
 		String proxy = Config.getProxySignature();
 		if ( getHeader( "Server" ) != null )
-			setHeader( "Via", proxy );
-		else
 			setHeader( "Server", proxy );
+		
+		String via = getHeader("Via");
+		StringBuffer newVia = new StringBuffer();
+		
+		if(via != null) {
+			newVia.append(", ");
+		}
+		newVia.append("RTSP/1.0 ");
+		newVia.append(Config.proxyClientInterface.getStringValue());
+		if(!Config.proxyServerInterface.getStringValue().equals(Config.proxyClientInterface.getStringValue())) {
+			newVia.append(", RTSP/1.0 ");
+			newVia.append(Config.proxyServerInterface.getStringValue());
+		}
+		setHeader("Via", newVia.toString());
 	}
 
 	/**



From rbieniek at berlios.de  Fri Jan 27 01:29:47 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Fri, 27 Jan 2006 01:29:47 +0100
Subject: [Rtspproxy-devel] r406 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: config filter filter/control proxy rtsp
Message-ID: <200601270029.k0R0Tlb9011045@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-27 01:28:56 +0100 (Fri, 27 Jan 2006)
New Revision: 406

Added:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ClientControlFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ControlFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ControlProvider.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ControlProviderAdapter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ServerControlFilter.java
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/XMLConfigReader.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransport.java
Log:
- Introduced a lot of UGLY transport related hacks to cope with
  certain broken mobile handset clients:
-- turn TCP keep-alive on when connecting the remote server
-- suppress the output of SSRC transport header attribute
-- suppress the output of Source transport header attribute
- Fixed Via-Header (this time correctly)

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -167,7 +167,31 @@
 			"Enables the x-udp-rdt transport.",
 			"/rtspproxy/proxy/transport/hacks/lowerTransportSuppress" // xpathExpr
 			);	
-	
+
+	public static final BooleanParameter proxyRtspTransportSsrcDisable = new BooleanParameter(
+			"proxy.transport.rtsp.transport.ssrc.disable", // name
+			false, // default value
+			false, // mutable
+			"disable the output of the SSRC transport attribute",
+			"/rtspproxy/proxy/transport/hacks/rtspTransportSsrcDisable" // xpathExpr
+			);	
+
+	public static final BooleanParameter proxyRtspTransportSourceDisable = new BooleanParameter(
+			"proxy.transport.rtsp.transport.source.disable", // name
+			false, // default value
+			false, // mutable
+			"disable the output of the SOURCE transport attribute",
+			"/rtspproxy/proxy/transport/hacks/rtspTransportSourceDisable" // xpathExpr
+			);	
+
+	public static final BooleanParameter proxyRtspKeepAlive = new BooleanParameter(
+			"proxy.transport.rtsp.keepAlive.enable", // name
+			false, // default value
+			false, // mutable
+			"Enable keep-alive on RTSP connections to remote servers.",
+			"/rtspproxy/proxy/transport/hacks/rtspKeepAlive" // xpathExpr
+			);
+
 	// /////////////////////////////////////////////////////////
 
 	// JMX
@@ -257,6 +281,8 @@
 	// filter configurations from XML
 	private static List<AAAConfig> urlRewritingFilters = new ArrayList<AAAConfig>();
 
+	private static List<AAAConfig> controlFilters = new ArrayList<AAAConfig>();
+	
 	static void addAuthenticationFilter(AAAConfig config) {
 		authenticationFilters.add(config);
 	}
@@ -272,7 +298,11 @@
 	static void addUrlRewritingFilter(AAAConfig config) {
 		urlRewritingFilters.add(config);
 	}
-	
+
+	public static void addControlFilter(AAAConfig aaa) {
+		controlFilters.add(aaa);
+	}
+
 	public static List<AAAConfig> getAuthenticationFilters() {
 		return Collections.unmodifiableList(authenticationFilters);
 	}
@@ -289,6 +319,10 @@
 		return Collections.unmodifiableList(urlRewritingFilters);
 	}
 	
+	public static List<AAAConfig> getControlFilters() {
+		return Collections.unmodifiableList(controlFilters);
+	}
+ 	
 	// /////////////////////////////////////////////////////////
 
 	public Config()

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/XMLConfigReader.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/XMLConfigReader.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/XMLConfigReader.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -128,7 +128,12 @@
 			} else if(name.equals("accounting")) {
 				Config.addAccountingFilter(aaa);				
 			} else if(name.equals("rewriting")) {
-				Config.addUrlRewritingFilter(aaa);				
+				Config.addUrlRewritingFilter(aaa);
+			} else if(name.equals("control")) {
+				if(side == Side.Client || side == Side.Server) 
+					Config.addControlFilter(aaa);
+				else
+					throw new IllegalArgumentException("control filters can be only applied to either client or server side, not both");
 			} else
 				throw new IllegalArgumentException("invalid AAA element given, name=" + name);
 		}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -15,6 +15,9 @@
 import rtspproxy.config.Config;
 import rtspproxy.filter.accounting.AccountingFilter;
 import rtspproxy.filter.authentication.AuthenticationFilter;
+import rtspproxy.filter.control.ClientControlFilter;
+import rtspproxy.filter.control.ControlFilter;
+import rtspproxy.filter.control.ServerControlFilter;
 import rtspproxy.filter.ipaddress.IpAddressFilter;
 import rtspproxy.filter.rewrite.ClientUrlRewritingFilter;
 import rtspproxy.filter.rewrite.ServerUrlRewritingFilter;
@@ -53,6 +56,12 @@
 	// server side rewriting filters
 	private LinkedList<UrlRewritingFilter> serverUrlRewritingFilters = new LinkedList<UrlRewritingFilter>();
 	
+	// client side control traffic filters
+	private LinkedList<ClientControlFilter> clientControlFilters = new LinkedList<ClientControlFilter>();
+	
+	// client side control traffic filters
+	private LinkedList<ServerControlFilter> serverControlFilters = new LinkedList<ServerControlFilter>();
+	
 	/**
 	 * 
 	 */
@@ -142,8 +151,26 @@
 				this.serverUrlRewritingFilters.add(urlRewritingFilter);
 			}
 
+			for(AAAConfig filterConfig : Config.getControlFilters()) {
+				if(filterConfig.getSide() == Side.Client) {
+					ClientControlFilter filter = new ClientControlFilter(filterConfig.getImplClass(),
+							filterConfig.getConfigElements());
+					
+					filter.setSide(Side.Client);
+					registerFilterMBean(filter);
+					this.clientControlFilters.add(filter);
+				} else {
+					ServerControlFilter filter = new ServerControlFilter(filterConfig.getImplClass(),
+							filterConfig.getConfigElements());
+					
+					filter.setSide(Side.Client);
+					registerFilterMBean(filter);
+					this.serverControlFilters.add(filter);
+				}
+			}
+			
 		} catch (Throwable t) {
-			logger.error("failed to populate filter registry", t);
+			logger.error("failed to populate filter registry", t);	
 			
 			Reactor.stop();
 			System.exit(-1);
@@ -199,5 +226,19 @@
 	public List<UrlRewritingFilter> getServerUrlRewritingFilters() {
 		return Collections.unmodifiableList(serverUrlRewritingFilters);
 	}
+
+	/**
+	 * @return Returns the clientControlFilters.
+	 */
+	public List<ClientControlFilter> getClientControlFilters() {
+		return Collections.unmodifiableList(clientControlFilters);
+	}
+
+	/**
+	 * @return Returns the serverControlFilters.
+	 */
+	public List<ServerControlFilter> getServerControlFilters() {
+		return Collections.unmodifiableList(serverControlFilters);
+	}
 	
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspClientFilters.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -37,6 +37,7 @@
 		addAuthenticationFilter( chain );
 		addRewriteFilter( chain, Side.Client );
 		addAccountingFilter( chain, Side.Client );
+		addControlFilter( chain, Side.Client );
 	}
 
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -31,6 +31,9 @@
 import rtspproxy.ProxyServiceRegistry;
 import rtspproxy.filter.accounting.AccountingFilter;
 import rtspproxy.filter.authentication.AuthenticationFilter;
+import rtspproxy.filter.control.ClientControlFilter;
+import rtspproxy.filter.control.ControlFilter;
+import rtspproxy.filter.control.ServerControlFilter;
 import rtspproxy.filter.ipaddress.IpAddressFilter;
 import rtspproxy.filter.rewrite.UrlRewritingFilter;
 import rtspproxy.lib.Side;
@@ -176,4 +179,19 @@
 		}
 	}
 
+	protected void addControlFilter ( IoFilterChain chain, Side side) {
+		if(side == Side.Client) {
+			List<ClientControlFilter> filters = FilterRegistry.getInstance().getClientControlFilters();
+
+			for(ControlFilter controlFilter : filters) {
+				chain.addAfter( rtspCodecNAME, controlFilter.getChainName(), controlFilter);
+			}
+		} else {
+			List<ServerControlFilter> filters = FilterRegistry.getInstance().getServerControlFilters();
+		
+			for(ControlFilter controlFilter : filters) {
+				chain.addAfter( rtspCodecNAME, controlFilter.getChainName(), controlFilter);
+			}
+		}
+	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspServerFilters.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -36,6 +36,7 @@
 		addRtspCodecFilter( chain );
 		addRewriteFilter( chain, Side.Server );
 		addAccountingFilter( chain, Side.Server );
+		addControlFilter ( chain, Side.Server );
 	}
 
 }

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ClientControlFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ClientControlFilter.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ClientControlFilter.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -0,0 +1,68 @@
+/**
+ * 
+ */
+package rtspproxy.filter.control;
+
+import java.util.List;
+
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoFilter.NextFilter;
+import org.dom4j.Element;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import rtspproxy.rtsp.RtspRequest;
+import rtspproxy.rtsp.RtspResponse;
+
+/**
+ * control filter to be applied on the client side.
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class ClientControlFilter extends ControlFilter {
+
+	private static Logger log = LoggerFactory.getLogger(ClientControlFilter.class);
+
+	/**
+	 * @param className
+	 * @param configElements
+	 * @param typeName
+	 */
+	public ClientControlFilter(String className, List<Element> configElements) {
+		super(className, configElements, "clientControl");
+	}
+
+	@Override
+	public void messageReceived( NextFilter nextFilter, IoSession session, Object message )
+			throws Exception
+	{
+		if ( provider != null && isRunning()) {
+			if ( message instanceof RtspRequest )
+				provider.processRequest(session, (RtspRequest)message);
+			else
+				log.error( "Expecting a RtspRequest. Received a "
+						+ message.getClass().getName() );
+		}
+
+		// Forward message
+		nextFilter.messageReceived( session, message );
+	}
+
+	@Override
+	public void messageSent( NextFilter nextFilter, IoSession session, Object message )
+			throws Exception
+	{
+		if ( provider != null  && isRunning()) {
+			if(message instanceof RtspResponse)
+				provider.processResponse(session, (RtspResponse)message);
+			else
+				log.error( "Expecting a RtspResponse. Received a "
+						+ message.getClass().getName() );
+		}
+		
+		// Forward message
+		nextFilter.messageSent( session, message );
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ControlFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ControlFilter.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ControlFilter.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -0,0 +1,65 @@
+/**
+ * 
+ */
+package rtspproxy.filter.control;
+
+import java.util.List;
+
+import org.apache.mina.common.IdleStatus;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoFilter.NextFilter;
+import org.dom4j.Element;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import rtspproxy.filter.FilterBase;
+import rtspproxy.rtsp.RtspMessage;
+import rtspproxy.rtsp.RtspRequest;
+import rtspproxy.rtsp.RtspResponse;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class ControlFilter extends FilterBase {
+
+	private static Logger log = LoggerFactory.getLogger(ControlFilter.class);
+	
+	public static final String FilterNAME = "controlFilter";
+
+	protected ControlProvider provider;
+	
+	/**
+	 * @param filterName
+	 * @param className
+	 * @param typeName
+	 */
+	protected ControlFilter(String className, List<Element> configElements, String typeName) {
+		super(FilterNAME, className, typeName);
+		
+		this.provider = (ControlProvider)loadConfigInitProvider(className, ControlProvider.class, configElements);
+	}
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.common.IoFilterAdapter#sessionClosed(org.apache.mina.common.IoFilter.NextFilter, org.apache.mina.common.IoSession)
+	 */
+	@Override
+	public void sessionClosed(NextFilter nextFilter, IoSession session) throws Exception {
+		if ( provider != null  && isRunning())
+			provider.sessionClosed( session );
+
+		nextFilter.sessionClosed(session);
+	}
+
+	/* (non-Javadoc)
+	 * @see org.apache.mina.common.IoFilterAdapter#sessionOpened(org.apache.mina.common.IoFilter.NextFilter, org.apache.mina.common.IoSession)
+	 */
+	@Override
+	public void sessionOpened(NextFilter nextFilter, IoSession session) throws Exception {
+		if ( provider != null && isRunning() )
+			provider.sessionOpened( session );
+
+		nextFilter.sessionOpened(session);
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ControlProvider.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ControlProvider.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ControlProvider.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -0,0 +1,45 @@
+/**
+ * 
+ */
+package rtspproxy.filter.control;
+
+import org.apache.mina.common.IoSession;
+
+import rtspproxy.filter.GenericProvider;
+import rtspproxy.rtsp.RtspRequest;
+import rtspproxy.rtsp.RtspResponse;
+
+/**
+ * definition of a generic message filter applyable on the RTSP filter
+ * chain.
+ * This filter is intended as a generic way of modifying RTSP requests / responses
+ * either in the client- or server-side filter chain. Typical use-cases are
+ * adding / modifying header values before passing the message over to the upstream
+ * server. 
+ * The filter is intentionally not desiged to modify the overall message flow.
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public interface ControlProvider extends GenericProvider {
+
+	/**
+	 * process a request
+	 */
+	public void processRequest(IoSession session, RtspRequest request);
+	
+	/**
+	 * process a response
+	 */
+	public void processResponse(IoSession session, RtspResponse response);
+	
+	/**
+	 * session gets opened
+	 */
+	public void sessionOpened(IoSession session);
+	
+	/**
+	 * session gets closed
+	 */
+	public void sessionClosed(IoSession session);
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ControlProviderAdapter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ControlProviderAdapter.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ControlProviderAdapter.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -0,0 +1,68 @@
+/**
+ * 
+ */
+package rtspproxy.filter.control;
+
+import org.apache.mina.common.IoSession;
+
+import rtspproxy.rtsp.RtspRequest;
+import rtspproxy.rtsp.RtspResponse;
+
+/**
+ * Default implementation of the ControlProvider interface. All method bodies are empty and
+ * do nothing. 
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class ControlProviderAdapter implements ControlProvider {
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.control.ControlProvider#processRequest(org.apache.mina.common.IoSession, rtspproxy.rtsp.RtspRequest)
+	 */
+	public void processRequest(IoSession session, RtspRequest request) {
+		// TODO Auto-generated method stub
+
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.control.ControlProvider#processResponse(org.apache.mina.common.IoSession, rtspproxy.rtsp.RtspResponse)
+	 */
+	public void processResponse(IoSession session, RtspResponse response) {
+		// TODO Auto-generated method stub
+
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.control.ControlProvider#sessionOpened(org.apache.mina.common.IoSession)
+	 */
+	public void sessionOpened(IoSession session) {
+		// TODO Auto-generated method stub
+
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.control.ControlProvider#sessionClosed(org.apache.mina.common.IoSession)
+	 */
+	public void sessionClosed(IoSession session) {
+		// TODO Auto-generated method stub
+
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.GenericProvider#init()
+	 */
+	public void init() throws Exception {
+		// TODO Auto-generated method stub
+
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.filter.GenericProvider#shutdown()
+	 */
+	public void shutdown() {
+		// TODO Auto-generated method stub
+
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ServerControlFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ServerControlFilter.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/control/ServerControlFilter.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -0,0 +1,66 @@
+/**
+ * 
+ */
+package rtspproxy.filter.control;
+
+import java.util.List;
+
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoFilter.NextFilter;
+import org.dom4j.Element;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import rtspproxy.rtsp.RtspRequest;
+import rtspproxy.rtsp.RtspResponse;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class ServerControlFilter extends ControlFilter {
+
+	private static Logger log = LoggerFactory.getLogger(ClientControlFilter.class);
+
+	/**
+	 * @param className
+	 * @param configElements
+	 * @param typeName
+	 */
+	public ServerControlFilter(String className, List<Element> configElements) {
+		super(className, configElements, "serverControl");
+	}
+
+	@Override
+	public void messageReceived( NextFilter nextFilter, IoSession session, Object message )
+			throws Exception
+	{
+		if ( provider != null && isRunning()) {
+			if(message instanceof RtspResponse)
+				provider.processResponse(session, (RtspResponse)message);
+			else
+				log.error( "Expecting a RtspResponse. Received a "
+						+ message.getClass().getName() );
+		}
+
+		// Forward message
+		nextFilter.messageReceived( session, message );
+	}
+
+	@Override
+	public void messageSent( NextFilter nextFilter, IoSession session, Object message )
+			throws Exception
+	{
+		if ( provider != null  && isRunning()) {
+			if ( message instanceof RtspRequest )
+				provider.processRequest(session, (RtspRequest)message);
+			else
+				log.error( "Expecting a Rtsprequest. Received a "
+						+ message.getClass().getName() );
+		}
+		
+		// Forward message
+		nextFilter.messageSent( session, message );
+	}
+
+}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -32,6 +32,7 @@
 import org.apache.mina.common.ConnectFuture;
 import org.apache.mina.common.IoSession;
 import org.apache.mina.transport.socket.nio.SocketConnector;
+import org.apache.mina.transport.socket.nio.SocketSession;
 
 import rtspproxy.RdtClientService;
 import rtspproxy.RdtServerService;
@@ -39,6 +40,7 @@
 import rtspproxy.RtcpServerService;
 import rtspproxy.RtpClientService;
 import rtspproxy.RtpServerService;
+import rtspproxy.config.Config;
 import rtspproxy.filter.RtspServerFilters;
 import rtspproxy.proxy.track.RdtTrack;
 import rtspproxy.proxy.track.RtpTrack;
@@ -469,6 +471,8 @@
 			future.join();
 			serverSession = future.getSession();
 
+			if(Config.proxyRtspKeepAlive.getValue())
+				((SocketSession)serverSession).setKeepAlive(true);
 		} catch ( UnresolvedAddressException e ) {
 			log.warn( "Destination unreachable: " + host + ":" + port );
 			sendResponse( clientSession, RtspResponse

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -174,13 +174,14 @@
 	public void setCommonHeaders()
 	{
 		String proxy = Config.getProxySignature();
-		if ( getHeader( "Server" ) != null )
+		if ( getHeader( "Server" ) == null )
 			setHeader( "Server", proxy );
 		
 		String via = getHeader("Via");
 		StringBuffer newVia = new StringBuffer();
 		
-		if(via != null) {
+		if(via != null && via.length() > 0) {
+			newVia.append(via);
 			newVia.append(", ");
 		}
 		newVia.append("RTSP/1.0 ");

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransport.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransport.java	2006-01-26 19:53:43 UTC (rev 405)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspTransport.java	2006-01-27 00:28:56 UTC (rev 406)
@@ -313,10 +313,14 @@
 			if ( server_port[1] > 0 )
 				sb.append( "-" ).append( server_port[1] );
 		}
-		if ( ssrc != null )
-			sb.append( ";ssrc=" ).append( ssrc );
-		if ( source != null )
-			sb.append( ";source=" ).append( source );
+		
+		if(!Config.proxyRtspTransportSsrcDisable.getValue())
+			if ( ssrc != null )
+				sb.append( ";ssrc=" ).append( ssrc );
+		if(!Config.proxyRtspTransportSourceDisable.getValue())
+			if ( source != null )
+				sb.append( ";source=" ).append( source );
+		
 		if ( mode != Mode.None )
 			sb.append( ";mode=\"" ).append( mode ) . append("\"");
 		return sb.toString();



From rbieniek at berlios.de  Mon Jan 30 19:01:55 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Mon, 30 Jan 2006 19:01:55 +0100
Subject: [Rtspproxy-devel] r407 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: config rtsp
Message-ID: <200601301801.k0UI1tKP001182@sheep.berlios.de>

Author: rbieniek
Date: 2006-01-30 19:01:51 +0100 (Mon, 30 Jan 2006)
New Revision: 407

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java
Log:
- Added hack for handling broken mobile clients which put a space 
between the header name and the ':'

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-01-27 00:28:56 UTC (rev 406)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-01-30 18:01:51 UTC (rev 407)
@@ -191,6 +191,13 @@
 			"Enable keep-alive on RTSP connections to remote servers.",
 			"/rtspproxy/proxy/transport/hacks/rtspKeepAlive" // xpathExpr
 			);
+	public static final BooleanParameter proxyRtspAllowBrokenHeaders = new BooleanParameter(
+			"proxy.transport.rtsp.broken.headers.enable", // name
+			false, // default value
+			false, // mutable
+			"Allow certain work-arounds for clients generating non-conformant RTSP protocol traffic.",
+			"/rtspproxy/proxy/transport/hacks/rtspAllowBrokenHeaders" // xpathExpr
+			);
 
 	// /////////////////////////////////////////////////////////
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2006-01-27 00:28:56 UTC (rev 406)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2006-01-30 18:01:51 UTC (rev 407)
@@ -30,6 +30,7 @@
 import org.apache.mina.filter.codec.ProtocolDecoderException;
 import org.apache.mina.filter.codec.ProtocolDecoderOutput;
 
+import rtspproxy.config.Config;
 import rtspproxy.lib.Exceptions;
 
 /**
@@ -71,6 +72,7 @@
 	private static final Pattern rtspRequestPattern = Pattern.compile( "([A-Z_]+) ([^ ]+) RTSP/1.0" );
 	private static final Pattern rtspResponsePattern = Pattern.compile( "RTSP/1.0 ([0-9]+) .+" );
 	private static final Pattern rtspHeaderPattern = Pattern.compile( "([a-zA-Z\\-]+[0-9]?):\\s?(.*)" );
+	private static final Pattern spaceRtspHeaderPattern = Pattern.compile( "([a-zA-Z\\-]+[0-9]?)\\s?:\\s?(.*)" );
 
 	private static final Charset asciiCharset = Charset.forName( "US-ASCII" );
 
@@ -198,11 +200,22 @@
 					log.debug("Header line: " + line);
 					Matcher m = rtspHeaderPattern.matcher(line);
 
-					if (!m.matches())
-						throw new ProtocolDecoderException(
-								"RTSP header not valid");
-
-					rtspMessage.setHeader(m.group(1), m.group(2));
+					if (!m.matches()) {
+						if(Config.proxyRtspAllowBrokenHeaders.getValue()) {
+							Matcher m2 = spaceRtspHeaderPattern.matcher(line);
+							
+							if(!m2.matches()) {
+								throw new ProtocolDecoderException(
+										"RTSP header not valid, line=" + line);								
+							} else
+								rtspMessage.setHeader(m2.group(1), m2.group(2));
+						} else {
+							throw new ProtocolDecoderException(
+							"RTSP header not valid, line=" + line);
+						}
+					} else
+						rtspMessage.setHeader(m.group(1), m.group(2));
+					
 					break;
 				case Body:
 					int bufferLen = Integer.parseInt(rtspMessage.getHeader(



