From rbieniek at berlios.de  Thu Feb  2 20:04:33 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Thu, 2 Feb 2006 20:04:33 +0100
Subject: [Rtspproxy-devel] r408 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: . config lib
Message-ID: <200602021904.k12J4Xq8017882@sheep.berlios.de>

Author: rbieniek
Date: 2006-02-02 20:04:23 +0100 (Thu, 02 Feb 2006)
New Revision: 408

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtcpClientService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtcpServerService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtpClientService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtpServerService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtspService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/NetworkInterface.java
Log:
- Changed interface binding parameter to the meaning to bind to a 
  named interface (not an interface address)
- Binding to a specific address is now done with a address parameter

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2006-01-30 18:01:51 UTC (rev 407)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2006-02-02 19:04:23 UTC (rev 408)
@@ -81,34 +81,44 @@
 			return;
 		}
 
-		String netInterface = getNetworkInterface();
 		int port = getBindPort();
 
 		try {
+			if (getNetworkAddress() != null) {
+				socketAddress = new InetSocketAddress(getNetworkAddress(), port);
+				log.debug("binding to specific address: " + socketAddress);
 
-			Set<InetAddress> addressSet = NetworkInterface.getAddresses( netInterface );
+				Reactor.getRegistry().bind(this, getIoHandler(),
+						socketAddress, getFilterChainBuilder());				
+			} else {
+				String netInterface = getNetworkInterface();
 
-			for ( InetAddress inetAddress : addressSet ) {
-				// Bind to all addresses
+				Set<InetAddress> addressSet = NetworkInterface.getInterfaceAddresses(netInterface);
 
-				socketAddress = new InetSocketAddress( inetAddress, port );
+				for (InetAddress inetAddress : addressSet) {
+					// Bind to all addresses
 
-				Reactor.getRegistry().bind( this, getIoHandler(), socketAddress,
-						getFilterChainBuilder() );
+					log.debug("binding to address from set: " + socketAddress);
+					socketAddress = new InetSocketAddress(inetAddress, port);
 
-			}
+					Reactor.getRegistry().bind(this, getIoHandler(),
+							socketAddress, getFilterChainBuilder());
 
-			// Choose a bind address
-			InetAddress inetAddress = NetworkInterface.getBindAddress( addressSet );
-			socketAddress = new InetSocketAddress( inetAddress, port );
+				}
 
-			log.info( getName() + " Started - Listening on: " + socketAddress );
+				// Choose a bind address
+				InetAddress inetAddress = NetworkInterface
+						.getBindAddress(addressSet);
+				socketAddress = new InetSocketAddress(inetAddress, port);
 
-		} catch ( IOException e ) {
-			log.error( "Can't start " + getName(), e );
+			}
+		} catch (IOException e) {
+			log.error("Can't start " + getName(), e);
 			throw e;
 		}
+		log.info( getName() + " Started - Listening on: " + socketAddress );
 
+
 		isRunning = true;
 	}
 
@@ -181,12 +191,21 @@
 	public abstract String getName();
 
 	/**
+	 * Get the network interface to bind to. This is only used if there is no more specific
+	 * IP address configured.
 	 * @return the network interface to bind this service on, as it appears in
 	 *         the configuratio registry (Config).
 	 */
 	public abstract String getNetworkInterface();
 
 	/**
+	 * @return the network address to bind this service on, as it appears in
+	 *         the configuratio registry (Config). If null, the network interface
+	 *         configuration parameter is used.
+	 */
+	public abstract String getNetworkAddress();
+
+	/**
 	 * @return the port to bind on, as it appear in the configuration registry.
 	 */
 	public abstract int getBindPort();

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java	2006-01-30 18:01:51 UTC (rev 407)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtClientService.java	2006-02-02 19:04:23 UTC (rev 408)
@@ -81,6 +81,12 @@
 	}
 
 	@Override
+	public String getNetworkAddress()
+	{
+		return Config.proxyClientAddress.getValue();
+	}
+
+	@Override
 	public int getBindPort()
 	{
 		return Config.proxyClientRdtPort.getValue();

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java	2006-01-30 18:01:51 UTC (rev 407)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RdtServerService.java	2006-02-02 19:04:23 UTC (rev 408)
@@ -79,6 +79,12 @@
 	}
 
 	@Override
+	public String getNetworkAddress()
+	{
+		return Config.proxyServerAddress.getValue();
+	}
+
+	@Override
 	public int getBindPort()
 	{
 		return Config.proxyServerRdtPort.getValue();

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtcpClientService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtcpClientService.java	2006-01-30 18:01:51 UTC (rev 407)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtcpClientService.java	2006-02-02 19:04:23 UTC (rev 408)
@@ -72,6 +72,12 @@
 	}
 
 	@Override
+	public String getNetworkAddress()
+	{
+		return Config.proxyClientAddress.getValue();
+	}
+
+	@Override
 	public int getBindPort()
 	{
 		return Config.proxyClientRtcpPort.getValue();

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtcpServerService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtcpServerService.java	2006-01-30 18:01:51 UTC (rev 407)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtcpServerService.java	2006-02-02 19:04:23 UTC (rev 408)
@@ -72,6 +72,12 @@
 	}
 
 	@Override
+	public String getNetworkAddress()
+	{
+		return Config.proxyServerAddress.getValue();
+	}
+
+	@Override
 	public int getBindPort()
 	{
 		return Config.proxyServerRtcpPort.getValue();

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtpClientService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtpClientService.java	2006-01-30 18:01:51 UTC (rev 407)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtpClientService.java	2006-02-02 19:04:23 UTC (rev 408)
@@ -69,6 +69,12 @@
 	}
 
 	@Override
+	public String getNetworkAddress()
+	{
+		return Config.proxyClientAddress.getValue();
+	}
+
+	@Override
 	public int getBindPort()
 	{
 		return Config.proxyClientRtpPort.getValue();

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtpServerService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtpServerService.java	2006-01-30 18:01:51 UTC (rev 407)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtpServerService.java	2006-02-02 19:04:23 UTC (rev 408)
@@ -69,6 +69,12 @@
 	}
 
 	@Override
+	public String getNetworkAddress()
+	{
+		return Config.proxyServerAddress.getValue();
+	}
+
+	@Override
 	public int getBindPort()
 	{
 		return Config.proxyServerRtpPort.getValue();

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtspService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtspService.java	2006-01-30 18:01:51 UTC (rev 407)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/RtspService.java	2006-02-02 19:04:23 UTC (rev 408)
@@ -89,6 +89,12 @@
 	}
 
 	@Override
+	public String getNetworkAddress()
+	{
+		return Config.proxyClientAddress.getValue();
+	}
+
+	@Override
 	public int getBindPort()
 	{
 		return Config.proxyRtspPort.getValue();

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-01-30 18:01:51 UTC (rev 407)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-02-02 19:04:23 UTC (rev 408)
@@ -82,6 +82,22 @@
 			"/rtspproxy/proxy/server/interface" // pathExpr
 			);
 
+	public static final StringParameter proxyClientAddress = new StringParameter(
+			"proxy.client.address", // name
+			null, // default value
+			false, // mutable
+			"Specify a network address." ,
+			"/rtspproxy/proxy/client/address" // xpathExpr
+			);
+
+	public static final StringParameter proxyServerAddress = new StringParameter(
+			"proxy.server.address", // name
+			null, // default value
+			false, // mutable
+			"Specify a network address.",
+			"/rtspproxy/proxy/server/address" // pathExpr
+			);
+
 	public static final IntegerParameter proxyServerRtpPort = new IntegerParameter(
 			"proxy.server.rtp.port", // name
 			new Integer( 0 ), // min value
@@ -217,7 +233,7 @@
 			false, // mutable
 			"Host to bind the management services. Default is localhost, and the services "
 					+ "will only be reachable from local machine.",
-			"/rtspproxy/jmx/interface" // xpathExpr
+			"/rtspproxy/jmx/address" // xpathExpr
 			 );
 
 	public static final StringParameter proxyManagementUser = new StringParameter(

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/NetworkInterface.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/NetworkInterface.java	2006-01-30 18:01:51 UTC (rev 407)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/NetworkInterface.java	2006-02-02 19:04:23 UTC (rev 408)
@@ -81,6 +81,47 @@
 		return addresses;
 	}
 
+	/**
+	 * Return all the addresses associated with the given interface. If the
+	 * supplied interface name is null, all the addresses from all interfaces
+	 * will be returned.
+	 * 
+	 * @param interfaceName
+	 * @return a set of InetAddress
+	 */
+	public static Set<InetAddress> getInterfaceAddresses( String interfaceName )
+	{
+		Set<InetAddress> addresses = new HashSet<InetAddress>();
+
+		if ( interfaceName != null ) {
+			try {
+				// InetAddress address = InetAddress.getByName( interfaceName );
+				java.net.NetworkInterface networkInterface = java.net.NetworkInterface.getByName(interfaceName);
+				addresses.addAll( getAddresses( networkInterface ) );
+
+			} catch ( Exception e ) {
+				log.error( "Cannot register network interface: " + interfaceName, e );
+				return null;
+			}
+		} else {
+			// Add all addresses from all interfaces
+
+			Enumeration<java.net.NetworkInterface> interfaces;
+			try {
+				interfaces = java.net.NetworkInterface.getNetworkInterfaces();
+			} catch ( SocketException se ) {
+				log.error( "Cannot get the interfaces list." );
+				return null;
+			}
+
+			while ( interfaces.hasMoreElements() ) {
+				addresses.addAll( getAddresses( interfaces.nextElement() ) );
+			}
+		}
+
+		return addresses;
+	}
+
 	private static Set<InetAddress> getAddresses(
 			java.net.NetworkInterface networkInterface )
 	{



From rbieniek at berlios.de  Thu Feb  2 20:04:40 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Thu, 2 Feb 2006 20:04:40 +0100
Subject: [Rtspproxy-devel] r409 - trunk/RTSPProxy-App/src/resources/conf
Message-ID: <200602021904.k12J4eIR017915@sheep.berlios.de>

Author: rbieniek
Date: 2006-02-02 20:04:37 +0100 (Thu, 02 Feb 2006)
New Revision: 409

Modified:
   trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml
Log:
- Changed interface binding parameter to the meaning to bind to a 
  named interface (not an interface address)
- Binding to a specific address is now done with a address parameter

Modified: trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml
===================================================================
--- trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml	2006-02-02 19:04:23 UTC (rev 408)
+++ trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml	2006-02-02 19:04:37 UTC (rev 409)
@@ -6,13 +6,15 @@
       <rtpPort>6970</rtpPort>
       <rtcpPort>6971</rtcpPort>
       <rdtPort>6972</rdtPort>
-      <interface>10.0.0.24</interface>
+      <address>10.0.0.24</address>
+      <!-- interface>eth0</interface -->
     </server>
     <client>
       <rtpPort>6970</rtpPort>
       <rtcpPort>6971</rtcpPort>
       <rdtPort>6972</rdtPort>
-      <interface>10.0.0.23</interface>
+      <address>10.0.0.23</address>
+      <!-- interface>eth1</interface -->
     </client>
 	<transport>
 		<rtp>true</rtp>
@@ -24,7 +26,7 @@
   </proxy>
   <jmx>
     <manageable>true</manageable>
-    <interface>10.0.0.22</interface>
+    <address>10.0.0.22</address>
     <user>admin</user>
     <password>admin123</password>
     <web>



From rbieniek at berlios.de  Fri Feb  3 11:40:48 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Fri, 3 Feb 2006 11:40:48 +0100
Subject: [Rtspproxy-devel] r410 - trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp
Message-ID: <200602031040.k13AemGZ026279@sheep.berlios.de>

Author: rbieniek
Date: 2006-02-03 11:40:46 +0100 (Fri, 03 Feb 2006)
New Revision: 410

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java
Log:
- Fixed NPE in RTSPMessage.setCommonHeaders() which occurs if only
a specific bind address is given.
-- TODO: find a clean way to transport the really used bind address
into common headers

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java	2006-02-02 19:04:37 UTC (rev 409)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtsp/RtspMessage.java	2006-02-03 10:40:46 UTC (rev 410)
@@ -177,20 +177,27 @@
 		if ( getHeader( "Server" ) == null )
 			setHeader( "Server", proxy );
 		
-		String via = getHeader("Via");
-		StringBuffer newVia = new StringBuffer();
-		
-		if(via != null && via.length() > 0) {
-			newVia.append(via);
-			newVia.append(", ");
+		if(Config.proxyClientAddress.getStringValue() != null) {
+			String via = getHeader("Via");
+			StringBuffer newVia = new StringBuffer();
+			
+			if(via != null && via.length() > 0) {
+				newVia.append(via);
+				newVia.append(", ");
+			}
+			newVia.append("RTSP/1.0 ");
+			
+			String clientAddr  = Config.proxyClientAddress.getStringValue();
+			String serverAddr = Config.proxyServerAddress.getStringValue();
+			
+			newVia.append(clientAddr);
+			if(serverAddr != null && !serverAddr.equals(clientAddr)) {
+				newVia.append(", RTSP/1.0 ");
+				newVia.append(serverAddr);
+			}
+			
+			setHeader("Via", newVia.toString());
 		}
-		newVia.append("RTSP/1.0 ");
-		newVia.append(Config.proxyClientInterface.getStringValue());
-		if(!Config.proxyServerInterface.getStringValue().equals(Config.proxyClientInterface.getStringValue())) {
-			newVia.append(", RTSP/1.0 ");
-			newVia.append(Config.proxyServerInterface.getStringValue());
-		}
-		setHeader("Via", newVia.toString());
 	}
 
 	/**



From rbieniek at berlios.de  Mon Feb  6 18:49:23 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Mon, 6 Feb 2006 18:49:23 +0100
Subject: [Rtspproxy-devel] r411 - in trunk: RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite
Message-ID: <200602061749.k16HnNrr008411@sheep.berlios.de>

Author: rbieniek
Date: 2006-02-06 18:48:54 +0100 (Mon, 06 Feb 2006)
New Revision: 411

Modified:
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java
Log:
- extended URL rewriting 


Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java	2006-02-03 10:40:46 UTC (rev 410)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/rewrite/SimpleUrlRewritingProvider.java	2006-02-06 17:48:54 UTC (rev 411)
@@ -17,6 +17,7 @@
 import rtspproxy.config.AAAConfigurable;
 import rtspproxy.filter.GenericProviderAdapter;
 import rtspproxy.rtsp.RtspRequest;
+import rtspproxy.rtsp.RtspRequest.Verb;
 
 /**
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
@@ -44,7 +45,7 @@
 	 * @see rtspproxy.filter.rewrite.UrlRewritingProvider#rewriteRequestUrl(java.net.URL)
 	 */
 	public UrlRewritingResult rewriteRequestUrl(URL request, RtspRequest.Verb verb, SocketAddress client,
-			Map<String, String> requestHeaders) {
+			Map<String, String> requestHeaders, Map<String, Object> exposedSessionAttributes) {
 		UrlRewritingResult result = null;
 		URL rewritten = null;
 		String req = request.toString();
@@ -149,4 +150,9 @@
 		}
 	}
 
+	public String[] getWantedSessionAttributes() {
+		// no attributes wanted
+		return null;
+	}
+
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-02-03 10:40:46 UTC (rev 410)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-02-06 17:48:54 UTC (rev 411)
@@ -5,6 +5,7 @@
 
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.HashMap;
 import java.util.List;
 
 import javax.management.MBeanServer;
@@ -40,6 +41,9 @@
 	// the filter instance
 	protected UrlRewritingProvider provider;
 
+	// list of exposed session attributes
+	private String[] exposedAttributes;
+	
 	/**
 	 * construct the IoFilter around the filter class denoted by the clazz name
 	 * parameter.
@@ -51,6 +55,10 @@
 		this.provider = (UrlRewritingProvider)loadConfigInitProvider(className, 
 				UrlRewritingProvider.class, 
 				configElements);
+		
+		this.exposedAttributes = this.provider.getWantedSessionAttributes();
+		if(this.exposedAttributes == null)
+			this.exposedAttributes = new String[0];
 	}
 
 	public abstract void messageReceived(NextFilter nextFilter, IoSession session,
@@ -65,8 +73,14 @@
 		boolean passOn = true;
 		
 		if (req.getUrl() != null) {
+			HashMap<String, Object> exposedSessionAttributes = new HashMap<String, Object>();
+			
+			for(String attr : this.exposedAttributes)
+				if(session.containsAttribute(attr))
+					exposedSessionAttributes.put(attr, session.getAttribute(attr));
+			
 			UrlRewritingResult result = this.provider.rewriteRequestUrl(req.getUrl(), req.getVerb(), 
-					session.getRemoteAddress(), req.getHeaders()); 
+					session.getRemoteAddress(), req.getHeaders(), exposedSessionAttributes); 
 			
 			if(result != null) {
 				URL rewritten = result.getRewrittenUrl();
@@ -81,6 +95,8 @@
 
 					resp.setCommonHeaders();
 					resp.setSequenceNumber(req.getSequenceNumber());
+					if(resp.getHeader("Session") != null)
+						resp.setHeader("Session", req.getHeader("Session"));
 					logger.debug("dropped  request, return response: " + resp);
 
 					session.write(resp);

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java	2006-02-03 10:40:46 UTC (rev 410)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingProvider.java	2006-02-06 17:48:54 UTC (rev 411)
@@ -37,11 +37,16 @@
 	 * sent back to the client. If null is returned, the URL is passed on without modification.
 	 */
 	public UrlRewritingResult rewriteRequestUrl(URL request, RtspRequest.Verb verb, SocketAddress client,
-			Map<String, String> requestHeaders);
+			Map<String, String> requestHeaders, Map<String, Object> sessionAttributes);
 
 	/**
 	 * rewrite an URL in a response header.
 	 * @return a replacement URL or null if the URL is not to be modified.
 	 */
 	public URL rewriteResponseHeaderUrl(URL request);
+	
+	/**
+	 * get a list of session attributes the filter wants to get exposed from the session
+	 */
+	public String[] getWantedSessionAttributes();
 }



From rbieniek at berlios.de  Mon Feb  6 20:54:18 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Mon, 6 Feb 2006 20:54:18 +0100
Subject: [Rtspproxy-devel] r412 - trunk/RTSPProxy-App/src/resources/conf
Message-ID: <200602061954.k16JsI0K003120@sheep.berlios.de>

Author: rbieniek
Date: 2006-02-06 20:54:09 +0100 (Mon, 06 Feb 2006)
New Revision: 412

Modified:
   trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml
Log:
- Preparation for server RTP port range handling (used for
compatibility with broken server applications)

Modified: trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml
===================================================================
--- trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml	2006-02-06 17:48:54 UTC (rev 411)
+++ trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml	2006-02-06 19:54:09 UTC (rev 412)
@@ -8,6 +8,9 @@
       <rdtPort>6972</rdtPort>
       <address>10.0.0.24</address>
       <!-- interface>eth0</interface -->
+      <rtpMinPort>9000</rtpMinPort>
+      <rtpMaxPort>9100</rtpMaxPort>
+	  <rtpUsePortrange>false</rtpUsePortrange>
     </server>
     <client>
       <rtpPort>6970</rtpPort>



From rbieniek at berlios.de  Mon Feb  6 20:54:41 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Mon, 6 Feb 2006 20:54:41 +0100
Subject: [Rtspproxy-devel] r413 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy: config proxy proxy/track rtp rtp/range
Message-ID: <200602061954.k16JsfUE003242@sheep.berlios.de>

Author: rbieniek
Date: 2006-02-06 20:54:31 +0100 (Mon, 06 Feb 2006)
New Revision: 413

Added:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/PortrangeRtpServerSessionFactory.java
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RtpTrack.java
Log:
- Preparation for server RTP port range handling (used for
compatibility with broken server applications)

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-02-06 19:54:09 UTC (rev 412)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-02-06 19:54:31 UTC (rev 413)
@@ -118,6 +118,34 @@
 			"/rtspproxy/proxy/server/rtcpPort" // xpathExpr
 			);
 
+	public static final IntegerParameter proxyServerRtpMinPort = new IntegerParameter(
+			"proxy.server.rtp.port.min", // name
+			new Integer( 0 ), // min value
+			new Integer( 65536 ), // max value
+			new Integer( 9000 ), // default value
+			true, // mutable
+			"Port to listen for RTP packets arriving from servers.",
+			"/rtspproxy/proxy/server/rtpMinPort" // xpathExpr
+			);
+
+	public static final IntegerParameter proxyServerRtpMaxPort = new IntegerParameter(
+			"proxy.server.rtp.port.max", // name
+			new Integer( 0 ), // min value
+			new Integer( 65536 ), // max value
+			new Integer( 9100 ), // default value
+			true, // mutable
+			"Port to listen for RTP packets arriving from servers.",
+			"/rtspproxy/proxy/server/rtpMaxPort" // xpathExpr
+			);
+	
+	public static final BooleanParameter proxyServerRtpMultiplePorts = new BooleanParameter(
+			"proxy.server.rtp.multiport.enable", // name
+			false, // default value
+			false, // mutable
+			"Enables the RTP/RTCP multiport handling.",
+			"/rtspproxy/proxy/server/rtpUsePortrange" // xpathExpr
+			);
+	
 	public static final IntegerParameter proxyClientRtpPort = new IntegerParameter(
 			"proxy.client.rtp.port", // name
 			new Integer( 0 ), // min value

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-02-06 19:54:09 UTC (rev 412)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-02-06 19:54:31 UTC (rev 413)
@@ -274,6 +274,11 @@
 					
 					int proxyRtpPort = RtpServerService.getInstance().getPort();
 					int proxyRtcpPort = RtcpServerService.getInstance().getPort();
+					
+					if(Config.proxyServerRtpMultiplePorts.getValue()) {
+						log.debug("using RTP port range");
+						
+					}
 					transport.setClientPort( new int[] { proxyRtpPort, proxyRtcpPort } );
 
 				} else if ( transport.getTransportProtocol() == TransportProtocol.RDT ) {

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java	2006-02-06 19:54:09 UTC (rev 412)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java	2006-02-06 19:54:31 UTC (rev 413)
@@ -50,6 +50,8 @@
 		RtpPacket packet = new RtpPacket( (ByteBuffer) buffer );
 		RtpTrack track = RtpTrack.getByServerSSRC( packet.getSsrc() );
 
+		log.debug("recevied server RTP packet, SSRC=" + packet.getSsrc() + ", CSRC=" + packet.getCsrc()
+				+ ", server=" + session.getRemoteAddress(), ", local=" + session.getLocalAddress());
 		if ( track == null ) {
 			track = (RtpTrack)Track.getByServerAddress( (InetSocketAddress) session.getRemoteAddress() );
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RtpTrack.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RtpTrack.java	2006-02-06 19:54:09 UTC (rev 412)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RtpTrack.java	2006-02-06 19:54:31 UTC (rev 413)
@@ -214,6 +214,8 @@
 					new InetSocketAddress( clientAddress, clientRtpPort ) );
 		}
 
+		log.debug("forwarding RTP packet, SSRC=" + packet.getSsrc() + ", CSRC=" + packet.getCsrc()
+				+ ", client=" + rtpClientSession.getRemoteAddress());
 		rtpClientSession.write( packet.toByteBuffer() );
 	}
 

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/PortrangeRtpServerSessionFactory.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/PortrangeRtpServerSessionFactory.java	2006-02-06 19:54:09 UTC (rev 412)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/PortrangeRtpServerSessionFactory.java	2006-02-06 19:54:31 UTC (rev 413)
@@ -0,0 +1,12 @@
+/**
+ * 
+ */
+package rtspproxy.rtp.range;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class PortrangeRtpServerSessionFactory {
+
+}



From rbieniek at berlios.de  Wed Feb  8 00:42:08 2006
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Wed, 8 Feb 2006 00:42:08 +0100
Subject: [Rtspproxy-devel] r414 - in trunk: . RTSPProxy-App RTSPProxy-App/src/resources/conf RTSPProxy-Core RTSPProxy-Core/src/main/java/rtspproxy RTSPProxy-Core/src/main/java/rtspproxy/config RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite RTSPProxy-Core/src/main/java/rtspproxy/jmx RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans RTSPProxy-Core/src/main/java/rtspproxy/lib/number RTSPProxy-Core/src/main/java/rtspproxy/proxy RTSPProxy-Core/src/main/java/rtspproxy/proxy/track RTSPProxy-Core/src/main/java/rtspproxy/rtp/range RTSPProxy-OSGi
Message-ID: <200602072342.k17Ng8aN014569@sheep.berlios.de>

Author: rbieniek
Date: 2006-02-08 00:40:28 +0100 (Wed, 08 Feb 2006)
New Revision: 414

Added:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpServerFactory.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpServerFactoryMBean.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpSession.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpSessionMBean.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyConstants.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/PortrangeRtpServerSession.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpRtcpFilterChainBuilder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpServerSessionFactory.java
Modified:
   trunk/RTSPProxy-App/pom.xml
   trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml
   trunk/RTSPProxy-Core/pom.xml
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedInt.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtcpPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RtpTrack.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/Track.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/PortrangeRtpServerSessionFactory.java
   trunk/RTSPProxy-OSGi/pom.xml
   trunk/pom.xml
Log:
- implemented an alternative connection scheme for handling upstream RTP/RTCP
connections. This scheme allocates a seperate port-pair out of a pool per
each connection. This helps work around bogus streaming servers which cannot
multiplex multiple connections over a single UDP port pair.
- RTCP messages are now passed to the remote streaming server. Due to a typo,
they were looped back to the client.
- Bumped version number for 3.0-ALPHA5.
- Added some hacks for dealing with broken streaming servers.
-- Offer the server a pre-calculated SSRC.
-- Ignore the server generated SSRC and build the message pipe based on the
local address/port and remote address/port information


Modified: trunk/RTSPProxy-App/pom.xml
===================================================================
--- trunk/RTSPProxy-App/pom.xml	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-App/pom.xml	2006-02-07 23:40:28 UTC (rev 414)
@@ -9,7 +9,7 @@
         <parent>
                 <groupId>net.merlimat</groupId>
                 <artifactId>rtspproxy</artifactId>
-                <version>3.0-ALPHA4-SNAPSHOT</version>
+                <version>3.0-ALPHA5-SNAPSHOT</version>
 		<relativePath>../pom.xml</relativePath>
         </parent>
 
@@ -18,7 +18,7 @@
 	<name>RTSP Proxy standalone application</name>
 	<groupId>net.merlimat</groupId>
 	<artifactId>RTSPProxy-App</artifactId>
-	<version>3.0-ALPHA4-SNAPSHOT</version>
+	<version>3.0-ALPHA5-SNAPSHOT</version>
 	<url>http://rtspproxy.berlios.de</url>
 	<inceptionYear>2003</inceptionYear>
 
@@ -28,7 +28,7 @@
     <dependency>
       <groupId>net.merlimat</groupId>
       <artifactId>RTSPProxy-Core</artifactId>
-      <version>3.0-ALPHA4-SNAPSHOT</version>
+      <version>3.0-ALPHA5-SNAPSHOT</version>
     </dependency>
 
 		<dependency>

Modified: trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml
===================================================================
--- trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml	2006-02-07 23:40:28 UTC (rev 414)
@@ -2,16 +2,21 @@
   <threadPoolSize>10</threadPoolSize>
   <proxy>
     <rtspPort>554</rtspPort>
-    <server>
-      <rtpPort>6970</rtpPort>
-      <rtcpPort>6971</rtcpPort>
-      <rdtPort>6972</rdtPort>
-      <address>10.0.0.24</address>
-      <!-- interface>eth0</interface -->
-      <rtpMinPort>9000</rtpMinPort>
-      <rtpMaxPort>9100</rtpMaxPort>
-	  <rtpUsePortrange>false</rtpUsePortrange>
-    </server>
+	<server>
+		<rtpPort>6970</rtpPort>
+		<rtcpPort>6971</rtcpPort>
+		<rdtPort>6972</rdtPort>
+		<address>10.0.0.24</address>
+		<!-- interface>eth0</interface -->
+		<rtpUsePortrange>false</rtpUsePortrange>
+		<rtpPortrange>
+			<minPort>9000</minPort>
+			<maxPort>9100</maxPort>
+			<idleTimeout>120</idleTimeout>
+			<idleScanInterval>60</idleScanInterval>
+			<threadPoolSize>10</threadPoolSize>
+		</rtpPortrange>
+	</server>
     <client>
       <rtpPort>6970</rtpPort>
       <rtcpPort>6971</rtcpPort>
@@ -24,8 +29,14 @@
 		<rdt>true</rdt>
 		<hacks>
 			<lowerTransportSuppress>false</lowerTransportSuppress>
+			<offerRemoteSsrc>false</offerRemoteSsrc>
 		</hacks>
 	</transport>
+	<streaming>
+		<hacks>
+			<rtpSsrcUnreliable>false</rtpSsrcUnreliable>
+		</hacks>
+	</streaming>
   </proxy>
   <jmx>
     <manageable>true</manageable>

Modified: trunk/RTSPProxy-Core/pom.xml
===================================================================
--- trunk/RTSPProxy-Core/pom.xml	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/pom.xml	2006-02-07 23:40:28 UTC (rev 414)
@@ -9,7 +9,7 @@
         <parent>
                 <groupId>net.merlimat</groupId>
                 <artifactId>rtspproxy</artifactId>
-                <version>3.0-ALPHA4-SNAPSHOT</version>
+                <version>3.0-ALPHA5-SNAPSHOT</version>
         </parent>
 
 	<modelVersion>4.0.0</modelVersion>
@@ -17,12 +17,12 @@
 	<name>RTSP Proxy core</name>
 	<groupId>net.merlimat</groupId>
 	<artifactId>RTSPProxy-Core</artifactId>
-	<version>3.0-ALPHA4-SNAPSHOT</version>
+	<version>3.0-ALPHA5-SNAPSHOT</version>
 	<url>http://rtspproxy.berlios.de</url>
 	<inceptionYear>2003</inceptionYear>
 
 	<dependencies>
-
+		
 		<dependency>
 			<groupId>directory-network</groupId>
 			<artifactId>mina</artifactId>
@@ -34,14 +34,20 @@
 			<artifactId>mx4j-tools</artifactId>
 			<version>2.1.1</version>
 		</dependency>
-
+		
 		<dependency>
 			<groupId>dom4j</groupId>
 			<artifactId>dom4j</artifactId>
 			<version>1.6.1</version>
 		</dependency>
-
+		
 		<dependency>
+			<groupId>commons-pool</groupId>
+			<artifactId>commons-pool</artifactId>
+			<version>1.2</version>
+		</dependency>
+		
+		<dependency>
 			<groupId>junit</groupId>
 			<artifactId>junit</artifactId>
 			<version>3.8.1</version>

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -25,6 +25,7 @@
 import rtspproxy.filter.FilterRegistry;
 import rtspproxy.jmx.JmxAgent;
 import rtspproxy.lib.Exceptions;
+import rtspproxy.rtp.range.PortrangeRtpServerSessionFactory;
 
 /**
  * Main reactor of RTSP proxy. This reactor assembles all required services.
@@ -91,11 +92,18 @@
 
 		filterRegistry = new FilterRegistry();
 		filterRegistry.populateRegistry();		
+		
+		PortrangeRtpServerSessionFactory portrangeFactory = new PortrangeRtpServerSessionFactory();
+		portrangeFactory.setLocalAddress(rtpServerService.getAddress());
+		portrangeFactory.start();
+		
 	}
 
 	static public void stop()
 	{
 		try {
+			PortrangeRtpServerSessionFactory.getInstance().stop();
+			
 			if ( jmxAgent != null )
 				jmxAgent.stop();
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -118,6 +118,14 @@
 			"/rtspproxy/proxy/server/rtcpPort" // xpathExpr
 			);
 
+	public static final BooleanParameter proxyServerRtpMultiplePorts = new BooleanParameter(
+			"proxy.server.rtp.multiport.enable", // name
+			false, // default value
+			false, // mutable
+			"Enables the RTP/RTCP multiport handling.",
+			"/rtspproxy/proxy/server/rtpUsePortrange" // xpathExpr
+			);
+
 	public static final IntegerParameter proxyServerRtpMinPort = new IntegerParameter(
 			"proxy.server.rtp.port.min", // name
 			new Integer( 0 ), // min value
@@ -125,7 +133,7 @@
 			new Integer( 9000 ), // default value
 			true, // mutable
 			"Port to listen for RTP packets arriving from servers.",
-			"/rtspproxy/proxy/server/rtpMinPort" // xpathExpr
+			"/rtspproxy/proxy/server/rtpPortrange/minPort" // xpathExpr
 			);
 
 	public static final IntegerParameter proxyServerRtpMaxPort = new IntegerParameter(
@@ -135,17 +143,39 @@
 			new Integer( 9100 ), // default value
 			true, // mutable
 			"Port to listen for RTP packets arriving from servers.",
-			"/rtspproxy/proxy/server/rtpMaxPort" // xpathExpr
+			"/rtspproxy/proxy/server/rtpPortrange/maxPort" // xpathExpr
 			);
 	
-	public static final BooleanParameter proxyServerRtpMultiplePorts = new BooleanParameter(
-			"proxy.server.rtp.multiport.enable", // name
-			false, // default value
-			false, // mutable
-			"Enables the RTP/RTCP multiport handling.",
-			"/rtspproxy/proxy/server/rtpUsePortrange" // xpathExpr
+	public static final IntegerParameter proxyServerRtpIdleTimeout = new IntegerParameter(
+			"proxy.server.rtp.portrange.idle.timeout", // name
+			new Integer( 0 ), // min value
+			new Integer( 86400 ), // max value
+			new Integer( 3600 ), // default value
+			true, // mutable
+			"Timeout an open RTP server port may linger around.",
+			"/rtspproxy/proxy/server/rtpPortrange/idleTimeout" // xpathExpr
+			);	
+
+	public static final IntegerParameter proxyServerRtpIdleScanInterval = new IntegerParameter(
+			"proxy.server.rtp.portrange.idle.timeout", // name
+			new Integer( 0 ), // min value
+			new Integer( 86400 ), // max value
+			new Integer( 1800 ), // default value
+			true, // mutable
+			"Scan interval on idle RTP server ports.",
+			"/rtspproxy/proxy/server/rtpPortrange/idleScanInterval" // xpathExpr
 			);
-	
+
+	public static final IntegerParameter proxyServerRtpThreadPoolSize = new IntegerParameter(
+			"proxy.server.rtp.portrange.pool.size", // name
+			new Integer( 0 ), // min value
+			new Integer( 2147483647 ), // max value
+			new Integer( 10 ), // default value
+			true, // mutable
+			"Scan interval on idle RTP server ports.",
+			"/rtspproxy/proxy/server/rtpPortrange/threadPoolSize" // xpathExpr
+			);
+
 	public static final IntegerParameter proxyClientRtpPort = new IntegerParameter(
 			"proxy.client.rtp.port", // name
 			new Integer( 0 ), // min value
@@ -235,6 +265,7 @@
 			"Enable keep-alive on RTSP connections to remote servers.",
 			"/rtspproxy/proxy/transport/hacks/rtspKeepAlive" // xpathExpr
 			);
+	
 	public static final BooleanParameter proxyRtspAllowBrokenHeaders = new BooleanParameter(
 			"proxy.transport.rtsp.broken.headers.enable", // name
 			false, // default value
@@ -243,6 +274,22 @@
 			"/rtspproxy/proxy/transport/hacks/rtspAllowBrokenHeaders" // xpathExpr
 			);
 
+	public static final BooleanParameter proxyRtspOfferSsrcToServer = new BooleanParameter(
+			"proxy.transport.rtsp.offer.ssrc.enable", // name
+			false, // default value
+			false, // mutable
+			"Allow certain work-arounds for clients generating non-conformant RTSP protocol traffic.",
+			"/rtspproxy/proxy/transport/hacks/offerRemoteSsrc" // xpathExpr
+			);
+
+	public static final BooleanParameter proxyServerRtpSsrcUnreliable = new BooleanParameter(
+			"proxy.streaming.rtp.ssrc.unreliable", // name
+			false, // default value
+			false, // mutable
+			"Disable the evaluation of the SSRC send by the remote streaming server.",
+			"/rtspproxy/proxy/streaming/hacks/rtpSsrcUnreliable" // xpathExpr
+			);	
+
 	// /////////////////////////////////////////////////////////
 
 	// JMX

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/rewrite/UrlRewritingFilter.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -22,6 +22,7 @@
 import rtspproxy.filter.FilterBase;
 import rtspproxy.jmx.JmxManageable;
 import rtspproxy.jmx.JmxManageable2;
+import rtspproxy.proxy.ProxyHandler;
 import rtspproxy.rtsp.RtspMessage;
 import rtspproxy.rtsp.RtspRequest;
 import rtspproxy.rtsp.RtspResponse;
@@ -75,9 +76,22 @@
 		if (req.getUrl() != null) {
 			HashMap<String, Object> exposedSessionAttributes = new HashMap<String, Object>();
 			
-			for(String attr : this.exposedAttributes)
-				if(session.containsAttribute(attr))
-					exposedSessionAttributes.put(attr, session.getAttribute(attr));
+			for(String attr : this.exposedAttributes) {
+				logger.debug("exposing session attribute: " + attr);
+				if(session.containsAttribute(attr)) {
+					Object o = session.getAttribute(attr);
+					
+					logger.debug("attribute " + attr + " found in session, val=" + o);
+					exposedSessionAttributes.put(attr, o);
+				}
+				
+				if(ProxyHandler.containsSharedSessionAttribute(session, attr)) {
+					Object o = ProxyHandler.getSharedSessionAttribute(session, attr);
+
+					logger.debug("attribute " + attr + " found in shared session map, val=" + o);
+					exposedSessionAttributes.put(attr, o);
+				}
+			}
 			
 			UrlRewritingResult result = this.provider.rewriteRequestUrl(req.getUrl(), req.getVerb(), 
 					session.getRemoteAddress(), req.getHeaders(), exposedSessionAttributes); 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -51,10 +51,14 @@
 import rtspproxy.filter.FilterBase;
 import rtspproxy.jmx.mbeans.Filter;
 import rtspproxy.jmx.mbeans.Info;
+import rtspproxy.jmx.mbeans.PortrangeRtpServerFactory;
+import rtspproxy.jmx.mbeans.PortrangeRtpSession;
 import rtspproxy.jmx.mbeans.ProxySessionFacade;
 import rtspproxy.jmx.mbeans.Service;
 import rtspproxy.lib.Singleton;
 import rtspproxy.proxy.ProxySession;
+import rtspproxy.rtp.range.PortrangeRtpServerSession;
+import rtspproxy.rtp.range.PortrangeRtpServerSessionFactory;
 
 /**
  * Entry point class for all the JMX interface.
@@ -71,6 +75,7 @@
 	public static final String FILTERS_DOMAIN = "RtspProxy.Filters";
 	public static final String RTSP_SESSION_DOMAIN = "RtspProxy.Sessions.RTSP";
 	public static final String PROXY_SESSION_DOMAIN = "RtspProxy.Sessions.Proxy";
+	public static final String RTP_DYNAMIC_SESSION_DOMAIN = "RtspProxy.Sessions.RTP.dynamic";
 
 	private MBeanServer mbeanServer = null;
 
@@ -319,4 +324,84 @@
 		}
 		
 	}
+	
+	/**
+	 * register a proxy session
+	 * 
+	 */
+	public void registerPortRangeRtpServerSessionfactory(PortrangeRtpServerSessionFactory sessionFactory) {
+		boolean enabled = Config.proxyManagementRemoteEnable.getValue();
+		if ( !enabled )
+			return;
+
+		try {
+			ObjectName objectName = ObjectName.getInstance( SERVICES_DOMAIN + ":name=PortrangeRtpServerSessionFactory");
+		
+			mbeanServer.registerMBean( new PortrangeRtpServerFactory(sessionFactory), objectName );
+		} catch(Exception e) {
+			log.info("failed to register PortrangeRtpServerFactory MBean", e);
+		}
+	}
+	
+	/**
+	 * register a proxy session
+	 * 
+	 */
+	public void unregisterPortRangeRtpServerSessionfactory() {
+		boolean enabled = Config.proxyManagementRemoteEnable.getValue();
+		if ( !enabled )
+			return;
+
+		try {
+			ObjectName objectName = ObjectName.getInstance( SERVICES_DOMAIN + ":name=PortrangeRtpServerSessionFactory");
+		
+			mbeanServer.unregisterMBean(  objectName );
+		} catch(InstanceNotFoundException infe) {
+			log.debug("PortrangeRtpServerFactory MBean not found", infe);
+		} catch(Exception e) {
+			log.info("failed to register PortrangeRtpServerFactory MBean", e);
+		}
+	}
+	
+	/**
+	 * register a generated RTP server session in the portrange case
+	 */
+	public void registerPortrangeRtpServerSession(PortrangeRtpServerSession session) {
+		boolean enabled = Config.proxyManagementRemoteEnable.getValue();
+		if ( !enabled )
+			return;
+		
+		try {
+			PortrangeRtpSession mbean = new PortrangeRtpSession(session);
+			ObjectName name = mbean.buildName();
+		
+			mbeanServer.registerMBean(mbean, name);
+			session.setObjectName(name);
+		} catch(Exception e) {
+			log.error( "failed to register proxy session MBean: session=" + session, e );
+		}
+	}
+	
+	/**
+	 * register a generated RTP server session in the portrange case
+	 */
+	public void unregisterPortrangeRtpServerSession(PortrangeRtpServerSession session) {
+		boolean enabled = Config.proxyManagementRemoteEnable.getValue();
+		if ( !enabled )
+			return;
+		
+		try {
+			ObjectName name = session.getObjectName();
+		
+			if(name != null) {
+				mbeanServer.unregisterMBean(name);
+				session.setObjectName(null);
+			}
+		} catch(InstanceNotFoundException infe) {
+			log.debug("internal problem: MBean not found, name=" + session.getObjectName(), infe);
+		} catch(Exception e) {
+			log.error( "failed to register proxy session MBean: session=" + session, e );
+		}		
+	}
+
 }

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpServerFactory.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpServerFactory.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpServerFactory.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -0,0 +1,48 @@
+/**
+ * 
+ */
+package rtspproxy.jmx.mbeans;
+
+import rtspproxy.rtp.range.PortrangeRtpServerSessionFactory;
+
+/**
+ * Management implementation to the PortrangeRtpServerSessionFactory instance
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ * @see rtspproxy.rtp.range.PortrangeRtpServerSessionFactory
+ */
+public class PortrangeRtpServerFactory implements
+		PortrangeRtpServerFactoryMBean {
+
+	private PortrangeRtpServerSessionFactory sessionFactory;
+	
+	/**
+	 * constrcutor
+	 * 
+	 */
+	public PortrangeRtpServerFactory(PortrangeRtpServerSessionFactory sessionFactory) {
+		this.sessionFactory = sessionFactory;
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.mbeans.PortrangeRtpServerFactoryMBean#getMaxConnections()
+	 */
+	public int getMaxConnections() {
+		return this.sessionFactory.getMaxConnections();
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.mbeans.PortrangeRtpServerFactoryMBean#getCurrentIdleConnections()
+	 */
+	public int getCurrentIdleConnections() {
+		return this.sessionFactory.getCurrentIdleConnections();
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.mbeans.PortrangeRtpServerFactoryMBean#getCurrentActiveConnections()
+	 */
+	public int getCurrentActiveConnections() {
+		return this.sessionFactory.getCurrentActiveConnections();
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpServerFactoryMBean.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpServerFactoryMBean.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpServerFactoryMBean.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -0,0 +1,27 @@
+/**
+ * 
+ */
+package rtspproxy.jmx.mbeans;
+
+/**
+ * Management interface to the PortrangeRtpServerSessionFactory instance
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ * @see rtspproxy.rtp.range.PortrangeRtpServerSessionFactory
+ */
+public interface PortrangeRtpServerFactoryMBean {
+	/**
+	 * get the maximum number of connections 
+	 */
+	public int getMaxConnections();
+	
+	/**
+	 * get the current number of idle connections
+	 */
+	public int getCurrentIdleConnections();
+	
+	/**
+	 * get the current number of active connections
+	 */
+	public int getCurrentActiveConnections();
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpSession.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpSession.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpSession.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -0,0 +1,81 @@
+/**
+ * 
+ */
+package rtspproxy.jmx.mbeans;
+
+import java.util.Hashtable;
+
+import javax.management.MalformedObjectNameException;
+import javax.management.ObjectName;
+
+import rtspproxy.jmx.JmxAgent;
+import rtspproxy.rtp.range.PortrangeRtpServerSession;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ * @see rtspproxy.rtp.range.PortrangeRtpServerSessionFactory
+ */
+public class PortrangeRtpSession implements PortrangeRtpSessionMBean {
+
+	private PortrangeRtpServerSession session;
+	
+	public PortrangeRtpSession(PortrangeRtpServerSession session) {
+		this.session = session;
+	}
+	
+	/**
+	 * build the object name
+	 * @throws NullPointerException 
+	 * @throws MalformedObjectNameException 
+	 */
+	public ObjectName buildName() throws MalformedObjectNameException, NullPointerException {
+		Hashtable<String, String> parts = new Hashtable<String, String>();
+		
+		parts.put("type", "server");
+		parts.put("connection", String.valueOf(this.session.getConnectionNumber()));
+		
+		return ObjectName.getInstance(JmxAgent.RTP_DYNAMIC_SESSION_DOMAIN, parts);
+	}
+	
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.mbeans.PortrangeRtpSessionMBean#getRtpPort()
+	 */
+	public int getRtpPort() {
+		return this.session.getRtpPort();
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.mbeans.PortrangeRtpSessionMBean#getRtcpPort()
+	 */
+	public int getRtcpPort() {
+		return this.session.getRtcpPort();
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.mbeans.PortrangeRtpSessionMBean#isActive()
+	 */
+	public boolean isActive() {
+		return this.session.isActive();
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.mbeans.PortrangeRtpSessionMBean#idleTime()
+	 */
+	public long getIdleTime() {
+		long idleTime = 0;
+		
+		if(!this.session.isActive())
+			idleTime = (System.currentTimeMillis() - this.session.getLastPassiveCheckpoint()) / 1000;
+
+		return idleTime;
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.jmx.mbeans.PortrangeRtpSessionMBean#getNumOpenSessions()
+	 */
+	public int getNumOpenSessions() {
+		return this.session.getNumOpenSessions();
+	}
+
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpSessionMBean.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpSessionMBean.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/PortrangeRtpSessionMBean.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -0,0 +1,37 @@
+/**
+ * 
+ */
+package rtspproxy.jmx.mbeans;
+
+/**
+ * management interface to PortrangeRtpServerSession instances
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ * @see rtspproxy.rtp.range.PortrangeRtpServerSession
+ */
+public interface PortrangeRtpSessionMBean {
+	/**
+	 * query RTP bind port
+	 */
+	public int getRtpPort();
+	
+	/**
+	 * query RTCP bind port
+	 */
+	public int getRtcpPort();
+	
+	/**
+	 * get the state
+	 */
+	public boolean isActive();
+	
+	/**
+	 * query idle time
+	 */
+	public long getIdleTime();
+	
+	/**
+	 * 	query the number of IoSession open
+	 */
+	public int getNumOpenSessions();
+}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedInt.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedInt.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedInt.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -17,6 +17,8 @@
  */
 package rtspproxy.lib.number;
 
+import java.util.Random;
+
 /**
  * The UnsignedInt class wraps a value of an unsigned 32 bits number.
  * 
@@ -46,6 +48,10 @@
 	private UnsignedInt() {
 		value = 0;
 	}
+	
+	public UnsignedInt( Random random ) {
+		value = random.nextLong();
+	}
 
 	public static UnsignedInt fromBytes(byte[] c) {
 		return fromBytes(c, 0);

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyConstants.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyConstants.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyConstants.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -0,0 +1,20 @@
+/**
+ * 
+ */
+package rtspproxy.proxy;
+
+/**
+ * Shared constants
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public interface ProxyConstants {
+
+	/**
+	 * Session attribute of a map shared between client and server RTSP session
+	 */
+	public static final String RSTP_SHARED_SESSION_ATTRIBUTE = 
+		ProxyHandler.class.getName() + ".SharedSessionArttributes";
+
+}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -42,8 +42,12 @@
 import rtspproxy.RtpServerService;
 import rtspproxy.config.Config;
 import rtspproxy.filter.RtspServerFilters;
+import rtspproxy.lib.number.UnsignedInt;
+import rtspproxy.lib.number.UnsignedLong;
 import rtspproxy.proxy.track.RdtTrack;
 import rtspproxy.proxy.track.RtpTrack;
+import rtspproxy.rtp.range.PortrangeRtpServerSession;
+import rtspproxy.rtp.range.PortrangeRtpServerSessionFactory;
 import rtspproxy.rtsp.RtspCode;
 import rtspproxy.rtsp.RtspMessage;
 import rtspproxy.rtsp.RtspRequest;
@@ -79,8 +83,6 @@
 
 	private HashMap<String, Object> sharedSessionObjects = new HashMap<String, Object>();
 	
-	private static final String sharedSessionAttribute = "__SharedSessionArttributes";
-	
 	/**
 	 * Creates a new ProxyHandler from a client side protocol session.
 	 * 
@@ -89,7 +91,7 @@
 	public ProxyHandler( IoSession clientSession )
 	{
 		this.clientSession = clientSession;
-		this.clientSession.setAttribute(sharedSessionAttribute, sharedSessionObjects);
+		this.clientSession.setAttribute(ProxyConstants.RSTP_SHARED_SESSION_ATTRIBUTE, sharedSessionObjects);
 	}
 
 	public void passToServer( RtspMessage message )
@@ -200,6 +202,7 @@
 	public void passSetupRequestToServer( RtspRequest request )
 	{
 		ProxySession proxySession = null;
+		PortrangeRtpServerSession portrangeRtpSession = null;
 
 		if ( request.getHeader( "Session" ) != null ) {
 			// The client already specified a session ID.
@@ -278,9 +281,31 @@
 					if(Config.proxyServerRtpMultiplePorts.getValue()) {
 						log.debug("using RTP port range");
 						
+						try {
+							portrangeRtpSession = PortrangeRtpServerSessionFactory.getInstance().getSession();
+							
+							proxyRtpPort = portrangeRtpSession.getRtpPort();
+							proxyRtcpPort = portrangeRtpSession.getRtcpPort();
+							
+							log.debug("setting local server RTP/RTCP ports to "	+ proxyRtpPort + "/" + proxyRtcpPort);
+						} catch(IOException ioe) {
+							log.info("failed to allocate local RTP/RTCP ports", ioe);
+							
+							sendResponse( clientSession, RtspResponse
+									.errorResponse( RtspCode.InternalServerError ) );
+							return;
+						}
 					}
 					transport.setClientPort( new int[] { proxyRtpPort, proxyRtcpPort } );
 
+					// offer a distinguished SSRC to the remote server
+					if(Config.proxyRtspOfferSsrcToServer.getValue()) {
+						String ssrc = ProxySession.newServerSessionID().toHexString();
+						log.debug("offering generated SSRC to remote server, ssrc=" + ssrc);
+						
+						transport.setSSRC(ssrc);
+					}
+					
 				} else if ( transport.getTransportProtocol() == TransportProtocol.RDT ) {
 					clientSession.setAttribute( clientRdtPortATTR, new Integer( transport
 							.getClientPort()[0] ) );
@@ -296,6 +321,8 @@
 			proxySession = new ProxySession();
 			clientSession.setAttribute( ProxySession.ATTR, proxySession );
 		}
+		if(portrangeRtpSession != null)
+			proxySession.setPortrangeRtpServerSession(portrangeRtpSession);
 
 		request.setHeader( "Transport", rtspTransportList.toString() );
 
@@ -491,7 +518,7 @@
 		// Save current ProxyHandler into the ProtocolSession
 		serverSession.setAttribute( ProxyHandler.ATTR, this );
 
-		serverSession.setAttribute(sharedSessionAttribute, sharedSessionObjects);
+		serverSession.setAttribute(ProxyConstants.RSTP_SHARED_SESSION_ATTRIBUTE, sharedSessionObjects);
 		
 		log.debug( "Server session: " + serverSession.getAttributeKeys() );
 	}
@@ -500,7 +527,7 @@
 	 * set an object in the shared objects map
 	 */
 	public static void setSharedSessionAttribute(IoSession session, String name, Object value) {
-		HashMap<String, Object> map = (HashMap<String, Object>)session.getAttribute(sharedSessionAttribute);
+		HashMap<String, Object> map = (HashMap<String, Object>)session.getAttribute(ProxyConstants.RSTP_SHARED_SESSION_ATTRIBUTE);
 		
 		synchronized (map) {
 			map.put(name, value);
@@ -509,7 +536,7 @@
 	
 	public static Object getSharedSessionAttribute(IoSession session, String name) {
 		Object v = null;
-		HashMap<String, Object> map = (HashMap<String, Object>)session.getAttribute(sharedSessionAttribute);
+		HashMap<String, Object> map = (HashMap<String, Object>)session.getAttribute(ProxyConstants.RSTP_SHARED_SESSION_ATTRIBUTE);
 		
 		synchronized (map) {
 			v = map.get(name);
@@ -520,7 +547,7 @@
 	
 	public static final boolean containsSharedSessionAttribute(IoSession session, String name) {
 		boolean v = false;
-		HashMap<String, Object> map = (HashMap<String, Object>)session.getAttribute(sharedSessionAttribute);
+		HashMap<String, Object> map = (HashMap<String, Object>)session.getAttribute(ProxyConstants.RSTP_SHARED_SESSION_ATTRIBUTE);
 		
 		synchronized (map) {
 			v = map.containsKey(name);

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -28,10 +28,13 @@
 import org.slf4j.LoggerFactory;
 
 import rtspproxy.jmx.JmxAgent;
+import rtspproxy.lib.number.UnsignedInt;
 import rtspproxy.lib.number.UnsignedLong;
 import rtspproxy.proxy.track.RdtTrack;
 import rtspproxy.proxy.track.RtpTrack;
 import rtspproxy.proxy.track.Track;
+import rtspproxy.rtp.range.PortrangeRtpServerSession;
+import rtspproxy.rtp.range.PortrangeRtpServerSessionFactory;
 
 /**
  * Manages RTSP sessions with both client and server.
@@ -107,8 +110,13 @@
 	 * object name of proxy session
 	 */
 	private ObjectName objectName;
-	
+
 	/**
+	 * the special server-side session which handles RTP sessions with different local source ports
+	 */
+	private PortrangeRtpServerSession portrangeRtpServerSession;
+
+	/**
 	 * @return Returns the objectName.
 	 */
 	public ObjectName getObjectName() {
@@ -147,6 +155,9 @@
 		RtpTrack track = new RtpTrack( url );
 		if ( serverSsrc != null )
 			track.setServerSSRC( serverSsrc );
+		if(portrangeRtpServerSession != null)
+			track.setPortrangeRtpServerSession(this.portrangeRtpServerSession);
+		
 		trackList.put( url, track );
 		log.debug( "ProxySession: " + clientSessionId + " Added track. TrackList: "
 				+ trackList );
@@ -257,6 +268,9 @@
 		if ( serverSessionId != null )
 			serverSessionIds.remove( serverSessionId );
 		
+		if(this.portrangeRtpServerSession != null)
+			PortrangeRtpServerSessionFactory.getInstance().releaseSession(this.portrangeRtpServerSession);
+		
 		// unregister session facade in MBean server
 		JmxAgent.getInstance().unregisterProxySession(this);
 	}
@@ -290,10 +304,36 @@
 	}
 
 	/**
+	 * Creates a unique session ID that is a 64 bit number.
+	 * 
+	 * @return the session ID string.
+	 */
+	public static UnsignedInt newServerSessionID()
+	{
+		UnsignedInt id;
+		while ( true ) {
+			// Create a 64 bit random number
+			synchronized ( random ) {
+				id = new UnsignedInt( random );
+			}
+
+			if ( serverSessionIds.get( id.toString() ) == null ) {
+				// Ok, the id is unique
+				return id;
+			}
+			// try with another id
+		}
+	}
+
+	/**
 	 * @return Returns the closedFlag.
 	 */
 	public boolean isClosed() {
 		return closedFlag;
 	}
 
+	public void setPortrangeRtpServerSession(PortrangeRtpServerSession portrangeRtpSession) {
+		this.portrangeRtpServerSession = portrangeRtpSession;
+	}
+
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtcpPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtcpPacketHandler.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtcpPacketHandler.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -26,6 +26,7 @@
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
 
+import rtspproxy.config.Config;
 import rtspproxy.lib.Exceptions;
 import rtspproxy.proxy.track.RtpTrack;
 import rtspproxy.proxy.track.Track;
@@ -44,10 +45,17 @@
 	{
 		RtcpPacket packet = new RtcpPacket( (ByteBuffer) buffer );
 		// log.debug( "Receive RTCP packet: " + packet.getType() );
-		RtpTrack track = RtpTrack.getByServerSSRC( packet.getSsrc() );
+		RtpTrack track = null;
+		
+		if(!Config.proxyServerRtpSsrcUnreliable.getValue())
+			track = RtpTrack.getByServerSSRC( packet.getSsrc() );
 
 		if ( track == null ) {
-			track = (RtpTrack)Track.getByServerAddress( (InetSocketAddress) session.getRemoteAddress() );
+			if(Config.proxyServerRtpMultiplePorts.getValue())
+				track = (RtpTrack)Track.getByLocalRemoteServerAddress((InetSocketAddress)session.getLocalAddress(),
+						(InetSocketAddress)session.getRemoteAddress());
+			else
+				track = (RtpTrack)Track.getByServerAddress( (InetSocketAddress) session.getRemoteAddress() );
 
 			if ( track == null ) {
 				// drop packet

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -26,6 +26,7 @@
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
 
+import rtspproxy.config.Config;
 import rtspproxy.lib.Exceptions;
 import rtspproxy.proxy.track.RtpTrack;
 import rtspproxy.proxy.track.Track;
@@ -48,12 +49,20 @@
 	{
 		// log.debug( "Received RTP packet" );
 		RtpPacket packet = new RtpPacket( (ByteBuffer) buffer );
-		RtpTrack track = RtpTrack.getByServerSSRC( packet.getSsrc() );
+		RtpTrack track = null;
 
+		if(!Config.proxyServerRtpSsrcUnreliable.getValue())
+			track = RtpTrack.getByServerSSRC( packet.getSsrc() );
+		
 		log.debug("recevied server RTP packet, SSRC=" + packet.getSsrc() + ", CSRC=" + packet.getCsrc()
-				+ ", server=" + session.getRemoteAddress(), ", local=" + session.getLocalAddress());
+				+ ", server=" + session.getRemoteAddress() + ", local=" + session.getLocalAddress());
+		
 		if ( track == null ) {
-			track = (RtpTrack)Track.getByServerAddress( (InetSocketAddress) session.getRemoteAddress() );
+			if(Config.proxyServerRtpMultiplePorts.getValue())
+				track = (RtpTrack)Track.getByLocalRemoteServerAddress((InetSocketAddress)session.getLocalAddress(),
+						(InetSocketAddress)session.getRemoteAddress());
+			else
+				track = (RtpTrack)Track.getByServerAddress( (InetSocketAddress) session.getRemoteAddress() );
 
 			if ( track == null ) {
 				// drop packet

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RtpTrack.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RtpTrack.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/RtpTrack.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -19,6 +19,7 @@
 import rtspproxy.RtpServerService;
 import rtspproxy.lib.number.UnsignedInt;
 import rtspproxy.rtp.RtpPacket;
+import rtspproxy.rtp.range.PortrangeRtpServerSession;
 import rtspproxy.rtp.rtcp.RtcpPacket;
 
 public class RtpTrack extends Track
@@ -68,6 +69,8 @@
 	private int serverRtpPort;
 
 	private int serverRtcpPort;
+	
+	private PortrangeRtpServerSession portrangeRtpServerSession;
 
 	/**
 	 * Construct a new Track.
@@ -168,9 +171,15 @@
 		// modify the SSRC for the server
 		packet.setSsrc( proxySSRC );
 
-		if ( rtpServerSession == null )
-			rtpServerSession = RtpServerService.getInstance().newSession(
-					new InetSocketAddress( serverAddress, serverRtpPort ) );
+		if ( rtpServerSession == null ) {
+			if(this.portrangeRtpServerSession != null) {
+				rtpServerSession = this.portrangeRtpServerSession.newRtpSession(new InetSocketAddress( serverAddress, 
+						serverRtpPort ));
+			} else {
+				rtpServerSession = RtpServerService.getInstance().newSession(
+						new InetSocketAddress( serverAddress, serverRtpPort ) );
+			}
+		}
 
 		rtpServerSession.write( packet.toByteBuffer() );
 	}
@@ -187,10 +196,15 @@
 		// modify the SSRC for the server
 		packet.setSsrc( proxySSRC );
 
-		if ( rtcpServerSession == null )
-			rtcpServerSession = RtcpServerService.getInstance().newSession(
-					new InetSocketAddress( clientAddress, clientRtcpPort ) );
-
+		if ( rtcpServerSession == null ) {
+			if(this.portrangeRtpServerSession != null) {
+				rtcpServerSession = this.portrangeRtpServerSession.newRtcpSession(new InetSocketAddress( serverAddress, 
+						serverRtcpPort ));
+			} else {
+				rtcpServerSession = RtcpServerService.getInstance().newSession(
+						new InetSocketAddress( serverAddress, serverRtcpPort ) );
+			}
+		}
 		rtcpServerSession.write( packet.toByteBuffer() );
 	}
 
@@ -283,17 +297,39 @@
 		this.serverRtpPort = rtpPort;
 		this.serverRtcpPort = rtcpPort;
 
-		serverAddressMap.put( new InetSocketAddress( serverAddress, rtpPort ), this );
-		serverAddressMap.put( new InetSocketAddress( serverAddress, rtcpPort ), this );
+		InetSocketAddress rtpSockAddr = new InetSocketAddress( serverAddress, rtpPort );
+		InetSocketAddress rtcpSockAddr = new InetSocketAddress( serverAddress, rtcpPort ); 
+		
+		serverAddressMap.put( rtpSockAddr, this );
+		serverAddressMap.put( rtcpSockAddr, this );
+		
+		if(this.portrangeRtpServerSession != null) {
+			localRemoteServerAddressMap.put(
+					new LocalRemoteAddressPair(this.portrangeRtpServerSession.getRtpSocketAddress(), rtpSockAddr), 
+					this);
+			localRemoteServerAddressMap.put(
+					new LocalRemoteAddressPair(this.portrangeRtpServerSession.getRtcpSocketAddress(), rtcpSockAddr), 
+					this);
+		}
 	}
 
 	public synchronized void close()
 	{
 		if ( serverSSRC != null )
 			serverSsrcMap.remove( serverSSRC );
-		serverAddressMap.remove( new InetSocketAddress( serverAddress, serverRtpPort ) );
-		serverAddressMap.remove( new InetSocketAddress( serverAddress, serverRtcpPort ) );
-
+		
+		InetSocketAddress rtpSockAddr = new InetSocketAddress(serverAddress, serverRtpPort);
+		InetSocketAddress rtcpSockAddr = new InetSocketAddress(serverAddress, serverRtcpPort);
+		
+		serverAddressMap.remove( rtpSockAddr );
+		serverAddressMap.remove( rtcpSockAddr );
+		if(this.portrangeRtpServerSession != null) {
+			localRemoteServerAddressMap.remove(
+					new LocalRemoteAddressPair(this.portrangeRtpServerSession.getRtpSocketAddress(), rtpSockAddr));
+			localRemoteServerAddressMap.remove(
+					new LocalRemoteAddressPair(this.portrangeRtpServerSession.getRtcpSocketAddress(), rtcpSockAddr));
+		}		
+		
 		clientAddressMap.remove( new InetSocketAddress( clientAddress, clientRtpPort ) );
 		clientAddressMap.remove( new InetSocketAddress( clientAddress, clientRtcpPort ) );
 
@@ -326,4 +362,8 @@
 			// try with another id
 		}
 	}
+
+	public void setPortrangeRtpServerSession(PortrangeRtpServerSession session) {
+		this.portrangeRtpServerSession = session;
+	}
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/Track.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/Track.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/Track.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -36,6 +36,41 @@
 public abstract class Track
 {
 
+	protected static class LocalRemoteAddressPair {
+		private InetSocketAddress local;
+		private InetSocketAddress remote;
+		
+		public LocalRemoteAddressPair(InetSocketAddress local, InetSocketAddress remote) {
+			this.local = local;
+			this.remote = remote;
+		}
+
+		/* (non-Javadoc)
+		 * @see java.lang.Object#equals(java.lang.Object)
+		 */
+		@Override
+		public boolean equals(Object obj) {
+			boolean equal = false;
+			
+			if(obj instanceof LocalRemoteAddressPair) {
+				LocalRemoteAddressPair o = (LocalRemoteAddressPair)obj;
+				
+				equal = (this.local.equals(o.local) && this.remote.equals(o.remote));
+			}
+			return equal;
+		}
+
+		/* (non-Javadoc)
+		 * @see java.lang.Object#hashCode()
+		 */
+		@Override
+		public int hashCode() {
+			return (this.local.hashCode() ^ this.remote.hashCode());
+		}
+		
+		
+	}
+	
 	protected static final String ATTR = Track.class.toString() + "Attr";
 
 	/** Maps a client address to a Track */
@@ -44,6 +79,10 @@
 	/** Maps a server address to a Track */
 	protected static Map<InetSocketAddress, Track> serverAddressMap = new ConcurrentHashMap<InetSocketAddress, Track>();
 
+	/** Maps a local server address/port and a remote address/port to a Track */
+	protected static Map<LocalRemoteAddressPair, Track> localRemoteServerAddressMap = 
+		new ConcurrentHashMap<LocalRemoteAddressPair, Track>();
+	
 	/**
 	 * Control Url of the track. This is the url handle given by the server to
 	 * control different tracks in a RTSP session.
@@ -95,6 +134,22 @@
 		return serverAddressMap.get( serverAddress );
 	}
 
+	/**
+	 * Get the track by looking at server socket address.
+	 * <p>
+	 * Used as a workaround for streaming servers which do not hand out a ssrc
+	 * in the setup handshake.
+	 * 
+	 * @return a Track instance if a matching pair is found or null
+	 */
+	public static Track getByLocalRemoteServerAddress( InetSocketAddress localServerAddress,
+			InetSocketAddress remoteServerAddress)
+	{
+		LocalRemoteAddressPair pair = new LocalRemoteAddressPair(localServerAddress, remoteServerAddress);
+		
+		return localRemoteServerAddressMap.get( pair );
+	}
+
 	// /// Member methods
 
 	public String getUrl()

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/PortrangeRtpServerSession.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/PortrangeRtpServerSession.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/PortrangeRtpServerSession.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -0,0 +1,173 @@
+/**
+ * 
+ */
+package rtspproxy.rtp.range;
+
+import java.net.InetSocketAddress;
+import java.util.LinkedList;
+
+import javax.management.ObjectName;
+
+import org.apache.mina.common.IoSession;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import rtspproxy.transport.socket.nio.DatagramAcceptor;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class PortrangeRtpServerSession {
+	/**
+	 * Logger for this class
+	 */
+	private static final Logger logger = LoggerFactory
+			.getLogger(PortrangeRtpServerSession.class);
+		
+	// session attribute name
+	public static final String ATTR = PortrangeRtpServerSession.class.getName() + ".ATTR";
+	
+	// connection number
+	private int connectionNumber;
+	
+	// flag if session is passive
+	private boolean activeIfTrue;
+	
+	// time when object was passivated
+	private long lastPassiveCheckpoint; 
+	
+	// RTP acceptor
+	private DatagramAcceptor rtpAcceptor;
+	
+	// RTP socket address
+	private InetSocketAddress rtpSockAddr;
+	
+	// RCTP acceptor
+	private DatagramAcceptor rtcpAcceptor;
+	
+	// RTCP socket address
+	private InetSocketAddress rtcpSockAddr;
+	
+	// opened sessions
+	private LinkedList<IoSession> openSessions = new LinkedList<IoSession>();
+	
+	// MBean name
+	private ObjectName objectName;
+	
+	/**
+	 * create a sever session
+	 */
+	PortrangeRtpServerSession(int conNum) {
+		this.connectionNumber = conNum;
+	}
+
+	public void setLocalBinding(DatagramAcceptor rtpAcceptor, InetSocketAddress rtpSockAddr, 
+			DatagramAcceptor rtcpAcceptor, InetSocketAddress rtcpSockAddr) {
+		this.rtpAcceptor = rtpAcceptor;
+		this.rtpSockAddr = rtpSockAddr;
+		this.rtcpAcceptor = rtcpAcceptor;
+		this.rtcpSockAddr = rtcpSockAddr;
+	}
+	
+	/**
+	 * get the RTP port number
+	 */
+	public int getRtpPort() {
+		return this.rtpSockAddr.getPort();
+	}
+
+	/**
+	 * get the RTP port number
+	 */
+	public int getRtcpPort() {
+		return this.rtcpSockAddr.getPort();
+	}
+
+	/**
+	 * get the connection number
+	 */
+	public int getConnectionNumber() {
+		return this.connectionNumber;
+	}
+
+	void unbind() {
+		this.rtpAcceptor.unbind(this.rtpSockAddr);
+		this.rtcpAcceptor.unbind(this.rtcpSockAddr);
+	}
+
+	void closeOpenSessions() {
+			for (IoSession session : this.openSessions)
+			session.close();
+		this.openSessions.clear();
+	}
+	
+	public IoSession newRtpSession(InetSocketAddress remote) {
+		IoSession session = this.rtpAcceptor.newSession(remote, this.rtpSockAddr);
+		
+		logger.debug("opened new RTP session to " + remote);
+		this.openSessions.add(session);
+		
+		return session;
+	}
+
+	public IoSession newRtcpSession(InetSocketAddress remote) {
+		IoSession session = this.rtcpAcceptor.newSession(remote, this.rtcpSockAddr);
+
+		logger.debug("opened new RTCP session to " + remote);
+		this.openSessions.add(session);
+		
+		return session;
+	}
+
+	void setActive(boolean state) {
+		this.activeIfTrue = state;
+		
+		if(!this.activeIfTrue)
+			this.lastPassiveCheckpoint = System.currentTimeMillis();
+	}
+
+	/**
+	 * @return Returns the lastPassiveCheckpoint.
+	 */
+	public long getLastPassiveCheckpoint() {
+		return lastPassiveCheckpoint;
+	}
+
+	public boolean isActive() {
+		return this.activeIfTrue;
+	}
+
+	/**
+	 * @return Returns the rtpSockAddr.
+	 */
+	public InetSocketAddress getRtpSocketAddress() {
+		return rtpSockAddr;
+	}
+
+	/**
+	 * @return Returns the rtpSockAddr.
+	 */
+	public InetSocketAddress getRtcpSocketAddress() {
+		return rtcpSockAddr;
+	}
+
+	/**
+	 * @return Returns the objectName.
+	 */
+	public ObjectName getObjectName() {
+		return objectName;
+	}
+
+	/**
+	 * @param objectName The objectName to set.
+	 */
+	public void setObjectName(ObjectName objectName) {
+		this.objectName = objectName;
+	}
+
+	public int getNumOpenSessions() {
+		return this.openSessions.size();
+	}
+
+}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/PortrangeRtpServerSessionFactory.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/PortrangeRtpServerSessionFactory.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/PortrangeRtpServerSessionFactory.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -3,10 +3,162 @@
  */
 package rtspproxy.rtp.range;
 
+import java.io.IOException;
+import java.net.InetAddress;
+import java.util.NoSuchElementException;
+import java.util.Observable;
+import java.util.Observer;
+
+import org.apache.commons.pool.PoolableObjectFactory;
+import org.apache.commons.pool.impl.GenericObjectPool;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import rtspproxy.config.Config;
+import rtspproxy.config.Parameter;
+import rtspproxy.jmx.JmxAgent;
+import rtspproxy.lib.Singleton;
+
 /**
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
  *
  */
-public class PortrangeRtpServerSessionFactory {
+public class PortrangeRtpServerSessionFactory extends Singleton implements Observer {
+	/**
+	 * Logger for this class
+	 */
+	private static final Logger logger = LoggerFactory
+			.getLogger(PortrangeRtpServerSessionFactory.class);
+	
+	// connection pool
+	private GenericObjectPool pool;
+	
+	// local addr
+	private InetAddress localAddress;
+	
+	/**
+	 * constructor 
+	 */
+	public PortrangeRtpServerSessionFactory() {
+		
+	}
+	
+	/**
+	 * get the singleton instance
+	 */
+	public static PortrangeRtpServerSessionFactory getInstance() {
+		return (PortrangeRtpServerSessionFactory)Singleton.getInstance(PortrangeRtpServerSessionFactory.class);
+	}
+	
+	/**
+	 * get a RTP server session
+	 */
+	public PortrangeRtpServerSession getSession() throws IOException {
+		try {
+			return (PortrangeRtpServerSession)this.pool.borrowObject();
+		} catch(Exception e) {
+			logger.info("failed to obtain RTP server session", e);
+			
+			throw new IOException("cant obtain RTP server session");
+		}
+	}
+	
+	/**
+	 * release a server session
+	 */
+	public void releaseSession(PortrangeRtpServerSession session) {
+		try {
+			session.closeOpenSessions();
+			this.pool.returnObject(session);
+		} catch(Exception e) {
+			logger.info("failed to release session", e);
+		}
+	}
+	
+	/**
+	 * initialise the factory
+	 */
+	public void start() throws Exception {
+		if(Config.proxyServerRtpMultiplePorts.getValue()) {
+			int minPort = Config.proxyServerRtpMinPort.getValue();
+			int maxPort = Config.proxyServerRtpMaxPort.getValue();
+			int rtpSessionIdleTimeout = Config.proxyServerRtpIdleTimeout.getValue();
+			int poolSize = Config.proxyServerRtpThreadPoolSize.getValue();
+			int idleScanInterval = Config.proxyServerRtpIdleScanInterval.getValue() * 1000;
+			
+			if(minPort <= 0 || minPort >= 65536)
+				throw new IllegalArgumentException("RTP min port out of range: " + minPort);
+			if(maxPort <= 0 || maxPort >= 65536)
+				throw new IllegalArgumentException("RTP max port out of range: " + maxPort);
+			
+			minPort = minPort + (minPort % 2);
+			maxPort = maxPort - (maxPort % 2);
+			logger.debug("RTP min port=" + minPort + ", max port=" + maxPort);
+			
+			if(minPort >= maxPort)
+				throw new IllegalArgumentException("RTP min port too high, min=" + minPort + ", max=" + maxPort);
+			int maxConn = (maxPort -minPort) / 2;
+			
+			GenericObjectPool.Config config = new GenericObjectPool.Config();
+			
+			config.maxActive = maxConn;
+			config.maxIdle = maxConn / 2;
+			config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_FAIL;
+			config.testOnBorrow = false;
+			config.testOnReturn = false;
+			config.testWhileIdle = true;
+			config.minEvictableIdleTimeMillis = rtpSessionIdleTimeout*1000;
+			config.timeBetweenEvictionRunsMillis = idleScanInterval;
+			
+			this.pool = new GenericObjectPool(new RtpServerSessionFactory(this.localAddress, minPort, maxConn,
+					rtpSessionIdleTimeout, poolSize), config);
+			
+			Config.proxyServerRtpIdleScanInterval.addObserver(this);
+			Config.proxyServerRtpIdleTimeout.addObserver(this);
+			
+			JmxAgent.getInstance().registerPortRangeRtpServerSessionfactory(this);
+		}
+	}
+	
+	/**
+	 * shutdown the session factory
+	 */
+	public void stop() {
+		if(Config.proxyServerRtpMultiplePorts.getValue()) {
+			try {
+				this.pool.close();
+			} catch(Exception e) {
+				logger.info("exception while closing RTP port pool", e);
+			}
+			
+			JmxAgent.getInstance().unregisterPortRangeRtpServerSessionfactory();
+		}		
+	}
 
+	public void setLocalAddress(InetAddress address) {
+		this.localAddress = address;
+	}
+
+	public void update(Observable o, Object arg) {
+		if(o instanceof Parameter) {
+			Parameter p = (Parameter)o;
+			
+			if(p.equals(Config.proxyServerRtpIdleScanInterval))
+				this.pool.setTimeBetweenEvictionRunsMillis(Config.proxyServerRtpIdleScanInterval.getValue());
+			else if(p.equals(Config.proxyServerRtpIdleTimeout))
+				this.pool.setMinEvictableIdleTimeMillis(Config.proxyServerRtpIdleTimeout.getValue() * 1000);
+		}
+	}
+
+	public int getMaxConnections() {
+		return this.pool.getMaxActive();
+	}
+
+	public int getCurrentIdleConnections() {
+		return this.pool.getNumIdle();
+	}
+
+	public int getCurrentActiveConnections() {
+		return this.pool.getNumActive();
+	}
 }

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpRtcpFilterChainBuilder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpRtcpFilterChainBuilder.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpRtcpFilterChainBuilder.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -0,0 +1,29 @@
+/**
+ * 
+ */
+package rtspproxy.rtp.range;
+
+import org.apache.mina.common.IoFilterChain;
+import org.apache.mina.common.IoFilterChainBuilder;
+import org.apache.mina.filter.ThreadPoolFilter;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public class RtpRtcpFilterChainBuilder implements IoFilterChainBuilder {
+
+	private ThreadPoolFilter filter = new ThreadPoolFilter("RtpRtcpPortRangeThreadPool");
+	
+	RtpRtcpFilterChainBuilder() {}
+	
+	/* (non-Javadoc)
+	 * @see org.apache.mina.common.IoFilterChainBuilder#buildFilterChain(org.apache.mina.common.IoFilterChain)
+	 */
+	public void buildFilterChain(IoFilterChain arg0) throws Exception {
+	}
+
+	void setPoolSize(int size) {
+		this.filter.setMaximumPoolSize(size);
+	}
+}

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpServerSessionFactory.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpServerSessionFactory.java	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpServerSessionFactory.java	2006-02-07 23:40:28 UTC (rev 414)
@@ -0,0 +1,186 @@
+/**
+ * 
+ */
+package rtspproxy.rtp.range;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.util.BitSet;
+import java.util.Observable;
+import java.util.Observer;
+
+import org.apache.commons.pool.PoolableObjectFactory;
+
+import rtspproxy.config.Config;
+import rtspproxy.config.Parameter;
+import rtspproxy.jmx.JmxAgent;
+import rtspproxy.proxy.ServerRtcpPacketHandler;
+import rtspproxy.proxy.ServerRtpPacketHandler;
+import rtspproxy.transport.socket.nio.DatagramAcceptor;
+import sun.security.krb5.internal.s;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ */
+class RtpServerSessionFactory implements PoolableObjectFactory, Observer {
+	/**
+	 * Logger for this class
+	 */
+	private static final Logger logger = LoggerFactory
+			.getLogger(RtpServerSessionFactory.class);
+
+	// local bind address
+	private InetAddress localAddress;
+	
+	// mark used connections
+	private BitSet usedConnections;
+	
+	// base port (RTP)
+	private int basePort;
+	
+	// max connections
+	private int maxConnections;
+	
+	// RTP acceptor
+	private DatagramAcceptor rtpAcceptor = new DatagramAcceptor();
+	
+	// RTCP acceptor
+	private DatagramAcceptor rtcpAcceptor = new DatagramAcceptor();
+
+	// Filter chain builder
+	private RtpRtcpFilterChainBuilder chainBuilder = new RtpRtcpFilterChainBuilder();
+	
+	private long idleTimeout;
+
+	/**
+	 * constructor
+	 * @param address 
+	 * @param maxConn 
+	 */
+	RtpServerSessionFactory(InetAddress address, int basePort, int maxConn, long idleTimeout, int threadPoolSize) {
+		this.localAddress = address;
+		this.usedConnections = new BitSet(maxConn);
+		this.maxConnections = maxConn;
+		this.basePort = basePort;
+		this.idleTimeout = idleTimeout;
+
+		this.chainBuilder.setPoolSize(threadPoolSize);
+		this.rtpAcceptor.setFilterChainBuilder(this.chainBuilder);
+		this.rtcpAcceptor.setFilterChainBuilder(this.chainBuilder);
+		
+		Config.proxyServerRtpThreadPoolSize.addObserver(this);
+		Config.proxyServerRtpIdleTimeout.addObserver(this);
+	}
+
+	public Object makeObject() throws Exception {
+		PortrangeRtpServerSession serverSession = null;
+		int nextCon = 0;
+
+		do {
+			nextCon = this.usedConnections.nextClearBit(0);
+			logger.debug("found next free slot at " + nextCon);
+			
+			if(nextCon >= this.maxConnections) {
+				logger.debug("failed to allocate a free slot");
+				throw new IOException("no local ports available");
+			}
+			int rtpPort = this.basePort + 2*nextCon;
+			
+			this.usedConnections.set(nextCon);
+			serverSession = new PortrangeRtpServerSession(nextCon);
+			
+			// try to bind local ports
+			InetSocketAddress rtpSockAddr = new InetSocketAddress(this.localAddress, rtpPort);
+			InetSocketAddress rtcpSockAddr = new InetSocketAddress(this.localAddress, rtpPort+1);
+			
+			boolean rtpBound = false;
+			boolean rtcpBound = false;
+			
+			try {
+				this.rtpAcceptor.bind(rtpSockAddr, new ServerRtpPacketHandler());
+				rtpBound = true;
+			} catch(IOException ie) {
+				logger.info("failed to bind RTP socket " + rtpSockAddr, ie);
+			}
+			try {
+				this.rtcpAcceptor.bind(rtcpSockAddr, new ServerRtcpPacketHandler());
+				rtcpBound = true;
+			} catch(IOException ie) {
+				logger.info("failed to bind RTCP socket " + rtpSockAddr, ie);
+			}
+			if(rtpBound == false || rtcpBound == false) {
+				logger.debug("failed to allocate RTP/RTCP port port");
+				
+				serverSession = null;
+				if(rtpBound) {
+					this.rtpAcceptor.unbind(rtpSockAddr);
+				}
+				if(rtcpBound) {
+					this.rtcpAcceptor.unbind(rtcpSockAddr);
+				}
+			} else {
+				logger.debug("allocated local port pair");
+				
+				serverSession.setLocalBinding(this.rtpAcceptor, rtpSockAddr, this.rtcpAcceptor, rtcpSockAddr);
+			}
+			
+		} while(serverSession == null);
+		
+		JmxAgent.getInstance().registerPortrangeRtpServerSession(serverSession);
+		
+		return serverSession;
+	}
+
+	public void destroyObject(Object arg0) throws Exception {
+		PortrangeRtpServerSession serverSession = (PortrangeRtpServerSession)arg0;
+		int conNumber = serverSession.getConnectionNumber();
+		
+		logger.debug("destroying connection " + conNumber);
+		serverSession.unbind();
+		JmxAgent.getInstance().unregisterPortrangeRtpServerSession(serverSession);
+		this.usedConnections.clear(conNumber);
+	}
+
+	public boolean validateObject(Object arg0) {
+		boolean valid = true;
+		PortrangeRtpServerSession serverSession = (PortrangeRtpServerSession)arg0;
+		long checkPoint = System.currentTimeMillis();
+		
+		logger.debug("checking validity for connection " + serverSession.getConnectionNumber());
+		if(!serverSession.isActive() 
+				&& (checkPoint - serverSession.getLastPassiveCheckpoint()) > (1000*this.idleTimeout)) {
+			logger.debug("connection " + serverSession.getConnectionNumber() + " timed out");
+			valid = false;
+		}
+		
+		return valid;
+	}
+
+	public void activateObject(Object arg0) throws Exception {
+		PortrangeRtpServerSession serverSession = (PortrangeRtpServerSession)arg0;
+		
+		serverSession.setActive(true);
+	}
+
+	public void passivateObject(Object arg0) throws Exception {
+		PortrangeRtpServerSession serverSession = (PortrangeRtpServerSession)arg0;
+		
+		serverSession.closeOpenSessions();
+		serverSession.setActive(false);
+	}
+
+	public void update(Observable o, Object arg) {
+		if(o instanceof Parameter) {
+			Parameter p = (Parameter)o;
+			
+			if(p.equals(Config.proxyServerRtpThreadPoolSize))
+				this.chainBuilder.setPoolSize(Config.proxyServerRtpThreadPoolSize.getValue());
+			else if(p.equals(Config.proxyServerRtpIdleTimeout))
+				this.idleTimeout = Config.proxyServerRtpIdleTimeout.getValue();
+		}
+	}
+}

Modified: trunk/RTSPProxy-OSGi/pom.xml
===================================================================
--- trunk/RTSPProxy-OSGi/pom.xml	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/RTSPProxy-OSGi/pom.xml	2006-02-07 23:40:28 UTC (rev 414)
@@ -3,14 +3,14 @@
   <parent>
     <groupId>net.merlimat</groupId>
     <artifactId>rtspproxy</artifactId>
-    <version>3.0-ALPHA4-SNAPSHOT</version>
+    <version>3.0-ALPHA5-SNAPSHOT</version>
   </parent>
   
   <modelVersion>4.0.0</modelVersion>
   <groupId>net.merlimat</groupId>
   <artifactId>RTSPProxy-OSGi</artifactId>
   <packaging>osgi-bundle</packaging>
-  <version>3.0-ALPHA4-SNAPSHOT</version>
+  <version>3.0-ALPHA5-SNAPSHOT</version>
   <name>RTSP Proxy OSGi bundle</name>
   <url>http://rtspproxy.berlios.de</url>
   <inceptionYear>2003</inceptionYear>
@@ -20,7 +20,7 @@
     <dependency>
       <groupId>net.merlimat</groupId>
       <artifactId>RTSPProxy-Core</artifactId>
-      <version>3.0-ALPHA4-SNAPSHOT</version>
+      <version>3.0-ALPHA5-SNAPSHOT</version>
     </dependency>
 
     <dependency>

Modified: trunk/pom.xml
===================================================================
--- trunk/pom.xml	2006-02-06 19:54:31 UTC (rev 413)
+++ trunk/pom.xml	2006-02-07 23:40:28 UTC (rev 414)
@@ -12,7 +12,7 @@
   <groupId>net.merlimat</groupId>
   <artifactId>rtspproxy</artifactId>
   <packaging>pom</packaging>
-  <version>3.0-ALPHA4-SNAPSHOT</version>
+  <version>3.0-ALPHA5-SNAPSHOT</version>
   <url>http://rtspproxy.berlios.de</url>
   <inceptionYear>2003</inceptionYear>
   



