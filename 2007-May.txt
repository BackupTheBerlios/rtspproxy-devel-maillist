From merlimat at mail.berlios.de  Wed May  2 18:33:57 2007
From: merlimat at mail.berlios.de (merlimat at mail.berlios.de)
Date: Wed, 2 May 2007 18:33:57 +0200
Subject: [Rtspproxy-devel] r437 - in trunk: . JainSDP RTSPProxy-App
 RTSPProxy-App/src/main/java/rtspproxy
 RTSPProxy-App/src/main/java/rtspproxy/filter/accounting
 RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress RTSPProxy-Core
 RTSPProxy-Core/src/main/java/rtspproxy
 RTSPProxy-Core/src/main/java/rtspproxy/config
 RTSPProxy-Core/src/main/java/rtspproxy/filter
 RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication
 RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking
 RTSPProxy-Core/src/main/java/rtspproxy/jmx
 RTSPProxy-Core/src/main/java/rtspproxy/lib/number
 RTSPProxy-Core/src/main/java/rtspproxy/proxy
 RTSPProxy-Core/src/main/java/rtspproxy/rdt
 RTSPProxy-Core/src/main/java/rtspproxy/rtp/range
 RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp
 RTSPProxy-Core/src/test/java/rtspproxy/lib
 RTSPProxy-Core/src/test/java/rtspproxy/lib/number
 RTSPProxy-Core/src/test/java/rtspproxy/rdt
 RTSPProxy-Core/src/test/java/rtspproxy/rtp
 RTSPProxy-Core/src/test/java/rtspproxy/rtp/rtcp RTSPProxy-Core/src/test!
 /java/rtspproxy/rtsp RTSPProxy-OSGi
Message-ID: <200705021633.l42GXvDA013083@sheep.berlios.de>

Author: merlimat
Date: 2007-05-02 18:31:26 +0200 (Wed, 02 May 2007)
New Revision: 437

Added:
   trunk/JainSDP/LICENSE.txt
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/IProxyServiceRegistry.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/IReactor.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/IFilterRegistry.java
   trunk/RTSPProxy-Core/testng.xml
   trunk/generateEclipseProjects.sh
Removed:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpRtcpFilterChainBuilder.java
Modified:
   trunk/RTSPProxy-App/
   trunk/RTSPProxy-App/pom.xml
   trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/SimpleAccountingProvider.java
   trunk/RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProviderTest.java
   trunk/RTSPProxy-Core/pom.xml
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ShutdownHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionTrackingFilter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ProxySessionList.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedByte.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedInt.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedShort.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpServerSessionFactory.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp/RtcpPacket.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/NptTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedByteTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedIntTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedLongTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedShortTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtAckPacketTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtDataPacketTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtLatencyRepostPacketTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttRequestPacketTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttResponsePacketTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtStreamEndPacketTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtp/RtpPacketTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtp/rtcp/RtcpPacketTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java
   trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtsp/RtspTransportTest.java
   trunk/RTSPProxy-OSGi/
   trunk/pom.xml
Log:
Big update, mostly infrastructure, tests, introduced guice.


Copied: trunk/JainSDP/LICENSE.txt (from rev 426, trunk/LICENSE.txt)


Property changes on: trunk/RTSPProxy-App
___________________________________________________________________
Name: svn:ignore
   - 
target

   + target
log


Modified: trunk/RTSPProxy-App/pom.xml
===================================================================
--- trunk/RTSPProxy-App/pom.xml	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-App/pom.xml	2007-05-02 16:31:26 UTC (rev 437)
@@ -24,7 +24,19 @@
 			<groupId>net.merlimat</groupId>
 			<artifactId>RTSPProxy-Core</artifactId>
 			<version>3.0-ALPHA5-SNAPSHOT</version>
-		</dependency>		
+		</dependency>
+		
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-log4j12</artifactId>
+			<version>1.3.1</version>
+		</dependency>
+		
+		<dependency>
+			<groupId>log4j</groupId>
+			<artifactId>log4j</artifactId>
+			<version>1.2.14</version>
+		</dependency>	
 	</dependencies>
 
 

Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -30,6 +30,9 @@
 import rtspproxy.config.XMLConfigReader;
 import rtspproxy.lib.Exceptions;
 
+import com.google.inject.Guice;
+import com.google.inject.Injector;
+
 /**
  * 
  */
@@ -40,6 +43,9 @@
 
     public static void main( String[] args )
     {
+        Injector injector = Guice.createInjector();
+        IReactor reactor = injector.getInstance( IReactor.class );
+        
         // Configure the logger with default settings
         // useful to track pre-config file errors
         BasicConfigurator.configure();
@@ -112,11 +118,11 @@
                 log.debug( Config.debugParameters() );
             }
 
-            Reactor.setStandalone( true );
-            Reactor.start();
+            reactor.setStandalone( true );
+            reactor.start();
 
         } catch ( Exception e ) {
-            log.fatal( "Exception in the reactor: " + e );
+            log.fatal( "Exception in the reactor: ", e );
             Exceptions.logStackTrace( e );
             System.exit( -1 );
         }

Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/SimpleAccountingProvider.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/SimpleAccountingProvider.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/SimpleAccountingProvider.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -27,8 +27,6 @@
 
     private static Logger log = LoggerFactory.getLogger( SimpleAccountingProvider.class );
 
-    private static final String requestMessageATTR = SimpleAccountingProvider.class.getName() + "requestATTR";
-
     // This is not static since it's a separate log
     private Logger accessLog = null;
 

Modified: trunk/RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProviderTest.java
===================================================================
--- trunk/RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProviderTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-App/src/test/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProviderTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -17,18 +17,17 @@
  */
 package rtspproxy.filter.ipaddress;
 
-import junit.framework.TestCase;
+import org.testng.annotations.Test;
 
 /**
  * @author Matteo Merli
  */
-public class PlainTextIpAddressProviderTest extends TestCase
+public class PlainTextIpAddressProviderTest
 {
 	// TODO: Rewrite this test using the xml based configuration
 
-	private static final String CRLF = "\r\n";
-
-	public void test1() throws Exception
+	@Test
+    public void test1() throws Exception
 	{
 	/*
 		// prepare
@@ -47,7 +46,8 @@
 	*/
 	}
 	
-	public void test2() throws Exception
+	@Test
+    public void test2() throws Exception
 	{
 	/*
 		// prepare

Modified: trunk/RTSPProxy-Core/pom.xml
===================================================================
--- trunk/RTSPProxy-Core/pom.xml	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/pom.xml	2007-05-02 16:31:26 UTC (rev 437)
@@ -20,7 +20,7 @@
 	<artifactId>RTSPProxy-Core</artifactId>	
 
 	<build>
-		<defaultGoal>assembly:directory</defaultGoal>
+		<defaultGoal>package</defaultGoal>
 
 		<resources>
 			<resource>

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/IProxyServiceRegistry.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/IProxyServiceRegistry.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/IProxyServiceRegistry.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -0,0 +1,108 @@
+package rtspproxy;
+
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.util.Set;
+import java.util.concurrent.Executor;
+
+import org.apache.mina.common.IoAcceptor;
+import org.apache.mina.common.IoFilterChainBuilder;
+import org.apache.mina.common.IoHandler;
+
+import com.google.inject.ImplementedBy;
+
+ at ImplementedBy(ProxyServiceRegistry.class)
+public interface IProxyServiceRegistry
+{
+    /**
+     * Bind a Service to a local address and specify the IoHandler that will
+     * manage ingoing and outgoing messages.
+     * 
+     * @param service
+     *            the ProxyService
+     * @param ioHandler
+     *            the IoHandler that will handle the messages
+     * @param address
+     *            the local address to bind on
+     * @throws IOException
+     */
+    public void bind( ProxyService service, IoHandler ioHandler,
+            InetSocketAddress address ) throws IOException;
+    
+    /**
+     * Bind a Service to a local address and specify the IoHandler that will
+     * manage ingoing and outgoing messages.
+     * <p>
+     * In addition it should be specified an IoFilterChainBuilder. This builder
+     * will be associated with the IoAcceptor itself (which is unique per
+     * ProxyService) and not for every IoSession created.
+     * 
+     * @param service
+     *            the ProxyService
+     * @param ioHandler
+     *            the IoHandler that will handle the messages
+     * @param address
+     *            the local address to bind on
+     * @param filterChainBuilder
+     *            the IoFilterChainBuilder instance
+     * @throws IOException
+     */
+    public void bind( ProxyService service, IoHandler ioHandler,
+            InetSocketAddress address, IoFilterChainBuilder filterChainBuilder )
+            throws IOException;
+    
+    public void unbind( ProxyService service ) throws Exception;
+    
+    /**
+     * Unbind the service from all of its bound addresses.
+     * 
+     * @param service
+     *            the ProxyService
+     * @throws Exception
+     */
+    public void unbind( ProxyService service, boolean stopService )
+            throws Exception;
+    
+    /**
+     * Unbind all the services registered in the ProxyServiceRegistry, from all
+     * of they bound addresses.
+     * 
+     * @throws Exception
+     */
+    public void unbindAll() throws Exception;
+    
+    /**
+     * @return a Set containing all the registered services.
+     */
+    public Set<ProxyService> getAllServices();
+    
+    /**
+     * Return the instance of a ProxyService.
+     * 
+     * @param name
+     *            the name of the ProxyService
+     * @return the instance of the ProxyService
+     */
+    public ProxyService getService( String name );
+    
+    /**
+     * Returns a reference to the IoAcceptor used by the specified ProxyService.
+     * 
+     * @param serviceName
+     *            the name of the ProxyService
+     * @return the IoAcceptor associated with the service or null if the
+     *         serviceName is invalid
+     */
+    public IoAcceptor getAcceptor( String serviceName );
+    
+    /**
+     * Returns a reference to the IoAcceptor used by the specified ProxyService.
+     * 
+     * @param service
+     *            the ProxyService
+     * @return the IoAcceptor associated with the service
+     */
+    public IoAcceptor getAcceptor( ProxyService service );
+    
+    public Executor getExecutor();
+}
\ No newline at end of file


Property changes on: trunk/RTSPProxy-Core/src/main/java/rtspproxy/IProxyServiceRegistry.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/IReactor.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/IReactor.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/IReactor.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -0,0 +1,23 @@
+package rtspproxy;
+
+import com.google.inject.ImplementedBy;
+
+ at ImplementedBy(Reactor.class)
+public interface IReactor
+{
+    
+    public void setStandalone( boolean standalone );
+    
+    /**
+     * Constructor. Creates a new Reactor and starts it. The reactor relies on
+     * configuration info that has to be provided <b>before</b> starting the
+     * reactor.
+     * 
+     * @exception Exception
+     *                reactor startup failed.
+     */
+    public void start() throws Exception;
+    
+    public void stop();
+    
+}
\ No newline at end of file


Property changes on: trunk/RTSPProxy-Core/src/main/java/rtspproxy/IReactor.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -34,6 +34,10 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.inject.Guice;
+import com.google.inject.Inject;
+import com.google.inject.Injector;
+
 import rtspproxy.config.Parameter;
 import rtspproxy.lib.Exceptions;
 import rtspproxy.lib.NetworkInterface;
@@ -47,26 +51,36 @@
  */
 public abstract class ProxyService extends Singleton implements Observer
 {
-
+    
     private static Logger log = LoggerFactory.getLogger( ProxyService.class );
-
+    
     /**
      * Main Socket address used by the service. It can be bound on several
      * different addresses and network interfaces, but it MUST have a default
      * address to be communicated to third parties.
      */
     private InetSocketAddress socketAddress = null;
-
+    
     /**
      * Flag used to keep track of the service status.
      */
     private volatile boolean isRunning = false;
-
+    
     /**
      * Service hook name.
      */
     protected static final String SERVICE = ProxyService.class.getName();
-
+    
+    @Inject
+    private IProxyServiceRegistry serviceRegistry;
+    
+    public ProxyService()
+    {
+        // XXX: Remove the injector!!
+        Injector injector = Guice.createInjector();
+        serviceRegistry = injector.getInstance( IProxyServiceRegistry.class );
+    }
+    
     /**
      * Starts the service.
      * 
@@ -74,61 +88,73 @@
      */
     public void start() throws Exception
     {
-        if ( isRunning ) {
+        if ( isRunning )
+        {
             log.warn( getName() + " is already running." );
             return;
         }
-
+        
         int port = getBindPort();
-
+        
         log.debug( "Service Bind port: {}", port );
-
-        try {
-            if ( getNetworkAddress() != null ) {
-                socketAddress = new InetSocketAddress( getNetworkAddress(), port );
+        
+        try
+        {
+            if ( getNetworkAddress() != null )
+            {
+                socketAddress =
+                        new InetSocketAddress( getNetworkAddress(), port );
                 log.debug( "binding to specific address: {}", socketAddress );
-
-                Reactor.getRegistry().bind( this, getIoHandler(), socketAddress,
-                        getFilterChainBuilder() );
-
-            } else {
+                
+                serviceRegistry.bind( this, getIoHandler(), socketAddress,
+                                      getFilterChainBuilder() );
+                
+            }
+            else
+            {
                 String netInterface = getNetworkInterface();
-
-                Set<InetAddress> addressSet = NetworkInterface
-                        .getInterfaceAddresses( netInterface );
-
-                log.debug( "Network Interface: {} - Addresses: {}", netInterface,
-                        addressSet );
-                if ( addressSet == null ) {
+                
+                Set<InetAddress> addressSet =
+                        NetworkInterface.getInterfaceAddresses( netInterface );
+                
+                log.debug( "Network Interface: {} - Addresses: {}",
+                           netInterface, addressSet );
+                if ( addressSet == null )
+                {
                     throw new RuntimeException( "Invalid Network interface: "
                             + netInterface );
                 }
-
-                for ( InetAddress inetAddress : addressSet ) {
+                
+                for ( InetAddress inetAddress : addressSet )
+                {
                     // Bind to all addresses
-
+                    
                     log.debug( "binding to address from set: {}", socketAddress );
                     socketAddress = new InetSocketAddress( inetAddress, port );
-
-                    Reactor.getRegistry().bind( this, getIoHandler(), socketAddress,
-                            getFilterChainBuilder() );
-
+                    
+                    serviceRegistry.bind( this, getIoHandler(),
+                                                socketAddress,
+                                                getFilterChainBuilder() );
+                    
                 }
-
+                
                 // Choose a bind address
-                InetAddress inetAddress = NetworkInterface.getBindAddress( addressSet );
+                InetAddress inetAddress =
+                        NetworkInterface.getBindAddress( addressSet );
                 socketAddress = new InetSocketAddress( inetAddress, port );
-
+                
             }
-        } catch ( IOException e ) {
-            log.error( "Can't start {} ({}): " + e.getMessage(), getName(), socketAddress  );
+        } catch ( IOException e )
+        {
+            log.error( "Can't start {} ({}): " + e.getMessage(), getName(),
+                       socketAddress );
             throw e;
         }
         log.info( "{} Started - Listening on: {}", getName(), socketAddress );
-
+        
         isRunning = true;
     }
-
+    
     /**
      * Stops the service
      * 
@@ -136,21 +162,24 @@
      */
     public void stop() throws Exception
     {
-        if ( !isRunning ) {
+        if ( !isRunning )
+        {
             log.warn( getName() + " is not running." );
             return;
         }
-
-        try {
-            Reactor.getRegistry().unbind( this, false );
-        } catch ( Exception e ) {
+        
+        try
+        {
+            serviceRegistry.unbind( this, false );
+        } catch ( Exception e )
+        {
             log.debug( "Exception unbinding service: {}", e.getMessage() );
         }
-
+        
         log.info( getName() + " Stopped" );
         isRunning = false;
     }
-
+    
     /**
      * Restart the service.
      * 
@@ -159,14 +188,12 @@
     public void restart() throws Exception
     {
         log.info( "Restarting {}", getName() );
-        if ( isRunning )
-            stop();
-        else
-            log.warn( getName() + " is not running." );
-
+        if ( isRunning ) stop();
+        else log.warn( getName() + " is not running." );
+        
         start();
     }
-
+    
     /**
      * @return true if the server is running
      */
@@ -174,18 +201,18 @@
     {
         return isRunning;
     }
-
+    
     /**
      * @return the transport type used by this service
      */
     public abstract TransportType getTransportType();
-
+    
     /**
      * @return an instance to the IoHandler object that will receive all the
      *         messages.
      */
     public abstract IoHandler getIoHandler();
-
+    
     /**
      * @return the filter chain builder to be be used by the IoAcceptor
      *         associated with the service.
@@ -195,14 +222,14 @@
         // By default there's no filter chain
         return IoFilterChainBuilder.NOOP;
     }
-
+    
     /**
      * Return the name of the service.
      * 
      * @return the human readable name
      */
     public abstract String getName();
-
+    
     /**
      * Get the network interface to bind to. This is only used if there is no
      * more specific IP address configured.
@@ -211,31 +238,31 @@
      *         the configuratio registry (Config).
      */
     public abstract String getNetworkInterface();
-
+    
     /**
      * @return the network address to bind this service on, as it appears in the
      *         configuration registry (Config). If null, the network interface
      *         configuration parameter is used.
      */
     public abstract String getNetworkAddress();
-
+    
     /**
      * @return the port to bind on, as it appear in the configuration registry.
      */
     public abstract int getBindPort();
-
+    
     /**
      * @return the Parameter associated with the network interface used by the
      *         service.
      */
     public abstract Parameter getNetworkInterfaceParameter();
-
+    
     /**
      * @return the Parameter associated with the port number used by the
      *         service.
      */
     public abstract Parameter getPortParameter();
-
+    
     /**
      * @return the main IP address where the service is bound.
      */
@@ -243,7 +270,7 @@
     {
         return socketAddress.getAddress();
     }
-
+    
     /**
      * @return the main TCP or UDP port where the service is bound.
      */
@@ -251,7 +278,7 @@
     {
         return socketAddress.getPort();
     }
-
+    
     /**
      * @return the TCP or UDP address (IP+port) where the service is bound.
      */
@@ -259,7 +286,7 @@
     {
         return socketAddress;
     }
-
+    
     /**
      * Creates a new connection-less IoSession to a remote address. This is only
      * used to create UDP session.
@@ -271,20 +298,20 @@
     public synchronized IoSession newSession( SocketAddress remoteAddress )
     {
         IoSession session = null;
-        IoAcceptor acceptor = Reactor.getRegistry().getAcceptor( this );
-
+        IoAcceptor acceptor = serviceRegistry.getAcceptor( this );
+        
         // TODO: ConnectionlessSessionTracker
         // if(acceptor instanceof ConnectionlessSessionTracker)
         // session =
         // ((ConnectionlessSessionTracker)acceptor).getSession(socketAddress,
         // remoteAddress);
-
+        
         if ( session == null )
             session = acceptor.newSession( remoteAddress, socketAddress );
-
+        
         return session;
     }
-
+    
     /**
      * Update the ProxyService state. A proxy service will likely subscribe to
      * some parameter changes notifications. When a change is notified the
@@ -304,10 +331,12 @@
     {
         if ( !(o instanceof Parameter) )
             throw new IllegalArgumentException( "Only observe parameters" );
-
-        try {
+        
+        try
+        {
             restart();
-        } catch ( Exception e ) {
+        } catch ( Exception e )
+        {
             log.error( "Error restarting {}", getName() );
             Exceptions.logStackTrace( e );
             throw new RuntimeException( e );

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -28,7 +28,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.Executor;
-import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
 import org.apache.mina.common.IoAcceptor;
@@ -37,7 +36,6 @@
 import org.apache.mina.common.IoServiceConfig;
 import org.apache.mina.common.IoSession;
 import org.apache.mina.common.TransportType;
-import org.apache.mina.filter.executor.ExecutorExecutor;
 import org.apache.mina.transport.socket.nio.DatagramAcceptor;
 import org.apache.mina.transport.socket.nio.DatagramAcceptorConfig;
 import org.apache.mina.transport.socket.nio.DatagramSessionConfig;
@@ -48,15 +46,17 @@
 
 import rtspproxy.config.Config;
 import rtspproxy.config.Parameter;
-import rtspproxy.lib.Singleton;
 
+import com.google.inject.Singleton;
+
 /**
  * Custom implementation of the ServiceRegistry interface. Creates an acceptor
  * for every service.
  * 
  * @author Matteo Merli
  */
-public final class ProxyServiceRegistry extends Singleton implements Observer
+ at Singleton
+public final class ProxyServiceRegistry implements Observer, IProxyServiceRegistry
 {
     
     private static Logger log = LoggerFactory
@@ -72,21 +72,20 @@
     
     private DatagramAcceptor datagramAcceptor = null;
     
-    private ExecutorService executor = Executors.newCachedThreadPool();
+    private Executor executor = Executors.newCachedThreadPool();
     
     /**
      * Construct a new ProxyServiceRegistry. This class is a Singleton, so there
      * can be only one instance.
      */
-    public ProxyServiceRegistry()
+    private ProxyServiceRegistry()
     {
-        ExecutorExecutor executorProxy = new ExecutorExecutor( executor );
-        socketAcceptor = new SocketAcceptor( 2, executorProxy );
+        socketAcceptor = new SocketAcceptor( 2, executor );
         SocketAcceptorConfig config = (SocketAcceptorConfig) socketAcceptor
                 .getDefaultConfig();
         config.setReuseAddress( true );
         
-        datagramAcceptor = new DatagramAcceptor( executorProxy );
+        datagramAcceptor = new DatagramAcceptor( executor );
         DatagramAcceptorConfig datagramConfig = (DatagramAcceptorConfig) datagramAcceptor
                 .getDefaultConfig();
         DatagramSessionConfig sessionConfig = (DatagramSessionConfig) datagramConfig
@@ -183,14 +182,12 @@
             try
             {
                 // Disconnect all clients
-                Set sessions = acceptor.getManagedSessions( address );
+                Set<IoSession> sessions = acceptor.getManagedSessions( address );
                 log.debug( "{} has {} connected clients.", service.getName(),
                         sessions.size() );
-                for ( Object obj : sessions )
-                {
-                    IoSession session = (IoSession) obj;
+                
+                for ( IoSession session : sessions )
                     session.close();
-                }
                 
                 acceptor.unbind( address );
             } catch ( Exception e )
@@ -298,14 +295,5 @@
             // executor.getMaximumPoolSize() );
         }
     }
-    
-    /**
-     * @return a reference to the (unique) ProxyServiceRegistry instance
-     */
-    public static ProxyServiceRegistry getInstance()
-    {
-        return (ProxyServiceRegistry) Singleton
-                .getInstance( ProxyServiceRegistry.class );
-    }
-    
+       
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -21,8 +21,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
+
 import rtspproxy.config.Config;
 import rtspproxy.filter.FilterRegistry;
+import rtspproxy.filter.IFilterRegistry;
 import rtspproxy.jmx.JmxAgent;
 import rtspproxy.lib.Exceptions;
 import rtspproxy.rtp.range.PortrangeRtpServerSessionFactory;
@@ -32,36 +36,37 @@
  * The reactor expects a valid configuration before startup eg the global configuration must
  * have been filled before starting the reactor.
  */
-public class Reactor
+ at Singleton
+public class Reactor implements IReactor
 {
 
     private static Logger log = LoggerFactory.getLogger( Reactor.class );
 
-    private static ProxyServiceRegistry registry = null;
+    @Inject
+    private IProxyServiceRegistry serviceRegistry;
 
-    private static JmxAgent jmxAgent = null;
+    private JmxAgent jmxAgent;
     
-    private static boolean isStandalone = false;
+    @Inject
+    private IFilterRegistry filterRegistry;
     
-    private static FilterRegistry filterRegistry = null;
-
-    public static void setStandalone( boolean standalone )
+    private boolean isStandalone = false;
+    
+    /* (non-Javadoc)
+     * @see rtspproxy.IReactor#setStandalone(boolean)
+     */
+    public void setStandalone( boolean standalone )
     {
         isStandalone = standalone;
     }
 
-    /**
-     * Constructor. Creates a new Reactor and starts it.
-     * The reactor relies on configuration info that has to be provided 
-     * <b>before</b> starting the reactor.
-     * @exception Exception reactor startup failed.
+    /* (non-Javadoc)
+     * @see rtspproxy.IReactor#start()
      */
-    static public void start() throws Exception
+    public void start() throws Exception
     {
         log.info( "Starting " + Config.getName() + " " + Config.getVersion() );
 
-        registry = new ProxyServiceRegistry();
-
         // Register the "rtsp://" protocol scheme
         System.setProperty( "java.protocol.handler.pkgs", "rtspproxy" );
 
@@ -87,8 +92,8 @@
         rdtServerService.start();
 
         boolean enableJmx = Config.jmxEnable.getValue();
-        if ( enableJmx )
-            jmxAgent = new JmxAgent();
+         if ( enableJmx )
+             jmxAgent = new JmxAgent();
 
         filterRegistry = new FilterRegistry();
         filterRegistry.populateRegistry();		
@@ -99,7 +104,10 @@
         
     }
 
-    static public void stop()
+    /* (non-Javadoc)
+     * @see rtspproxy.IReactor#stop()
+     */
+    public void stop()
     {
         try {
             // TODO: check why null pointer exception
@@ -108,8 +116,8 @@
             if ( jmxAgent != null )
                 jmxAgent.stop();
             
-            if ( registry != null )
-                registry.unbindAll();
+            if ( serviceRegistry != null )
+                serviceRegistry.unbindAll();
             
             log.info( "Shutdown completed" );
 
@@ -122,9 +130,4 @@
             Runtime.getRuntime().halt( 0 );
     }
 
-    protected static ProxyServiceRegistry getRegistry()
-    {        
-        return registry;
-    }
-
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ShutdownHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ShutdownHandler.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ShutdownHandler.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -21,6 +21,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.inject.Inject;
+
 import rtspproxy.config.Config;
 import rtspproxy.lib.Exceptions;
 
@@ -31,18 +33,23 @@
  */
 public class ShutdownHandler extends Thread
 {
-
+    
     private static Logger log = LoggerFactory.getLogger( ShutdownHandler.class );
     
+    @Inject
+    private IReactor reactor;
+    
     @Override
     public void run()
     {
         log.info( "Shutting down" );
-        try {
+        try
+        {
             log.info( "Stopping {} {}", Config.getName(), Config.getVersion() );
-            Reactor.stop();
-
-        } catch ( Exception e ) {
+            reactor.stop();
+            
+        } catch ( Exception e )
+        {
             log.error( "Exception in the reactor: ", e );
             Exceptions.logStackTrace( e );
         }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/config/Config.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -28,9 +28,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
-import org.apache.log4j.Level;
-import org.apache.log4j.Logger;
-
 import rtspproxy.lib.Singleton;
 import rtspproxy.rtsp.Handler;
 
@@ -40,376 +37,390 @@
  */
 public class Config extends Singleton implements Observer
 {
-
+    
     /** Map that contains all the application parameters. */
-    private static ConcurrentMap<String, Parameter> parameters = new ConcurrentHashMap<String, Parameter>();
-
+    private static ConcurrentMap<String, Parameter> parameters =
+            new ConcurrentHashMap<String, Parameter>();
+    
     protected static void addParameter( Parameter parameter )
     {
         parameters.put( parameter.getName(), parameter );
     }
-
+    
     public static Parameter getParameter( String name )
     {
         if ( name == null )
             throw new IllegalArgumentException( "name is null" );
-
+        
         return parameters.get( name );
     }
-
+    
     public static Collection<Parameter> getAllParameters()
     {
         return parameters.values();
     }
-
+    
     protected static Map<String, Parameter> getParametersMap()
     {
         return parameters;
     }
-
-    public static final BooleanParameter debugEnabled = new BooleanParameter( "debug", // name
-            false, // default value
-            false, // mutable
-            "Enables or disable application-wide debug messages." );
-
-    public static final IntegerParameter threadPoolSize = new IntegerParameter(
-            "threadPoolSize", // name
-            0, // min value
-            2147483647, // max value
-            10, // default value
-            true, // mutable
-            "Maximum size of the thread pool. The thread pool is shared "
-                    + "between all services found in RtspProxy." );
-
-    public static final IntegerParameter proxyRtspPort = new IntegerParameter(
-            "proxy.rtspPort", // name
-            0, // min value
-            65536, // max value
-            Handler.DEFAULT_RTSP_PORT, // default value
-            true, // mutable
-            "This is the port which the proxy will listen for "
-                    + "RTSP connection. The default is 554, like normal RTSP servers." );
-
-    public static final StringParameter proxyClientInterface = new StringParameter(
-            "proxy.client.interface", // name
-            null, // default value
-            false, // mutable
-            "Specify a network interface. Default is to listen on all interfaces." );
-
-    public static final StringParameter proxyServerInterface = new StringParameter(
-            "proxy.server.interface", // name
-            null, // default value
-            false, // mutable
-            "Specify a network interface. Default is to listen on all interfaces." );
-
-    public static final StringParameter proxyClientAddress = new StringParameter(
-            "proxy.client.address", // name
-            null, // default value
-            false, // mutable
-            "Specify a network address. Default is to listen on all addresses" );
-
-    public static final StringParameter proxyServerAddress = new StringParameter(
-            "proxy.server.address", // name
-            null, // default value
-            false, // mutable
-            "Specify a network address." );
-
-    public static final IntegerParameter proxyServerRtpPort = new IntegerParameter(
-            "proxy.server.rtpPort", // name
-            0, // min value
-            65536, // max value
-            8000, // default value
-            true, // mutable
-            "Port to listen for RTP packets arriving from servers." );
-
-    public static final IntegerParameter proxyServerRtcpPort = new IntegerParameter(
-            "proxy.server.rtcp.port", // name
-            0, // min value
-            65536, // max value
-            8001, // default value
-            true, // mutable
-            "Port to listen for RTCP packets arriving from servers." );
-
-    public static final BooleanParameter proxyServerRtpMultiplePorts = new BooleanParameter(
-            "proxy.server.rtpUsePortRange", // name
-            false, // default value
-            false, // mutable
-            "Enables the RTP/RTCP multiport handling." );
-
-    public static final IntegerParameter proxyServerRtpMinPort = new IntegerParameter(
-            "proxy.server.rtpPortrange.minPort", // name
-            0, // min value
-            65536, // max value
-            9000, // default value
-            true, // mutable
-            "Port to listen for RTP packets arriving from servers." );
-
-    public static final IntegerParameter proxyServerRtpMaxPort = new IntegerParameter(
-            "proxy.server.rtpPortrange.maxPort", // name
-            0, // min value
-            65536, // max value
-            9100, // default value
-            true, // mutable
-            "Port to listen for RTP packets arriving from servers." );
-
-    public static final IntegerParameter proxyServerRtpIdleTimeout = new IntegerParameter(
-            "proxy.server.rtpPortrange.idleTimeout", // name
-            0, // min value
-            86400, // max value
-            3600, // default value
-            true, // mutable
-            "Timeout an open RTP server port may linger around." );
-
-    public static final IntegerParameter proxyServerRtpIdleScanInterval = new IntegerParameter(
-            "proxy.server.rtpPortrange.idleScanInterval", // name
-            0, // min value
-            86400, // max value
-            1800, // default value
-            true, // mutable
-            "Scan interval on idle RTP server ports." );
-
-    public static final IntegerParameter proxyServerRtpThreadPoolSize = new IntegerParameter(
-            "proxy.server.rtpPortrange.threadPoolSize", // name
-            0, // min value
-            2147483647, // max value
-            10, // default value
-            true, // mutable
-            "Scan interval on idle RTP server ports." );
-
-    public static final IntegerParameter proxyClientRtpPort = new IntegerParameter(
-            "proxy.client.rtpPort", // name
-            0, // min value
-            65536, // max value
-            8002, // default value
-            true, // mutable
-            "Port to listen for RTP packets arriving from clients." );
-
-    public static final IntegerParameter proxyClientRtcpPort = new IntegerParameter(
-            "proxy.client.rtcpPort", // name
-            0, // min value
-            65536, // max value
-            8003, // default value
-            true, // mutable
-            "Port to listen for RTCP packets arriving from clients." );
-
-    public static final IntegerParameter proxyServerRdtPort = new IntegerParameter(
-            "proxy.server.rdtPort", // name
-            0, // min value
-            65536, // max value
-            8020, // default value
-            true, // mutable
-            "Port to listen for RDT packets arriving from servers." );
-
-    public static final IntegerParameter proxyClientRdtPort = new IntegerParameter(
-            "proxy.client.rdtPort", // name
-            0, // min value
-            65536, // max value
-            8022, // default value
-            true, // mutable
-            "Port to listen for RDT packets arriving from clients." );
-
-    public static final BooleanParameter proxyTransportRtpEnable = new BooleanParameter(
-            "proxy.transport.rtp", // name
-            true, // default value
-            false, // mutable
-            "Enables the UDP/AVP/RTP transport." );
-
-    public static final BooleanParameter proxyTransportRdtEnable = new BooleanParameter(
-            "proxy.transport.rdt", // name
-            true, // default value
-            false, // mutable
-            "Enables the x-udp-rdt transport." );
-
-    public static final BooleanParameter proxyLowerTransportSuppress = new BooleanParameter(
-            "proxy.transport.hacks.lowerTransportSuppress", // name
-            false, // default value
-            false, // mutable
-            "Enables the x-udp-rdt transport." );
-
-    public static final BooleanParameter proxyRtspTransportSsrcDisable = new BooleanParameter(
-            "proxy.transport.hacks.rtspTransportSsrcDisable", // name
-            false, // default value
-            false, // mutable
-            "Disable the output of the SSRC transport attribute" );
-
-    public static final BooleanParameter proxyRtspTransportSourceDisable = new BooleanParameter(
-            "proxy.transport.rtspTransportSourceDisable", // name
-            false, // default value
-            false, // mutable
-            "Disable the output of the SOURCE transport attribute" );
-
-    public static final BooleanParameter proxyRtspKeepAlive = new BooleanParameter(
-            "proxy.transport.hacks.rtspKeepAlive", // name
-            false, // default value
-            false, // mutable
-            "Enable keep-alive on RTSP connections to remote servers." );
-
-    public static final BooleanParameter proxyRtspOfferSsrcToServer = new BooleanParameter(
-            "proxy.transport.hacks.offerRemoteSsrc", // name
-            false, // default value
-            false, // mutable
-            "Allow certain work-arounds for clients generating non-conformant RTSP protocol traffic." );
-
-    public static final BooleanParameter proxyServerRtpSsrcUnreliable = new BooleanParameter(
-            "proxy.transport.hacks.rtpSsrcUnreliable", // name
-            false, // default value
-            false, // mutable
-            "Disable the evaluation of the SSRC send by the remote streaming server." );
-
+    
+    public static final BooleanParameter debugEnabled =
+            new BooleanParameter( "debug", // name
+                    false, // default value
+                    false, // mutable
+                    "Enables or disable application-wide debug messages." );
+    
+    public static final IntegerParameter threadPoolSize =
+            new IntegerParameter( "threadPoolSize", // name
+                    0, // min value
+                    2147483647, // max value
+                    10, // default value
+                    true, // mutable
+                    "Maximum size of the thread pool. The thread pool is shared "
+                            + "between all services found in RtspProxy." );
+    
+    public static final IntegerParameter proxyRtspPort =
+            new IntegerParameter(
+                    "proxy.rtspPort", // name
+                    0, // min value
+                    65536, // max value
+                    Handler.DEFAULT_RTSP_PORT, // default value
+                    true, // mutable
+                    "This is the port which the proxy will listen for "
+                            + "RTSP connection. The default is 554, like normal RTSP servers." );
+    
+    public static final StringParameter proxyClientInterface =
+            new StringParameter( "proxy.client.interface", // name
+                    null, // default value
+                    false, // mutable
+                    "Specify a network interface. Default is to listen on all interfaces." );
+    
+    public static final StringParameter proxyServerInterface =
+            new StringParameter( "proxy.server.interface", // name
+                    null, // default value
+                    false, // mutable
+                    "Specify a network interface. Default is to listen on all interfaces." );
+    
+    public static final StringParameter proxyClientAddress =
+            new StringParameter( "proxy.client.address", // name
+                    null, // default value
+                    false, // mutable
+                    "Specify a network address. Default is to listen on all addresses" );
+    
+    public static final StringParameter proxyServerAddress =
+            new StringParameter( "proxy.server.address", // name
+                    null, // default value
+                    false, // mutable
+                    "Specify a network address." );
+    
+    public static final IntegerParameter proxyServerRtpPort =
+            new IntegerParameter( "proxy.server.rtpPort", // name
+                    0, // min value
+                    65536, // max value
+                    8000, // default value
+                    true, // mutable
+                    "Port to listen for RTP packets arriving from servers." );
+    
+    public static final IntegerParameter proxyServerRtcpPort =
+            new IntegerParameter( "proxy.server.rtcp.port", // name
+                    0, // min value
+                    65536, // max value
+                    8001, // default value
+                    true, // mutable
+                    "Port to listen for RTCP packets arriving from servers." );
+    
+    public static final BooleanParameter proxyServerRtpMultiplePorts =
+            new BooleanParameter( "proxy.server.rtpUsePortRange", // name
+                    false, // default value
+                    false, // mutable
+                    "Enables the RTP/RTCP multiport handling." );
+    
+    public static final IntegerParameter proxyServerRtpMinPort =
+            new IntegerParameter( "proxy.server.rtpPortrange.minPort", // name
+                    0, // min value
+                    65536, // max value
+                    9000, // default value
+                    true, // mutable
+                    "Port to listen for RTP packets arriving from servers." );
+    
+    public static final IntegerParameter proxyServerRtpMaxPort =
+            new IntegerParameter( "proxy.server.rtpPortrange.maxPort", // name
+                    0, // min value
+                    65536, // max value
+                    9100, // default value
+                    true, // mutable
+                    "Port to listen for RTP packets arriving from servers." );
+    
+    public static final IntegerParameter proxyServerRtpIdleTimeout =
+            new IntegerParameter( "proxy.server.rtpPortrange.idleTimeout", // name
+                    0, // min value
+                    86400, // max value
+                    3600, // default value
+                    true, // mutable
+                    "Timeout an open RTP server port may linger around." );
+    
+    public static final IntegerParameter proxyServerRtpIdleScanInterval =
+            new IntegerParameter( "proxy.server.rtpPortrange.idleScanInterval", // name
+                    0, // min value
+                    86400, // max value
+                    1800, // default value
+                    true, // mutable
+                    "Scan interval on idle RTP server ports." );
+    
+    public static final IntegerParameter proxyServerRtpThreadPoolSize =
+            new IntegerParameter( "proxy.server.rtpPortrange.threadPoolSize", // name
+                    0, // min value
+                    2147483647, // max value
+                    10, // default value
+                    true, // mutable
+                    "Scan interval on idle RTP server ports." );
+    
+    public static final IntegerParameter proxyClientRtpPort =
+            new IntegerParameter( "proxy.client.rtpPort", // name
+                    0, // min value
+                    65536, // max value
+                    8002, // default value
+                    true, // mutable
+                    "Port to listen for RTP packets arriving from clients." );
+    
+    public static final IntegerParameter proxyClientRtcpPort =
+            new IntegerParameter( "proxy.client.rtcpPort", // name
+                    0, // min value
+                    65536, // max value
+                    8003, // default value
+                    true, // mutable
+                    "Port to listen for RTCP packets arriving from clients." );
+    
+    public static final IntegerParameter proxyServerRdtPort =
+            new IntegerParameter( "proxy.server.rdtPort", // name
+                    0, // min value
+                    65536, // max value
+                    8020, // default value
+                    true, // mutable
+                    "Port to listen for RDT packets arriving from servers." );
+    
+    public static final IntegerParameter proxyClientRdtPort =
+            new IntegerParameter( "proxy.client.rdtPort", // name
+                    0, // min value
+                    65536, // max value
+                    8022, // default value
+                    true, // mutable
+                    "Port to listen for RDT packets arriving from clients." );
+    
+    public static final BooleanParameter proxyTransportRtpEnable =
+            new BooleanParameter( "proxy.transport.rtp", // name
+                    true, // default value
+                    false, // mutable
+                    "Enables the UDP/AVP/RTP transport." );
+    
+    public static final BooleanParameter proxyTransportRdtEnable =
+            new BooleanParameter( "proxy.transport.rdt", // name
+                    true, // default value
+                    false, // mutable
+                    "Enables the x-udp-rdt transport." );
+    
+    public static final BooleanParameter proxyLowerTransportSuppress =
+            new BooleanParameter(
+                    "proxy.transport.hacks.lowerTransportSuppress", // name
+                    false, // default value
+                    false, // mutable
+                    "Enables the x-udp-rdt transport." );
+    
+    public static final BooleanParameter proxyRtspTransportSsrcDisable =
+            new BooleanParameter(
+                    "proxy.transport.hacks.rtspTransportSsrcDisable", // name
+                    false, // default value
+                    false, // mutable
+                    "Disable the output of the SSRC transport attribute" );
+    
+    public static final BooleanParameter proxyRtspTransportSourceDisable =
+            new BooleanParameter( "proxy.transport.rtspTransportSourceDisable", // name
+                    false, // default value
+                    false, // mutable
+                    "Disable the output of the SOURCE transport attribute" );
+    
+    public static final BooleanParameter proxyRtspKeepAlive =
+            new BooleanParameter( "proxy.transport.hacks.rtspKeepAlive", // name
+                    false, // default value
+                    false, // mutable
+                    "Enable keep-alive on RTSP connections to remote servers." );
+    
+    public static final BooleanParameter proxyRtspOfferSsrcToServer =
+            new BooleanParameter(
+                    "proxy.transport.hacks.offerRemoteSsrc", // name
+                    false, // default value
+                    false, // mutable
+                    "Allow certain work-arounds for clients generating non-conformant RTSP protocol traffic." );
+    
+    public static final BooleanParameter proxyServerRtpSsrcUnreliable =
+            new BooleanParameter( "proxy.transport.hacks.rtpSsrcUnreliable", // name
+                    false, // default value
+                    false, // mutable
+                    "Disable the evaluation of the SSRC send by the remote streaming server." );
+    
     // /////////////////////////////////////////////////////////
-
+    
     // JMX
-
-    public static final BooleanParameter jmxEnable = new BooleanParameter( "jmx.enable", // name
-            false, // default value
-            false, // mutable
-            "Controls the activation of the management subsystem (JMX)." );
-
-    public static final StringParameter jmxAddress = new StringParameter( "jmx.address", // name
-            "localhost", // default value
-            false, // mutable
-            "Host to bind the management services. Default is localhost, and the services "
-                    + "will only be reachable from local machine." );
-
-    public static final StringParameter jmxUser = new StringParameter( "jmx.user", // name
-            "", // default value
-            true, // mutable
-            "Remote management administrator user name." );
-
-    public static final StringParameter jmxPassword = new StringParameter(
-            "jmx.password", // name
-            "", // default value
-            true, // mutable
-            "Remote management administrator password." );
-
-    public static final BooleanParameter jmxWebEnable = new BooleanParameter(
-            "jmx.web.enable", // name
-            false, // default value
-            false, // mutable
-            "Controls the activation of the Web management console." );
-
-    public static final IntegerParameter jmxWebPort = new IntegerParameter(
-            "jmx.web.port", // name
-            0, // min value
-            65536, // max value
-            8000, // default value
-            false, // mutable
-            "TCP port to be used for the Web Console." );
-
-    public static final BooleanParameter jmxConnectorServiceEnable = new BooleanParameter(
-            "jmx.connectorService.enable", // name
-            false, // default value
-            false, // mutable
-            "Controls the activation of the JMX connector server." );
-
+    
+    public static final BooleanParameter jmxEnable =
+            new BooleanParameter( "jmx.enable", // name
+                    false, // default value
+                    false, // mutable
+                    "Controls the activation of the management subsystem (JMX)." );
+    
+    public static final StringParameter jmxAddress =
+            new StringParameter( "jmx.address", // name
+                    "localhost", // default value
+                    false, // mutable
+                    "Host to bind the management services. Default is localhost, and the services "
+                            + "will only be reachable from local machine." );
+    
+    public static final StringParameter jmxUser =
+            new StringParameter( "jmx.user", // name
+                    "", // default value
+                    true, // mutable
+                    "Remote management administrator user name." );
+    
+    public static final StringParameter jmxPassword =
+            new StringParameter( "jmx.password", // name
+                    "", // default value
+                    true, // mutable
+                    "Remote management administrator password." );
+    
+    public static final BooleanParameter jmxWebEnable =
+            new BooleanParameter( "jmx.web.enable", // name
+                    false, // default value
+                    false, // mutable
+                    "Controls the activation of the Web management console." );
+    
+    public static final IntegerParameter jmxWebPort =
+            new IntegerParameter( "jmx.web.port", // name
+                    0, // min value
+                    65536, // max value
+                    8000, // default value
+                    false, // mutable
+                    "TCP port to be used for the Web Console." );
+    
+    public static final BooleanParameter jmxConnectorServiceEnable =
+            new BooleanParameter( "jmx.connectorService.enable", // name
+                    false, // default value
+                    false, // mutable
+                    "Controls the activation of the JMX connector server." );
+    
     // /////////////////////////////////////////////////////////
-
+    
     // Authentication filter
-
-    public static final BooleanParameter filtersAuthenticationEnable = new BooleanParameter(
-            "filters.authentication.enable", // name
-            false, // default value
-            false, // mutable
-            "Controls the activation of the Authentication system" );
-
-    public static final StringParameter filtersAuthenticationImplClass = new StringParameter(
-            "filters.authentication.implClass", // name
-            "rtspproxy.filter.authentication.SimpleAuthenticationProvider", // default
-            // value
-            false, // mutable
-            "Implementation class for the authentication filter." );
-
-    public static final StringParameter filtersAuthenticationScheme = new StringParameter(
-            "filters.authentication.scheme", // name
-            "Basic", // default value
-            false, // mutable
-            "Authentication scheme to be used. Can be 'Basic' or 'Digest'." );
-
+    
+    public static final BooleanParameter filtersAuthenticationEnable =
+            new BooleanParameter( "filters.authentication.enable", // name
+                    false, // default value
+                    false, // mutable
+                    "Controls the activation of the Authentication system" );
+    
+    public static final StringParameter filtersAuthenticationImplClass =
+            new StringParameter(
+                    "filters.authentication.implClass", // name
+                    "rtspproxy.filter.authentication.SimpleAuthenticationProvider", // default
+                    // value
+                    false, // mutable
+                    "Implementation class for the authentication filter." );
+    
+    public static final StringParameter filtersAuthenticationScheme =
+            new StringParameter( "filters.authentication.scheme", // name
+                    "Basic", // default value
+                    false, // mutable
+                    "Authentication scheme to be used. Can be 'Basic' or 'Digest'." );
+    
     // /////////////////////////////////////////////////////////
-
+    
     // IP address filter
-
-	public static final BooleanParameter filtersIpAddressEnable = new BooleanParameter(
-            "filters.ipaddress.enable", // name
-            false, // default value
-            false, // mutable
-            "Controls the activation of the IP address filter." );
-
-    public static final StringParameter filtersIpAddressImplClass = new StringParameter(
-            "filters.ipaddress.implClass", // name
-            "rtspproxy.filter.ipaddress.SimpleIpAddressProvider", // default
-                                                                    // value
-            false, // mutable
-            "Implementation class for the IP address filter." );
-
+    
+    public static final BooleanParameter filtersIpAddressEnable =
+            new BooleanParameter( "filters.ipaddress.enable", // name
+                    false, // default value
+                    false, // mutable
+                    "Controls the activation of the IP address filter." );
+    
+    public static final StringParameter filtersIpAddressImplClass =
+            new StringParameter( "filters.ipaddress.implClass", // name
+                    "rtspproxy.filter.ipaddress.SimpleIpAddressProvider", // default
+                    // value
+                    false, // mutable
+                    "Implementation class for the IP address filter." );
+    
     // /////////////////////////////////////////////////////////
-
+    
     // Accounting filter
-
-    public static final BooleanParameter filtersAccountingEnable = new BooleanParameter(
-            "filters.accounting.enable", // name
-            false, // default value
-            false, // mutable
-            "Controls the activation of the Accounting system" );
-
-    public static final StringParameter filtersAccountingImplClass = new StringParameter(
-            "filters.accounting.implClass", // name
-            "rtspproxy.filter.accounting.SimpleAccountingProvider", // default value
-            false, // mutable
-            "Implementation class for the accounting filter." );
-
-
+    
+    public static final BooleanParameter filtersAccountingEnable =
+            new BooleanParameter( "filters.accounting.enable", // name
+                    false, // default value
+                    false, // mutable
+                    "Controls the activation of the Accounting system" );
+    
+    public static final StringParameter filtersAccountingImplClass =
+            new StringParameter( "filters.accounting.implClass", // name
+                    "rtspproxy.filter.accounting.SimpleAccountingProvider", // default
+                                                                            // value
+                    false, // mutable
+                    "Implementation class for the accounting filter." );
+    
     // /////////////////////////////////////////////////////////
-
+    
     // Rewrite filter
-
-    public static final BooleanParameter filtersRewriteEnable = new BooleanParameter(
-            "filters.rewrite.enable", // name
-            false, // default value
-            true, // mutable
-            "Controls the activation of the Rewrite system" );
-
-    public static final StringParameter filtersRewriteImplClass = new StringParameter(
-            "filters.rewrite.implClass", // name
-            "rtspproxy.filter.authentication.SimpleAuthenticationProvider", // default
-            // value
-            true, // mutable
-            "Implementation class for the authentication filter." );
-
+    
+    public static final BooleanParameter filtersRewriteEnable =
+            new BooleanParameter( "filters.rewrite.enable", // name
+                    false, // default value
+                    true, // mutable
+                    "Controls the activation of the Rewrite system" );
+    
+    public static final StringParameter filtersRewriteImplClass =
+            new StringParameter(
+                    "filters.rewrite.implClass", // name
+                    "rtspproxy.filter.authentication.SimpleAuthenticationProvider", // default
+                    // value
+                    true, // mutable
+                    "Implementation class for the authentication filter." );
+    
     // /////////////////////////////////////////////////////////
-
+    
     private static String rtspproxyHome;
-
+    
     private static String name;
-
+    
     private static String version;
-
+    
     private static String proxySignature;
-
+    
     private static Date startDate;
-
+    
     // /////////////////////////////////////////////////////////
-
+    
     public Config()
     {
         // Read home directory
         rtspproxyHome = System.getProperty( "rtspproxy.home" );
-        if ( rtspproxyHome == null ) {
+        if ( rtspproxyHome == null )
+        {
             rtspproxyHome = System.getProperty( "user.dir" );
         }
-
+        
         // Read program name and version
         Properties jarProps = new Properties();
-        try {
-            jarProps.load( Thread.currentThread().getContextClassLoader()
-                    .getResourceAsStream( "META-INF/application.properties" ) );
+        try
+        {
+            jarProps.load( Thread.currentThread().getContextClassLoader().getResourceAsStream(
+                                                                                               "META-INF/application.properties" ) );
             name = jarProps.getProperty( "application.name" );
             version = jarProps.getProperty( "application.version" );
-        } catch ( Exception e ) {
+        } catch ( Exception e )
+        {
             name = "RtspProxy";
             version = "";
         }
-
+        
         // Build proxy signature
         StringBuilder sb = new StringBuilder();
         sb.append( name ).append( ' ' ).append( version );
@@ -418,11 +429,11 @@
         sb.append( " / " ).append( System.getProperty( "os.arch" ) );
         sb.append( ')' );
         proxySignature = sb.toString();
-
+        
         startDate = new Date();
-
+        
     }
-
+    
     /**
      * Manage parameters value changes
      * 
@@ -433,7 +444,7 @@
         if ( !(o instanceof Parameter) )
             throw new IllegalArgumentException( "Only observe parameters" );
     }
-
+    
     /**
      * @return the application base dir or null if the home directory cannot be
      *         determined.
@@ -442,7 +453,7 @@
     {
         return rtspproxyHome;
     }
-
+    
     /**
      * @return Returns the application name.
      */
@@ -450,7 +461,7 @@
     {
         return name;
     }
-
+    
     /**
      * @return Returns the application version.
      */
@@ -458,7 +469,7 @@
     {
         return version;
     }
-
+    
     /**
      * @return Returns the proxySignature.
      */
@@ -466,45 +477,49 @@
     {
         return proxySignature;
     }
-
+    
     public static Date getStartDate()
     {
         return startDate;
     }
-
+    
     // /////////////////////////////////////////////////////////
-
+    
     protected static void updateDebugSettings()
     {
-        Logger rootLogger = Logger.getRootLogger();
-        if ( debugEnabled.getValue() ) {
-            rootLogger.setLevel( Level.DEBUG );
+        // Logger rootLogger = LoggerFactory.getLogger( Logger.ROOT_LOGGER_NAME );
+        if ( debugEnabled.getValue() )
+        {
+            // XXX: As we don't depend on Log4j we can't change logger
+            // levels.
+            // rootLogger.setLevel( Level.DEBUG );
         }
-
+        
         /*
          * else use the default level set in the log4j configuration file, which
          * is INFO
          */
     }
-
+    
     /**
      * @return a String containing all the parameters
      */
     public static String debugParameters()
     {
         StringBuilder sb = new StringBuilder();
-        Map<String, Parameter> parameters = new TreeMap<String, Parameter>( Config
-                .getParametersMap() );
-
+        Map<String, Parameter> parameters =
+                new TreeMap<String, Parameter>( Config.getParametersMap() );
+        
         sb.append( "Parameters:\n" );
-        for ( Parameter parameter : parameters.values() ) {
+        for ( Parameter parameter : parameters.values() )
+        {
             sb.append( parameter.getName() );
             sb.append( ": " );
             sb.append( parameter.getStringValue() );
             sb.append( '\n' );
         }
-
+        
         return sb.toString();
     }
-
+    
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -10,42 +10,48 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import rtspproxy.Reactor;
+import rtspproxy.IReactor;
 
+import com.google.inject.Inject;
+
 /**
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
  * 
  */
-public abstract class FilterBase<T extends GenericProvider> extends IoFilterAdapter
+public abstract class FilterBase<T extends GenericProvider> extends
+        IoFilterAdapter
 {
-
+    
     private static Logger log = LoggerFactory.getLogger( FilterBase.class );
-
+    
+    @Inject
+    private IReactor reactor;
+    
     /** running flag */
     private boolean isRunning = false;
-
+    
     /** chain name of filter */
     private String chainName;
-
+    
     private T providerReference = null;
-
+    
     // Abstract methods
     public abstract String getName();
-
+    
     public String getProviderClassName()
     {
         return null;
     }
-
+    
     protected Class<T> getProviderInterface()
     {
         return null;
     }
-
+    
     protected void setProvider( T provider )
     {
     }
-
+    
     /**
      * Subclasses can overload the method to read theyr own configuration
      * parameters.
@@ -56,7 +62,7 @@
     protected void doConfigure( Configuration configuration )
     {
     }
-
+    
     /**
      * query running flag
      */
@@ -64,36 +70,39 @@
     {
         return isRunning;
     }
-
+    
     /**
      * suspend the filter
      */
     public final void suspend()
     {
-        if ( providerReference != null )
-            providerReference.stop();
-
+        if ( providerReference != null ) providerReference.stop();
+        
         isRunning = false;
         log.info( "{} suspended", getChainName() );
     }
-
+    
     /**
      * resume the filter
      */
     public final void resume()
     {
-        if ( providerReference != null ) {
-            try {
+        if ( providerReference != null )
+        {
+            try
+            {
                 providerReference.start();
-            } catch ( Exception e ) {
-                log.error( "Error starting {}: {}", getProviderClassName(), e.getMessage() );
+            } catch ( Exception e )
+            {
+                log.error( "Error starting {}: {}", getProviderClassName(),
+                           e.getMessage() );
                 return;
             }
         }
         isRunning = true;
         log.info( "{} resumed", getChainName() );
     }
-
+    
     /**
      * get the object name of a more specific MBean
      */
@@ -101,81 +110,91 @@
     {
         return null;
     }
-
+    
     /**
      * get the chain name for the filter.
      */
     public String getChainName()
     {
-        if ( this.chainName == null ) {
+        if ( this.chainName == null )
+        {
             StringBuilder buf = new StringBuilder();
-
+            
             buf.append( getName() );
             buf.append( '/' );
             buf.append( getProviderInterface() );
-            if ( getProviderClassName() != null ) {
+            if ( getProviderClassName() != null )
+            {
                 buf.append( '/' );
                 buf.append( getProviderClassName() );
             }
             this.chainName = buf.toString();
         }
-
+        
         return this.chainName;
     }
-
+    
     @SuppressWarnings("unchecked")
     public final void configure( Configuration configuration )
     {
         // Configure the concrete class implementation
         doConfigure( configuration );
-
+        
         Class providerClass;
         String className = getProviderClassName();
-        if ( className == null ) {
+        if ( className == null )
+        {
             // The filter does not have a provider
             // system. Ignore it.
             return;
         }
-
-        try {
+        
+        try
+        {
             providerClass = Class.forName( className );
-
-        } catch ( Throwable t ) {
+            
+        } catch ( Throwable t )
+        {
             log.error( "Class not found: {}", className );
-            Reactor.stop();
+            reactor.stop();
             return;
         }
-
+        
         // Check if the class implements the required interface
         boolean found = false;
         Class<T> requiredInterface = getProviderInterface();
-        for ( Class interFace : providerClass.getInterfaces() ) {
-            if ( interFace.equals( requiredInterface ) ) {
+        for ( Class interFace : providerClass.getInterfaces() )
+        {
+            if ( interFace.equals( requiredInterface ) )
+            {
                 found = true;
                 break;
             }
         }
-
-        if ( !found ) {
-            log.error( "Class ({}) does not implement the {} interface.", providerClass,
-                    requiredInterface );
-            Reactor.stop();
+        
+        if ( !found )
+        {
+            log.error( "Class ({}) does not implement the {} interface.",
+                       providerClass, requiredInterface );
+            reactor.stop();
             return;
         }
-
+        
         // Instanciate the provider and configure it.
-        try {
+        try
+        {
             T provider = (T) providerClass.newInstance();
             setProvider( provider );
             providerReference = provider;
             provider.configure( configuration );
             provider.start();
-
-        } catch ( Exception e ) {
+            
+        } catch ( Exception e )
+        {
             log.error( "Error instanciaing class '{}'", providerClass );
-            Reactor.stop();
+            reactor.stop();
             return;
         }
     }
-
+    
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -22,7 +22,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import rtspproxy.Reactor;
+import rtspproxy.IReactor;
 import rtspproxy.config.Config;
 import rtspproxy.config.XMLConfigReader;
 import rtspproxy.filter.accounting.AccountingFilter;
@@ -30,158 +30,162 @@
 import rtspproxy.filter.ipaddress.IpAddressFilter;
 import rtspproxy.filter.rewrite.UrlRewritingFilter;
 import rtspproxy.jmx.JmxAgent;
-import rtspproxy.lib.Singleton;
 import rtspproxy.lib.Side;
 
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
+
 /**
  * Filter registry. This registry is populated from the configuration on reactor
  * startup
  * 
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
  */
-public class FilterRegistry extends Singleton
+ at Singleton
+public class FilterRegistry implements IFilterRegistry
 {
-
+    
     private static Logger log = LoggerFactory.getLogger( FilterRegistry.class );
-
+    
     private IpAddressFilter clientAddressFilter = null;
-
+    
     private IpAddressFilter serverAddressFilter = null;
-
+    
     private AuthenticationFilter authenticationFilter = null;
-
+    
     private AccountingFilter accountingFilter = null;
-
+    
     private UrlRewritingFilter clientRewritingFilter = null;
-
+    
     private UrlRewritingFilter serverRewritingFilter = null;
-
-    /**
-     * Get the active registry instance
-     */
-    public static FilterRegistry getInstance()
-    {
-        return (FilterRegistry) Singleton.getInstance( FilterRegistry.class );
-    }
-
+    
+    @Inject
+    private IReactor reactor;
+    
     // flag to determine if already populated
     private boolean populated = false;
-
-    /**
-     * populate from configuration
+    
+    /* (non-Javadoc)
+     * @see rtspproxy.filter.IFilterRegistry#populateRegistry()
      */
     public void populateRegistry()
     {
         log.debug( "Populate filter registry." );
-
-        if ( populated ) {
+        
+        if ( populated )
+        {
             log.debug( "Filter registry already populated." );
             return;
         }
-
+        
         Configuration config = XMLConfigReader.getConfiguration();
-
-        try {
+        
+        try
+        {
             
             authenticationFilter = new AuthenticationFilter();
             authenticationFilter.configure( config );
             registerFilterMBean( authenticationFilter );
-            if ( Config.filtersAuthenticationEnable.getValue() ) {
+            if ( Config.filtersAuthenticationEnable.getValue() )
+            {
                 authenticationFilter.resume();
             }
-
+            
             clientAddressFilter = new IpAddressFilter( Side.Client );
             clientAddressFilter.configure( config );
             registerFilterMBean( clientAddressFilter );
-
+            
             serverAddressFilter = new IpAddressFilter( Side.Server );
             serverAddressFilter.configure( config );
             registerFilterMBean( serverAddressFilter );
-            if ( Config.filtersIpAddressEnable.getValue() ) {
+            if ( Config.filtersIpAddressEnable.getValue() )
+            {
                 clientAddressFilter.resume();
                 serverAddressFilter.resume();
             }
-
+            
             clientRewritingFilter = new UrlRewritingFilter( Side.Client );
             clientRewritingFilter.configure( config );
             registerFilterMBean( clientRewritingFilter );
-
+            
             serverRewritingFilter = new UrlRewritingFilter( Side.Server );
             serverRewritingFilter.configure( config );
             registerFilterMBean( serverRewritingFilter );
-            if ( Config.filtersRewriteEnable.getValue() ) {
+            if ( Config.filtersRewriteEnable.getValue() )
+            {
                 clientRewritingFilter.resume();
                 serverRewritingFilter.resume();
             }
-
+            
             accountingFilter = new AccountingFilter();
             accountingFilter.configure( config );
             registerFilterMBean( accountingFilter );
-            if ( Config.filtersAccountingEnable.getValue() ) {
+            if ( Config.filtersAccountingEnable.getValue() )
+            {
                 accountingFilter.resume();
             }
-
-        } catch ( Throwable t ) {
+            
+        } catch ( Throwable t )
+        {
             log.error( "Failed to populate filter registry", t );
-
-            Reactor.stop();
+            reactor.stop();
         }
-
+        
         populated = true;
     }
-
+    
     private void registerFilterMBean( FilterBase filter )
     {
         if ( Config.jmxEnable.getValue() )
             JmxAgent.getInstance().registerFilter( filter );
     }
-
-    /**
-     * @return the accountingFilter
+    
+    /* (non-Javadoc)
+     * @see rtspproxy.filter.IFilterRegistry#getAccountingFilter()
      */
     public AccountingFilter getAccountingFilter()
     {
         return accountingFilter;
     }
-
-    /**
-     * @return the addressFilter
+    
+    /* (non-Javadoc)
+     * @see rtspproxy.filter.IFilterRegistry#getClientAddressFilter()
      */
     public IpAddressFilter getClientAddressFilter()
     {
         return clientAddressFilter;
     }
-
-    /**
-     * @return the server address filter
+    
+    /* (non-Javadoc)
+     * @see rtspproxy.filter.IFilterRegistry#getServerAddressFilter()
      */
     public IpAddressFilter getServerAddressFilter()
     {
         return serverAddressFilter;
     }
-
-    /**
-     * @return the authenticationFilter
+    
+    /* (non-Javadoc)
+     * @see rtspproxy.filter.IFilterRegistry#getAuthenticationFilter()
      */
     public AuthenticationFilter getAuthenticationFilter()
     {
         return authenticationFilter;
     }
-
-    /**
-     * @return the rewritingFilter
+    
+    /* (non-Javadoc)
+     * @see rtspproxy.filter.IFilterRegistry#getClientRewritingFilter()
      */
     public UrlRewritingFilter getClientRewritingFilter()
     {
         return clientRewritingFilter;
     }
-
-    /**
-     * @return the rewritingFilter
+    
+    /* (non-Javadoc)
+     * @see rtspproxy.filter.IFilterRegistry#getServerRewritingFilter()
      */
     public UrlRewritingFilter getServerRewritingFilter()
     {
         return serverRewritingFilter;
     }
-
+    
 }

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/IFilterRegistry.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/IFilterRegistry.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/IFilterRegistry.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -0,0 +1,49 @@
+package rtspproxy.filter;
+
+import com.google.inject.ImplementedBy;
+
+import rtspproxy.filter.accounting.AccountingFilter;
+import rtspproxy.filter.authentication.AuthenticationFilter;
+import rtspproxy.filter.ipaddress.IpAddressFilter;
+import rtspproxy.filter.rewrite.UrlRewritingFilter;
+
+ at ImplementedBy(FilterRegistry.class)
+public interface IFilterRegistry
+{
+    
+    /**
+     * populate from configuration
+     */
+    public void populateRegistry();
+    
+    /**
+     * @return the accountingFilter
+     */
+    public AccountingFilter getAccountingFilter();
+    
+    /**
+     * @return the addressFilter
+     */
+    public IpAddressFilter getClientAddressFilter();
+    
+    /**
+     * @return the server address filter
+     */
+    public IpAddressFilter getServerAddressFilter();
+    
+    /**
+     * @return the authenticationFilter
+     */
+    public AuthenticationFilter getAuthenticationFilter();
+    
+    /**
+     * @return the rewritingFilter
+     */
+    public UrlRewritingFilter getClientRewritingFilter();
+    
+    /**
+     * @return the rewritingFilter
+     */
+    public UrlRewritingFilter getServerRewritingFilter();
+    
+}
\ No newline at end of file


Property changes on: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/IFilterRegistry.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -23,6 +23,8 @@
 import org.apache.mina.common.IoFilterChainBuilder;
 import org.apache.mina.filter.codec.ProtocolCodecFilter;
 
+import com.google.inject.Inject;
+
 import rtspproxy.filter.accounting.AccountingFilter;
 import rtspproxy.filter.authentication.AuthenticationFilter;
 import rtspproxy.filter.ipaddress.IpAddressFilter;
@@ -37,12 +39,15 @@
  */
 public abstract class RtspFilters implements IoFilterChainBuilder
 {
-
-    private static final IoFilter codecFilter = new ProtocolCodecFilter( RtspCodecFactory
-            .getInstance() );
-
+    
+    private static final IoFilter codecFilter =
+            new ProtocolCodecFilter( RtspCodecFactory.getInstance() );
+    
     private static final String rtspCodecNAME = "rtspCodec";
-
+    
+    @Inject
+    private IFilterRegistry filterRegistry;
+    
     /**
      * IP Address filter.
      * <p>
@@ -53,17 +58,15 @@
     protected void addIpAddressFilter( IoFilterChain chain, Side side )
     {
         IpAddressFilter filter;
-        if ( side == Side.Client )
-            filter = FilterRegistry.getInstance().getClientAddressFilter();
-        else
-            filter = FilterRegistry.getInstance().getServerAddressFilter();
-
-        if ( filter == null || !filter.isRunning() )
-            return;
-
+        if ( side == Side.Client ) filter =
+                filterRegistry.getClientAddressFilter();
+        else filter = filterRegistry.getServerAddressFilter();
+        
+        if ( filter == null || !filter.isRunning() ) return;
+        
         chain.addFirst( filter.getChainName(), filter );
     }
-
+    
     /**
      * The RTSP codec filter is always present. Translates the incoming streams
      * into RTSP messages.
@@ -72,46 +75,41 @@
     {
         chain.addLast( rtspCodecNAME, codecFilter );
     }
-
+    
     /**
      * Authentication filter.
      */
     protected void addAuthenticationFilter( IoFilterChain chain )
     {
-        AuthenticationFilter filter = FilterRegistry.getInstance()
-                .getAuthenticationFilter();
-
-        if ( !filter.isRunning() )
-            return;
-
+        AuthenticationFilter filter = filterRegistry.getAuthenticationFilter();
+        
+        if ( !filter.isRunning() ) return;
+        
         chain.addAfter( rtspCodecNAME, filter.getChainName(), filter );
     }
-
+    
     protected void addAccountingFilter( IoFilterChain chain )
     {
-        AccountingFilter filter = FilterRegistry.getInstance().getAccountingFilter();
-
-        if ( !filter.isRunning() )
-            return;
-
+        AccountingFilter filter = filterRegistry.getAccountingFilter();
+        
+        if ( !filter.isRunning() ) return;
+        
         chain.addAfter( rtspCodecNAME, filter.getChainName(), filter );
     }
-
+    
     protected void addRewriteFilter( IoFilterChain chain, Side side )
     {
         UrlRewritingFilter filter;
-
-        if ( side == Side.Client )
-            filter = FilterRegistry.getInstance().getClientRewritingFilter();
-        else
-            filter = FilterRegistry.getInstance().getServerRewritingFilter();
-
-        if ( !filter.isRunning() )
-            return;
-
+        
+        if ( side == Side.Client ) filter =
+                filterRegistry.getClientRewritingFilter();
+        else filter = filterRegistry.getServerRewritingFilter();
+        
+        if ( !filter.isRunning() ) return;
+        
         chain.addAfter( rtspCodecNAME, filter.getChainName(), filter );
     }
-
+    
     protected void addControlFilter( IoFilterChain chain )
     {
         // XXX: disabled

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -25,6 +25,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.inject.Inject;
+
+import rtspproxy.IReactor;
 import rtspproxy.Reactor;
 import rtspproxy.config.Config;
 import rtspproxy.filter.FilterBase;
@@ -42,32 +45,39 @@
  */
 public class AuthenticationFilter extends FilterBase<AuthenticationProvider>
 {
-
-    private static Logger log = LoggerFactory.getLogger( AuthenticationFilter.class );
-
+    
+    private static Logger log =
+            LoggerFactory.getLogger( AuthenticationFilter.class );
+    
     private static final String FilterNAME = "authenticationFilter";
-
-    private static final String ATTR = AuthenticationFilter.class.getName() + "Attr";
-
-    private static final Map<String, Class> schemeRegistry = new HashMap<String, Class>();
-
-    static {
+    
+    private static final String ATTR =
+            AuthenticationFilter.class.getName() + "Attr";
+    
+    private static final Map<String, Class<? extends AuthenticationScheme>> schemeRegistry =
+            new HashMap<String, Class<? extends AuthenticationScheme>>();
+    
+    @Inject
+    private IReactor reactor;
+    
+    static
+    {
         // Fill in known schemes
         schemeRegistry.put( "basic", BasicAuthentication.class );
         schemeRegistry.put( "digest", DigestAuthentication.class );
     }
-
+    
     /** Backend provider. */
     private AuthenticationProvider provider;
-
+    
     /** Different authentication schemes implementation */
     private AuthenticationScheme scheme = null;
-
-	public static String getAttrName()
-	{
-		return ATTR;
-	}
-
+    
+    public static String getAttrName()
+    {
+        return ATTR;
+    }
+    
     /**
      * Construct a new AuthenticationFilter. Looks at the configuration to load
      * the choseen backend implementation.
@@ -76,23 +86,28 @@
     {
         // Validate the choosen authentication scheme
         String schemeName = Config.filtersAuthenticationScheme.getValue();
-        Class schemeClass = schemeRegistry.get( schemeName.toLowerCase() );
-        if ( schemeClass == null ) {
+        Class<? extends AuthenticationScheme> schemeClass =
+                schemeRegistry.get( schemeName.toLowerCase() );
+        if ( schemeClass == null )
+        {
             // scheme not found
-            log.error( "Authentication Scheme not found: {}. Valid values are: {}",
-                    schemeName, schemeRegistry.keySet() );
-            Reactor.stop();
+            log.error(
+                       "Authentication Scheme not found: {}. Valid values are: {}",
+                       schemeName, schemeRegistry.keySet() );
+            reactor.stop();
             return;
         }
-
+        
         // Instanciate the selected scheme
-        try {
-            scheme = (AuthenticationScheme) schemeClass.newInstance();
-        } catch ( Exception e ) {
+        try
+        {
+            scheme = schemeClass.newInstance();
+        } catch ( Exception e )
+        {
             log.error( "Error instanciating class: {}", schemeClass );
         }
     }
-
+    
     /*
      * (non-Javadoc)
      * 
@@ -103,7 +118,7 @@
     {
         return FilterNAME;
     }
-
+    
     /*
      * (non-Javadoc)
      * 
@@ -114,7 +129,7 @@
     {
         return Config.filtersAuthenticationImplClass.getValue();
     }
-
+    
     /*
      * (non-Javadoc)
      * 
@@ -125,7 +140,7 @@
     {
         return AuthenticationProvider.class;
     }
-
+    
     /*
      * (non-Javadoc)
      * 
@@ -136,7 +151,7 @@
     {
         this.provider = provider;
     }
-
+    
     /*
      * (non-Javadoc)
      * 
@@ -144,79 +159,90 @@
      *      org.apache.mina.common.IoSession, java.lang.Object)
      */
     @Override
-    public void messageReceived( NextFilter nextFilter, IoSession session, Object message )
-            throws Exception
+    public void messageReceived( NextFilter nextFilter, IoSession session,
+            Object message ) throws Exception
     {
-        if ( !(message instanceof RtspRequest) ) {
+        if ( !(message instanceof RtspRequest) )
+        {
             // Shouldn't happen
             log.warn( "Object message is not a RTSP request" );
             return;
         }
-
-        if ( session.getAttribute( ATTR ) != null ) {
+        
+        if ( session.getAttribute( ATTR ) != null )
+        {
             // Client already autheticated
             log.debug( "Already authenticaed: {}", session.getAttribute( ATTR ) );
             nextFilter.messageReceived( session, message );
         }
-
-        String authString = ((RtspMessage) message).getHeader( "Proxy-Authorization" );
-
-        if ( authString == null ) {
+        
+        String authString =
+                ((RtspMessage) message).getHeader( "Proxy-Authorization" );
+        
+        if ( authString == null )
+        {
             log.debug( "RTSP message: \n{}", message );
-            final RtspResponse response = RtspResponse
-                    .errorResponse( RtspCode.ProxyAuthenticationRequired );
-
+            final RtspResponse response =
+                    RtspResponse.errorResponse( RtspCode.ProxyAuthenticationRequired );
+            
             response.setHeader( "Proxy-Authenticate", scheme.getName() + " "
                     + scheme.getChallenge() );
-
+            
             log.debug( "Client MUST athenticate to Proxy: \n{}", response );
             session.write( response );
             return;
         }
-
-        if ( !validateAuthenticationScheme( authString ) ) {
+        
+        if ( !validateAuthenticationScheme( authString ) )
+        {
             log.debug( "Authentication scheme not valid: {}", authString );
-            RtspResponse response = RtspResponse.errorResponse( RtspCode.BadRequest );
+            RtspResponse response =
+                    RtspResponse.errorResponse( RtspCode.BadRequest );
             session.write( response );
             return;
         }
-
+        
         log.debug( "RTSP message: \n{}", message );
-
+        
         // Check the authentication credentials
-        final Credentials credentials = scheme.getCredentials( (RtspMessage) message );
-
+        final Credentials credentials =
+                scheme.getCredentials( (RtspMessage) message );
+        
         boolean authenticationOk = false;
-        if ( credentials != null ) {
+        if ( credentials != null )
+        {
             String password = provider.getPassword( credentials.getUserName() );
-            if ( password != null && scheme.computeAuthentication( credentials, password ) ) {
+            if ( password != null
+                    && scheme.computeAuthentication( credentials, password ) )
+            {
                 authenticationOk = true;
             }
         }
-
-        if ( !authenticationOk ) {
+        
+        if ( !authenticationOk )
+        {
             log.info( "Authentication failed for user: {}", credentials );
-            RtspResponse response = RtspResponse
-                    .errorResponse( RtspCode.ProxyAuthenticationRequired );
+            RtspResponse response =
+                    RtspResponse.errorResponse( RtspCode.ProxyAuthenticationRequired );
             response.setHeader( "Proxy-Authenticate", scheme.getName() + " "
                     + scheme.getChallenge() );
-
+            
             session.write( response );
             return;
         }
-
+        
         log.debug( "Authentication successfull for user: {}", credentials );
-
+        
         /*
          * Mark the session with an "authenticated" attribute. This will prevent
          * the check for the credentials for every message received.
          */
         session.setAttribute( ATTR, credentials.getUserName() );
-
+        
         // Forward message
         nextFilter.messageReceived( session, message );
     }
-
+    
     /**
      * Gets the authentication scheme stated by the client.
      * 
@@ -226,18 +252,19 @@
     private boolean validateAuthenticationScheme( String authString )
     {
         String schemeName;
-        try {
+        try
+        {
             schemeName = authString.split( " " )[0];
-        } catch ( IndexOutOfBoundsException e ) {
+        } catch ( IndexOutOfBoundsException e )
+        {
             // Malformed auth string
             return false;
         }
-
-        if ( schemeName.equalsIgnoreCase( scheme.getName() ) )
-            return true;
-
+        
+        if ( schemeName.equalsIgnoreCase( scheme.getName() ) ) return true;
+        
         // Scheme not valid
         return false;
     }
-
+    
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionTrackingFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionTrackingFilter.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/tracking/RdtSessionTrackingFilter.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -16,80 +16,90 @@
 import rtspproxy.rtsp.RtspTransportList;
 
 /**
- * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
- * TODO: to be implemented
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com) TODO: to be implemented
  */
-public abstract class RdtSessionTrackingFilter extends FilterBase {
-	
-	private static Logger logger = LoggerFactory.getLogger(RdtSessionTrackingFilter.class);
+public abstract class RdtSessionTrackingFilter extends FilterBase
+{
 
-	public static final String FilterNAME = "rdtTrackingFilter";
+    private static Logger logger = LoggerFactory
+            .getLogger( RdtSessionTrackingFilter.class );
 
-	public String getName()
-        {
-                return FilterNAME;
-        }
+    public static final String FilterNAME = "rdtTrackingFilter";
 
-        public void setProvider( GenericProvider provider )
-        {
-              	// XXX
-        }
+    @Override
+    public String getName()
+    {
+        return FilterNAME;
+    }
 
-        public Class getProviderInterface()
-        {
-                return null;
-        }
+    @Override
+    public void setProvider( GenericProvider provider )
+    {
+        // XXX
+    }
 
-        public String getProviderClassName()
-        {
-                // TODO: to be implemented
-                return ""; // Config.filtersImplClass.getValue();
+    @Override
+    public Class getProviderInterface()
+    {
+        return null;
+    }
+
+    @Override
+    public String getProviderClassName()
+    {
+        // TODO: to be implemented
+        return ""; // Config.filtersImplClass.getValue();
+    }
+
+    /**
+     * check the message for following conditions
+     */
+    protected void handleMessage( IoSession session, Object message )
+    {
+        if ( Config.proxyTransportRdtEnable.getValue() && message instanceof RtspResponse ) {
+            RtspResponse resp = (RtspResponse) message;
+
+            logger.debug( "analyzing RTSP response message" );
+            if ( resp.getRequestVerb() == RtspRequest.Verb.SETUP ) {
+                logger.debug( "found SETUP response" );
+
+                String transHdr = resp.getHeader( "Transport" );
+
+                if ( transHdr != null ) {
+                    logger.debug( "SETUP response has transport header: " + transHdr );
+
+                    RtspTransportList rtl = new RtspTransportList( transHdr );
+
+                    if ( rtl.count() == 1 ) {
+                        // at this point we can only have one transport.
+                        // Everything else is a protocol violation
+                        RtspTransport transport = rtl.get( 0 );
+
+                        if ( transport.getTransportProtocol() == RtspTransport.TransportProtocol.RDT ) {
+                            logger.debug( "found RDT transport protocol" );
+
+                            if ( transport.getDeliveryType() == RtspTransport.DeliveryType.unicast
+                                    && transport.getLowerTransport() == RtspTransport.LowerTransport.UDP ) {
+                                logger
+                                        .debug( "found RDT/UDP/unicast transport header, server_port="
+                                                + transport.getServerPort()[0]
+                                                + ", client_port="
+                                                + transport.getClientPort()[0] );
+
+                                handleTransportRdtUdpUnicast( session, transport );
+                            }
+                        }
+                    } else
+                        logger.error( "found invalid transport header: " + transHdr );
+                }
+            }
         }
+    }
 
-	/**
-	 * check the message for following conditions
-	 */
-	protected void handleMessage(IoSession session, Object message) {
-		if(Config.proxyTransportRdtEnable.getValue() && message instanceof RtspResponse) {
-			RtspResponse resp = (RtspResponse)message;
-			
-			logger.debug("analyzing RTSP response message");
-			if(resp.getRequestVerb() == RtspRequest.Verb.SETUP) {
-				logger.debug("found SETUP response");
-				
-				String transHdr = resp.getHeader("Transport");
-				
-				if(transHdr != null) {
-					logger.debug("SETUP response has transport header: " + transHdr);
-					
-					RtspTransportList rtl = new RtspTransportList(transHdr);
-					
-					if(rtl.count() == 1) {
-						// at this point we can only have one transport. Everything else is a protocol violation
-						RtspTransport transport = rtl.get(0);
-						
-						if(transport.getTransportProtocol() == RtspTransport.TransportProtocol.RDT) {
-							logger.debug("found RDT transport protocol");
-							
-							if(transport.getDeliveryType() == RtspTransport.DeliveryType.unicast
-									&& transport.getLowerTransport() == RtspTransport.LowerTransport.UDP) {
-								logger.debug("found RDT/UDP/unicast transport header, server_port=" 
-										+ transport.getServerPort()[0] + ", client_port=" 
-										+ transport.getClientPort()[0]);
-								
-								handleTransportRdtUdpUnicast(session, transport);
-							}
-						}
-					} else 
-						logger.error("found invalid transport header: " + transHdr);
-				}
-			}
-		}
-	}
-	
-	/**
-	 * handle the extracted RTSP response RDT/UDP/unicast transport header
-	 */
-	protected abstract void handleTransportRdtUdpUnicast(IoSession session, RtspTransport transport);
-	
+    /**
+     * handle the extracted RTSP response RDT/UDP/unicast transport header
+     */
+    protected abstract void handleTransportRdtUdpUnicast( IoSession session,
+            RtspTransport transport );
+
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -38,10 +38,10 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import rtspproxy.IReactor;
 import rtspproxy.ProxyService;
 import rtspproxy.RdtClientService;
 import rtspproxy.RdtServerService;
-import rtspproxy.Reactor;
 import rtspproxy.RtcpClientService;
 import rtspproxy.RtcpServerService;
 import rtspproxy.RtpClientService;
@@ -60,6 +60,8 @@
 import rtspproxy.rtp.range.PortrangeRtpServerSession;
 import rtspproxy.rtp.range.PortrangeRtpServerSessionFactory;
 
+import com.google.inject.Inject;
+
 /**
  * Entry point class for all the JMX interface.
  * 
@@ -85,6 +87,9 @@
     public static final String LOGGER_DOMAIN = "RtspProxy.Logger";
 
     private MBeanServer mbeanServer = null;
+    
+    @Inject
+    private IReactor reactor;
 
     /**
      * Creates a MBean server and attach all the MBeans to it. Also starts, if
@@ -138,7 +143,7 @@
 
         } catch ( Exception e ) {
             log.error( "Exception: ", e );
-            Reactor.stop();
+            reactor.stop();
         }
     }
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ProxySessionList.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ProxySessionList.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ProxySessionList.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -18,7 +18,6 @@
 
 package rtspproxy.jmx;
 
-import java.lang.reflect.Constructor;
 import java.util.Set;
 
 import javax.management.Attribute;
@@ -27,7 +26,6 @@
 import javax.management.DynamicMBean;
 import javax.management.InvalidAttributeValueException;
 import javax.management.MBeanAttributeInfo;
-import javax.management.MBeanConstructorInfo;
 import javax.management.MBeanException;
 import javax.management.MBeanInfo;
 import javax.management.ReflectionException;

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedByte.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedByte.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedByte.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -28,7 +28,7 @@
 	private short value;
 
 	public UnsignedByte(byte c) {
-		value = c;
+		value = (short) (c & 0xFF);
 	}
 
 	public UnsignedByte(short c) {

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedInt.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedInt.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedInt.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -32,15 +32,15 @@
 	private long value;
 
 	public UnsignedInt(byte c) {
-		value = c;
+		value = c & 0xFF;
 	}
 
 	public UnsignedInt(short c) {
-		value = c;
+		value = c & 0xFFFF;
 	}
 
 	public UnsignedInt(int c) {
-		value = c;
+		value = c & 0xFFFFFFFFL;
 	}
 
 	public UnsignedInt(long c) {

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedShort.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedShort.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/lib/number/UnsignedShort.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -28,11 +28,11 @@
 	private int value;
 
 	public UnsignedShort(byte c) {
-		value = c;
+		value = c & 0xFF;
 	}
 
 	public UnsignedShort(short c) {
-		value = c;
+		value = c & 0xFFFF;
 	}
 
 	public UnsignedShort(int c) {

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxyHandler.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -28,6 +28,7 @@
 import java.util.Queue;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.Executor;
 
 import org.apache.mina.common.ConnectFuture;
 import org.apache.mina.common.IoFuture;
@@ -35,13 +36,12 @@
 import org.apache.mina.common.IoSession;
 import org.apache.mina.common.TrafficMask;
 import org.apache.mina.common.WriteFuture;
-import org.apache.mina.filter.executor.ExecutorExecutor;
 import org.apache.mina.transport.socket.nio.SocketConnector;
 import org.apache.mina.transport.socket.nio.SocketSessionConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import rtspproxy.ProxyServiceRegistry;
+import rtspproxy.IProxyServiceRegistry;
 import rtspproxy.RdtClientService;
 import rtspproxy.RdtServerService;
 import rtspproxy.RtcpClientService;
@@ -63,6 +63,8 @@
 import rtspproxy.rtsp.RtspTransport.LowerTransport;
 import rtspproxy.rtsp.RtspTransport.TransportProtocol;
 
+import com.google.inject.Inject;
+
 /**
  * @author Matteo Merli
  */
@@ -94,6 +96,9 @@
     
     private WriteListener writeListener = new WriteListener( this );
     
+    @Inject
+    private IProxyServiceRegistry serviceRegistry;
+    
     /**
      * Creates a new ProxyHandler from a client side protocol session.
      * 
@@ -589,9 +594,7 @@
         if ( port == -1 ) port = url.getDefaultPort();
         
         // Create TCP/IP connector.
-        ExecutorExecutor executor =
-                new ExecutorExecutor(
-                        ProxyServiceRegistry.getInstance().getExecutor() );
+        Executor executor = serviceRegistry.getExecutor();
         SocketConnector connector = new SocketConnector( 1, executor );
         connector.setFilterChainBuilder( new RtspServerFilters() );
         
@@ -744,7 +747,7 @@
     {
         WriteFuture future =
                 session.write( RtspResponse.errorResponse( errorCode ) );
-        future.addListener( new CloseAllListener( this ) );        
+        future.addListener( new CloseAllListener( this ) );
     }
     
     private static class WriteListener implements IoFutureListener

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -12,45 +12,70 @@
 
 /**
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
- *
+ * 
  */
-public class RdtProtocolDecoder implements ProtocolDecoder {
+public class RdtProtocolDecoder implements ProtocolDecoder
+{
+    
+    private static Logger logger = LoggerFactory
+            .getLogger( RdtProtocolDecoder.class );
+    
+    /**
+     * 
+     */
+    RdtProtocolDecoder()
+    {
+    }
+    
+    /*
+     * (non-Javadoc)
+     * 
+     * @see org.apache.mina.filter.codec.ProtocolDecoder#decode(org.apache.mina.common.IoSession,
+     *      org.apache.mina.common.ByteBuffer,
+     *      org.apache.mina.filter.codec.ProtocolDecoderOutput)
+     */
+    public void decode( IoSession ioSession, ByteBuffer buffer,
+            ProtocolDecoderOutput out ) throws Exception
+    {
+        try
+        {
+            RdtPacket rdtPacket = RdtPacketDecoder.decode( buffer );
+            
+            if ( logger.isDebugEnabled() )
+                logger.debug( "received RDT packet: " + rdtPacket
+                        + " from client " + ioSession.getRemoteAddress() );
+            
+            if ( rdtPacket == null )
+                throw new IllegalStateException(
+                        "RDT network packet cannot be decoded" );
+            
+            out.write( rdtPacket );
+        } catch ( Exception e )
+        {
+            logger.debug( "error decoding packet", e );
+            
+            throw e;
+        }
+    }
+    
+    
+    
+    /* (non-Javadoc)
+     * @see org.apache.mina.filter.codec.ProtocolDecoder#finishDecode(org.apache.mina.common.IoSession, org.apache.mina.filter.codec.ProtocolDecoderOutput)
+     */
+    public void finishDecode( IoSession session, ProtocolDecoderOutput out ) throws Exception
+    {
+        // TODO Auto-generated method stub
+    }
 
-	private static Logger logger = LoggerFactory.getLogger(RdtProtocolDecoder.class);
-
-	/**
-	 * 
-	 */
-	RdtProtocolDecoder() {
-	}
-
-	/* (non-Javadoc)
-	 * @see org.apache.mina.filter.codec.ProtocolDecoder#decode(org.apache.mina.common.IoSession, org.apache.mina.common.ByteBuffer, org.apache.mina.filter.codec.ProtocolDecoderOutput)
-	 */
-	public void decode(IoSession ioSession, ByteBuffer buffer,
-			ProtocolDecoderOutput out) throws Exception {
-		try {
-		RdtPacket rdtPacket = RdtPacketDecoder.decode(buffer);
-	
-		if(logger.isDebugEnabled())
-			logger.debug("received RDT packet: " + rdtPacket + " from client " + ioSession.getRemoteAddress());
-
-		if(rdtPacket == null)
-			throw new IllegalStateException("RDT network packet cannot be decoded");
-		
-		out.write(rdtPacket);
-		} catch(Exception e) {
-			logger.debug("error decoding packet", e);
-			
-			throw e;
-		}
-	}
-
-	/* (non-Javadoc)
-	 * @see org.apache.mina.filter.codec.ProtocolDecoder#dispose(org.apache.mina.common.IoSession)
-	 */
-	public void dispose(IoSession arg0) throws Exception {
-
-	}
-
+    /*
+     * (non-Javadoc)
+     * 
+     * @see org.apache.mina.filter.codec.ProtocolDecoder#dispose(org.apache.mina.common.IoSession)
+     */
+    public void dispose( IoSession arg0 ) throws Exception
+    {
+        
+    }
+    
 }

Deleted: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpRtcpFilterChainBuilder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpRtcpFilterChainBuilder.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpRtcpFilterChainBuilder.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -1,29 +0,0 @@
-/**
- * 
- */
-package rtspproxy.rtp.range;
-
-import org.apache.mina.common.IoFilterChain;
-import org.apache.mina.common.IoFilterChainBuilder;
-import org.apache.mina.filter.ThreadPoolFilter;
-
-/**
- * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
- *
- */
-public class RtpRtcpFilterChainBuilder implements IoFilterChainBuilder {
-
-	private ThreadPoolFilter filter = new ThreadPoolFilter("RtpRtcpPortRangeThreadPool");
-	
-	RtpRtcpFilterChainBuilder() {}
-	
-	/* (non-Javadoc)
-	 * @see org.apache.mina.common.IoFilterChainBuilder#buildFilterChain(org.apache.mina.common.IoFilterChain)
-	 */
-	public void buildFilterChain(IoFilterChain arg0) throws Exception {
-	}
-
-	void setPoolSize(int size) {
-		this.filter.setMaximumPoolSize(size);
-	}
-}

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpServerSessionFactory.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpServerSessionFactory.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/range/RtpServerSessionFactory.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -50,9 +50,6 @@
     // RTCP acceptor
     private DatagramAcceptor rtcpAcceptor = new DatagramAcceptor();
 
-    // Filter chain builder
-    private RtpRtcpFilterChainBuilder chainBuilder = new RtpRtcpFilterChainBuilder();
-
     private long idleTimeout;
 
     /**
@@ -70,10 +67,6 @@
         this.basePort = basePort;
         this.idleTimeout = idleTimeout;
 
-        this.chainBuilder.setPoolSize( threadPoolSize );
-        this.rtpAcceptor.setFilterChainBuilder( this.chainBuilder );
-        this.rtcpAcceptor.setFilterChainBuilder( this.chainBuilder );
-
         Config.proxyServerRtpThreadPoolSize.addObserver( this );
         Config.proxyServerRtpIdleTimeout.addObserver( this );
     }
@@ -189,10 +182,7 @@
         if ( o instanceof Parameter ) {
             Parameter p = (Parameter) o;
 
-            if ( p.equals( Config.proxyServerRtpThreadPoolSize ) )
-                this.chainBuilder.setPoolSize( Config.proxyServerRtpThreadPoolSize
-                        .getValue() );
-            else if ( p.equals( Config.proxyServerRtpIdleTimeout ) )
+            if ( p.equals( Config.proxyServerRtpIdleTimeout ) )
                 this.idleTimeout = Config.proxyServerRtpIdleTimeout.getValue();
         }
     }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp/RtcpPacket.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp/RtcpPacket.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp/RtcpPacket.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -95,7 +95,8 @@
 		version = (byte) ( ( c & 0xC0 ) >> 6 );
 		padding = ( ( c & 0x20 ) >> 5 ) == 1;
 		count = (byte) ( c & 0x1F );
-		packetType = new UnsignedByte( buffer.get() );
+        byte b = buffer.get();
+        packetType = new UnsignedByte( b );
 		length = buffer.getShort();
 
 		ssrc = new UnsignedInt( buffer.getInt() );

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/NptTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/NptTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/NptTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -17,23 +17,22 @@
  */
 package rtspproxy.lib;
 
-import junit.framework.TestCase;
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertNotNull;
 
+import org.testng.annotations.Test;
+
 /**
  * @author mat
  */
-public class NptTest extends TestCase
+ at Test
+public class NptTest
 {
-
-	public static void main( String[] args )
-	{
-		junit.textui.TestRunner.run( NptTest.class );
-	}
-
 	/*
 	 * Test method for 'rtspproxy.lib.Npt.fromString(String)'
 	 */
-	public void testFromString1()
+	@Test
+    public void fromString1()
 	{
 		String s = "npt=0-23.4";
 		Npt npt = Npt.fromString( s );
@@ -48,7 +47,8 @@
 	/*
 	 * Test method for 'rtspproxy.lib.Npt.fromString(String)'
 	 */
-	public void testFromString2()
+	@Test
+    public void fromString2()
 	{
 		String s = "npt=0-";
 		Npt npt = Npt.fromString( s );
@@ -63,7 +63,8 @@
 	/*
 	 * Test method for 'rtspproxy.lib.Npt.fromString(String)'
 	 */
-	public void testFromString3()
+	@Test
+    public void fromString3()
 	{
 		String s = "npt=12.34-23.49";
 		Npt npt = Npt.fromString( s );
@@ -78,7 +79,8 @@
 	/*
 	 * Test method for 'rtspproxy.lib.Npt.fromString(String)'
 	 */
-	public void testFromString4()
+	@Test
+    public void fromString4()
 	{
 		String s = "npt=now-";
 		Npt npt = Npt.fromString( s );

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedByteTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedByteTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedByteTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -17,109 +17,133 @@
  */
 package rtspproxy.lib.number;
 
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+
 import java.util.Arrays;
 
-import junit.framework.TestCase;
+import org.testng.annotations.Test;
 
 /**
  * @author Matteo Merli
  */
-public class UnsignedByteTest extends TestCase {
-
-	public static void main(String[] args) {
-		junit.textui.TestRunner.run(UnsignedByteTest.class);
-	}
-
-	public void test1() {
-		UnsignedByte n = new UnsignedByte(0xFF);
-
-		assertEquals((short) 0xFF, n.shortValue());
-		assertEquals(0xFF, n.intValue());
-		assertEquals(0xFFL, n.longValue());
-		assertEquals("FF", n.toHexString());
-		assertEquals("255", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF }, n.getBytes()));
-
-	}
-
-	public void test2() {
-		UnsignedByte n = new UnsignedByte(0xFFL);
-
-		assertEquals((short) 0xFF, n.shortValue());
-		assertEquals(0xFF, n.intValue());
-		assertEquals(0xFFL, n.longValue());
-		assertEquals("FF", n.toHexString());
-		assertEquals("255", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF }, n.getBytes()));
-	}
-
-	public void test3() {
-		UnsignedByte n = UnsignedByte.fromString("FF", 16);
-
-		assertEquals((short) 0xFF, n.shortValue());
-		assertEquals(0xFF, n.intValue());
-		assertEquals(0xFFL, n.longValue());
-		assertEquals("FF", n.toHexString());
-		assertEquals("255", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF }, n.getBytes()));
-	}
-
-	public void test4() {
-		UnsignedByte n = UnsignedByte.fromString("255");
-
-		assertEquals((short) 0xFF, n.shortValue());
-		assertEquals(0xFF, n.intValue());
-		assertEquals(0xFFL, n.longValue());
-		assertEquals("FF", n.toHexString());
-		assertEquals("255", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF }, n.getBytes()));
-	}
-
-	public void test5() {
-		UnsignedByte n = UnsignedByte.fromBytes(new byte[] { (byte) 0xFF });
-
-		assertEquals((short) 0xFF, n.shortValue());
-		assertEquals(0xFF, n.intValue());
-		assertEquals(0xFFL, n.longValue());
-		assertEquals("FF", n.toHexString());
-		assertEquals("255", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF }, n.getBytes()));
-	}
-
-	public void test6() {
-		UnsignedByte n1 = new UnsignedByte(0);
-		UnsignedByte n2 = new UnsignedByte(0xF);
-		UnsignedByte n3 = new UnsignedByte(0xFFL);
-		UnsignedByte n4 = UnsignedByte.fromBytes(new byte[] { (byte) 0xFF });
-
-		assertTrue(n1.compareTo(n1) == 0);
-		assertTrue(n1.compareTo(n2) < 0);
-		assertTrue(n1.compareTo(n3) < 0);
-		assertTrue(n1.compareTo(n4) < 0);
-		assertTrue(n2.compareTo(n1) > 0);
-		assertTrue(n2.compareTo(n2) == 0);
-		assertTrue(n2.compareTo(n3) < 0);
-		assertTrue(n2.compareTo(n4) < 0);
-		assertTrue(n3.compareTo(n1) > 0);
-		assertTrue(n3.compareTo(n2) > 0);
-		assertTrue(n3.compareTo(n3) == 0);
-		assertTrue(n3.compareTo(n4) == 0);
-		assertTrue(n4.compareTo(n1) > 0);
-		assertTrue(n4.compareTo(n2) > 0);
-		assertTrue(n4.compareTo(n3) == 0);
-		assertTrue(n4.compareTo(n4) == 0);
-	}
-
-	public void testShift() {
-		UnsignedByte n = new UnsignedByte(0x01);
-
-		n.shiftLeft(7);
-		assertEquals(0x80, n.intValue());
-		n.shiftRight(3);
-		assertEquals(0x10, n.intValue());
-
-		n = new UnsignedByte(0xFF);
-		n.shiftRight(4);
-		assertEquals(0x0F, n.intValue());
-	}
+public class UnsignedByteTest
+{
+    @Test
+    public void testNegative()
+    {
+        UnsignedByte n = new UnsignedByte( (byte)202 );
+        
+        assertEquals( (short) 202, n.shortValue() );
+        assertEquals( 202, n.intValue() );
+        assertEquals( 202L, n.longValue() );
+        assertEquals( "202", n.toString() );
+    }
+    
+    @Test()
+    public void test1()
+    {
+        UnsignedByte n = new UnsignedByte( 0xFF );
+        
+        assertEquals( (short) 0xFF, n.shortValue() );
+        assertEquals( 0xFF, n.intValue() );
+        assertEquals( 0xFFL, n.longValue() );
+        assertEquals( "FF", n.toHexString() );
+        assertEquals( "255", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF }, n.getBytes() ) );
+        
+    }
+    
+    @Test()
+    public void test2()
+    {
+        UnsignedByte n = new UnsignedByte( 0xFFL );
+        
+        assertEquals( (short) 0xFF, n.shortValue() );
+        assertEquals( 0xFF, n.intValue() );
+        assertEquals( 0xFFL, n.longValue() );
+        assertEquals( "FF", n.toHexString() );
+        assertEquals( "255", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF }, n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test3()
+    {
+        UnsignedByte n = UnsignedByte.fromString( "FF", 16 );
+        
+        assertEquals( (short) 0xFF, n.shortValue() );
+        assertEquals( 0xFF, n.intValue() );
+        assertEquals( 0xFFL, n.longValue() );
+        assertEquals( "FF", n.toHexString() );
+        assertEquals( "255", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF }, n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test4()
+    {
+        UnsignedByte n = UnsignedByte.fromString( "255" );
+        
+        assertEquals( (short) 0xFF, n.shortValue() );
+        assertEquals( 0xFF, n.intValue() );
+        assertEquals( 0xFFL, n.longValue() );
+        assertEquals( "FF", n.toHexString() );
+        assertEquals( "255", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF }, n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test5()
+    {
+        UnsignedByte n = UnsignedByte.fromBytes( new byte[] { (byte) 0xFF } );
+        
+        assertEquals( (short) 0xFF, n.shortValue() );
+        assertEquals( 0xFF, n.intValue() );
+        assertEquals( 0xFFL, n.longValue() );
+        assertEquals( "FF", n.toHexString() );
+        assertEquals( "255", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF }, n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test6()
+    {
+        UnsignedByte n1 = new UnsignedByte( 0 );
+        UnsignedByte n2 = new UnsignedByte( 0xF );
+        UnsignedByte n3 = new UnsignedByte( 0xFFL );
+        UnsignedByte n4 = UnsignedByte.fromBytes( new byte[] { (byte) 0xFF } );
+        
+        assertTrue( n1.compareTo( n1 ) == 0 );
+        assertTrue( n1.compareTo( n2 ) < 0 );
+        assertTrue( n1.compareTo( n3 ) < 0 );
+        assertTrue( n1.compareTo( n4 ) < 0 );
+        assertTrue( n2.compareTo( n1 ) > 0 );
+        assertTrue( n2.compareTo( n2 ) == 0 );
+        assertTrue( n2.compareTo( n3 ) < 0 );
+        assertTrue( n2.compareTo( n4 ) < 0 );
+        assertTrue( n3.compareTo( n1 ) > 0 );
+        assertTrue( n3.compareTo( n2 ) > 0 );
+        assertTrue( n3.compareTo( n3 ) == 0 );
+        assertTrue( n3.compareTo( n4 ) == 0 );
+        assertTrue( n4.compareTo( n1 ) > 0 );
+        assertTrue( n4.compareTo( n2 ) > 0 );
+        assertTrue( n4.compareTo( n3 ) == 0 );
+        assertTrue( n4.compareTo( n4 ) == 0 );
+    }
+    
+    @Test()
+    public void testShift()
+    {
+        UnsignedByte n = new UnsignedByte( 0x01 );
+        
+        n.shiftLeft( 7 );
+        assertEquals( 0x80, n.intValue() );
+        n.shiftRight( 3 );
+        assertEquals( 0x10, n.intValue() );
+        
+        n = new UnsignedByte( 0xFF );
+        n.shiftRight( 4 );
+        assertEquals( 0x0F, n.intValue() );
+    }
 }

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedIntTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedIntTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedIntTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -17,102 +17,122 @@
  */
 package rtspproxy.lib.number;
 
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+
 import java.util.Arrays;
 
-import junit.framework.TestCase;
+import org.testng.annotations.Test;
 
 /**
  * @author Matteo Merli
  */
-public class UnsignedIntTest extends TestCase {
-
-	public static void main(String[] args) {
-		junit.textui.TestRunner.run(UnsignedIntTest.class);
-	}
-	
-	public void test1() {
-		UnsignedInt n = new UnsignedInt(0xFFFFFFFF);
-
-		assertEquals(0xFFFFFFFFL, n.longValue());
-		assertEquals("FFFFFFFF", n.toHexString());
-		assertEquals("4294967295", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF }, n.getBytes()));
-
-	}
-
-	public void test2() {
-		UnsignedInt n = new UnsignedInt(0xFFFFFFFFL);
-
-		assertEquals(0xFFFFFFFFL, n.longValue());
-		assertEquals("FFFFFFFF", n.toHexString());
-		assertEquals("4294967295", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF }, n.getBytes()));
-
-	}
-
-	public void test3() {
-		UnsignedInt n = UnsignedInt.fromString("FFFFFFFF", 16);
-
-		assertEquals(0xFFFFFFFFL, n.longValue());
-		assertEquals("FFFFFFFF", n.toHexString());
-		assertEquals("4294967295", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF }, n.getBytes()));
-	}
-
-	public void test4() {
-		UnsignedInt n = UnsignedInt.fromString("4294967295");
-
-		assertEquals(0xFFFFFFFFL, n.longValue());
-		assertEquals("FFFFFFFF", n.toHexString());
-		assertEquals("4294967295", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF }, n.getBytes()));
-	}
-
-	public void test5() {
-		UnsignedInt n = UnsignedInt.fromBytes(new byte[] { (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF, (byte) 0xFF });
-
-		assertEquals(0xFFFFFFFFL, n.longValue());
-		assertEquals("FFFFFFFF", n.toHexString());
-		assertEquals("4294967295", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF }, n.getBytes()));
-	}
-
-	public void test6() {
-		UnsignedInt n1 = new UnsignedInt(0);
-		UnsignedInt n2 = new UnsignedInt(0xFFFF);
-		UnsignedInt n3 = new UnsignedInt(0xFFFFFFFFL);
-
-		assertTrue(n1.compareTo(n2) < 0);
-		assertTrue(n2.compareTo(n3) < 0);
-		assertTrue(n1.compareTo(n3) < 0);
-		assertTrue(n2.compareTo(n2) == 0);
-		assertTrue(n1.compareTo(new UnsignedInt(0)) == 0);
-	}
-	
-	public void testShift() {
-		UnsignedInt n = new UnsignedInt(0x01);
-
-		n.shiftLeft(8);
-		assertEquals(0x100, n.intValue());
-		n.shiftLeft(16);
-		assertEquals(0x1000000, n.intValue());
-		n.shiftRight(24);
-		assertEquals(0x01, n.intValue());
-
-		n = new UnsignedInt(0xACL);
-		n.shiftLeft(8);
-		assertEquals(0xAC00, n.intValue());
-		n.shiftLeft(16);
-		assertEquals(0xAC000000L, n.longValue());
-		n.shiftRight(8);
-		assertEquals(0xAC0000L, n.longValue());
-		n.shiftRight(20);
-		assertEquals(0xAL, n.longValue());
-	}
+public class UnsignedIntTest
+{
+    
+    @Test()
+    public void test1()
+    {
+        UnsignedInt n = new UnsignedInt( 0xFFFFFFFF );
+        
+        assertEquals( 0xFFFFFFFFL, n.longValue() );
+        assertEquals( "FFFFFFFF", n.toHexString() );
+        assertEquals( "4294967295", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+        
+    }
+    
+    @Test()
+    public void test2()
+    {
+        UnsignedInt n = new UnsignedInt( 0xFFFFFFFFL );
+        
+        assertEquals( 0xFFFFFFFFL, n.longValue() );
+        assertEquals( "FFFFFFFF", n.toHexString() );
+        assertEquals( "4294967295", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+        
+    }
+    
+    @Test()
+    public void test3()
+    {
+        UnsignedInt n = UnsignedInt.fromString( "FFFFFFFF", 16 );
+        
+        assertEquals( 0xFFFFFFFFL, n.longValue() );
+        assertEquals( "FFFFFFFF", n.toHexString() );
+        assertEquals( "4294967295", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test4()
+    {
+        UnsignedInt n = UnsignedInt.fromString( "4294967295" );
+        
+        assertEquals( 0xFFFFFFFFL, n.longValue() );
+        assertEquals( "FFFFFFFF", n.toHexString() );
+        assertEquals( "4294967295", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test5()
+    {
+        UnsignedInt n =
+                UnsignedInt.fromBytes( new byte[] { (byte) 0xFF, (byte) 0xFF,
+                                                   (byte) 0xFF, (byte) 0xFF } );
+        
+        assertEquals( 0xFFFFFFFFL, n.longValue() );
+        assertEquals( "FFFFFFFF", n.toHexString() );
+        assertEquals( "4294967295", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test6()
+    {
+        UnsignedInt n1 = new UnsignedInt( 0 );
+        UnsignedInt n2 = new UnsignedInt( 0xFFFF );
+        UnsignedInt n3 = new UnsignedInt( 0xFFFFFFFFL );
+        
+        assertTrue( n1.compareTo( n2 ) < 0 );
+        assertTrue( n2.compareTo( n3 ) < 0 );
+        assertTrue( n1.compareTo( n3 ) < 0 );
+        assertTrue( n2.compareTo( n2 ) == 0 );
+        assertTrue( n1.compareTo( new UnsignedInt( 0 ) ) == 0 );
+    }
+    
+    @Test()
+    public void testShift()
+    {
+        UnsignedInt n = new UnsignedInt( 0x01 );
+        
+        n.shiftLeft( 8 );
+        assertEquals( 0x100, n.intValue() );
+        n.shiftLeft( 16 );
+        assertEquals( 0x1000000, n.intValue() );
+        n.shiftRight( 24 );
+        assertEquals( 0x01, n.intValue() );
+        
+        n = new UnsignedInt( 0xACL );
+        n.shiftLeft( 8 );
+        assertEquals( 0xAC00, n.intValue() );
+        n.shiftLeft( 16 );
+        assertEquals( 0xAC000000L, n.longValue() );
+        n.shiftRight( 8 );
+        assertEquals( 0xAC0000L, n.longValue() );
+        n.shiftRight( 20 );
+        assertEquals( 0xAL, n.longValue() );
+    }
 }

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedLongTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedLongTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedLongTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -17,132 +17,159 @@
  */
 package rtspproxy.lib.number;
 
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+
 import java.util.Arrays;
 
-import junit.framework.TestCase;
+import org.testng.annotations.Test;
 
 /**
  * @author Matteo Merli
  */
-public class UnsignedLongTest extends TestCase {
-
-	public static void main(String[] args) {
-		junit.textui.TestRunner.run(UnsignedLongTest.class);
-	}
-
-	public void test1() {
-		UnsignedLong n = new UnsignedLong(0xFFFFFFFFFFFFFFFFL);
-
-		assertEquals(0xFFFFFFFFFFFFFFFFL, n.longValue());
-		assertEquals("FFFFFFFFFFFFFFFF", n.toHexString());
-		assertEquals("18446744073709551615", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF }, n.getBytes()));
-	}
-
-	public void test2() {
-		UnsignedLong n = new UnsignedLong(0xFFFFFFFFL);
-
-		assertEquals(0xFFFFFFFF, n.intValue());
-		assertEquals(0xFFFFFFFFL, n.longValue());
-		assertEquals("FFFFFFFF", n.toHexString());
-		assertEquals("00000000FFFFFFFF", n.toHexString(true));
-		assertEquals("4294967295", n.toString());
-		assertTrue(Arrays.equals(new byte[] { 0, 0, 0, 0, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, n.getBytes()));
-
-	}
-
-	public void test3() {
-		UnsignedLong n = UnsignedLong.fromString("FFFFFFFFFFFFFFFF", 16);
-
-		assertEquals(0xFFFFFFFFFFFFFFFFL, n.longValue());
-		assertEquals("FFFFFFFFFFFFFFFF", n.toHexString());
-		assertEquals("18446744073709551615", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF }, n.getBytes()));
-	}
-
-	public void test4() {
-		UnsignedLong n = UnsignedLong.fromString("18446744073709551615");
-
-		assertEquals(0xFFFFFFFFFFFFFFFFL, n.longValue());
-		assertEquals("FFFFFFFFFFFFFFFF", n.toHexString());
-		assertEquals("18446744073709551615", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF }, n.getBytes()));
-	}
-
-	public void test5() {
-		UnsignedLong n = UnsignedLong.fromBytes(new byte[] { (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF, (byte) 0xFF });
-
-		assertEquals(0xFFFFFFFFFFFFFFFFL, n.longValue());
-		assertEquals("FFFFFFFFFFFFFFFF", n.toHexString());
-		assertEquals("18446744073709551615", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF }, n.getBytes()));
-	}
-
-	public void test6() {
-		UnsignedLong n1 = new UnsignedLong(0);
-		UnsignedLong n2 = new UnsignedLong(0xFFFF);
-		UnsignedLong n3 = new UnsignedLong(0xFFFFFFFFL);
-		UnsignedLong n4 = new UnsignedLong(0xFFFFFFFFFFFFFFFFL);
-		UnsignedLong n5 = UnsignedLong.fromBytes(new byte[] { (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
-				(byte) 0xFF, (byte) 0xFF, (byte) 0xFF });
-
-		assertTrue(n1.compareTo(n1) == 0);
-		assertTrue(n1.compareTo(n2) < 0);
-		assertTrue(n1.compareTo(n3) < 0);
-		assertTrue(n1.compareTo(n4) < 0);
-		assertTrue(n1.compareTo(n5) < 0);
-		assertTrue(n2.compareTo(n1) > 0);
-		assertTrue(n2.compareTo(n2) == 0);
-		assertTrue(n2.compareTo(n3) < 0);
-		assertTrue(n2.compareTo(n4) < 0);
-		assertTrue(n2.compareTo(n5) < 0);
-		assertTrue(n3.compareTo(n1) > 0);
-		assertTrue(n3.compareTo(n2) > 0);
-		assertTrue(n3.compareTo(n3) == 0);
-		assertTrue(n3.compareTo(n4) < 0);
-		assertTrue(n3.compareTo(n5) < 0);
-		assertTrue(n4.compareTo(n1) > 0);
-		assertTrue(n4.compareTo(n2) > 0);
-		assertTrue(n4.compareTo(n3) > 0);
-		assertTrue(n4.compareTo(n4) == 0);
-		assertTrue(n4.compareTo(n5) == 0);
-		assertTrue(n5.compareTo(n1) > 0);
-		assertTrue(n5.compareTo(n2) > 0);
-		assertTrue(n5.compareTo(n3) > 0);
-		assertTrue(n5.compareTo(n4) == 0);
-		assertTrue(n5.compareTo(n5) == 0);
-	}
-
-	public void testShift() {
-		UnsignedLong n = new UnsignedLong(0x01);
-
-		n.shiftLeft(8);
-		assertEquals(0x100, n.intValue());
-		n.shiftLeft(16);
-		assertEquals(0x1000000, n.intValue());
-		n.shiftRight(24);
-		assertEquals(0x01, n.intValue());
-
-		n = new UnsignedLong(0xACL);
-		n.shiftLeft(8);
-		assertEquals(0xAC00, n.intValue());
-		n.shiftLeft(24);
-		assertEquals(0xAC00000000L, n.longValue());
-		n.shiftLeft(24);
-		assertEquals(0xAC00000000000000L, n.longValue());
-		n.shiftRight(32);
-		assertEquals(0xAC000000L, n.longValue());
-	}
+public class UnsignedLongTest
+{
+    
+    @Test()
+    public void test1()
+    {
+        UnsignedLong n = new UnsignedLong( 0xFFFFFFFFFFFFFFFFL );
+        
+        assertEquals( 0xFFFFFFFFFFFFFFFFL, n.longValue() );
+        assertEquals( "FFFFFFFFFFFFFFFF", n.toHexString() );
+        assertEquals( "18446744073709551615", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test2()
+    {
+        UnsignedLong n = new UnsignedLong( 0xFFFFFFFFL );
+        
+        assertEquals( 0xFFFFFFFF, n.intValue() );
+        assertEquals( 0xFFFFFFFFL, n.longValue() );
+        assertEquals( "FFFFFFFF", n.toHexString() );
+        assertEquals( "00000000FFFFFFFF", n.toHexString( true ) );
+        assertEquals( "4294967295", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { 0, 0, 0, 0, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF }, n.getBytes() ) );
+        
+    }
+    
+    @Test()
+    public void test3()
+    {
+        UnsignedLong n = UnsignedLong.fromString( "FFFFFFFFFFFFFFFF", 16 );
+        
+        assertEquals( 0xFFFFFFFFFFFFFFFFL, n.longValue() );
+        assertEquals( "FFFFFFFFFFFFFFFF", n.toHexString() );
+        assertEquals( "18446744073709551615", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test4()
+    {
+        UnsignedLong n = UnsignedLong.fromString( "18446744073709551615" );
+        
+        assertEquals( 0xFFFFFFFFFFFFFFFFL, n.longValue() );
+        assertEquals( "FFFFFFFFFFFFFFFF", n.toHexString() );
+        assertEquals( "18446744073709551615", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test5()
+    {
+        UnsignedLong n =
+                UnsignedLong.fromBytes( new byte[] { (byte) 0xFF, (byte) 0xFF,
+                                                    (byte) 0xFF, (byte) 0xFF,
+                                                    (byte) 0xFF, (byte) 0xFF,
+                                                    (byte) 0xFF, (byte) 0xFF } );
+        
+        assertEquals( 0xFFFFFFFFFFFFFFFFL, n.longValue() );
+        assertEquals( "FFFFFFFFFFFFFFFF", n.toHexString() );
+        assertEquals( "18446744073709551615", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF,
+                                               (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test6()
+    {
+        UnsignedLong n1 = new UnsignedLong( 0 );
+        UnsignedLong n2 = new UnsignedLong( 0xFFFF );
+        UnsignedLong n3 = new UnsignedLong( 0xFFFFFFFFL );
+        UnsignedLong n4 = new UnsignedLong( 0xFFFFFFFFFFFFFFFFL );
+        UnsignedLong n5 =
+                UnsignedLong.fromBytes( new byte[] { (byte) 0xFF, (byte) 0xFF,
+                                                    (byte) 0xFF, (byte) 0xFF,
+                                                    (byte) 0xFF, (byte) 0xFF,
+                                                    (byte) 0xFF, (byte) 0xFF } );
+        
+        assertTrue( n1.compareTo( n1 ) == 0 );
+        assertTrue( n1.compareTo( n2 ) < 0 );
+        assertTrue( n1.compareTo( n3 ) < 0 );
+        assertTrue( n1.compareTo( n4 ) < 0 );
+        assertTrue( n1.compareTo( n5 ) < 0 );
+        assertTrue( n2.compareTo( n1 ) > 0 );
+        assertTrue( n2.compareTo( n2 ) == 0 );
+        assertTrue( n2.compareTo( n3 ) < 0 );
+        assertTrue( n2.compareTo( n4 ) < 0 );
+        assertTrue( n2.compareTo( n5 ) < 0 );
+        assertTrue( n3.compareTo( n1 ) > 0 );
+        assertTrue( n3.compareTo( n2 ) > 0 );
+        assertTrue( n3.compareTo( n3 ) == 0 );
+        assertTrue( n3.compareTo( n4 ) < 0 );
+        assertTrue( n3.compareTo( n5 ) < 0 );
+        assertTrue( n4.compareTo( n1 ) > 0 );
+        assertTrue( n4.compareTo( n2 ) > 0 );
+        assertTrue( n4.compareTo( n3 ) > 0 );
+        assertTrue( n4.compareTo( n4 ) == 0 );
+        assertTrue( n4.compareTo( n5 ) == 0 );
+        assertTrue( n5.compareTo( n1 ) > 0 );
+        assertTrue( n5.compareTo( n2 ) > 0 );
+        assertTrue( n5.compareTo( n3 ) > 0 );
+        assertTrue( n5.compareTo( n4 ) == 0 );
+        assertTrue( n5.compareTo( n5 ) == 0 );
+    }
+    
+    @Test()
+    public void testShift()
+    {
+        UnsignedLong n = new UnsignedLong( 0x01 );
+        
+        n.shiftLeft( 8 );
+        assertEquals( 0x100, n.intValue() );
+        n.shiftLeft( 16 );
+        assertEquals( 0x1000000, n.intValue() );
+        n.shiftRight( 24 );
+        assertEquals( 0x01, n.intValue() );
+        
+        n = new UnsignedLong( 0xACL );
+        n.shiftLeft( 8 );
+        assertEquals( 0xAC00, n.intValue() );
+        n.shiftLeft( 24 );
+        assertEquals( 0xAC00000000L, n.longValue() );
+        n.shiftLeft( 24 );
+        assertEquals( 0xAC00000000000000L, n.longValue() );
+        n.shiftRight( 32 );
+        assertEquals( 0xAC000000L, n.longValue() );
+    }
 }

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedShortTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedShortTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/lib/number/UnsignedShortTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -17,121 +17,134 @@
  */
 package rtspproxy.lib.number;
 
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+
 import java.util.Arrays;
 
-import junit.framework.TestCase;
+import org.testng.annotations.Test;
 
 /**
  * @author Matteo Merli
  */
-public class UnsignedShortTest extends TestCase {
-
-	public static void main(String[] args) {
-		junit.textui.TestRunner.run(UnsignedShortTest.class);
-	}
-
-	public void test1() {
-		UnsignedShort n = new UnsignedShort(0xFFFF);
-
-		assertEquals((short) 0xFFFF, n.shortValue());
-		assertEquals(0xFFFF, n.intValue());
-		assertEquals(0xFFFFL, n.longValue());
-		assertEquals("FFFF", n.toHexString());
-		assertEquals("65535", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF }, n
-				.getBytes()));
-
-	}
-
-	public void test2() {
-		UnsignedShort n = new UnsignedShort(0xFFFFL);
-
-		assertEquals((short) 0xFFFF, n.shortValue());
-		assertEquals(0xFFFF, n.intValue());
-		assertEquals(0xFFFFL, n.longValue());
-		assertEquals("FFFF", n.toHexString());
-		assertEquals("65535", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF }, n
-				.getBytes()));
-
-	}
-
-	public void test3() {
-		UnsignedShort n = UnsignedShort.fromString("FFFF", 16);
-
-		assertEquals((short) 0xFFFF, n.shortValue());
-		assertEquals(0xFFFF, n.intValue());
-		assertEquals(0xFFFFL, n.longValue());
-		assertEquals("FFFF", n.toHexString());
-		assertEquals("65535", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF }, n
-				.getBytes()));
-	}
-
-	public void test4() {
-		UnsignedShort n = UnsignedShort.fromString("65535");
-
-		assertEquals((short) 0xFFFF, n.shortValue());
-		assertEquals(0xFFFF, n.intValue());
-		assertEquals(0xFFFFL, n.longValue());
-		assertEquals("FFFF", n.toHexString());
-		assertEquals("65535", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF }, n
-				.getBytes()));
-	}
-
-	public void test5() {
-		UnsignedShort n = UnsignedShort.fromBytes(new byte[] { (byte) 0xFF,
-				(byte) 0xFF });
-
-		assertEquals((short) 0xFFFF, n.shortValue());
-		assertEquals(0xFFFF, n.intValue());
-		assertEquals(0xFFFFL, n.longValue());
-		assertEquals("FFFF", n.toHexString());
-		assertEquals("65535", n.toString());
-		assertTrue(Arrays.equals(new byte[] { (byte) 0xFF, (byte) 0xFF }, n
-				.getBytes()));
-	}
-
-	public void test6() {
-		UnsignedShort n1 = new UnsignedShort(0);
-		UnsignedShort n2 = new UnsignedShort(0xFF);
-		UnsignedShort n3 = new UnsignedShort(0xFFFFL);
-		UnsignedShort n4 = UnsignedShort.fromBytes(new byte[] { (byte) 0xFF,
-				(byte) 0xFF });
-
-		assertTrue(n1.compareTo(n1) == 0);
-		assertTrue(n1.compareTo(n2) < 0);
-		assertTrue(n1.compareTo(n3) < 0);
-		assertTrue(n1.compareTo(n4) < 0);
-		assertTrue(n2.compareTo(n1) > 0);
-		assertTrue(n2.compareTo(n2) == 0);
-		assertTrue(n2.compareTo(n3) < 0);
-		assertTrue(n2.compareTo(n4) < 0);
-		assertTrue(n3.compareTo(n1) > 0);
-		assertTrue(n3.compareTo(n2) > 0);
-		assertTrue(n3.compareTo(n3) == 0);
-		assertTrue(n3.compareTo(n4) == 0);
-		assertTrue(n4.compareTo(n1) > 0);
-		assertTrue(n4.compareTo(n2) > 0);
-		assertTrue(n4.compareTo(n3) == 0);
-		assertTrue(n4.compareTo(n4) == 0);
-	}
-
-	public void testShift() {
-		UnsignedShort n = new UnsignedShort(0x01);
-
-		n.shiftLeft(8);
-		assertEquals(0x100, n.intValue());
-		n.shiftLeft(7);
-		assertEquals(0x8000, n.intValue());
-		n.shiftRight(14);
-		assertEquals(0x02, n.intValue());
-
-		n = new UnsignedShort(0xACL);
-		n.shiftLeft(8);
-		assertEquals(0xAC00, n.intValue());
-		n.shiftRight(12);
-		assertEquals(0xA, n.intValue());
-	}
+public class UnsignedShortTest
+{
+    @Test()
+    public void test1()
+    {
+        UnsignedShort n = new UnsignedShort( 0xFFFF );
+        
+        assertEquals( (short) 0xFFFF, n.shortValue() );
+        assertEquals( 0xFFFF, n.intValue() );
+        assertEquals( 0xFFFFL, n.longValue() );
+        assertEquals( "FFFF", n.toHexString() );
+        assertEquals( "65535", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+        
+    }
+    
+    @Test()
+    public void test2()
+    {
+        UnsignedShort n = new UnsignedShort( 0xFFFFL );
+        
+        assertEquals( (short) 0xFFFF, n.shortValue() );
+        assertEquals( 0xFFFF, n.intValue() );
+        assertEquals( 0xFFFFL, n.longValue() );
+        assertEquals( "FFFF", n.toHexString() );
+        assertEquals( "65535", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+        
+    }
+    
+    @Test()
+    public void test3()
+    {
+        UnsignedShort n = UnsignedShort.fromString( "FFFF", 16 );
+        
+        assertEquals( (short) 0xFFFF, n.shortValue() );
+        assertEquals( 0xFFFF, n.intValue() );
+        assertEquals( 0xFFFFL, n.longValue() );
+        assertEquals( "FFFF", n.toHexString() );
+        assertEquals( "65535", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test4()
+    {
+        UnsignedShort n = UnsignedShort.fromString( "65535" );
+        
+        assertEquals( (short) 0xFFFF, n.shortValue() );
+        assertEquals( 0xFFFF, n.intValue() );
+        assertEquals( 0xFFFFL, n.longValue() );
+        assertEquals( "FFFF", n.toHexString() );
+        assertEquals( "65535", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test5()
+    {
+        UnsignedShort n =
+                UnsignedShort.fromBytes( new byte[] { (byte) 0xFF, (byte) 0xFF } );
+        
+        assertEquals( (short) 0xFFFF, n.shortValue() );
+        assertEquals( 0xFFFF, n.intValue() );
+        assertEquals( 0xFFFFL, n.longValue() );
+        assertEquals( "FFFF", n.toHexString() );
+        assertEquals( "65535", n.toString() );
+        assertTrue( Arrays.equals( new byte[] { (byte) 0xFF, (byte) 0xFF },
+                                   n.getBytes() ) );
+    }
+    
+    @Test()
+    public void test6()
+    {
+        UnsignedShort n1 = new UnsignedShort( 0 );
+        UnsignedShort n2 = new UnsignedShort( 0xFF );
+        UnsignedShort n3 = new UnsignedShort( 0xFFFFL );
+        UnsignedShort n4 =
+                UnsignedShort.fromBytes( new byte[] { (byte) 0xFF, (byte) 0xFF } );
+        
+        assertTrue( n1.compareTo( n1 ) == 0 );
+        assertTrue( n1.compareTo( n2 ) < 0 );
+        assertTrue( n1.compareTo( n3 ) < 0 );
+        assertTrue( n1.compareTo( n4 ) < 0 );
+        assertTrue( n2.compareTo( n1 ) > 0 );
+        assertTrue( n2.compareTo( n2 ) == 0 );
+        assertTrue( n2.compareTo( n3 ) < 0 );
+        assertTrue( n2.compareTo( n4 ) < 0 );
+        assertTrue( n3.compareTo( n1 ) > 0 );
+        assertTrue( n3.compareTo( n2 ) > 0 );
+        assertTrue( n3.compareTo( n3 ) == 0 );
+        assertTrue( n3.compareTo( n4 ) == 0 );
+        assertTrue( n4.compareTo( n1 ) > 0 );
+        assertTrue( n4.compareTo( n2 ) > 0 );
+        assertTrue( n4.compareTo( n3 ) == 0 );
+        assertTrue( n4.compareTo( n4 ) == 0 );
+    }
+    
+    @Test()
+    public void testShift()
+    {
+        UnsignedShort n = new UnsignedShort( 0x01 );
+        
+        n.shiftLeft( 8 );
+        assertEquals( 0x100, n.intValue() );
+        n.shiftLeft( 7 );
+        assertEquals( 0x8000, n.intValue() );
+        n.shiftRight( 14 );
+        assertEquals( 0x02, n.intValue() );
+        
+        n = new UnsignedShort( 0xACL );
+        n.shiftLeft( 8 );
+        assertEquals( 0xAC00, n.intValue() );
+        n.shiftRight( 12 );
+        assertEquals( 0xA, n.intValue() );
+    }
 }

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/BufferUtils.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -13,92 +13,117 @@
 
 /**
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
- *
+ * 
  */
-public class BufferUtils {
-
-	/**
-	 * 
-	 */
-	private BufferUtils() {
-	}
-
-	public static ByteBuffer loadBuffer(String fName) throws IOException {
-		ByteBuffer buffer = ByteBuffer.allocate(16);
-		
-		buffer.setAutoExpand(true);
-
-		File baseDir = new File(System.getProperty("basedir"));
-		File packetDump = new File(baseDir, 	"src/test/resources/rtspproxy/rdt/" + fName);
-
-		buffer = ByteBuffer.allocate(32); 
-		buffer.setAutoExpand(true);
-		
-		LineNumberReader lnr = new LineNumberReader(new InputStreamReader(
-				new FileInputStream(packetDump)));
-		String line;
-
-		while ((line = lnr.readLine()) != null) {
-			int pos = 0;
-			int nibblePos = 0;
-			byte b = 0;
-
-			for (pos = 0; pos < line.length(); ++pos) {
-				char c = line.charAt(pos);
-				if (!Character.isWhitespace(c)) {
-					byte n = 0;
-
-					if (c >= '0' && c <= '9') {
-						n = (byte) (c - '0');
-					} else if (c >= 'a' && c <= 'f') {
-						n = (byte) (c - 'a' + 10);
-					} else if (c >= 'A' && c <= 'F') {
-						n = (byte) (c - 'A' + 10);
-					} else
-						throw new IllegalArgumentException(
-								"invalid character '" + c + "' in packet dump");
-					if (nibblePos == 0) {
-						b = (byte)(n << 4);
-						nibblePos++;
-					} else {
-						b |= n;
-						nibblePos = 0;
-						buffer.put(b);
-					}
-				}
-			}
-		}
-		buffer.limit(buffer.position());
-		
-		return buffer;
-	}
-	
-	/**
-	 * compare two buffers for equality
-	 */
-	public static final boolean buffersEqual(ByteBuffer first, ByteBuffer second) {
-		boolean equal = false;
-		
-		/*
-		System.out.println("first limit=" + first.limit() + ", second limit=" + second.limit());
-		*/
-		if(first.limit() == second.limit()) {
-			int i;
-			
-			for(i=0; i<first.limit(); ++i) {
-				if(first.get(i) != second.get(i)) {
-					/*
-					System.out.println("index " + i + ": expected=" + Integer.toHexString(first.get(i))
-							+ ": got=" + Integer.toHexString(second.get(i)));
-							*/
-					break;
-				}
-			}
-
-			if(i == first.limit())
-				equal = true;
-		}
-		
-		return equal;
-	}
+public class BufferUtils
+{
+    
+    /**
+     * 
+     */
+    private BufferUtils()
+    {
+    }
+    
+    public static ByteBuffer loadBuffer( String fName ) throws IOException
+    {
+        ByteBuffer buffer = ByteBuffer.allocate( 16 );
+        
+        buffer.setAutoExpand( true );
+        
+        String dir = System.getProperty( "basedir" );
+        if ( dir == null ) dir = System.getProperty( "user.dir" );
+        
+        File baseDir = new File( dir );
+        File packetDump =
+                new File( baseDir, "src/test/resources/rtspproxy/rdt/" + fName );
+        
+        buffer = ByteBuffer.allocate( 32 );
+        buffer.setAutoExpand( true );
+        
+        LineNumberReader lnr =
+                new LineNumberReader( new InputStreamReader(
+                        new FileInputStream( packetDump ) ) );
+        String line;
+        
+        while ( (line = lnr.readLine()) != null )
+        {
+            int pos = 0;
+            int nibblePos = 0;
+            byte b = 0;
+            
+            for ( pos = 0; pos < line.length(); ++pos )
+            {
+                char c = line.charAt( pos );
+                if ( !Character.isWhitespace( c ) )
+                {
+                    byte n = 0;
+                    
+                    if ( c >= '0' && c <= '9' )
+                    {
+                        n = (byte) (c - '0');
+                    }
+                    else if ( c >= 'a' && c <= 'f' )
+                    {
+                        n = (byte) (c - 'a' + 10);
+                    }
+                    else if ( c >= 'A' && c <= 'F' )
+                    {
+                        n = (byte) (c - 'A' + 10);
+                    }
+                    else throw new IllegalArgumentException(
+                            "invalid character '" + c + "' in packet dump" );
+                    if ( nibblePos == 0 )
+                    {
+                        b = (byte) (n << 4);
+                        nibblePos++;
+                    }
+                    else
+                    {
+                        b |= n;
+                        nibblePos = 0;
+                        buffer.put( b );
+                    }
+                }
+            }
+        }
+        buffer.limit( buffer.position() );
+        
+        return buffer;
+    }
+    
+    /**
+     * compare two buffers for equality
+     */
+    public static final boolean buffersEqual( ByteBuffer first,
+            ByteBuffer second )
+    {
+        boolean equal = false;
+        
+        /*
+         * System.out.println("first limit=" + first.limit() + ", second limit=" +
+         * second.limit());
+         */
+        if ( first.limit() == second.limit() )
+        {
+            int i;
+            
+            for ( i = 0; i < first.limit(); ++i )
+            {
+                if ( first.get( i ) != second.get( i ) )
+                {
+                    /*
+                     * System.out.println("index " + i + ": expected=" +
+                     * Integer.toHexString(first.get(i)) + ": got=" +
+                     * Integer.toHexString(second.get(i)));
+                     */
+                    break;
+                }
+            }
+            
+            if ( i == first.limit() ) equal = true;
+        }
+        
+        return equal;
+    }
 }

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtAckPacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtAckPacketTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtAckPacketTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -6,26 +6,34 @@
 import java.io.IOException;
 
 import org.apache.mina.common.ByteBuffer;
+import org.testng.annotations.Test;
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
 
-import junit.framework.TestCase;
-
 /**
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
- *
+ * 
  */
-public class RdtAckPacketTest extends TestCase {
-
-	public void testRdtAckPacketLoad() throws IOException {
-		RdtAckPacket packet = (RdtAckPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtAckPacket.txt"));
-		
-		assertEquals(packet.isLengthIncluded(), false);
-		assertEquals(packet.isLostHigh(), false);
-	}
-	
-	public void testRdtAckPacketSave() throws IOException {
-		ByteBuffer buffer = BufferUtils.loadBuffer("RdtAckPacket.txt");
-		RdtAckPacket packet = (RdtAckPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtAckPacket.txt"));
-		
-		assertTrue(BufferUtils.buffersEqual(buffer, packet.toByteBuffer()));
-	}
+public class RdtAckPacketTest
+{
+    
+    @Test()
+    public void testRdtAckPacketLoad() throws IOException
+    {
+        RdtAckPacket packet =
+                (RdtAckPacket) RdtPacketDecoder.decode( BufferUtils.loadBuffer( "RdtAckPacket.txt" ) );
+        
+        assertEquals( packet.isLengthIncluded(), false );
+        assertEquals( packet.isLostHigh(), false );
+    }
+    
+    @Test()
+    public void testRdtAckPacketSave() throws IOException
+    {
+        ByteBuffer buffer = BufferUtils.loadBuffer( "RdtAckPacket.txt" );
+        RdtAckPacket packet =
+                (RdtAckPacket) RdtPacketDecoder.decode( BufferUtils.loadBuffer( "RdtAckPacket.txt" ) );
+        
+        assertTrue( BufferUtils.buffersEqual( buffer, packet.toByteBuffer() ) );
+    }
 }

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtDataPacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtDataPacketTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtDataPacketTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -3,92 +3,116 @@
  */
 package rtspproxy.rdt;
 
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+
 import java.io.IOException;
 
-import junit.framework.TestCase;
-
 import org.apache.mina.common.ByteBuffer;
+import org.testng.annotations.Test;
 
 /**
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
- *
+ * 
  */
-public class RdtDataPacketTest extends TestCase {
-
-	public void testRdtPacketStream0Load() throws IOException {
-		RdtDataPacket packet = (RdtDataPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtDataPacketStream0.txt"));
-		
-		assertEquals(packet.isNeedReliable(), true);
-		assertEquals(packet.getStreamId(), 0);
-		assertEquals(packet.isReliable(), false);
-		assertEquals(packet.getSequence(), 1438);
-		assertEquals(packet.isBackToBack(), false);
-		assertEquals(packet.isSlowData(), false);
-		assertEquals(packet.getAsmRule(), 1);
-		assertEquals(packet.getTimestamp(), 23993);
-		assertEquals(packet.getTotalReliable(), 0);
-	}
-	
-	public void testRdtPacketStream0Save() throws IOException {
-		ByteBuffer origBuffer = BufferUtils.loadBuffer("RdtDataPacketStream0.txt");
-		RdtDataPacket packet = (RdtDataPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtDataPacketStream0.txt"));
-
-		assertTrue(BufferUtils.buffersEqual(origBuffer, packet.toByteBuffer()));
-	}
-
-	public void testRdtPacketStream1Load() throws IOException {
-		RdtDataPacket packet = (RdtDataPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtDataPacketStream1.txt"));
-		
-		assertEquals(packet.isNeedReliable(), true);
-		assertEquals(packet.getStreamId(), 1);
-		assertEquals(packet.isReliable(), false);
-		assertEquals(packet.getSequence(), 3);
-		assertEquals(packet.isBackToBack(), false);
-		assertEquals(packet.isSlowData(), false);
-		assertEquals(packet.getAsmRule(), 1);
-		assertEquals(packet.getTimestamp(), 348);
-		assertEquals(packet.getTotalReliable(), 0);
-	}
-	
-	public void testRdtPacketStream1Save() throws IOException {
-		ByteBuffer origBuffer = BufferUtils.loadBuffer("RdtDataPacketStream1.txt");
-		RdtDataPacket packet = (RdtDataPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtDataPacketStream1.txt"));
-
-		assertTrue(BufferUtils.buffersEqual(origBuffer, packet.toByteBuffer()));
-	}
-
-	public void testRdtPacketBackToBackLoad() throws IOException {
-		RdtDataPacket packet = (RdtDataPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtDataPacketDataPacket.txt"));
-		RdtDataPacket subPacket = (RdtDataPacket)packet.getSubPacket();
-		
-		// packet 0
-		assertEquals(packet.isNeedReliable(), true);
-		assertEquals(packet.getStreamId(), 0);
-		assertEquals(packet.isReliable(), false);
-		assertEquals(packet.getSequence(), 1);
-		assertEquals(packet.isBackToBack(), false);
-		assertEquals(packet.isSlowData(), true);
-		assertEquals(packet.getAsmRule(), 0);
-		assertEquals(packet.getTimestamp(), 0);
-		assertEquals(packet.getTotalReliable(), 0);
-		assertEquals(packet.getPayload().length, 145);
-		
-		assertEquals(subPacket.isNeedReliable(), true);
-		assertEquals(subPacket.getStreamId(), 0);
-		assertEquals(subPacket.isReliable(), false);
-		assertEquals(subPacket.getSequence(), 2);
-		assertEquals(subPacket.isBackToBack(), false);
-		assertEquals(subPacket.isSlowData(), true);
-		assertEquals(subPacket.getAsmRule(), 0);
-		assertEquals(subPacket.getTimestamp(), 266);
-		assertEquals(subPacket.getTotalReliable(), 0);
-		assertEquals(subPacket.getPayload().length, 127);		
-	}
-	
-	public void testRdtPacketBackToBackSave() throws IOException {
-		ByteBuffer origBuffer = BufferUtils.loadBuffer("RdtDataPacketDataPacket.txt");
-		RdtDataPacket packet = (RdtDataPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtDataPacketDataPacket.txt"));
-
-		assertTrue(BufferUtils.buffersEqual(origBuffer, packet.toByteBuffer()));
-	}
+public class RdtDataPacketTest
+{
+    
+    @Test()
+    public void testRdtPacketStream0Load() throws IOException
+    {
+        RdtDataPacket packet =
+                (RdtDataPacket) RdtPacketDecoder.decode( BufferUtils.loadBuffer( "RdtDataPacketStream0.txt" ) );
+        
+        assertEquals( packet.isNeedReliable(), true );
+        assertEquals( packet.getStreamId(), 0 );
+        assertEquals( packet.isReliable(), false );
+        assertEquals( packet.getSequence(), 1438 );
+        assertEquals( packet.isBackToBack(), false );
+        assertEquals( packet.isSlowData(), false );
+        assertEquals( packet.getAsmRule(), 1 );
+        assertEquals( packet.getTimestamp(), 23993 );
+        assertEquals( packet.getTotalReliable(), 0 );
+    }
+    
+    @Test()
+    public void testRdtPacketStream0Save() throws IOException
+    {
+        ByteBuffer origBuffer =
+                BufferUtils.loadBuffer( "RdtDataPacketStream0.txt" );
+        RdtDataPacket packet =
+                (RdtDataPacket) RdtPacketDecoder.decode( BufferUtils.loadBuffer( "RdtDataPacketStream0.txt" ) );
+        
+        assertTrue( BufferUtils.buffersEqual( origBuffer, packet.toByteBuffer() ) );
+    }
+    
+    @Test()
+    public void testRdtPacketStream1Load() throws IOException
+    {
+        RdtDataPacket packet =
+                (RdtDataPacket) RdtPacketDecoder.decode( BufferUtils.loadBuffer( "RdtDataPacketStream1.txt" ) );
+        
+        assertEquals( packet.isNeedReliable(), true );
+        assertEquals( packet.getStreamId(), 1 );
+        assertEquals( packet.isReliable(), false );
+        assertEquals( packet.getSequence(), 3 );
+        assertEquals( packet.isBackToBack(), false );
+        assertEquals( packet.isSlowData(), false );
+        assertEquals( packet.getAsmRule(), 1 );
+        assertEquals( packet.getTimestamp(), 348 );
+        assertEquals( packet.getTotalReliable(), 0 );
+    }
+    
+    @Test()
+    public void testRdtPacketStream1Save() throws IOException
+    {
+        ByteBuffer origBuffer =
+                BufferUtils.loadBuffer( "RdtDataPacketStream1.txt" );
+        RdtDataPacket packet =
+                (RdtDataPacket) RdtPacketDecoder.decode( BufferUtils.loadBuffer( "RdtDataPacketStream1.txt" ) );
+        
+        assertTrue( BufferUtils.buffersEqual( origBuffer, packet.toByteBuffer() ) );
+    }
+    
+    @Test()
+    public void testRdtPacketBackToBackLoad() throws IOException
+    {
+        RdtDataPacket packet =
+                (RdtDataPacket) RdtPacketDecoder.decode( BufferUtils.loadBuffer( "RdtDataPacketDataPacket.txt" ) );
+        RdtDataPacket subPacket = (RdtDataPacket) packet.getSubPacket();
+        
+        // packet 0
+        assertEquals( packet.isNeedReliable(), true );
+        assertEquals( packet.getStreamId(), 0 );
+        assertEquals( packet.isReliable(), false );
+        assertEquals( packet.getSequence(), 1 );
+        assertEquals( packet.isBackToBack(), false );
+        assertEquals( packet.isSlowData(), true );
+        assertEquals( packet.getAsmRule(), 0 );
+        assertEquals( packet.getTimestamp(), 0 );
+        assertEquals( packet.getTotalReliable(), 0 );
+        assertEquals( packet.getPayload().length, 145 );
+        
+        assertEquals( subPacket.isNeedReliable(), true );
+        assertEquals( subPacket.getStreamId(), 0 );
+        assertEquals( subPacket.isReliable(), false );
+        assertEquals( subPacket.getSequence(), 2 );
+        assertEquals( subPacket.isBackToBack(), false );
+        assertEquals( subPacket.isSlowData(), true );
+        assertEquals( subPacket.getAsmRule(), 0 );
+        assertEquals( subPacket.getTimestamp(), 266 );
+        assertEquals( subPacket.getTotalReliable(), 0 );
+        assertEquals( subPacket.getPayload().length, 127 );
+    }
+    
+    @Test()
+    public void testRdtPacketBackToBackSave() throws IOException
+    {
+        ByteBuffer origBuffer =
+                BufferUtils.loadBuffer( "RdtDataPacketDataPacket.txt" );
+        RdtDataPacket packet =
+                (RdtDataPacket) RdtPacketDecoder.decode( BufferUtils.loadBuffer( "RdtDataPacketDataPacket.txt" ) );
+        
+        assertTrue( BufferUtils.buffersEqual( origBuffer, packet.toByteBuffer() ) );
+    }
 }

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtLatencyRepostPacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtLatencyRepostPacketTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtLatencyRepostPacketTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -2,28 +2,30 @@
  * 
  */
 package rtspproxy.rdt;
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
 
-
 import java.io.IOException;
 
 import org.apache.mina.common.ByteBuffer;
+import org.testng.annotations.Test;
 
-import junit.framework.TestCase;
-
 /**
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
  *
  */
-public class RdtLatencyRepostPacketTest extends TestCase {
+public class RdtLatencyRepostPacketTest {
 
-	public void testRdtLatencyReportPacketLoad() throws IOException {
+	@Test()
+    public void testRdtLatencyReportPacketLoad() throws IOException {
 		RdtLatencyReportPacket packet = (RdtLatencyReportPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtLatencyReportWithDataPacket.txt"));
 		
 		assertEquals(packet.isLengthIncluded(), true);
 		assertEquals(packet.getServerTimeout(), 0);
 	}
 
-	public void testRdtLatencyReportPacketDataLoad() throws IOException {
+	@Test()
+    public void testRdtLatencyReportPacketDataLoad() throws IOException {
 		RdtLatencyReportPacket packet = (RdtLatencyReportPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtLatencyReportWithDataPacket.txt"));
 		
 		assertEquals(packet.isLengthIncluded(), true);
@@ -42,7 +44,8 @@
 		assertEquals(subPacket.getTotalReliable(), 0);
 	}
 
-	public void testRdtLatencyReportPacketSave() throws IOException {
+	@Test()
+    public void testRdtLatencyReportPacketSave() throws IOException {
 		ByteBuffer buffer = BufferUtils.loadBuffer("RdtLatencyReportWithDataPacket.txt");
 		RdtLatencyReportPacket packet = (RdtLatencyReportPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtLatencyReportWithDataPacket.txt"));
 		

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttRequestPacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttRequestPacketTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttRequestPacketTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -3,26 +3,30 @@
  */
 package rtspproxy.rdt;
 
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+
 import java.io.IOException;
 
 import org.apache.mina.common.ByteBuffer;
+import org.testng.annotations.Test;
 
-import junit.framework.TestCase;
-
 /**
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
  *
  */
-public class RdtRttRequestPacketTest extends TestCase {
+public class RdtRttRequestPacketTest {
 
-	public void testRdtRttRequestPacketLoad() throws IOException {
+	@Test()
+    public void testRdtRttRequestPacketLoad() throws IOException {
 		RdtRttRequestPacket packet = 
 			(RdtRttRequestPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtRttRequestPacket.txt"));
 		
 		assertEquals(packet.isLengthIncluded(), false);
 	}
 
-	public void testRdtRttRequestPacketSave() throws IOException {
+	@Test()
+    public void testRdtRttRequestPacketSave() throws IOException {
 		ByteBuffer buffer = BufferUtils.loadBuffer("RdtRttRequestPacket.txt");
 		RdtRttRequestPacket packet = 
 			(RdtRttRequestPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtRttRequestPacket.txt"));

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttResponsePacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttResponsePacketTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtRttResponsePacketTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -3,20 +3,23 @@
  */
 package rtspproxy.rdt;
 
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+
 import java.io.IOException;
 
 import org.apache.mina.common.ByteBuffer;
+import org.testng.annotations.Test;
 
-import junit.framework.TestCase;
-
 /**
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
  *
  */
-public class RdtRttResponsePacketTest extends TestCase {
+public class RdtRttResponsePacketTest {
 
 
-	public void testRdtRttResponsePacketLoad() throws IOException {
+	@Test()
+    public void testRdtRttResponsePacketLoad() throws IOException {
 		RdtRttResponsePacket packet = (RdtRttResponsePacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtRttResponsePacket.txt"));
 
 		assertEquals(packet.isLengthIncluded(), false);
@@ -24,7 +27,8 @@
 		assertEquals(packet.getRoundtripTimestampMicroseconds(), 101211);
 	}
 	
-	public void testRdtRttResponsePacketSave() throws IOException {
+	@Test()
+    public void testRdtRttResponsePacketSave() throws IOException {
 		ByteBuffer buffer = BufferUtils.loadBuffer("RdtRttResponsePacket.txt");
 		RdtRttResponsePacket packet = (RdtRttResponsePacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtRttResponsePacket.txt"));
 		

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtStreamEndPacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtStreamEndPacketTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rdt/RdtStreamEndPacketTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -3,19 +3,22 @@
  */
 package rtspproxy.rdt;
 
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+
 import java.io.IOException;
 
 import org.apache.mina.common.ByteBuffer;
+import org.testng.annotations.Test;
 
-import junit.framework.TestCase;
-
 /**
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
  *
  */
-public class RdtStreamEndPacketTest extends TestCase {
+public class RdtStreamEndPacketTest {
 
-		public void testRdtStreamEndPacketStream0Load() throws IOException {
+		@Test()
+        public void testRdtStreamEndPacketStream0Load() throws IOException {
 			RdtStreamEndPacket packet = (RdtStreamEndPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtStreamEndPacketStream0.txt"));
 			
 			assertEquals(packet.isNeedReliable(), true);
@@ -27,7 +30,8 @@
 			assertEquals(packet.getTotalReliable(), 0);
 		}
 		
-		public void testRdtStreamEndPacketStream0Save() throws IOException {
+		@Test()
+        public void testRdtStreamEndPacketStream0Save() throws IOException {
 			ByteBuffer buffer = BufferUtils.loadBuffer("RdtStreamEndPacketStream0.txt");
 			RdtStreamEndPacket packet = (RdtStreamEndPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtStreamEndPacketStream0.txt"));
 	
@@ -35,7 +39,8 @@
 		}
 
 
-		public void testRdtStreamEndPacketStream1Load() throws IOException {
+		@Test()
+        public void testRdtStreamEndPacketStream1Load() throws IOException {
 			RdtStreamEndPacket packet = (RdtStreamEndPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtStreamEndPacketStream1.txt"));
 			
 			assertEquals(packet.isNeedReliable(), true);
@@ -47,7 +52,8 @@
 			assertEquals(packet.getTotalReliable(), 0);
 		}
 		
-		public void testRdtStreamEndPacketStream1Save() throws IOException {
+		@Test()
+        public void testRdtStreamEndPacketStream1Save() throws IOException {
 			ByteBuffer buffer = BufferUtils.loadBuffer("RdtStreamEndPacketStream1.txt");
 			RdtStreamEndPacket packet = (RdtStreamEndPacket)RdtPacketDecoder.decode(BufferUtils.loadBuffer("RdtStreamEndPacketStream1.txt"));
 	

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtp/RtpPacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtp/RtpPacketTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtp/RtpPacketTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -18,11 +18,13 @@
 
 package rtspproxy.rtp;
 
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+
 import java.util.Arrays;
 
-import junit.framework.TestCase;
-
 import org.apache.mina.common.ByteBuffer;
+import org.testng.annotations.Test;
 
 import rtspproxy.lib.number.UnsignedByte;
 import rtspproxy.lib.number.UnsignedInt;
@@ -31,13 +33,10 @@
 /**
  * @author mat
  */
-public class RtpPacketTest extends TestCase {
+public class RtpPacketTest {
 
-	public static void main(String[] args) {
-		junit.textui.TestRunner.run(RtpPacketTest.class);
-	}
-
-	public void testRtpPacket() {
+	@Test()
+    public void testRtpPacket() {
 		// Set the values
 		byte version = 2;
 		boolean padding = true;

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtp/rtcp/RtcpPacketTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtp/rtcp/RtcpPacketTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtp/rtcp/RtcpPacketTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -18,30 +18,27 @@
 
 package rtspproxy.rtp.rtcp;
 
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+
 import java.util.Arrays;
 
-import junit.framework.Assert;
-import junit.framework.TestCase;
-
 import org.apache.mina.common.ByteBuffer;
+import org.testng.annotations.Test;
 
 import rtspproxy.lib.number.UnsignedInt;
 
 /**
  * @author mat
  */
-public class RtcpPacketTest extends TestCase
+public class RtcpPacketTest
 {
 
-	public static void main( String[] args )
-	{
-		junit.textui.TestRunner.run( RtcpPacketTest.class );
-	}
-
-	/*
+    /*
 	 * Test method for 'rtspproxy.Config.get(String, String)'
 	 */
-	public void testRtcpPacket()
+	@Test
+    public void rtcpPacket()
 	{
 		/* Construct a new dummy packet */
 		RtcpPacket packet = new RtcpPacket();
@@ -60,14 +57,14 @@
 		/* Recreate a RtcpPacket from buffer */
 		RtcpPacket packet2 = new RtcpPacket( buffer );
 
-		/* Compare the two packets */
-		Assert.assertEquals( packet.version, packet2.version );
-		Assert.assertEquals( packet.padding, packet2.padding );
-		Assert.assertEquals( packet.count, packet2.count );
-		Assert.assertEquals( packet.packetType, packet2.packetType );
-		Assert.assertEquals( packet.length, packet2.length );
-		Assert.assertEquals( packet.ssrc, packet2.ssrc );
-		Assert.assertTrue( Arrays.equals( packet.packetBuffer, packet2.packetBuffer ) );
+        /* Compare the two packets */
+		assertEquals( packet.version, packet2.version );
+		assertEquals( packet.padding, packet2.padding );
+		assertEquals( packet.count, packet2.count );
+		assertEquals( packet.packetType, packet2.packetType );
+		assertEquals( packet.length, packet2.length );
+		assertEquals( packet.ssrc, packet2.ssrc );
+		assertTrue( Arrays.equals( packet.packetBuffer, packet2.packetBuffer ) );
 	}
 
 }

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -18,45 +18,39 @@
 
 package rtspproxy.rtsp;
 
-import junit.framework.TestCase;
+import static org.testng.Assert.assertEquals;
 
+import org.testng.annotations.Test;
+
 /**
  * @author Matteo Merli
  */
-public class RtspTransportListTest extends TestCase
+public class RtspTransportListTest
 {
-
-	public static void main( String[] args )
-	{
-		junit.textui.TestRunner.run( RtspTransportListTest.class );
-	}
-
-	RtspTransportList transportList;
-	String transportTest;
-
-	@Override
-	protected void setUp() throws Exception
-	{
-		transportTest = "x-real-rdt/mcast;client_port=6972;mode=play,"
-				+ "x-real-rdt/udp;client_port=6972;mode=play,"
-				+ "x-pn-tng/udp;client_port=6972;mode=play,"
-				+ "RTP/AVP;unicast;client_port=6972-6973;mode=play,"
-				+ "x-pn-tng/tcp;mode=play," + "x-real-rdt/tcp;mode=play,"
-				+ "RTP/AVP/TCP;unicast;mode=play";
-		transportList = new RtspTransportList( transportTest );
-	}
-
-	public void testToString()
-	{
-		String expected = "x-real-rdt/udp;client_port=6972;mode=\"PLAY\","
-				+ "RTP/AVP/UDP;unicast;client_port=6972-6973;mode=\"PLAY\"";
-		assertEquals( expected, transportList.toString() );
-	}
-
-	public void testCount()
-	{
-		// only a transport type is valid in this test
-		assertEquals( 2, transportList.count() );
-	}
-
+    String transportTest =
+            "x-real-rdt/mcast;client_port=6972;mode=play,"
+                    + "x-real-rdt/udp;client_port=6972;mode=play,"
+                    + "x-pn-tng/udp;client_port=6972;mode=play,"
+                    + "RTP/AVP;unicast;client_port=6972-6973;mode=play,"
+                    + "x-pn-tng/tcp;mode=play," + "x-real-rdt/tcp;mode=play,"
+                    + "RTP/AVP/TCP;unicast;mode=play";
+    
+    RtspTransportList transportList = new RtspTransportList( transportTest );
+    
+    @Test
+    public void ToString()
+    {
+        String expected =
+                "x-real-rdt/udp;client_port=6972;mode=\"PLAY\","
+                        + "RTP/AVP/UDP;unicast;client_port=6972-6973;mode=\"PLAY\"";
+        assertEquals( expected, transportList.toString() );
+    }
+    
+    @Test
+    public void count()
+    {
+        // only a transport type is valid in this test
+        assertEquals( 2, transportList.count() );
+    }
+    
 }

Modified: trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtsp/RtspTransportTest.java
===================================================================
--- trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtsp/RtspTransportTest.java	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/src/test/java/rtspproxy/rtsp/RtspTransportTest.java	2007-05-02 16:31:26 UTC (rev 437)
@@ -18,302 +18,337 @@
 
 package rtspproxy.rtsp;
 
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+
 import java.util.Arrays;
 
-import junit.framework.TestCase;
+import org.testng.annotations.Configuration;
+import org.testng.annotations.Test;
+
 import rtspproxy.rtsp.RtspTransport.DeliveryType;
 
 /**
  * @author Matteo Merli
  */
-public class RtspTransportTest extends TestCase
+public class RtspTransportTest
 {
-
-	public static void main( String[] args )
-	{
-		junit.textui.TestRunner.run( RtspTransportTest.class );
-	}
-
-	String test1 = "x-real-rdt/mcast;client_port=6972;mode=play";
-	String test2 = "x-real-rdt/udp;client_port=6972;mode=play";
-	String test3 = "x-pn-tng/udp;client_port=6972;mode=play";
-	String test4 = "RTP/AVP;unicast;client_port=6972-6973;mode=play";
-	String test5 = "x-pn-tng/tcp;mode=play";
-	String test6 = "x-real-rdt/tcp;mode=play";
-	String test7 = "RTP/AVP/TCP;unicast;mode=play";
+    String test1 = "x-real-rdt/mcast;client_port=6972;mode=play";   
+    String test2 = "x-real-rdt/udp;client_port=6972;mode=play";
+    String test3 = "x-pn-tng/udp;client_port=6972;mode=play";
+    String test4 = "RTP/AVP;unicast;client_port=6972-6973;mode=play";
+    String test5 = "x-pn-tng/tcp;mode=play";
+    String test6 = "x-real-rdt/tcp;mode=play";
+    String test7 = "RTP/AVP/TCP;unicast;mode=play";
     String test8 = "RTP/AVP/TCP;UNICAST;mode=play";
 
-	RtspTransport transport1;
-	RtspTransport transport2;
-	RtspTransport transport3;
-	RtspTransport transport4;
-	RtspTransport transport5;
-	RtspTransport transport6;
-	RtspTransport transport7;
+    RtspTransport transport1;
+    RtspTransport transport2;
+    RtspTransport transport3;
+    RtspTransport transport4;
+    RtspTransport transport5;
+    RtspTransport transport6;
+    RtspTransport transport7;
     RtspTransport transport8;
-
-	@Override
-	protected void setUp() throws Exception
-	{
-		transport1 = new RtspTransport( test1 );
-		transport2 = new RtspTransport( test2 );
-		transport3 = new RtspTransport( test3 );
-		transport4 = new RtspTransport( test4 );
-		transport5 = new RtspTransport( test5 );
-		transport6 = new RtspTransport( test6 );
-		transport7 = new RtspTransport( test7 );
+    
+    @Configuration(beforeTestMethod = true)
+    protected void setUp() throws Exception
+    {
+        transport1 = new RtspTransport( test1 );
+        transport2 = new RtspTransport( test2 );
+        transport3 = new RtspTransport( test3 );
+        transport4 = new RtspTransport( test4 );
+        transport5 = new RtspTransport( test5 );
+        transport6 = new RtspTransport( test6 );
+        transport7 = new RtspTransport( test7 );
         transport8 = new RtspTransport( test8 );
-	}
-
-	public void testIsSupportedByProxy()
-	{
-		assertEquals( false, transport1.isSupportedByProxy() );
-		assertEquals( true, transport2.isSupportedByProxy() );
-		assertEquals( false, transport3.isSupportedByProxy() );
-		assertEquals( true, transport4.isSupportedByProxy() );
-		assertEquals( false, transport5.isSupportedByProxy() );
-		assertEquals( false, transport6.isSupportedByProxy() );
-		assertEquals( false, transport7.isSupportedByProxy() );
+    }
+    
+    @Test()
+    public void isSupportedByProxy()
+    {
+        assertEquals( false, transport1.isSupportedByProxy() );
+        assertEquals( true, transport2.isSupportedByProxy() );
+        assertEquals( false, transport3.isSupportedByProxy() );
+        assertEquals( true, transport4.isSupportedByProxy() );
+        assertEquals( false, transport5.isSupportedByProxy() );
+        assertEquals( false, transport6.isSupportedByProxy() );
+        assertEquals( false, transport7.isSupportedByProxy() );
         assertEquals( false, transport8.isSupportedByProxy() );
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.toString()'
-	 */
-	public void testToString()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.isAppend()'
-	 */
-	public void testIsAppend()
-	{
-		assertEquals( false, transport1.isAppend() );
-		assertEquals( false, transport2.isAppend() );
-		assertEquals( false, transport3.isAppend() );
-		assertEquals( false, transport4.isAppend() );
-		assertEquals( false, transport5.isAppend() );
-		assertEquals( false, transport6.isAppend() );
-		assertEquals( false, transport7.isAppend() );
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.toString()'
+     */
+    @Test()
+    public void testToString()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.isAppend()'
+     */
+    @Test()
+    public void isAppend()
+    {
+        assertEquals( false, transport1.isAppend() );
+        assertEquals( false, transport2.isAppend() );
+        assertEquals( false, transport3.isAppend() );
+        assertEquals( false, transport4.isAppend() );
+        assertEquals( false, transport5.isAppend() );
+        assertEquals( false, transport6.isAppend() );
+        assertEquals( false, transport7.isAppend() );
         assertEquals( false, transport8.isAppend() );
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.getClientPort()'
-	 */
-	public void testGetClientPort()
-	{
-		assertTrue( Arrays.equals( new int[] { 6972, 0 }, transport1.getClientPort() ) );
-		assertTrue( Arrays.equals( new int[] { 6972, 0 }, transport2.getClientPort() ) );
-		assertTrue( Arrays.equals( new int[] { 6972, 0 }, transport3.getClientPort() ) );
-		assertTrue( Arrays.equals( new int[] { 6972, 6973 }, transport4.getClientPort() ) );
-		assertTrue( Arrays.equals( new int[] { 0, 0 }, transport5.getClientPort() ) );
-		assertTrue( Arrays.equals( new int[] { 0, 0 }, transport6.getClientPort() ) );
-		assertTrue( Arrays.equals( new int[] { 0, 0 }, transport7.getClientPort() ) );
-        assertTrue( Arrays.equals( new int[] { 0, 0 }, transport8.getClientPort() ) );
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.getDeliveryType()'
-	 */
-	public void testGetDeliveryType()
-	{
-		assertEquals( DeliveryType.unicast, transport1.getDeliveryType() );
-		assertEquals( DeliveryType.unicast, transport2.getDeliveryType() );
-		assertEquals( DeliveryType.None, transport3.getDeliveryType() );
-		assertEquals( DeliveryType.unicast, transport4.getDeliveryType() );
-		assertEquals( DeliveryType.None, transport5.getDeliveryType() );
-		assertEquals( DeliveryType.unicast, transport6.getDeliveryType() );
-		assertEquals( DeliveryType.unicast, transport7.getDeliveryType() );
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.getClientPort()'
+     */
+    @Test()
+    public void testGetClientPort()
+    {
+        assertTrue( Arrays.equals( new int[] { 6972, 0 },
+                                   transport1.getClientPort() ) );
+        assertTrue( Arrays.equals( new int[] { 6972, 0 },
+                                   transport2.getClientPort() ) );
+        assertTrue( Arrays.equals( new int[] { 6972, 0 },
+                                   transport3.getClientPort() ) );
+        assertTrue( Arrays.equals( new int[] { 6972, 6973 },
+                                   transport4.getClientPort() ) );
+        assertTrue( Arrays.equals( new int[] { 0, 0 },
+                                   transport5.getClientPort() ) );
+        assertTrue( Arrays.equals( new int[] { 0, 0 },
+                                   transport6.getClientPort() ) );
+        assertTrue( Arrays.equals( new int[] { 0, 0 },
+                                   transport7.getClientPort() ) );
+        assertTrue( Arrays.equals( new int[] { 0, 0 },
+                                   transport8.getClientPort() ) );
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.getDeliveryType()'
+     */
+    @Test()
+    public void testGetDeliveryType()
+    {
+        assertEquals( DeliveryType.unicast, transport1.getDeliveryType() );
+        assertEquals( DeliveryType.unicast, transport2.getDeliveryType() );
+        assertEquals( DeliveryType.None, transport3.getDeliveryType() );
+        assertEquals( DeliveryType.unicast, transport4.getDeliveryType() );
+        assertEquals( DeliveryType.None, transport5.getDeliveryType() );
+        assertEquals( DeliveryType.unicast, transport6.getDeliveryType() );
+        assertEquals( DeliveryType.unicast, transport7.getDeliveryType() );
         assertEquals( DeliveryType.unicast, transport8.getDeliveryType() );
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.getInterleaved()'
-	 */
-	public void testGetInterleaved()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.setInterleaved(String)'
-	 */
-	public void testSetInterleaved()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.getLayers()'
-	 */
-	public void testGetLayers()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.setLayers(int)'
-	 */
-	public void testSetLayers()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.getLowerTransport()'
-	 */
-	public void testGetLowerTransport()
-	{
-
-	}
-
-	/*
-	 * Test method for
-	 * 'rtspproxy.rtsp.RtspTransport.setLowerTransport(LowerTransport)'
-	 */
-	public void testSetLowerTransport()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.getMode()'
-	 */
-	public void testGetMode()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.setMode(String)'
-	 */
-	public void testSetMode()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.getPort()'
-	 */
-	public void testGetPort()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.setPort(int[])'
-	 */
-	public void testSetPort()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.getProfile()'
-	 */
-	public void testGetProfile()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.setProfile(Profile)'
-	 */
-	public void testSetProfile()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.getServerPort()'
-	 */
-	public void testGetServerPort()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.setServerPort(int[])'
-	 */
-	public void testSetServerPort()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.getSSRC()'
-	 */
-	public void testGetSSRC()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.setSSRC(String)'
-	 */
-	public void testSetSSRCString()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.setSSRC(long)'
-	 */
-	public void testSetSSRCLong()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.getTransportProtocol()'
-	 */
-	public void testGetTransportProtocol()
-	{
-
-	}
-
-	/*
-	 * Test method for
-	 * 'rtspproxy.rtsp.RtspTransport.setTransportProtocol(TransportProtocol)'
-	 */
-	public void testSetTransportProtocol()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.getTTL()'
-	 */
-	public void testGetTTL()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.setTTL(int)'
-	 */
-	public void testSetTTL()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.setSource(String)'
-	 */
-	public void testSetSource()
-	{
-
-	}
-
-	/*
-	 * Test method for 'rtspproxy.rtsp.RtspTransport.getSource()'
-	 */
-	public void testGetSource()
-	{
-
-	}
-
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.getInterleaved()'
+     */
+    @Test()
+    public void testGetInterleaved()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.setInterleaved(String)'
+     */
+    @Test()
+    public void testSetInterleaved()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.getLayers()'
+     */
+    @Test()
+    public void testGetLayers()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.setLayers(int)'
+     */
+    @Test()
+    public void testSetLayers()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.getLowerTransport()'
+     */
+    @Test()
+    public void testGetLowerTransport()
+    {
+        
+    }
+    
+    /*
+     * Test method for
+     * 'rtspproxy.rtsp.RtspTransport.setLowerTransport(LowerTransport)'
+     */
+    @Test()
+    public void testSetLowerTransport()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.getMode()'
+     */
+    @Test()
+    public void testGetMode()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.setMode(String)'
+     */
+    @Test()
+    public void testSetMode()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.getPort()'
+     */
+    @Test()
+    public void testGetPort()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.setPort(int[])'
+     */
+    @Test()
+    public void testSetPort()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.getProfile()'
+     */
+    @Test()
+    public void testGetProfile()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.setProfile(Profile)'
+     */
+    @Test()
+    public void testSetProfile()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.getServerPort()'
+     */
+    @Test()
+    public void testGetServerPort()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.setServerPort(int[])'
+     */
+    @Test()
+    public void testSetServerPort()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.getSSRC()'
+     */
+    @Test()
+    public void testGetSSRC()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.setSSRC(String)'
+     */
+    @Test()
+    public void testSetSSRCString()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.setSSRC(long)'
+     */
+    @Test()
+    public void testSetSSRCLong()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.getTransportProtocol()'
+     */
+    @Test()
+    public void testGetTransportProtocol()
+    {
+        
+    }
+    
+    /*
+     * Test method for
+     * 'rtspproxy.rtsp.RtspTransport.setTransportProtocol(TransportProtocol)'
+     */
+    @Test()
+    public void testSetTransportProtocol()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.getTTL()'
+     */
+    @Test()
+    public void testGetTTL()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.setTTL(int)'
+     */
+    @Test()
+    public void testSetTTL()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.setSource(String)'
+     */
+    @Test()
+    public void testSetSource()
+    {
+        
+    }
+    
+    /*
+     * Test method for 'rtspproxy.rtsp.RtspTransport.getSource()'
+     */
+    @Test()
+    public void testGetSource()
+    {
+        
+    }
+    
 }

Added: trunk/RTSPProxy-Core/testng.xml
===================================================================
--- trunk/RTSPProxy-Core/testng.xml	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/RTSPProxy-Core/testng.xml	2007-05-02 16:31:26 UTC (rev 437)
@@ -0,0 +1,9 @@
+<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >
+
+<suite name="RtspProxy-Core Tests" verbose="1">
+	<test name="ciao">
+		<packages>
+			<package name="rtspproxy.*" />
+		</packages>
+	</test>
+</suite>
\ No newline at end of file


Property changes on: trunk/RTSPProxy-Core/testng.xml
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev


Property changes on: trunk/RTSPProxy-OSGi
___________________________________________________________________
Name: svn:ignore
   - 
target

   + target
pom.properties


Added: trunk/generateEclipseProjects.sh
===================================================================
--- trunk/generateEclipseProjects.sh	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/generateEclipseProjects.sh	2007-05-02 16:31:26 UTC (rev 437)
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+mvn -Dwtpversion=1.5 eclipse:eclipse


Property changes on: trunk/generateEclipseProjects.sh
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:keywords
   + Id URL Rev

Modified: trunk/pom.xml
===================================================================
--- trunk/pom.xml	2006-10-12 19:26:48 UTC (rev 436)
+++ trunk/pom.xml	2007-05-02 16:31:26 UTC (rev 437)
@@ -1,331 +1,326 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project xsi:noNamespaceSchemaLocation="http://maven.apache.org/maven-v4_0_0.xsd">
-  
-  <!-- 
-  $Id$
-  $URL$
-  -->
-  
-  <modelVersion>4.0.0</modelVersion>
-  
-  <name>RTSP Proxy</name>
-  <groupId>net.merlimat</groupId>
-  <artifactId>rtspproxy</artifactId>
-  <packaging>pom</packaging>
-  <version>3.0-ALPHA5-SNAPSHOT</version>
-  <url>http://rtspproxy.berlios.de</url>
-  <inceptionYear>2003</inceptionYear>
-  
-  <organization>
-    <name>Matteo Merli</name>
-    <url>http://merlimat.net</url>
-  </organization>
-  
-  <issueManagement>
-    <system>Berlios</system>
-    <url>http://developer.berlios.de/bugs/?group_id=4526</url>
-  </issueManagement>
-  
-  <licenses>
-    <license>
-      <name>GNU General Public License</name>
-      <url>LICENSE.txt</url>
-    </license>
-  </licenses>
 
-  <developers>
-    <developer>
-      <id>merlimat</id>
-      <name>Matteo Merli</name>
-      <email>matteo.merli at gmail.com</email>
-      <!-- <timezone>+1</timezone> -->
-      <url>http://merlimat.net/about</url>
-    </developer>
-    <developer>
-      <id>rbieniek</id>
-      <name>Rainer Bieniek</name>
-      <email>Rainer.Bieniek at vodafone.com</email>
-      <!-- <timezone>+1</timezone> -->
-      <!-- <url>http://merlimat.net/about</url> -->
-    </developer>
-  </developers>
-  
-  <scm>
-    <connection>
-      scm:svn:http://svn.berlios.de/svnroot/repos/rtspproxy/trunk
-    </connection>
-    <developerConnection>
-      scm:svn:https://svn.berlios.de/svnroot/repos/rtspproxy/trunk
-    </developerConnection>
-    <url>http://svn.berlios.de/wsvn/rtspproxy/</url>
-  </scm>
-  
-  <mailingLists>
-    <mailingList>
-      <name>Development list</name>
-      <post>rtspproxy-devel at lists.berlios.de</post>
-      
-      <archive>
-	http://www.nabble.com/RtspProxy-Devel-f6753.html
-      </archive>
-      <subscribe>
-	https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
-      </subscribe>
-      <unsubscribe>
-	https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
-      </unsubscribe>
-    </mailingList>
-  </mailingLists>
-  
-  <distributionManagement>
-    <downloadUrl>
-      http://rtspproxy.berlios.de/download.html
-    </downloadUrl>
-    <site>
-      <id>rtspproxy.website</id>
-      <name>Default Site</name>
-      <url>
-	scp://shell.berlios.de/home/groups/rtspproxy/htdocs
-      </url>
-    </site>
-  </distributionManagement>
+	<!-- 
+		$Id$
+		$URL$
+	-->
 
-  <modules>
-    <module>RTSPProxy-Core</module>
-    <module>RTSPProxy-App</module>
-    <module>RTSPProxy-OSGi</module>
-    <module>JainSDP</module>
-  </modules>
+	<modelVersion>4.0.0</modelVersion>
 
+	<name>RTSP Proxy</name>
+	<groupId>net.merlimat</groupId>
+	<artifactId>rtspproxy</artifactId>
+	<packaging>pom</packaging>
+	<version>3.0-ALPHA5-SNAPSHOT</version>
+	<url>http://rtspproxy.berlios.de</url>
+	<inceptionYear>2003</inceptionYear>
 
-<dependencies>
-	<dependency>
-		<groupId>org.apache.directory.mina</groupId>
-		<artifactId>mina-core</artifactId>
-		<version>0.9.3</version>
-	</dependency>
+	<organization>
+		<name>Matteo Merli</name>
+		<url>http://merlimat.net</url>
+	</organization>
 
-	<dependency>
-		<groupId>mx4j</groupId>
-		<artifactId>mx4j-tools</artifactId>
-		<version>2.1.1</version>
-	</dependency>
+	<issueManagement>
+		<system>Berlios</system>
+		<url>http://developer.berlios.de/bugs/?group_id=4526</url>
+	</issueManagement>
 
-	<dependency>
-		<groupId>org.slf4j</groupId>
-		<artifactId>slf4j-log4j12</artifactId>
-		<version>1.0</version>
-	</dependency>
+	<licenses>
+		<license>
+			<name>GNU General Public License</name>
+			<url>LICENSE.txt</url>
+		</license>
+	</licenses>
 
-	<dependency>
-		<groupId>log4j</groupId>
-		<artifactId>log4j</artifactId>
-		<version>1.2.13</version>
-	</dependency>
+	<developers>
+		<developer>
+			<id>merlimat</id>
+			<name>Matteo Merli</name>
+			<email>matteo.merli at gmail.com</email>
+			<!-- <timezone>+1</timezone> -->
+			<url>http://merlimat.net/about</url>
+		</developer>
+		<developer>
+			<id>rbieniek</id>
+			<name>Rainer Bieniek</name>
+			<email>Rainer.Bieniek at vodafone.com</email>
+			<!-- <timezone>+1</timezone> -->
+		</developer>
+	</developers>
 
-	<dependency>
-		<groupId>commons-pool</groupId>
-		<artifactId>commons-pool</artifactId>
-		<version>1.3</version>
-	</dependency>
+	<scm>
+		<connection>
+			scm:svn:http://svn.berlios.de/svnroot/repos/rtspproxy/trunk
+		</connection>
+		<developerConnection>
+			scm:svn:https://svn.berlios.de/svnroot/repos/rtspproxy/trunk
+		</developerConnection>
+		<url>http://svn.berlios.de/wsvn/rtspproxy/</url>
+	</scm>
 
-	<dependency>
-		<groupId>commons-configuration</groupId>
-		<artifactId>commons-configuration</artifactId>
-		<version>1.2</version>
-	</dependency>
-	
-	<!-- Included here to disambiguate the version number -->
-	<dependency>
-		<groupId>commons-collections</groupId>
-		<artifactId>commons-collections</artifactId>
-		<version>3.1</version>
-	</dependency>
+	<mailingLists>
+		<mailingList>
+			<name>Development list</name>
+			<post>rtspproxy-devel at lists.berlios.de</post>
 
-	<dependency>
-		<groupId>junit</groupId>
-		<artifactId>junit</artifactId>
-		<version>3.8.1</version>
-		<scope>test</scope>
-	</dependency>
+			<archive>http://www.nabble.com/RtspProxy-Devel-f6753.html</archive>
+			<subscribe>
+				https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
+			</subscribe>
+			<unsubscribe>
+				https://lists.berlios.de/mailman/listinfo/rtspproxy-devel
+			</unsubscribe>
+		</mailingList>
+	</mailingLists>
 
-	<!-- These are dependencies inherited which are not really
-	     necessaries, so we prevent them from being included
-	     in the final binary package.
-	  -->
-	<dependency>
-		<groupId>xalan</groupId>
-		<artifactId>xalan</artifactId>
-		<version>2.7.0</version>
-		<scope>provided</scope>
-	</dependency>
-	
-	<dependency>
-		<groupId>xerces</groupId>
-		<artifactId>xercesImpl</artifactId>
-		<version>2.2.1</version>
-		<scope>provided</scope>
-	</dependency>
-	<dependency>
-		<groupId>xml-apis</groupId>
-		<artifactId>xml-apis</artifactId>
-		<version>1.0.b2</version>
-		<scope>provided</scope>
-	</dependency>
-        <dependency>
-		<groupId>dom4j</groupId>
-		<artifactId>dom4j</artifactId>
-		<version>1.4</version>
-		<scope>provided</scope>
-	</dependency>
-	<dependency>
-		<groupId>msv</groupId>
-		<artifactId>msv</artifactId>
-		<version>20020414</version>
-		<scope>provided</scope>
-	</dependency>
-	<dependency>
-		<groupId>javax.servlet</groupId>
-		<artifactId>servlet-api</artifactId>
-		<version>2.3</version>
-		<scope>provided</scope>
-	</dependency>
-	<dependency>
-		<groupId>jaxen</groupId>
-		<artifactId>jaxen</artifactId>
-		<version>1.0-FCS</version>
-		<scope>provided</scope>
-	</dependency>
-</dependencies>
-    
-  <build>
-    <defaultGoal>package</defaultGoal>
-    
-    <resources>
-      <resource>
-	<directory>src/main/resources</directory>
-	<filtering>true</filtering>
-      </resource>
-    </resources>
-    
-    <plugins>
-		<plugin>
-			<groupId>org.apache.maven.plugins</groupId>
-			<artifactId>maven-compiler-plugin</artifactId>
-			<configuration>
-				<source>1.5</source>
-				<target>1.5</target>
-				<optimize>true</optimize>
-				<debug>true</debug>
-				<showWarnings>true</showWarnings>
-				<showDeprecations>true</showDeprecations>
-			</configuration>
-		</plugin>
-	
-<!--
-      <plugin>
-	<groupId>org.apache.maven.plugins</groupId>
-	<artifactId>maven-assembly-plugin</artifactId>
-	<configuration>
-	  <descriptor>
-	    src/resources/release/default.xml
-	  </descriptor>
-	</configuration>
-      </plugin>
--->
-      <plugin>
-	<groupId>org.apache.maven.plugins</groupId>
-	<artifactId>maven-site-plugin</artifactId>
-	<configuration>
-          <addModules>true</addModules>
-	  <outputEncoding>UTF-8</outputEncoding>
-	</configuration>
-	<!--  <version>2.0-beta-2</version> -->
-      </plugin>
-      <plugin>
-	<groupId>org.apache.maven.plugins</groupId>
-	<artifactId>maven-pmd-plugin</artifactId>
-	<configuration>
-	  <targetJdk implementation="java.lang.String">
-	    1.5
-	  </targetJdk>
-	</configuration>
-      </plugin>
-    </plugins>
-  </build>
-  
-  <reporting>
-    <plugins>
-      <plugin>
-	<groupId>org.apache.maven.plugins</groupId>
-	<artifactId>
-	  maven-project-info-reports-plugin
-	</artifactId>
-      </plugin>
-      <plugin>
-	<groupId>org.codehaus.mojo</groupId>
-	<artifactId>changelog-maven-plugin</artifactId>
-      </plugin>
-      <plugin>
-	<groupId>org.codehaus.mojo</groupId>
-	<artifactId>surefire-report-maven-plugin</artifactId>
-      </plugin>
-      <plugin>
-	<groupId>org.codehaus.mojo</groupId>
-	<artifactId>changes-maven-plugin</artifactId>
-      </plugin>
-      <plugin>
-	<groupId>org.codehaus.mojo</groupId>
-	<artifactId>taglist-maven-plugin</artifactId>
-      </plugin>
-      <!-- 
-      <plugin>
-      <groupId>org.apache.maven.plugins</groupId>
-      <artifactId>maven-javadoc-plugin</artifactId>
-      <configuration>
-      <charset>UTF-8</charset>
-      <docencoding>UTF-8</docencoding>
-      <link>
-      http://java.sun.com/j2se/1.5.0/docs/api/,
-      http://www.junit.org/junit/javadoc/3.8.1/,
-      http://directory.apache.org/subprojects/network/apidocs/
-    </link>
-    </configuration>
-    </plugin>
-      -->
-      <!-- 
-      <plugin>
-      <groupId>org.apache.maven.plugins</groupId>
-      <artifactId>maven-pmd-plugin</artifactId>
-      <configuration>
-      <targetJdk implementation="java.lang.String">1.5</targetJdk>
-    </configuration>
-    </plugin>
-      -->
-    </plugins>
-  </reporting>
+	<distributionManagement>
+		<downloadUrl>http://rtspproxy.berlios.de/download.html</downloadUrl>
+		<site>
+			<id>rtspproxy.website</id>
+			<name>Default Site</name>
+			<url>scp://shell.berlios.de/home/groups/rtspproxy/htdocs</url>
+		</site>
+	</distributionManagement>
 
-	<repositories>
+	<modules>
+		<module>RTSPProxy-Core</module>
+		<module>RTSPProxy-App</module>
+		<module>RTSPProxy-OSGi</module>
+		<module>JainSDP</module>
+	</modules>
 
-		<repository>
-			<id>Apache repository</id>
-			<url>http://svn.apache.org/repository/</url>
-		</repository>
 
-		<!-- For snapshots (no release jars or non-apache jars)           -->
-		<repository>
-			<id>apache.snapshots</id>
-			<name>Apache Snapshot Repository</name>
-			<url>http://cvs.apache.org/maven-snapshot-repository</url>
-		</repository>
+	<dependencies>
+		<dependency>
+			<groupId>org.apache.mina</groupId>
+			<artifactId>mina-core</artifactId>
+			<version>1.1.0</version>
+		</dependency>
 
-		<!--
-			<repository>
-			<id>ibilio maven2</id>
-			<url>http://www.ibiblio.org/maven2/</url>
-			</repository>
+		<dependency>
+			<groupId>com.google.code.guice</groupId>
+			<artifactId>guice</artifactId>
+			<version>1.0</version>
+		</dependency>
+
+		<dependency>
+			<groupId>mx4j</groupId>
+			<artifactId>mx4j-tools</artifactId>
+			<version>2.1.1</version>
+		</dependency>
+
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-api</artifactId>
+			<version>1.3.1</version>
+		</dependency>
+
+		<dependency>
+			<groupId>commons-pool</groupId>
+			<artifactId>commons-pool</artifactId>
+			<version>1.3</version>
+		</dependency>
+
+		<dependency>
+			<groupId>commons-configuration</groupId>
+			<artifactId>commons-configuration</artifactId>
+			<version>1.2</version>
+		</dependency>
+
+		<!-- Included here to disambiguate the version number -->
+		<dependency>
+			<groupId>commons-collections</groupId>
+			<artifactId>commons-collections</artifactId>
+			<version>3.1</version>
+		</dependency>
+
+		<dependency>
+			<groupId>org.testng</groupId>
+			<artifactId>testng</artifactId>
+			<version>4.7</version>
+			<classifier>jdk15</classifier>
+			<scope>test</scope>
+		</dependency>
+
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-simple</artifactId>
+			<version>1.3.1</version>
+			<scope>test</scope>
+		</dependency>
+
+		<!-- These are dependencies inherited which are not really
+			necessaries, so we prevent them from being included
+			in the final binary package.
 		-->
-	</repositories>
+		<dependency>
+			<groupId>xalan</groupId>
+			<artifactId>xalan</artifactId>
+			<version>2.7.0</version>
+			<scope>provided</scope>
+		</dependency>
 
-  
+		<dependency>
+			<groupId>xerces</groupId>
+			<artifactId>xercesImpl</artifactId>
+			<version>2.2.1</version>
+			<scope>provided</scope>
+		</dependency>
+		<dependency>
+			<groupId>xml-apis</groupId>
+			<artifactId>xml-apis</artifactId>
+			<version>1.0.b2</version>
+			<scope>provided</scope>
+		</dependency>
+		<dependency>
+			<groupId>dom4j</groupId>
+			<artifactId>dom4j</artifactId>
+			<version>1.4</version>
+			<scope>provided</scope>
+		</dependency>
+		<dependency>
+			<groupId>msv</groupId>
+			<artifactId>msv</artifactId>
+			<version>20020414</version>
+			<scope>provided</scope>
+		</dependency>
+		<dependency>
+			<groupId>javax.servlet</groupId>
+			<artifactId>servlet-api</artifactId>
+			<version>2.3</version>
+			<scope>provided</scope>
+		</dependency>
+		<dependency>
+			<groupId>jaxen</groupId>
+			<artifactId>jaxen</artifactId>
+			<version>1.0-FCS</version>
+			<scope>provided</scope>
+		</dependency>
+	</dependencies>
+
+	<build>
+		<defaultGoal>package</defaultGoal>
+
+		<resources>
+			<resource>
+				<directory>src/main/resources</directory>
+				<filtering>true</filtering>
+			</resource>
+		</resources>
+
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-compiler-plugin</artifactId>
+				<configuration>
+					<source>1.5</source>
+					<target>1.5</target>
+					<optimize>true</optimize>
+					<debug>true</debug>
+					<showWarnings>true</showWarnings>
+					<showDeprecations>true</showDeprecations>
+				</configuration>
+			</plugin>
+
+			<!--
+				<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-assembly-plugin</artifactId>
+				<configuration>
+				<descriptor>
+				src/resources/release/default.xml
+				</descriptor>
+				</configuration>
+				</plugin>
+			-->
+			<plugin>
+				<artifactId>maven-surefire-plugin</artifactId>
+				<version>2.4-SNAPSHOT</version>
+				<configuration>
+					<parallel>true</parallel>
+					<threadCount>10</threadCount>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-site-plugin</artifactId>
+				<configuration>
+					<addModules>false</addModules>
+					<outputEncoding>UTF-8</outputEncoding>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-pmd-plugin</artifactId>
+				<configuration>
+					<targetJdk implementation="java.lang.String">1.5</targetJdk>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-eclipse-plugin</artifactId>
+			</plugin>
+		</plugins>
+	</build>
+
+	<reporting>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-project-info-reports-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>changelog-maven-plugin</artifactId>
+				<configuration>
+					<basedir>${basedir}</basedir>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>surefire-report-maven-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>changes-maven-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>taglist-maven-plugin</artifactId>
+			</plugin>
+			<!-- 
+				<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-javadoc-plugin</artifactId>
+				<configuration>
+				<charset>UTF-8</charset>
+				<docencoding>UTF-8</docencoding>
+				<link>
+				http://java.sun.com/j2se/1.5.0/docs/api/,
+				http://www.junit.org/junit/javadoc/3.8.1/,
+				http://directory.apache.org/subprojects/network/apidocs/
+				</link>
+				</configuration>
+				</plugin>
+			-->
+			<!-- 
+				<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-pmd-plugin</artifactId>
+				<configuration>
+				<targetJdk implementation="java.lang.String">1.5</targetJdk>
+				</configuration>
+				</plugin>
+			-->
+		</plugins>
+	</reporting>
+
+	<pluginRepositories>
+		<pluginRepository>
+			<id>apache.snapshots</id>
+			<url>http://people.apache.org/repo/m2-snapshot-repository/</url>
+		</pluginRepository>
+	</pluginRepositories>
+
 </project>



