From merlimat at berlios.de  Sun Dec  4 15:48:28 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Sun, 4 Dec 2005 15:48:28 +0100
Subject: [Rtspproxy-devel] r315 - trunk/src/main/java/rtspproxy/lib/number
Message-ID: <200512041448.jB4EmSZt005870@sheep.berlios.de>

Author: merlimat
Date: 2005-12-04 15:48:24 +0100 (Sun, 04 Dec 2005)
New Revision: 315

Modified:
   trunk/src/main/java/rtspproxy/lib/number/UnsignedByte.java
Log:
Implemented hashCode() method for all UnsignedNumbers types.

Modified: trunk/src/main/java/rtspproxy/lib/number/UnsignedByte.java
===================================================================
--- trunk/src/main/java/rtspproxy/lib/number/UnsignedByte.java	2005-12-04 13:56:30 UTC (rev 314)
+++ trunk/src/main/java/rtspproxy/lib/number/UnsignedByte.java	2005-12-04 14:48:24 UTC (rev 315)
@@ -118,6 +118,11 @@
 	public boolean equals(Object other) {
 		return value == ((Number)other).shortValue();
 	}
+	
+	@Override
+	public int hashCode() { 
+		return (int)value;
+	}
 
 	@Override
 	public String toString() {



From merlimat at berlios.de  Sun Dec  4 15:48:56 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Sun, 4 Dec 2005 15:48:56 +0100
Subject: [Rtspproxy-devel] r316 - trunk/src/main/java/rtspproxy/lib/number
Message-ID: <200512041448.jB4Emuoh007228@sheep.berlios.de>

Author: merlimat
Date: 2005-12-04 15:48:53 +0100 (Sun, 04 Dec 2005)
New Revision: 316

Modified:
   trunk/src/main/java/rtspproxy/lib/number/UnsignedLong.java
   trunk/src/main/java/rtspproxy/lib/number/UnsignedNumber.java
   trunk/src/main/java/rtspproxy/lib/number/UnsignedShort.java
Log:
Implemented hashCode() method for all UnsignedNumbers types.

Modified: trunk/src/main/java/rtspproxy/lib/number/UnsignedLong.java
===================================================================
--- trunk/src/main/java/rtspproxy/lib/number/UnsignedLong.java	2005-12-04 14:48:24 UTC (rev 315)
+++ trunk/src/main/java/rtspproxy/lib/number/UnsignedLong.java	2005-12-04 14:48:53 UTC (rev 316)
@@ -188,7 +188,17 @@
 		else
 			return false;
 	}
+	
+	@Override
+	public int hashCode() {
+		int hashCode = 0;
 
+		for (int i=0; i<value.length; i++)
+		    hashCode = (int)(31*hashCode + (value[i] & 0xFFFFFFFFL));
+		
+		return hashCode;
+	}
+
 	@Override
 	public void shiftRight(int nBits) {
 		if (nBits > 64 || nBits < 0)

Modified: trunk/src/main/java/rtspproxy/lib/number/UnsignedNumber.java
===================================================================
--- trunk/src/main/java/rtspproxy/lib/number/UnsignedNumber.java	2005-12-04 14:48:24 UTC (rev 315)
+++ trunk/src/main/java/rtspproxy/lib/number/UnsignedNumber.java	2005-12-04 14:48:53 UTC (rev 316)
@@ -50,6 +50,8 @@
 	public abstract int compareTo(UnsignedNumber other);
 
 	public abstract boolean equals(Object other);
+	
+	public abstract int hashCode();
 
 	public String toHexString() {
 		return toHexString(false);

Modified: trunk/src/main/java/rtspproxy/lib/number/UnsignedShort.java
===================================================================
--- trunk/src/main/java/rtspproxy/lib/number/UnsignedShort.java	2005-12-04 14:48:24 UTC (rev 315)
+++ trunk/src/main/java/rtspproxy/lib/number/UnsignedShort.java	2005-12-04 14:48:53 UTC (rev 316)
@@ -121,6 +121,11 @@
 			return false;
 		return value == ((Number) other).intValue();
 	}
+	
+	@Override
+	public int hashCode() {
+		return (int)value;
+	}
 
 	@Override
 	public String toString() {



From merlimat at berlios.de  Mon Dec  5 00:45:03 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Mon, 5 Dec 2005 00:45:03 +0100
Subject: [Rtspproxy-devel] r317 - trunk/src/main/java/rtspproxy/proxy
Message-ID: <200512042345.jB4Nj3uh000733@sheep.berlios.de>

Author: merlimat
Date: 2005-12-05 00:45:01 +0100 (Mon, 05 Dec 2005)
New Revision: 317

Modified:
   trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/src/main/java/rtspproxy/proxy/ProxySession.java
   trunk/src/main/java/rtspproxy/proxy/Track.java
Log:
* Partially resolved the problems with maps not cleared (bug #5778)
* Refactored code
* Using ConcurrentHashMap instead of synchronized maps
* Documented most methods

Modified: trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java	2005-12-04 14:48:53 UTC (rev 316)
+++ trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java	2005-12-04 23:45:01 UTC (rev 317)
@@ -91,7 +91,7 @@
 					log.error( e );
 					// closeAll();
 				} finally {
-					if ( serverSession == null ) 
+					if ( serverSession == null )
 						return;
 				}
 			}
@@ -231,12 +231,13 @@
 	 */
 	public void passSetupResponseToClient( RtspResponse response )
 	{
-		// If there isn't yet an rtspSession, create a new one
+		// If there isn't yet a proxySession, create a new one
 		ProxySession proxySession = ProxySession.getByServerSessionID( response.getHeader( "Session" ) );
 		if ( proxySession == null ) {
 			proxySession = (ProxySession) clientSession.getAttribute( "proxySession" );
 			if ( proxySession == null ) {
 				proxySession = new ProxySession();
+				clientSession.setAttribute( "proxySession", proxySession );
 			}
 		}
 
@@ -338,7 +339,8 @@
 			 * for a long time. Check how to do it in asyncronous way.
 			 */
 			ConnectFuture future = connector.connect(
-					new InetSocketAddress( host, port ), new ServerSide(), new RtspServerFilters() );
+					new InetSocketAddress( host, port ), new ServerSide(),
+					new RtspServerFilters() );
 			future.join();
 			serverSession = future.getSession();
 
@@ -366,6 +368,13 @@
 			clientSession.close();
 		if ( serverSession != null && serverSession.isConnected() )
 			serverSession.close();
+
+		// Remove ProxySession and Track instances
+		if ( clientSession != null ) {
+			ProxySession proxySession = (ProxySession) clientSession.getAttribute( "proxySession" );
+			if ( proxySession != null )
+				proxySession.close();
+		}
 	}
 
 	/**

Modified: trunk/src/main/java/rtspproxy/proxy/ProxySession.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ProxySession.java	2005-12-04 14:48:53 UTC (rev 316)
+++ trunk/src/main/java/rtspproxy/proxy/ProxySession.java	2005-12-04 23:45:01 UTC (rev 317)
@@ -18,16 +18,17 @@
 
 package rtspproxy.proxy;
 
-import java.util.Collections;
-import java.util.HashMap;
 import java.util.Map;
 import java.util.Random;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.log4j.Logger;
 
 import rtspproxy.lib.number.UnsignedLong;
 
 /**
+ * Manages RTSP sessions with both client and server.
+ * 
  * @author Matteo Merli
  */
 public class ProxySession
@@ -36,48 +37,35 @@
 	private static Logger log = Logger.getLogger( ProxySession.class );
 
 	/** Map IDs for RTSP session with servers to ProxySession objects. */
-	private static Map<String, ProxySession> serverSessionIds = Collections.synchronizedMap( new HashMap<String, ProxySession>() );
+	private static Map<String, ProxySession> serverSessionIds = new ConcurrentHashMap<String, ProxySession>();
 
 	/** Map IDs for RTSP session with clients to ProxySession objects. */
-	private static Map<String, ProxySession> clientSessionIds = Collections.synchronizedMap( new HashMap<String, ProxySession>() );
+	private static Map<String, ProxySession> clientSessionIds = new ConcurrentHashMap<String, ProxySession>();
 
 	/**
+	 * Retrieve the ProxySession associated with the given session ID used by
+	 * the client.
+	 * 
 	 * @param clientSessionId
 	 *        a string containing the RTSP session ID
-	 * @return a ProxySession
+	 * @return the associated ProxySession or null if not found
 	 */
-	public synchronized static ProxySession getByClientSessionID( String clientSessionId )
+	public static ProxySession getByClientSessionID( String clientSessionId )
 	{
 		return clientSessionIds.get( clientSessionId );
 	}
 
-	public synchronized static ProxySession getByServerSessionID( String serverSessionId )
-	{
-		return serverSessionIds.get( serverSessionId );
-	}
-
-	private static Random random = new Random();
-
 	/**
-	 * Creates a unique session ID that is a 64 bit number.
+	 * Retrieve the ProxySession associated with the given session ID used by
+	 * the server.
 	 * 
-	 * @return the session ID
+	 * @param serverSessionId
+	 *        a string containing the RTSP session ID
+	 * @return the associated ProxySession or null if not found
 	 */
-	private static String newSessionID()
+	public static ProxySession getByServerSessionID( String serverSessionId )
 	{
-		String id;
-		while ( true ) {
-			// Create a 64 bit random number
-			synchronized ( random ) {
-				id = new UnsignedLong( random ).toString();
-			}
-
-			if ( clientSessionIds.get( id ) == null ) {
-				// Ok, the id is unique
-				return id;
-			}
-			// try with another id
-		}
+		return serverSessionIds.get( serverSessionId );
 	}
 
 	/**
@@ -92,44 +80,132 @@
 	 */
 	private String serverSessionId = null;
 
-	private Map<String, Track> trackList = Collections.synchronizedMap( new HashMap<String, Track>() );
+	/** Tells whether the proxySession has already been closed. */
+	private boolean isClosed = false;
 
+	/**
+	 * Collection of Track associated with this ProxySession.
+	 */
+	private Map<String, Track> trackList = new ConcurrentHashMap<String, Track>();
+
+	/**
+	 * Construct a new ProxySession. The session ID that will be used when
+	 * communicating with the client will be generated.
+	 */
 	public ProxySession()
 	{
 		setClientSessionId( newSessionID() );
 	}
 
-	// Session ID generation
-
-	public Track addTrack( String url, String serverSsrc )
+	/**
+	 * Adds a new Track associated with this ProxySession.
+	 * 
+	 * @param url
+	 *        The URL used as a control reference for the Track
+	 * @param serverSsrc
+	 *        the SSRC id given by the server or null if not provided
+	 * @return a reference to the newly created Track
+	 */
+	public synchronized Track addTrack( String url, String serverSsrc )
 	{
 		Track track = new Track( url );
 		if ( serverSsrc != null )
 			track.setServerSSRC( serverSsrc );
 		trackList.put( url, track );
+		log.debug( "Added track. TrackList: " + trackList );
 		return track;
 	}
 
+	/**
+	 * @return the RTSP session id used by the client in this session.
+	 */
 	public String getClientSessionId()
 	{
 		return clientSessionId;
 	}
 
+	/**
+	 * @return the RTSP session id used by the server in this session.
+	 */
 	public String getServerSessionId()
 	{
 		return serverSessionId;
 	}
 
-	public void setClientSessionId( String clientSessionId )
+	/**
+	 * Sets the RTSP session id for the client.
+	 * 
+	 * @param clientSessionId
+	 *        a string containing the session id
+	 */
+	public synchronized void setClientSessionId( String clientSessionId )
 	{
 		this.clientSessionId = clientSessionId;
 		clientSessionIds.put( clientSessionId, this );
 	}
 
-	public void setServerSessionId( String serverSessionId )
+	/**
+	 * Sets the RTSP session id for the client.
+	 * 
+	 * @param clientSessionId
+	 *        a string containing the session id
+	 */
+	public synchronized void setServerSessionId( String serverSessionId )
 	{
 		this.serverSessionId = serverSessionId;
 		serverSessionIds.put( serverSessionId, this );
 	}
 
+	/**
+	 * Closes the entire proxy session and frees all associated resources.
+	 */
+	public synchronized void close()
+	{
+		if ( isClosed )
+			return;
+
+		if ( clientSessionId != null )
+			clientSessionIds.remove( clientSessionId );
+		if ( serverSessionId != null )
+			serverSessionIds.remove( serverSessionId );
+
+		log.debug( "TrackList: " + trackList );
+
+		// close all associated tracks
+		for ( Map.Entry<String, Track> entry : trackList.entrySet() ) {
+			entry.getValue().close();
+		}
+
+		isClosed = true;
+		log.debug( "Closed proxySession" );
+	}
+
+	// ///////////////////
+	// Session ID generation
+
+	/** Used for Session IDs generation */
+	private static Random random = new Random();
+
+	/**
+	 * Creates a unique session ID that is a 64 bit number.
+	 * 
+	 * @return the session ID string.
+	 */
+	private static String newSessionID()
+	{
+		String id;
+		while ( true ) {
+			// Create a 64 bit random number
+			synchronized ( random ) {
+				id = new UnsignedLong( random ).toString();
+			}
+
+			if ( clientSessionIds.get( id ) == null ) {
+				// Ok, the id is unique
+				return id;
+			}
+			// try with another id
+		}
+	}
+
 }

Modified: trunk/src/main/java/rtspproxy/proxy/Track.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/Track.java	2005-12-04 14:48:53 UTC (rev 316)
+++ trunk/src/main/java/rtspproxy/proxy/Track.java	2005-12-04 23:45:01 UTC (rev 317)
@@ -21,11 +21,11 @@
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Random;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.log4j.Logger;
 import org.apache.mina.common.IoSession;
@@ -37,6 +37,13 @@
 import rtspproxy.rtp.rtcp.RtcpPacket;
 
 /**
+ * A Track is a part of a RTSP session. A typical RTSP session for a video
+ * stream trasmission is composed of 2 tracks: a track for video data and
+ * another track for audio data.
+ * <p>
+ * These two stream are independent and usually are activated by the same
+ * <code>PLAY</code> and <code>TEARDOWN</code> requests.
+ * 
  * @author Matteo Merli
  */
 public class Track
@@ -44,33 +51,45 @@
 
 	private static Logger log = Logger.getLogger( Track.class );
 
+	/** Maps a server SSRC id to a Track */
+	private static Map<UnsignedInt, Track> serverSsrcMap = new ConcurrentHashMap<UnsignedInt, Track>();
+
+	/** Maps a client address to a Track */
+	private static Map<InetSocketAddress, Track> clientAddressMap = new ConcurrentHashMap<InetSocketAddress, Track>();
+
+	/** Maps a server address to a Track */
+	private static Map<InetSocketAddress, Track> serverAddressMap = new ConcurrentHashMap<InetSocketAddress, Track>();
+
+	/** Keeps track of the SSRC IDs used by the proxy, to avoid collisions. */
+	private static Set<UnsignedInt> proxySsrcList = Collections.synchronizedSet( new HashSet<UnsignedInt>() );
+
+	/**
+	 * Control Url of the track. This is the url handle given by the server to
+	 * control different tracks in a RTSP session.
+	 */
 	private String url;
 
+	/** SSRC id given by the server */
 	private UnsignedInt serverSSRC = new UnsignedInt( 0 );
+	/** SSRC id selected by the proxy */
 	private UnsignedInt proxySSRC = new UnsignedInt( 0 );;
 
+	/**
+	 * Cached references to IoSession objects used to send packets to server and
+	 * client.
+	 */
 	private IoSession rtpServerSession = null;
 	private IoSession rtcpServerSession = null;
 	private IoSession rtpClientSession = null;
 	private IoSession rtcpClientSession = null;
 
-	/** Maps a server SSRC id to a Track */
-	private static Map<UnsignedInt, Track> serverSsrcMap = Collections.synchronizedMap( new HashMap<UnsignedInt, Track>() );
-
-	/** Maps a client address to a Track */
-	private static Map<InetSocketAddress, Track> clientAddressMap = Collections.synchronizedMap( new HashMap<InetSocketAddress, Track>() );
-
-	/** Maps a server address to a Track */
-	private static Map<InetSocketAddress, Track> serverAddressMap = Collections.synchronizedMap( new HashMap<InetSocketAddress, Track>() );
-
-	/** Keeps track of the SSRC IDs used by the proxy, to avoid collisions. */
-	private static Set<UnsignedInt> proxySsrcList = Collections.synchronizedSet( new HashSet<UnsignedInt>() );
-
-	// IP address and RTP/RTCP ports for client and server.
-	// TODO: When using reflection, there will be more than one connected client
-	// at a
-	// time to the same Track. So the track should keep a list of connected
-	// clients and forward packets to each of them.
+	/**
+	 * IP address and RTP/RTCP ports for client and server.
+	 * <p>
+	 * TODO: When using reflection, there will be more than one connected client
+	 * at a time to the same Track. So the track should keep a list of connected
+	 * clients and forward packets to each of them.
+	 */
 	private InetAddress clientAddress;
 	private int clientRtpPort;
 	private int clientRtcpPort;
@@ -126,7 +145,7 @@
 	// /// Member methods
 
 	/**
-	 * @return the
+	 * @return the SSRC id used byt the proxy
 	 */
 	public UnsignedInt getProxySSRC()
 	{
@@ -267,9 +286,6 @@
 			rtpClientSession = RtpClientService.newRtpSession( new InetSocketAddress(
 					clientAddress, clientRtpPort ) );
 
-			// Client packets needs this attribute to find
-			// the track
-			rtpClientSession.setAttribute( "track", this );
 		}
 
 		rtpClientSession.write( packet.toByteBuffer() );
@@ -294,33 +310,9 @@
 			rtcpClientSession = RtpClientService.newRtcpSession( new InetSocketAddress(
 					clientAddress, clientRtcpPort ) );
 
-			// Client packets needs this attribute to find
-			// the track
-			rtcpClientSession.setAttribute( "track", this );
 		}
-	}
 
-	/** Used in SSRC id generation */
-	private static Random random = new Random();
-
-	/**
-	 * Creates a new SSRC id that is unique in the proxy.
-	 * 
-	 * @return the session ID
-	 */
-	private static String newSSRC()
-	{
-		long id;
-		while ( true ) {
-			id = random.nextLong() & 0xFFFFFFFFL;
-
-			if ( !proxySsrcList.contains( id ) ) {
-				// Ok, the id is unique
-				String ids = Long.toString( id, 16 );
-				return ids;
-			}
-			// try with another id
-		}
+		rtcpClientSession.write( packet.toByteBuffer() );
 	}
 
 	/**
@@ -336,7 +328,8 @@
 	 * @param rtcpPort
 	 *        the port number used for RTCP packets
 	 */
-	public void setClientAddress( InetAddress clientAddress, int rtpPort, int rtcpPort )
+	public synchronized void setClientAddress( InetAddress clientAddress, int rtpPort,
+			int rtcpPort )
 	{
 		this.clientAddress = clientAddress;
 		this.clientRtpPort = rtpPort;
@@ -356,7 +349,8 @@
 	 * @param rtcpPort
 	 *        the port number used for RTCP packets
 	 */
-	public void setServerAddress( InetAddress serverAddress, int rtpPort, int rtcpPort )
+	public synchronized void setServerAddress( InetAddress serverAddress, int rtpPort,
+			int rtcpPort )
 	{
 		this.serverAddress = serverAddress;
 		this.serverRtpPort = rtpPort;
@@ -366,4 +360,49 @@
 		serverAddressMap.put( new InetSocketAddress( serverAddress, rtcpPort ), this );
 	}
 
+	public synchronized void close()
+	{
+		if ( serverSSRC != null )
+			serverSsrcMap.remove( serverSSRC );
+		serverAddressMap.remove( new InetSocketAddress( serverAddress, serverRtpPort ) );
+		serverAddressMap.remove( new InetSocketAddress( serverAddress, serverRtcpPort ) );
+
+		clientAddressMap.remove( new InetSocketAddress( clientAddress, clientRtpPort ) );
+		clientAddressMap.remove( new InetSocketAddress( clientAddress, clientRtcpPort ) );
+
+		if ( proxySSRC != null )
+			proxySsrcList.remove( proxySSRC );
+		log.debug( "Closed track " + url );
+	}
+
+	public String toString()
+	{
+		return "Track(url=\"" + url + "\"";
+	}
+
+	// ////////////////
+
+	/** Used in SSRC id generation */
+	private static Random random = new Random();
+
+	/**
+	 * Creates a new SSRC id that is unique in the proxy.
+	 * 
+	 * @return the session ID
+	 */
+	private static String newSSRC()
+	{
+		long id;
+		while ( true ) {
+			id = random.nextLong() & 0xFFFFFFFFL;
+
+			if ( !proxySsrcList.contains( id ) ) {
+				// Ok, the id is unique
+				String ids = Long.toString( id, 16 );
+				return ids;
+			}
+			// try with another id
+		}
+	}
+
 }



From merlimat at berlios.de  Wed Dec  7 23:53:59 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Wed, 7 Dec 2005 23:53:59 +0100
Subject: [Rtspproxy-devel] r318 - trunk/src/main/java/rtspproxy/rtsp
Message-ID: <200512072253.jB7MrxmN024475@sheep.berlios.de>

Author: merlimat
Date: 2005-12-07 23:53:57 +0100 (Wed, 07 Dec 2005)
New Revision: 318

Modified:
   trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java
   trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java
Log:
* Using BufferedReader for line input
* Fixed a bug in regular expression ( RTSP verbs with '_' was considered invalids)

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2005-12-04 23:45:01 UTC (rev 317)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2005-12-07 22:53:57 UTC (rev 318)
@@ -11,8 +11,13 @@
 
 package rtspproxy.rtsp;
 
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.UnsupportedEncodingException;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.nio.CharBuffer;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -23,6 +28,8 @@
 import org.apache.mina.filter.codec.ProtocolDecoderException;
 import org.apache.mina.filter.codec.ProtocolDecoderOutput;
 
+import rtspproxy.lib.Exceptions;
+
 /**
  * 
  */
@@ -30,7 +37,8 @@
 {
 
 	/**
-	 * State enumerator that indicates the reached state in the RTSP message decoding process.
+	 * State enumerator that indicates the reached state in the RTSP message
+	 * decoding process.
 	 */
 	public enum ReadState {
 		/** Unrecoverable error occurred */
@@ -53,157 +61,155 @@
 
 	private static Logger log = Logger.getLogger( RtspDecoder.class );
 
-	private static final Pattern rtspRequestPattern = Pattern.compile( "([A-Z]+) ([^ ]+) RTSP/1.0" );
+	private static final Pattern rtspRequestPattern = Pattern.compile( "([A-Z_]+) ([^ ]+) RTSP/1.0" );
 	private static final Pattern rtspResponsePattern = Pattern.compile( "RTSP/1.0 ([0-9]+) .+" );
 	private static final Pattern rtspHeaderPattern = Pattern.compile( "([a-zA-Z\\-]+[0-9]?):\\s?(.*)" );
 
 	/**
-	 * Get a line from a string buffer and delete the line in the buffer.
+	 * Do the parsing on the incoming stream. If the stream does not contain the
+	 * entire RTSP message wait for other data to arrive, before dispatching the
+	 * message.
 	 * 
-	 * @param buffer
-	 * @return
-	 */
-	private static String getLine( StringBuffer buffer )
-	{
-		int idx = buffer.indexOf( "\r\n" );
-		if ( idx == -1 ) {
-			return null;
-		} else {
-			// Return the line string (without CRLF)
-			String s = buffer.substring( 0, idx );
-			buffer.delete( 0, idx + 2 );
-			return s;
-		}
-	}
-
-	/**
-	 * Do the parsing on the incoming stream. If the stream does not contain the entire RTSP message wait for
-	 * other data to arrive, before dispatching the message.
-	 * 
 	 * @see org.apache.mina.protocol.ProtocolDecoder#decode(org.apache.mina.protocol.IoSession,
-	 *      org.apache.mina.common.ByteBuffer, org.apache.mina.protocol.ProtocolDecoderOutput)
+	 *      org.apache.mina.common.ByteBuffer,
+	 *      org.apache.mina.protocol.ProtocolDecoderOutput)
 	 */
 	public void decode( IoSession session, ByteBuffer buffer, ProtocolDecoderOutput out )
 			throws ProtocolDecoderException
 	{
-		StringBuffer decodeBuf = new StringBuffer();
+		BufferedReader reader = null;
+		try {
+			reader = new BufferedReader( new InputStreamReader( buffer.asInputStream(),
+					"US-ASCII" ) );
+		} catch ( UnsupportedEncodingException e1 ) {
+		}
 
-		log.debug( "decode()" );
-
-		do {
-			decodeBuf.append( (char) buffer.get() );
-		} while ( buffer.hasRemaining() );
-
 		// Retrieve status from session
 		ReadState state = (ReadState) session.getAttribute( "state" );
 		if ( state == null )
 			state = ReadState.Command;
 		RtspMessage rtspMessage = (RtspMessage) session.getAttribute( "rtspMessage" );
 
-		while ( true ) {
+		try {
 
-			if ( state != ReadState.Command && state != ReadState.Header )
-				// the "while" loop is only used to read commands and headers
-				break;
+			while ( true ) {
 
-			String line = getLine( decodeBuf );
-			if ( line == null )
-				// there's no more data in the buffer
-				break;
+				if ( state != ReadState.Command && state != ReadState.Header )
+					// the "while" loop is only used to read commands and
+					// headers
+					break;
 
-			if ( line.length() == 0 ) {
-				// This is the empty line that marks the end
-				// of the headers section
-				state = ReadState.Body;
-				break;
-			}
+				String line = reader.readLine();
+				if ( line == null )
+					// there's no more data in the buffer
+					break;
 
-			switch ( state ) {
+				if ( line.length() == 0 ) {
+					// This is the empty line that marks the end
+					// of the headers section
+					state = ReadState.Body;
+					break;
+				}
 
-				case Command:
-					// log.debug( "Command line: " + line );
-					if ( line.startsWith( "RTSP" ) ) {
-						// this is a RTSP response
-						Matcher m = rtspResponsePattern.matcher( line );
-						if ( !m.matches() )
-							throw new ProtocolDecoderException(
-									"Malformed response line: " + line );
+				switch ( state ) {
 
-						RtspCode code = RtspCode.fromString( m.group( 1 ) );
-						rtspMessage = new RtspResponse();
-						( (RtspResponse) ( rtspMessage ) ).setCode( code );
-						RtspRequest.Verb verb = (RtspRequest.Verb) session.getAttribute( "lastRequestVerb" );
-						( (RtspResponse) ( rtspMessage ) ).setRequestVerb( verb );
+					case Command:
+						// log.debug( "Command line: " + line );
+						if ( line.startsWith( "RTSP" ) ) {
+							// this is a RTSP response
+							Matcher m = rtspResponsePattern.matcher( line );
+							if ( !m.matches() )
+								throw new ProtocolDecoderException(
+										"Malformed response line: " + line );
 
-					} else {
-						// this is a RTSP request
-						Matcher m = rtspRequestPattern.matcher( line );
-						if ( !m.matches() )
-							throw new ProtocolDecoderException(
-									"Malformed request line: " + line );
+							RtspCode code = RtspCode.fromString( m.group( 1 ) );
+							rtspMessage = new RtspResponse();
+							( (RtspResponse) ( rtspMessage ) ).setCode( code );
+							RtspRequest.Verb verb = (RtspRequest.Verb) session.getAttribute( "lastRequestVerb" );
+							( (RtspResponse) ( rtspMessage ) ).setRequestVerb( verb );
 
-						String verb = m.group( 1 );
-						String strUrl = m.group( 2 );
-						URL url = null;
-						if ( !strUrl.equalsIgnoreCase( "*" ) ) {
-							try {
-								url = new URL( strUrl );
-							} catch ( MalformedURLException e ) {
-								log.info( e );
-								url = null;
+						} else {
+							// this is a RTSP request
+							Matcher m = rtspRequestPattern.matcher( line );
+							if ( !m.matches() )
+								throw new ProtocolDecoderException(
+										"Malformed request line: " + line );
+
+							String verb = m.group( 1 );
+							String strUrl = m.group( 2 );
+							URL url = null;
+							if ( !strUrl.equalsIgnoreCase( "*" ) ) {
+								try {
+									url = new URL( strUrl );
+								} catch ( MalformedURLException e ) {
+									log.info( e );
+									url = null;
+									session.setAttribute( "state", ReadState.Failed );
+									throw new ProtocolDecoderException( "Invalid URL" );
+								}
+							}
+							rtspMessage = new RtspRequest();
+							( (RtspRequest) rtspMessage ).setVerb( verb );
+
+							if ( ( (RtspRequest) rtspMessage ).getVerb() == RtspRequest.Verb.None ) {
 								session.setAttribute( "state", ReadState.Failed );
-								throw new ProtocolDecoderException( "Invalid URL" );
+								throw new ProtocolDecoderException( "Invalid method: "
+										+ verb );
 							}
-						}
-						rtspMessage = new RtspRequest();
-						( (RtspRequest) rtspMessage ).setVerb( verb );
 
-						if ( ( (RtspRequest) rtspMessage ).getVerb() == RtspRequest.Verb.None ) {
-							session.setAttribute( "state", ReadState.Failed );
-							throw new ProtocolDecoderException( "Invalid method: " + verb );
+							( (RtspRequest) rtspMessage ).setUrl( url );
 						}
+						state = ReadState.Header;
+						break;
 
-						( (RtspRequest) rtspMessage ).setUrl( url );
-					}
-					state = ReadState.Header;
-					break;
+					case Header:
+						// this is an header
+						Matcher m = rtspHeaderPattern.matcher( line );
 
-				case Header:
-					// this is an header
-					Matcher m = rtspHeaderPattern.matcher( line );
+						if ( !m.matches() )
+							throw new ProtocolDecoderException( "RTSP header not valid" );
 
-					if ( !m.matches() )
-						throw new ProtocolDecoderException( "RTSP header not valid" );
+						rtspMessage.setHeader( m.group( 1 ), m.group( 2 ) );
+						break;
 
-					rtspMessage.setHeader( m.group( 1 ), m.group( 2 ) );
-					break;
-
+				}
 			}
-		}
 
-		if ( state == ReadState.Body ) {
-			// Read the message body
-			int bufferLen = Integer.parseInt( rtspMessage.getHeader( "Content-Length",
-					"0" ) );
-			if ( bufferLen == 0 ) {
-				// there's no buffer to be read
-				state = ReadState.Dispatch;
+			if ( state == ReadState.Body ) {
+				// Read the message body
+				int bufferLen = Integer.parseInt( rtspMessage.getHeader(
+						"Content-Length", "0" ) );
+				if ( bufferLen == 0 ) {
+					// there's no buffer to be read
+					state = ReadState.Dispatch;
 
-			} else {
-				// we have a content buffer to read
-				int bytesToRead = bufferLen - rtspMessage.getBufferSize();
+				} else {
+					// we have a content buffer to read
+					int bytesToRead = bufferLen - rtspMessage.getBufferSize();
 
-				if ( bytesToRead < decodeBuf.length() ) {
-					log.warn( "We are reading more bytes than Content-Length." );
-				}
+					// if ( bytesToRead < reader. decodeBuf.length() ) {
+					// log.warn( "We are reading more bytes than
+					// Content-Length." );
+					// }
 
-				// read the content buffer
-				rtspMessage.appendToBuffer( decodeBuf );
-				if ( rtspMessage.getBufferSize() >= bufferLen ) {
-					// The RTSP message parsing is completed
-					state = ReadState.Dispatch;
+					// read the content buffer
+					CharBuffer bufferContent = CharBuffer.allocate( bytesToRead );
+					reader.read( bufferContent );
+					bufferContent.flip();
+					rtspMessage.appendToBuffer( bufferContent );
+					if ( rtspMessage.getBufferSize() >= bufferLen ) {
+						// The RTSP message parsing is completed
+						state = ReadState.Dispatch;
+					}
 				}
 			}
+		} catch ( IOException e ) {
+			/*
+			 * error on input stream should not happen since the input stream is
+			 * coming from a bytebuffer.
+			 */
+			Exceptions.logStackTrace( e );
+			return;
 		}
 
 		if ( state == ReadState.Dispatch ) {

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java	2005-12-04 23:45:01 UTC (rev 317)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java	2005-12-07 22:53:57 UTC (rev 318)
@@ -18,6 +18,7 @@
 
 package rtspproxy.rtsp;
 
+import java.nio.CharBuffer;
 import java.util.Properties;
 
 import rtspproxy.Config;
@@ -179,6 +180,14 @@
 	{
 		this.buffer.append( other );
 	}
+	
+	/**
+	 * @param other buffer with content to be appended
+	 */
+	public void appendToBuffer( CharBuffer other )
+	{
+		this.buffer.append(other);
+	}
 
 	/**
 	 * @return the content buffer



From merlimat at berlios.de  Thu Dec  8 09:22:10 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 09:22:10 +0100
Subject: [Rtspproxy-devel] r319 - trunk/src/main/java/rtspproxy/proxy
Message-ID: <200512080822.jB88MAtZ023200@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 09:21:59 +0100 (Thu, 08 Dec 2005)
New Revision: 319

Modified:
   trunk/src/main/java/rtspproxy/proxy/ClientSide.java
   trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/src/main/java/rtspproxy/proxy/ProxySession.java
   trunk/src/main/java/rtspproxy/proxy/ServerSide.java
Log:
* Fixed bug #5778 (session data not deleted when the session is closed)
* Using symbolic name to store and retrieve attribute in the IoSession

Modified: trunk/src/main/java/rtspproxy/proxy/ClientSide.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ClientSide.java	2005-12-07 22:53:57 UTC (rev 318)
+++ trunk/src/main/java/rtspproxy/proxy/ClientSide.java	2005-12-08 08:21:59 UTC (rev 319)
@@ -57,13 +57,13 @@
 		// Creates a new ProxyHandler and saves it
 		// as a Session attribute
 		ProxyHandler proxyHandler = new ProxyHandler( session );
-		session.setAttribute( "proxyHandler", proxyHandler );
+		session.setAttribute( ProxyHandler.ATTR, proxyHandler );
 	}
 
 	@Override
 	public void sessionClosed( IoSession session )
 	{
-		ProxyHandler proxyHandler = (ProxyHandler) ( session.getAttribute( "proxyHandler" ) );
+		ProxyHandler proxyHandler = (ProxyHandler) ( session.getAttribute( ProxyHandler.ATTR ) );
 		if ( proxyHandler != null ) {
 			proxyHandler.closeAll();
 			log.info( "Client connection closed" );
@@ -75,6 +75,7 @@
 	{
 		if ( cause instanceof ProtocolDecoderException ) {
 			log.warn( "Malformed RTSP message." );
+			Exceptions.logStackTrace( cause );
 			session.write( RtspResponse.errorResponse( RtspCode.BadRequest ) );
 			return;
 		}
@@ -232,7 +233,7 @@
 		RtspMessage rtspMessage = (RtspMessage) message;
 		log.debug( "Received message:\n" + message );
 
-		ProxyHandler proxyHandler = (ProxyHandler) ( session.getAttribute( "proxyHandler" ) );
+		ProxyHandler proxyHandler = (ProxyHandler) ( session.getAttribute( ProxyHandler.ATTR ) );
 
 		switch ( rtspMessage.getType() ) {
 			case TypeRequest:

Modified: trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java	2005-12-07 22:53:57 UTC (rev 318)
+++ trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java	2005-12-08 08:21:59 UTC (rev 319)
@@ -47,11 +47,14 @@
 public class ProxyHandler
 {
 
+	private static Logger log = Logger.getLogger( ProxyHandler.class );
+
+	/** Used to save a reference to this handler in the IoSession */
+	protected static final String ATTR = ProxyHandler.class.toString() + "Attr";
+
 	private IoSession clientSession = null;
 	private IoSession serverSession = null;
 
-	private static Logger log = Logger.getLogger( ProxyHandler.class );
-
 	/**
 	 * Creates a new ProxyHandler from a client side protocol session.
 	 * 
@@ -131,6 +134,7 @@
 
 					proxySession.setServerSessionId( message.getHeader( "Session" ) );
 					message.setHeader( "Session", proxySession.getClientSessionId() );
+					log.debug( "Created a new proxy session on-the-fly." );
 				} else {
 					// Error. The client specified a session ID but it's
 					// not valid
@@ -157,19 +161,21 @@
 	}
 
 	/**
-	 * A SETUP request should treated more carefully tha other RTSP request. The
-	 * proxy will perform some hijacking on the communication between client and
-	 * server, such as modifying RTP/RTCP port.
+	 * A SETUP request should treated more carefully tha other RTSP requests.
+	 * The proxy will perform some hijacking on the communication between client
+	 * and server, such as modifying RTP/RTCP port.
 	 * 
 	 * @param request
 	 *        SETUP request message
 	 */
 	public void passSetupRequestToServer( RtspRequest request )
 	{
+		ProxySession proxySession = null;
+
 		if ( request.getHeader( "Session" ) != null ) {
 			// The client already specified a session ID.
 			// Let's validate it
-			ProxySession proxySession = ProxySession.getByClientSessionID( request.getHeader( "Session" ) );
+			proxySession = ProxySession.getByClientSessionID( request.getHeader( "Session" ) );
 			if ( proxySession != null ) {
 				// Session ID is ok
 				request.setHeader( "Session", proxySession.getServerSessionId() );
@@ -213,8 +219,10 @@
 			}
 		}
 
-		ProxySession proxySession = new ProxySession();
-		clientSession.setAttribute( "proxySession", proxySession );
+		if ( proxySession == null ) {
+			proxySession = new ProxySession();
+			clientSession.setAttribute( ProxySession.ATTR, proxySession );
+		}
 
 		request.setHeader( "Transport", rtspTransportList.toString() );
 
@@ -234,10 +242,10 @@
 		// If there isn't yet a proxySession, create a new one
 		ProxySession proxySession = ProxySession.getByServerSessionID( response.getHeader( "Session" ) );
 		if ( proxySession == null ) {
-			proxySession = (ProxySession) clientSession.getAttribute( "proxySession" );
+			proxySession = (ProxySession) clientSession.getAttribute( ProxySession.ATTR );
 			if ( proxySession == null ) {
 				proxySession = new ProxySession();
-				clientSession.setAttribute( "proxySession", proxySession );
+				clientSession.setAttribute( ProxySession.ATTR, proxySession );
 			}
 		}
 
@@ -354,7 +362,7 @@
 		log.debug( "Connected!" );
 
 		// Save current ProxyHandler into the ProtocolSession
-		serverSession.setAttribute( "proxyHandler", this );
+		serverSession.setAttribute( ProxyHandler.ATTR, this );
 
 		log.debug( "Server session: " + serverSession.getAttributeKeys() );
 	}
@@ -371,7 +379,7 @@
 
 		// Remove ProxySession and Track instances
 		if ( clientSession != null ) {
-			ProxySession proxySession = (ProxySession) clientSession.getAttribute( "proxySession" );
+			ProxySession proxySession = (ProxySession) clientSession.getAttribute( ProxySession.ATTR );
 			if ( proxySession != null )
 				proxySession.close();
 		}

Modified: trunk/src/main/java/rtspproxy/proxy/ProxySession.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ProxySession.java	2005-12-07 22:53:57 UTC (rev 318)
+++ trunk/src/main/java/rtspproxy/proxy/ProxySession.java	2005-12-08 08:21:59 UTC (rev 319)
@@ -36,6 +36,8 @@
 
 	private static Logger log = Logger.getLogger( ProxySession.class );
 
+	protected static final String ATTR = ProxySession.class.toString() + "Attr";
+
 	/** Map IDs for RTSP session with servers to ProxySession objects. */
 	private static Map<String, ProxySession> serverSessionIds = new ConcurrentHashMap<String, ProxySession>();
 
@@ -95,6 +97,8 @@
 	public ProxySession()
 	{
 		setClientSessionId( newSessionID() );
+		log.debug( "\n----------\nCreated new proxy session: " + clientSessionId
+				+ " \n----------" );
 	}
 
 	/**
@@ -112,7 +116,8 @@
 		if ( serverSsrc != null )
 			track.setServerSSRC( serverSsrc );
 		trackList.put( url, track );
-		log.debug( "Added track. TrackList: " + trackList );
+		log.debug( "ProxySession: " + clientSessionId + " Added track. TrackList: "
+				+ trackList );
 		return track;
 	}
 
@@ -164,11 +169,6 @@
 		if ( isClosed )
 			return;
 
-		if ( clientSessionId != null )
-			clientSessionIds.remove( clientSessionId );
-		if ( serverSessionId != null )
-			serverSessionIds.remove( serverSessionId );
-
 		log.debug( "TrackList: " + trackList );
 
 		// close all associated tracks
@@ -177,7 +177,23 @@
 		}
 
 		isClosed = true;
-		log.debug( "Closed proxySession" );
+		log.debug( "Closed proxySession: " + clientSessionId );
+
+		String s = "";
+		for ( String a : clientSessionIds.keySet() ) {
+			s += a + " ";
+		}
+		log.debug( "Clients: " + s );
+		s = "";
+		for ( String a : serverSessionIds.keySet() ) {
+			s += a + " ";
+		}
+		log.debug( "Servers: " + s );
+
+		if ( clientSessionId != null )
+			clientSessionIds.remove( clientSessionId );
+		if ( serverSessionId != null )
+			serverSessionIds.remove( serverSessionId );
 	}
 
 	// ///////////////////

Modified: trunk/src/main/java/rtspproxy/proxy/ServerSide.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ServerSide.java	2005-12-07 22:53:57 UTC (rev 318)
+++ trunk/src/main/java/rtspproxy/proxy/ServerSide.java	2005-12-08 08:21:59 UTC (rev 319)
@@ -54,7 +54,7 @@
 	public void sessionClosed( IoSession session )
 	{
 		log.info( "Server connection closed" );
-		ProxyHandler proxyHandler = (ProxyHandler) ( session.getAttribute( "proxyHandler" ) );
+		ProxyHandler proxyHandler = (ProxyHandler) ( session.getAttribute( ProxyHandler.ATTR ) );
 		proxyHandler.closeAll();
 	}
 
@@ -206,7 +206,7 @@
 		RtspMessage rtspMessage = (RtspMessage) message;
 		log.debug( "Received message:\n" + message );
 
-		ProxyHandler proxyHandler = (ProxyHandler) ( session.getAttribute( "proxyHandler" ) );
+		ProxyHandler proxyHandler = (ProxyHandler) ( session.getAttribute( ProxyHandler.ATTR ) );
 		if ( proxyHandler == null ) {
 			log.fatal( "proxyHandler is null" );
 			throw new NullPointerException( "proxyHandler in session is null" );



From merlimat at berlios.de  Thu Dec  8 09:42:35 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 09:42:35 +0100
Subject: [Rtspproxy-devel] r320 - trunk/src/main/java/rtspproxy/filter
Message-ID: <200512080842.jB88gZCa001795@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 09:42:25 +0100 (Thu, 08 Dec 2005)
New Revision: 320

Added:
   trunk/src/main/java/rtspproxy/filter/rewrite/
Log:
* Moved rewrite filter under rtspproxy.filter.rewrite



From merlimat at berlios.de  Thu Dec  8 09:43:26 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 09:43:26 +0100
Subject: [Rtspproxy-devel] r321 - in trunk/src/main/java/rtspproxy/filter: . rewrite
Message-ID: <200512080843.jB88hQkd001990@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 09:42:57 +0100 (Thu, 08 Dec 2005)
New Revision: 321

Added:
   trunk/src/main/java/rtspproxy/filter/rewrite/RequestUrlRewritingFilter.java
   trunk/src/main/java/rtspproxy/filter/rewrite/RequestUrlRewritingImpl.java
Removed:
   trunk/src/main/java/rtspproxy/filter/impl/
Modified:
   trunk/src/main/java/rtspproxy/filter/RtspFilters.java
Log:
* Moved rewrite filter under rtspproxy.filter.rewrite

Modified: trunk/src/main/java/rtspproxy/filter/RtspFilters.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/RtspFilters.java	2005-12-08 08:42:25 UTC (rev 320)
+++ trunk/src/main/java/rtspproxy/filter/RtspFilters.java	2005-12-08 08:42:57 UTC (rev 321)
@@ -60,6 +60,7 @@
 
 	private static IoFilter codecFilter = new ProtocolCodecFilter( codecFactory );
 
+	// These filters are instanciated only one time, when requested
 	private static IpAddressFilter ipAddressFilter = null;
 	private static AuthenticationFilter authenticationFilter = null;
 
@@ -98,7 +99,7 @@
 	{
 		boolean enableAuthenticationFilter = Config.getBoolean(
 				"proxy.auth.authentication.enable", false );
-		
+
 		if ( enableAuthenticationFilter ) {
 			if ( authenticationFilter == null )
 				authenticationFilter = new AuthenticationFilter();

Copied: trunk/src/main/java/rtspproxy/filter/rewrite/RequestUrlRewritingFilter.java (from rev 317, trunk/src/main/java/rtspproxy/filter/RequestUrlRewritingFilter.java)
===================================================================
--- trunk/src/main/java/rtspproxy/filter/RequestUrlRewritingFilter.java	2005-12-04 23:45:01 UTC (rev 317)
+++ trunk/src/main/java/rtspproxy/filter/rewrite/RequestUrlRewritingFilter.java	2005-12-08 08:42:57 UTC (rev 321)
@@ -0,0 +1,40 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id: Handler.java 248 2005-10-23 18:47:41Z merlimat $
+ * 
+ * $URL: https://rbieniek at svn.berlios.de/svnroot/repos/rtspproxy/trunk/src/main/java/rtspproxy/rtsp/Handler.java $
+ * 
+ */
+package rtspproxy.filter.rewrite;
+
+import java.net.URL;
+
+/**
+ * This filter is used to rewrite the requested URL before passing it
+ * to the upstream server.
+ * 
+ * @author Rainer Bieniek
+ */
+public interface RequestUrlRewritingFilter {
+	/**
+	 * rewrite the request URL.
+	 * @return a replacement URL or null if the URL is not to be modified.
+	 */
+	public URL rewriteRequestUrl(URL request);
+
+	/**
+	 * rewrite an URL in a response header.
+	 * @return a replacement URL or null if the URL is not to be modified.
+	 */
+	public URL rewriteResponseHeaderUrl(URL request);
+}

Copied: trunk/src/main/java/rtspproxy/filter/rewrite/RequestUrlRewritingImpl.java (from rev 317, trunk/src/main/java/rtspproxy/filter/impl/RequestUrlRewritingImpl.java)
===================================================================
--- trunk/src/main/java/rtspproxy/filter/impl/RequestUrlRewritingImpl.java	2005-12-04 23:45:01 UTC (rev 317)
+++ trunk/src/main/java/rtspproxy/filter/rewrite/RequestUrlRewritingImpl.java	2005-12-08 08:42:57 UTC (rev 321)
@@ -0,0 +1,122 @@
+/**
+ * 
+ */
+package rtspproxy.filter.rewrite;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+
+import org.apache.log4j.Logger;
+
+import org.apache.mina.common.IoFilterAdapter;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoFilter.NextFilter;
+
+import rtspproxy.RtpServerService;
+import rtspproxy.rtsp.RtspMessage;
+import rtspproxy.rtsp.RtspRequest;
+import rtspproxy.rtsp.RtspResponse;
+
+/**
+ * @author bieniekr
+ * 
+ */
+public class RequestUrlRewritingImpl extends IoFilterAdapter {
+	/**
+	 * Logger for this class
+	 */
+	private static final Logger logger = Logger
+			.getLogger(RequestUrlRewritingImpl.class);
+
+	// the filter instance
+	private RequestUrlRewritingFilter filter;
+
+	/**
+	 * construct the IoFilter around the filter class denoted by the clazz name
+	 * parameter.
+	 * 
+	 * TODO: This may become obsolete if moving to OSGi bundles TODO: Make
+	 * filter parametrizeable. Could be done by moving from properties to XML
+	 * config file.
+	 */
+	public RequestUrlRewritingImpl(String clazzName)
+			throws Exception {
+
+		try {
+			Class filterClazz = Class.forName(clazzName);
+
+			this.filter = (RequestUrlRewritingFilter) filterClazz.newInstance();
+			logger.info("using request URL rewriter " + clazzName);
+		} catch (Exception e) {
+			logger.error(e);
+
+			throw e;
+		}
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.apache.mina.common.IoFilterAdapter#messageReceived(org.apache.mina.common.IoFilter.NextFilter,
+	 *      org.apache.mina.common.IoSession, java.lang.Object)
+	 */
+	@Override
+	public void messageReceived(NextFilter nextFilter, IoSession session,
+			Object message) throws Exception {
+		RtspMessage rtspMessage = (RtspMessage) message;
+
+		logger.debug("Received (pre-rewriting) message:\n" + message);
+		if (rtspMessage.getType() == RtspMessage.Type.TypeRequest) {
+			RtspRequest request = (RtspRequest) rtspMessage;
+			URL rewritten = this.filter.rewriteRequestUrl(request.getUrl());
+
+			if (rewritten != null) {
+				logger.debug("changed request URL from '" + request.getUrl()
+						+ "' to '" + rewritten + "'");
+
+				request.setUrl(rewritten);
+			}
+		} else if (rtspMessage.getType() == RtspMessage.Type.TypeResponse) {
+			RtspResponse resp = (RtspResponse) rtspMessage;
+
+			switch (resp.getRequestVerb()) {
+			case DESCRIBE:
+				rewriteUrlHeader("Content-base", resp);
+				break;
+			case PLAY:
+				// rewriteUrlHeader("RTP-Info", resp);
+				break;
+			}
+		}
+		logger.debug("Sent (post-rewriting) message:\n" + message);
+
+		nextFilter.messageReceived(session, message);
+	}
+
+	/**
+	 * rewrite a header
+	 */
+	private void rewriteUrlHeader(String headerName, RtspResponse resp) {
+		String oldHeader = resp.getHeader(headerName);
+
+		if (oldHeader != null) {
+			logger.debug("old content " + headerName + " header value: "
+					+ oldHeader);
+
+			try {
+				URL header = this.filter.rewriteResponseHeaderUrl(new URL(
+						oldHeader));
+
+				if (header != null) {
+					logger.debug("changed header " + headerName + " to "
+							+ header);
+
+					resp.setHeader(headerName, header.toString());
+				}
+			} catch (MalformedURLException mue) {
+				logger.error("failed to parse " + headerName + " header", mue);
+			}
+		}
+
+	}
+}



From merlimat at berlios.de  Thu Dec  8 09:54:31 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 09:54:31 +0100
Subject: [Rtspproxy-devel] r322 - in trunk/src/main/java/rtspproxy/filter: . ipaddress
Message-ID: <200512080854.jB88sVkt005572@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 09:54:20 +0100 (Thu, 08 Dec 2005)
New Revision: 322

Added:
   trunk/src/main/java/rtspproxy/filter/ipaddress/
   trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java
   trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressProvider.java
   trunk/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java
Log:
Moved IpAddressFilter to rtspproxy.filter.ipaddress

Copied: trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java (from rev 317, trunk/src/main/java/rtspproxy/auth/IpAddressFilter.java)
===================================================================
--- trunk/src/main/java/rtspproxy/auth/IpAddressFilter.java	2005-12-04 23:45:01 UTC (rev 317)
+++ trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java	2005-12-08 08:54:20 UTC (rev 322)
@@ -0,0 +1,115 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.filter.ipaddress;
+
+import java.net.InetSocketAddress;
+
+import org.apache.log4j.Logger;
+import org.apache.mina.common.IoFilterAdapter;
+import org.apache.mina.common.IoSession;
+
+import rtspproxy.Config;
+import rtspproxy.Reactor;
+
+/**
+ * @author Matteo Merli
+ *
+ */
+public class IpAddressFilter extends IoFilterAdapter
+{
+
+	private static Logger log = Logger.getLogger( IpAddressFilter.class );
+
+	private IpAddressProvider provider;
+
+	public IpAddressFilter()
+	{
+		// Check which backend implementation to use
+		// Default is plain-text implementation
+		String className = Config.get( "auth.ipAddressFilter.implementationClass",
+				"rtspproxy.auth.PlainTextIpAddressProvider" );
+
+		Class providerClass;
+		try {
+			providerClass = Class.forName( className );
+
+		} catch ( ClassNotFoundException e ) {
+			log.fatal( "Invalid IpAddressProvider class: " + className );
+			Reactor.stop();
+			return;
+		}
+
+		// Check if the class implements the IpAddressProvider interfaces
+		boolean found = false;
+		for ( Class interFace : providerClass.getInterfaces() ) {
+			if ( IpAddressProvider.class.equals( interFace ) ) {
+				found = true;
+				break;
+			}
+		}
+
+		if ( !found ) {
+			log.fatal( "Class (" + provider
+					+ ") does not implement the IpAddressProvider interface." );
+			Reactor.stop();
+			return;
+		}
+
+		try {
+			provider = (IpAddressProvider) providerClass.newInstance();
+			provider.init();
+		} catch ( Exception e ) {
+			log.fatal( "Error starting IpAddressProvider: " + e );
+			Reactor.stop();
+			return;
+		}
+
+		log.info( "Using IpAddressFilter (" + className + ")" );
+	}
+
+	@Override
+	public void messageReceived( NextFilter nextFilter, IoSession session, Object message )
+			throws Exception
+	{
+		if ( !provider.isBlocked( ( (InetSocketAddress) session.getRemoteAddress() ).getAddress() ) ) {
+			// forward if not blocked
+			nextFilter.messageReceived( session, message );
+		} else {
+			blockSession( session );
+		}
+	}
+
+	@Override
+	public void sessionCreated( NextFilter nextFilter, IoSession session )
+			throws Exception
+	{
+		if ( !provider.isBlocked( ( (InetSocketAddress) session.getRemoteAddress() ).getAddress() ) ) {
+			// forward if not blocked
+			nextFilter.sessionCreated( session );
+		} else {
+			blockSession( session );
+		}
+	}
+
+	protected void blockSession( IoSession session )
+	{
+		log.info( "Blocked connection from : " + session.getRemoteAddress() );
+		session.close();
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Copied: trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressProvider.java (from rev 317, trunk/src/main/java/rtspproxy/auth/IpAddressProvider.java)
===================================================================
--- trunk/src/main/java/rtspproxy/auth/IpAddressProvider.java	2005-12-04 23:45:01 UTC (rev 317)
+++ trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressProvider.java	2005-12-08 08:54:20 UTC (rev 322)
@@ -0,0 +1,35 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.filter.ipaddress;
+
+import java.net.InetAddress;
+
+/**
+ * @author Matteo Merli
+ */
+public interface IpAddressProvider
+{
+
+	public void init() throws Exception;
+
+	public void shutdown() throws Exception;
+	
+	public boolean isBlocked( InetAddress address );
+	
+}


Property changes on: trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressProvider.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Copied: trunk/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java (from rev 317, trunk/src/main/java/rtspproxy/auth/PlainTextIpAddressProvider.java)
===================================================================
--- trunk/src/main/java/rtspproxy/auth/PlainTextIpAddressProvider.java	2005-12-04 23:45:01 UTC (rev 317)
+++ trunk/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java	2005-12-08 08:54:20 UTC (rev 322)
@@ -0,0 +1,162 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.filter.ipaddress;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.io.Reader;
+import java.net.InetAddress;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.regex.Pattern;
+
+import org.apache.log4j.Logger;
+
+import rtspproxy.Config;
+
+/**
+ * Implementation of the IpAddressFilter that is based on plain 
+ * text file containing instruction on "allowed" and "denied" 
+ * addresses and hosts.
+ * 
+ * @author Matteo Merli
+ */
+public class PlainTextIpAddressProvider implements IpAddressProvider
+{
+
+	private static Logger log = Logger.getLogger( PlainTextIpAddressProvider.class );
+
+	private enum RuleType {
+		Allow, Deny
+	};
+
+	private static class Rule
+	{
+
+		public RuleType type;
+		public Pattern pattern;
+	}
+
+	private static List<Rule> rules = new LinkedList<Rule>();
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.auth.IpAddressProvider#init()
+	 */
+	public void init() throws Exception
+	{
+		// Load rules from file
+		String fileName = Config.getHome()
+				+ File.separator
+				+ Config.get( "auth.ipfilter.text.file", "conf" + File.separator
+						+ "ipfilter.txt" );
+
+		loadRules( new FileReader( new File( fileName ) ) );
+
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.auth.IpAddressProvider#shutdown()
+	 */
+	public void shutdown() throws Exception
+	{
+		rules.clear();
+	}
+
+	/* (non-Javadoc)
+	 * @see rtspproxy.auth.IpAddressProvider#isBlocked(java.net.InetAddress)
+	 */
+	public boolean isBlocked( InetAddress address )
+	{
+		boolean blocked = true; // by default the address is blocked
+		String[] hostip = address.toString().split( "/" );
+		String host = hostip[0];
+		String ip = hostip[1];
+
+		for ( Rule rule : rules ) {
+			if ( blocked && rule.type == RuleType.Deny )
+				// Don't need to check, up to now this IP is already
+				// blocked
+				continue;
+
+			if ( rule.pattern.matcher( ip ).matches()
+					|| rule.pattern.matcher( host ).matches() )
+				// the address matches the pattern 
+				// check if it's allow or deny
+				blocked = ( rule.type == RuleType.Allow ) ? false : true;
+		}
+
+		return blocked;
+	}
+
+	/** 
+	 * Reads the rules from a file
+	 * @param reader Reader of a file containing the access rules
+	 * @throws IOException
+	 */
+	protected void loadRules( Reader reader ) throws IOException
+	{
+		BufferedReader in = new BufferedReader( reader );
+
+		String line;
+		int lineNumber = 0;
+		try {
+			while ( ( line = in.readLine() ) != null ) {
+				line = line.replaceAll( "\t", " " ); // replace tabs 
+				line = line.trim();
+				++lineNumber;
+
+				if ( line.length() == 0 )
+					continue; // Ignore empty lines 
+				if ( line.startsWith( "#" ) )
+					continue; // Ignore comments
+				RuleType ruleType = null;
+				if ( line.startsWith( "Allow" ) )
+					ruleType = RuleType.Allow;
+				else
+					if ( line.startsWith( "Deny" ) )
+						ruleType = RuleType.Deny;
+					else
+						throw new IOException( "Invalid filter pattern (line "
+								+ lineNumber + ")" );
+
+				// read the pattern
+				String[] patternSplit = line.split( " ", 2 );
+				if ( patternSplit.length != 2 )
+					throw new IOException( "Invalid filter pattern (line " + lineNumber
+							+ ")" );
+				String pattern = patternSplit[1];
+				log.debug( "Rule: " + ruleType + " " + pattern );
+
+				// Transform the patterns escaping "." and "*" characters
+				pattern = pattern.replaceAll( "\\.", "\\\\." );
+				pattern = pattern.replaceAll( "\\*", ".*" );
+
+				Rule rule = new Rule();
+				rule.type = ruleType;
+				rule.pattern = Pattern.compile( pattern );
+				rules.add( rule );
+			}
+		} catch ( IOException e ) {
+			log.error( "Error reading IpAddressFilter rules: " + e );
+			throw e;
+		}
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev



From merlimat at berlios.de  Thu Dec  8 09:57:01 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 09:57:01 +0100
Subject: [Rtspproxy-devel] r323 - trunk/src/test/java/rtspproxy
Message-ID: <200512080857.jB88v1GR007113@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 09:56:58 +0100 (Thu, 08 Dec 2005)
New Revision: 323

Added:
   trunk/src/test/java/rtspproxy/filter/
Removed:
   trunk/src/test/java/rtspproxy/auth/
Log:
Moved IpAddressFilter to rtspproxy.filter.ipaddress



From merlimat at berlios.de  Thu Dec  8 11:25:54 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 11:25:54 +0100
Subject: [Rtspproxy-devel] r324 - trunk/src/test/java/rtspproxy
Message-ID: <200512081025.jB8APsmX026290@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 11:25:41 +0100 (Thu, 08 Dec 2005)
New Revision: 324

Added:
   trunk/src/test/java/rtspproxy/filter_back/
Log:
Moved IpAddressFilter to rtspproxy.filter.ipaddress



From merlimat at berlios.de  Thu Dec  8 11:34:08 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 11:34:08 +0100
Subject: [Rtspproxy-devel] r325 - trunk/src/test/java/rtspproxy
Message-ID: <200512081034.jB8AY8qY028706@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 11:34:06 +0100 (Thu, 08 Dec 2005)
New Revision: 325

Removed:
   trunk/src/test/java/rtspproxy/filter/
Log:
Moved IpAddressFilter to rtspproxy.filter.ipaddress



From merlimat at berlios.de  Thu Dec  8 11:34:22 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 11:34:22 +0100
Subject: [Rtspproxy-devel] r326 - in trunk/src/test/java/rtspproxy: . filter filter/ipaddress
Message-ID: <200512081034.jB8AYLAR028796@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 11:34:20 +0100 (Thu, 08 Dec 2005)
New Revision: 326

Added:
   trunk/src/test/java/rtspproxy/filter/
   trunk/src/test/java/rtspproxy/filter/ipaddress/
   trunk/src/test/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProviderTest.java
Removed:
   trunk/src/test/java/rtspproxy/filter_back/
Log:
Moved IpAddressFilter to rtspproxy.filter.ipaddress

Added: trunk/src/test/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProviderTest.java
===================================================================
--- trunk/src/test/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProviderTest.java	2005-12-08 10:34:06 UTC (rev 325)
+++ trunk/src/test/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProviderTest.java	2005-12-08 10:34:20 UTC (rev 326)
@@ -0,0 +1,74 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+package rtspproxy.filter.ipaddress;
+
+import java.io.StringReader;
+import java.net.InetAddress;
+
+import rtspproxy.filter.ipaddress.PlainTextIpAddressProvider;
+
+import junit.framework.TestCase;
+
+/**
+ * @author Matteo Merli
+ */
+public class PlainTextIpAddressProviderTest extends TestCase
+{
+
+	private static final String CRLF = "\r\n";
+
+	public static void main( String[] args )
+	{
+		junit.textui.TestRunner.run( PlainTextIpAddressProviderTest.class );
+	}
+
+	public void test1() throws Exception
+	{
+		// prepare
+		PlainTextIpAddressProvider provider = new PlainTextIpAddressProvider();
+		StringBuilder rules = new StringBuilder();
+		rules.append( "Deny *" + CRLF );
+		rules.append( "Allow 127.0.0.1" + CRLF );
+		provider.loadRules( new StringReader( rules.toString() ) );
+
+		// tests
+		assertTrue( provider.isBlocked( InetAddress.getByName( "10.0.0.2" ) ) );
+		assertFalse( provider.isBlocked( InetAddress.getByName( "127.0.0.1" ) ) );
+
+		// close
+		provider.shutdown();
+	}
+	
+	public void test2() throws Exception
+	{
+		// prepare
+		PlainTextIpAddressProvider provider = new PlainTextIpAddressProvider();
+		StringBuilder rules = new StringBuilder();
+		rules.append( "Allow *" + CRLF );
+		rules.append( "Deny 10.0.0.13" + CRLF );
+		provider.loadRules( new StringReader( rules.toString() ) );
+
+		// tests
+		assertTrue( provider.isBlocked( InetAddress.getByName( "10.0.0.13" ) ) );
+		assertFalse( provider.isBlocked( InetAddress.getByName( "127.0.0.1" ) ) );
+
+		// close
+		provider.shutdown();
+	}
+
+}


Property changes on: trunk/src/test/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProviderTest.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev



From merlimat at berlios.de  Thu Dec  8 14:17:25 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 14:17:25 +0100
Subject: [Rtspproxy-devel] r327 - in trunk/src/main/java/rtspproxy/filter: . authentication
Message-ID: <200512081317.jB8DHPVE017490@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 14:17:16 +0100 (Thu, 08 Dec 2005)
New Revision: 327

Added:
   trunk/src/main/java/rtspproxy/filter/authentication/
   trunk/src/main/java/rtspproxy/filter/authentication/scheme/
Log:
* Moved AuthenticationFilter to rtspproxy.filter.authentication



From merlimat at berlios.de  Thu Dec  8 14:17:41 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 14:17:41 +0100
Subject: [Rtspproxy-devel] r328 - in trunk/src/main/java/rtspproxy: . filter/authentication filter/authentication/scheme
Message-ID: <200512081317.jB8DHfmV017562@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 14:17:33 +0100 (Thu, 08 Dec 2005)
New Revision: 328

Added:
   trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
   trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationProvider.java
   trunk/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java
   trunk/src/main/java/rtspproxy/filter/authentication/scheme/AuthenticationScheme.java
   trunk/src/main/java/rtspproxy/filter/authentication/scheme/BasicAuthentication.java
   trunk/src/main/java/rtspproxy/filter/authentication/scheme/Credentials.java
Removed:
   trunk/src/main/java/rtspproxy/auth/
Log:
* Moved AuthenticationFilter to rtspproxy.filter.authentication

Copied: trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java (from rev 317, trunk/src/main/java/rtspproxy/auth/AuthenticationFilter.java)
===================================================================
--- trunk/src/main/java/rtspproxy/auth/AuthenticationFilter.java	2005-12-04 23:45:01 UTC (rev 317)
+++ trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java	2005-12-08 13:17:33 UTC (rev 328)
@@ -0,0 +1,213 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.filter.authentication;
+
+import org.apache.log4j.Logger;
+import org.apache.mina.common.ByteBuffer;
+import org.apache.mina.common.IoFilterAdapter;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.WriteFuture;
+
+import rtspproxy.Config;
+import rtspproxy.Reactor;
+import rtspproxy.filter.authentication.scheme.AuthenticationScheme;
+import rtspproxy.filter.authentication.scheme.BasicAuthentication;
+import rtspproxy.filter.authentication.scheme.Credentials;
+import rtspproxy.rtsp.RtspCode;
+import rtspproxy.rtsp.RtspMessage;
+import rtspproxy.rtsp.RtspRequest;
+import rtspproxy.rtsp.RtspResponse;
+
+/**
+ * @author Matteo Merli
+ */
+public class AuthenticationFilter extends IoFilterAdapter
+{
+
+	private static Logger log = Logger.getLogger( AuthenticationFilter.class );
+
+	/** Different authentication schemes implementation */
+	private static AuthenticationScheme[] schemes = { new BasicAuthentication() };
+
+	/** Contains a comma-separated list of the scheme names. */
+	private static String schemesString;
+
+	static {
+		// Pre-fill the scheme names
+		schemesString = new String();
+		for ( int i = 0; i < schemes.length; i++ ) {
+			schemesString += schemes[i].getName();
+			if ( i < schemes.length - 1 )
+				schemesString += ", ";
+		}
+	}
+
+	/**
+	 * Backend provider.
+	 */
+	private AuthenticationProvider provider;
+
+	private String realm;
+
+	/**
+	 * Construct a new AuthenticationFilter. Looks at the configuration to load
+	 * the choseen backend implementation.
+	 */
+	public AuthenticationFilter()
+	{
+		// Check which backend implementation to use
+		// Default is plain-text implementation
+		String className = Config.get( "proxy.auth.authentication.implementationClass",
+				"rtspproxy.auth.PlainTextAuthenticationProvider" );
+
+		Class providerClass;
+		try {
+			providerClass = Class.forName( className );
+
+		} catch ( ClassNotFoundException e ) {
+			log.fatal( "Invalid AuthenticationProvider class: " + className );
+			Reactor.stop();
+			return;
+		}
+
+		// Check if the class implements the IpAddressProvider interfaces
+		boolean found = false;
+		for ( Class interFace : providerClass.getInterfaces() ) {
+			if ( AuthenticationProvider.class.equals( interFace ) ) {
+				found = true;
+				break;
+			}
+		}
+
+		if ( !found ) {
+			log.fatal( "Class (" + providerClass
+					+ ") does not implement the AuthenticationProvider interface." );
+			Reactor.stop();
+			return;
+		}
+
+		try {
+			provider = (AuthenticationProvider) providerClass.newInstance();
+			provider.init();
+
+		} catch ( Exception e ) {
+			log.fatal( "Error starting AuthenticationProvider: " + e );
+			Reactor.stop();
+			return;
+		}
+
+		realm = "RtspProxy " + Config.get( "proxy.rtsp.interface", "" );
+
+		log.info( "Using AuthenticationFilter (" + className + ")" );
+	}
+
+	public void messageReceived( NextFilter nextFilter, IoSession session, Object message )
+			throws Exception
+	{
+		if ( !( message instanceof RtspRequest ) ) {
+			// Shouldn't happen
+			log.warn( "Object message is not a RTSP message" );
+			return;
+		}
+
+		if ( session.getAttribute( "auth" ) != null ) {
+			// Client already autheticated
+			log.debug( "Already authenticaed: " + session.getAttribute( "auth" ) );
+			nextFilter.messageReceived( session, message );
+		}
+
+		String authString = ( (RtspMessage) message ).getHeader( "Proxy-Authorization" );
+		if ( authString == null ) {
+			log.debug( "RTSP message: \n" + message );
+			RtspResponse response = RtspResponse.errorResponse( RtspCode.ProxyAuthenticationRequired );
+			response.setHeader( "Proxy-Authenticate", schemesString + " realm=\"" + realm
+					+ "\"" );
+
+			// TODO: I should be able to send a RtspMessage here using the
+			// already provided encoder.
+			WriteFuture written = session.write( response );
+			// Why have I to wait here????
+			written.join();
+			// session.close();
+			return;
+		}
+
+		AuthenticationScheme scheme = getAuthenticationScheme( authString );
+		if ( scheme == null ) {
+			RtspResponse response = RtspResponse.errorResponse( RtspCode.BadRequest );
+
+			// TODO: I should be able to send a RtspMessage here using the
+			// already provided encoder.
+			WriteFuture written = session.write( response );
+			// Why have I to wait here????
+			written.join();
+			// session.close();
+			return;
+		}
+
+		// Check the authentication credentials
+		Credentials credentials = scheme.getCredentials( authString );
+		if ( credentials == null || provider.isAuthenticated( credentials ) == false ) {
+			RtspResponse response = RtspResponse.errorResponse( RtspCode.Unauthorized );
+
+			// TODO: I should be able to send a RtspMessage here using the
+			// already provided encoder.
+			WriteFuture written = session.write( ByteBuffer.wrap( response.toString().getBytes() ) );
+			// Why have I to wait here????
+			written.join();
+			session.close();
+			return;
+		}
+
+		/*
+		 * Mark the session with an "authenticated" attribute. This will prevent
+		 * the check for the credentials for every message received.
+		 */
+		session.setAttribute( "auth", credentials.getUserName() );
+
+		// Forward message
+		nextFilter.messageReceived( session, message );
+	}
+
+	/**
+	 * Gets the authentication scheme stated by the client.
+	 * 
+	 * @param authString
+	 * @return
+	 */
+	private static AuthenticationScheme getAuthenticationScheme( String authString )
+	{
+		String schemeName;
+		try {
+			schemeName = authString.split( " " )[0];
+		} catch ( IndexOutOfBoundsException e ) {
+			// Malformed auth string
+			return null;
+		}
+
+		for ( int i = 0; i < schemes.length; i++ ) {
+			if ( schemeName.equalsIgnoreCase( schemes[i].getName() ) )
+				return schemes[i];
+		}
+
+		// Scheme not valid
+		return null;
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Copied: trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationProvider.java (from rev 317, trunk/src/main/java/rtspproxy/auth/AuthenticationProvider.java)
===================================================================
--- trunk/src/main/java/rtspproxy/auth/AuthenticationProvider.java	2005-12-04 23:45:01 UTC (rev 317)
+++ trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationProvider.java	2005-12-08 13:17:33 UTC (rev 328)
@@ -0,0 +1,56 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+package rtspproxy.filter.authentication;
+
+import rtspproxy.filter.authentication.scheme.Credentials;
+
+/**
+ * Interface for authentication providers
+ * 
+ * @author Matteo Merli
+ */
+public interface AuthenticationProvider
+{
+
+	/**
+	 * Called once at service startup. Should be used to initialize the
+	 * provider.
+	 * 
+	 * @throws Exception
+	 */
+	public void init() throws Exception;
+
+	/**
+	 * Called once at service shutdown.
+	 * 
+	 * @throws Exception
+	 */
+	public void shutdown() throws Exception;
+
+	/**
+	 * Called every time that there is the need to verify the identity of a
+	 * user.
+	 * 
+	 * @param credentials
+	 *        User credentials (username and password)
+	 * @return true if the user succesfull authenticate with the given username
+	 *         and password. false if user is not present or the password is
+	 *         wrong.
+	 */
+	public boolean isAuthenticated( Credentials credentials );
+}


Property changes on: trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationProvider.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Copied: trunk/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java (from rev 317, trunk/src/main/java/rtspproxy/auth/PlainTextAuthenticationProvider.java)
===================================================================
--- trunk/src/main/java/rtspproxy/auth/PlainTextAuthenticationProvider.java	2005-12-04 23:45:01 UTC (rev 317)
+++ trunk/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java	2005-12-08 13:17:33 UTC (rev 328)
@@ -0,0 +1,87 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.filter.authentication;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.Properties;
+
+import org.apache.log4j.Logger;
+
+import rtspproxy.Config;
+import rtspproxy.Reactor;
+import rtspproxy.filter.authentication.scheme.Credentials;
+
+/**
+ * @author Matteo Merli
+ */
+public class PlainTextAuthenticationProvider implements AuthenticationProvider
+{
+
+	private static Logger log = Logger.getLogger( PlainTextAuthenticationProvider.class );
+
+	private static Properties usersDb = new Properties();
+
+	public void init() throws Exception
+	{
+		// Load users from file
+		String fileName = Config.getHome()
+				+ File.separator
+				+ Config.get( "auth.authentication.text.file", "conf" + File.separator
+						+ "users.txt" );
+
+		try {
+			usersDb.load( new FileInputStream( new File( fileName ) ) );
+
+		} catch ( FileNotFoundException e ) {
+			log.fatal( "Users file not found:" + e );
+			Reactor.stop();
+		} catch ( IOException e ) {
+			log.fatal( "Error reading users file: " + e );
+			Reactor.stop();
+		} catch ( IllegalArgumentException e ) {
+			log.fatal( "The users file is not valid" );
+			Reactor.stop();
+		}
+
+	}
+
+	public void shutdown() throws Exception
+	{
+		// Do nothing
+	}
+
+	public boolean isAuthenticated( Credentials credentials )
+	{
+		String storedPassword = usersDb.getProperty( credentials.getUserName() );
+		if ( storedPassword == null )
+			// User is not present
+			return false;
+
+		if ( storedPassword.compareTo( credentials.getPassword() ) == 0 )
+			// Password is ok
+			return true;
+		else
+			// Password is wrong
+			return false;
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/filter/authentication/scheme/AuthenticationScheme.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/scheme/AuthenticationScheme.java	2005-12-08 13:17:16 UTC (rev 327)
+++ trunk/src/main/java/rtspproxy/filter/authentication/scheme/AuthenticationScheme.java	2005-12-08 13:17:33 UTC (rev 328)
@@ -0,0 +1,37 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.filter.authentication.scheme;
+
+/**
+ * Base interface for diverse authentication schemes such as "Basic", "Digest"
+ * and possibly others.
+ * 
+ * @author Matteo Merli
+ */
+public interface AuthenticationScheme
+{
+
+	/**
+	 * @return the name of the authentication scheme.
+	 */
+	public String getName();
+	
+	public Credentials getCredentials( String authString );
+
+}
\ No newline at end of file


Property changes on: trunk/src/main/java/rtspproxy/filter/authentication/scheme/AuthenticationScheme.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/filter/authentication/scheme/BasicAuthentication.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/scheme/BasicAuthentication.java	2005-12-08 13:17:16 UTC (rev 327)
+++ trunk/src/main/java/rtspproxy/filter/authentication/scheme/BasicAuthentication.java	2005-12-08 13:17:33 UTC (rev 328)
@@ -0,0 +1,67 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.filter.authentication.scheme;
+
+import org.apache.log4j.Logger;
+
+import rtspproxy.lib.Base64;
+
+/**
+ * Implementation of the Basic authentication scheme.
+ * 
+ * @author Matteo Merli
+ */
+public class BasicAuthentication implements AuthenticationScheme
+{
+
+	private static Logger log = Logger.getLogger( BasicAuthentication.class );
+
+	public String getName()
+	{
+		return "Basic";
+	}
+
+	public Credentials getCredentials( String authString )
+	{
+		String username;
+		String password;
+
+		try {
+			// authString = Basic [base64 data]
+			authString = authString.split( " " )[1];
+			// Basic scheme credential are BASE64 encoded.
+			byte[] decBytes = Base64.decode( authString );
+			StringBuilder sb = new StringBuilder();
+			for ( byte b : decBytes )
+				sb.append( (char)b );
+			String auth = sb.toString();
+
+			log.debug( "auth: " + auth );
+			username = auth.split( ":", 2 )[0];
+			password = auth.split( ":", 2 )[1];
+			log.debug( "username=" + username + " - password=" + password );
+		} catch ( Exception e ) {
+			log.info( "Malformed authString: " + authString );
+			return null;
+		}
+
+		return new Credentials( username, password );
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/filter/authentication/scheme/BasicAuthentication.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/filter/authentication/scheme/Credentials.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/scheme/Credentials.java	2005-12-08 13:17:16 UTC (rev 327)
+++ trunk/src/main/java/rtspproxy/filter/authentication/scheme/Credentials.java	2005-12-08 13:17:33 UTC (rev 328)
@@ -0,0 +1,71 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.filter.authentication.scheme;
+
+/**
+ * Holds the credentials (username and password) sent by the client.
+ * 
+ * @author Matteo Merli
+ */
+public class Credentials
+{
+
+	private String userName;
+	private String password;
+
+	public Credentials( String userName, String password )
+	{
+		this.userName = userName;
+		this.password = password;
+	}
+
+	/**
+	 * @return Returns the password.
+	 */
+	public String getPassword()
+	{
+		return password;
+	}
+
+	/**
+	 * @param password
+	 *        The password to set.
+	 */
+	public void setPassword( String password )
+	{
+		this.password = password;
+	}
+
+	/**
+	 * @return Returns the userName.
+	 */
+	public String getUserName()
+	{
+		return userName;
+	}
+
+	/**
+	 * @param userName
+	 *        The userName to set.
+	 */
+	public void setUserName( String userName )
+	{
+		this.userName = userName;
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/filter/authentication/scheme/Credentials.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev



From merlimat at berlios.de  Thu Dec  8 14:18:57 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 14:18:57 +0100
Subject: [Rtspproxy-devel] r329 - trunk/src/main/java/rtspproxy/filter
Message-ID: <200512081318.jB8DIv1R017859@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 14:18:33 +0100 (Thu, 08 Dec 2005)
New Revision: 329

Modified:
   trunk/src/main/java/rtspproxy/filter/RtspFilters.java
Log:
* Moved AuthenticationFilter to rtspproxy.filter.authentication

Modified: trunk/src/main/java/rtspproxy/filter/RtspFilters.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/RtspFilters.java	2005-12-08 13:17:33 UTC (rev 328)
+++ trunk/src/main/java/rtspproxy/filter/RtspFilters.java	2005-12-08 13:18:33 UTC (rev 329)
@@ -27,8 +27,8 @@
 import org.apache.mina.filter.codec.ProtocolEncoder;
 
 import rtspproxy.Config;
-import rtspproxy.auth.AuthenticationFilter;
-import rtspproxy.auth.IpAddressFilter;
+import rtspproxy.filter.authentication.AuthenticationFilter;
+import rtspproxy.filter.ipaddress.IpAddressFilter;
 import rtspproxy.rtsp.RtspDecoder;
 import rtspproxy.rtsp.RtspEncoder;
 



From merlimat at berlios.de  Thu Dec  8 15:14:51 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 15:14:51 +0100
Subject: [Rtspproxy-devel] r330 - trunk/src/main/java/gov/nist/core
Message-ID: <200512081414.jB8EEp8o008149@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 15:14:34 +0100 (Thu, 08 Dec 2005)
New Revision: 330

Removed:
   trunk/src/main/java/gov/nist/core/net/
Log:
Removed gov.nist.core.net. Was not used and gave problems.



From merlimat at berlios.de  Thu Dec  8 15:20:21 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 15:20:21 +0100
Subject: [Rtspproxy-devel] r331 - in trunk/src/main/java/rtspproxy: filter proxy
Message-ID: <200512081420.jB8EKLWO011006@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 15:20:04 +0100 (Thu, 08 Dec 2005)
New Revision: 331

Modified:
   trunk/src/main/java/rtspproxy/filter/RtspFilters.java
   trunk/src/main/java/rtspproxy/proxy/ClientSide.java
   trunk/src/main/java/rtspproxy/proxy/ServerSide.java
Log:
Moved rewrite filter initialization in RtspFilters class

Modified: trunk/src/main/java/rtspproxy/filter/RtspFilters.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/RtspFilters.java	2005-12-08 14:14:34 UTC (rev 330)
+++ trunk/src/main/java/rtspproxy/filter/RtspFilters.java	2005-12-08 14:20:04 UTC (rev 331)
@@ -27,8 +27,10 @@
 import org.apache.mina.filter.codec.ProtocolEncoder;
 
 import rtspproxy.Config;
+import rtspproxy.Reactor;
 import rtspproxy.filter.authentication.AuthenticationFilter;
 import rtspproxy.filter.ipaddress.IpAddressFilter;
+import rtspproxy.filter.rewrite.RequestUrlRewritingImpl;
 import rtspproxy.rtsp.RtspDecoder;
 import rtspproxy.rtsp.RtspEncoder;
 
@@ -106,4 +108,20 @@
 			chain.addLast( "authentication", authenticationFilter );
 		}
 	}
+
+	protected void addRewriteFilter( IoFilterChain chain )
+	{
+		// TODO: move this to RtspFilters
+		String rewritingFilter = Config.get(
+				"filter.requestUrlRewriting.implementationClass", null );
+
+		try {
+			if ( rewritingFilter != null )
+				chain.addLast( "requestUrlRewriting", new RequestUrlRewritingImpl(
+						rewritingFilter ) );
+		} catch ( Exception e ) {
+			// already logged
+			Reactor.stop();
+		}
+	}
 }

Modified: trunk/src/main/java/rtspproxy/proxy/ClientSide.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ClientSide.java	2005-12-08 14:14:34 UTC (rev 330)
+++ trunk/src/main/java/rtspproxy/proxy/ClientSide.java	2005-12-08 14:20:04 UTC (rev 331)
@@ -19,13 +19,10 @@
 package rtspproxy.proxy;
 
 import org.apache.log4j.Logger;
-import org.apache.mina.common.IoFilterChain;
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
 import org.apache.mina.filter.codec.ProtocolDecoderException;
 
-import rtspproxy.Config;
-import rtspproxy.filter.impl.RequestUrlRewritingImpl;
 import rtspproxy.lib.Exceptions;
 import rtspproxy.rtsp.RtspCode;
 import rtspproxy.rtsp.RtspMessage;
@@ -43,16 +40,6 @@
 	@Override
 	public void sessionCreated( IoSession session ) throws Exception
 	{
-		IoFilterChain filterChain = session.getFilterChain();
-
-		// TODO: move this to RtspFilters
-		String rewritingFilter = Config.get(
-				"filter.requestUrlRewriting.implementationClass", null );
-
-		if ( rewritingFilter != null )
-			filterChain.addLast( "requestUrlRewriting", new RequestUrlRewritingImpl(
-					rewritingFilter ) );
-
 		log.info( "New connection from " + session.getRemoteAddress() );
 		// Creates a new ProxyHandler and saves it
 		// as a Session attribute

Modified: trunk/src/main/java/rtspproxy/proxy/ServerSide.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ServerSide.java	2005-12-08 14:14:34 UTC (rev 330)
+++ trunk/src/main/java/rtspproxy/proxy/ServerSide.java	2005-12-08 14:20:04 UTC (rev 331)
@@ -14,12 +14,9 @@
 package rtspproxy.proxy;
 
 import org.apache.log4j.Logger;
-import org.apache.mina.common.IoFilterChain;
 import org.apache.mina.common.IoHandlerAdapter;
 import org.apache.mina.common.IoSession;
 
-import rtspproxy.Config;
-import rtspproxy.filter.impl.RequestUrlRewritingImpl;
 import rtspproxy.lib.Exceptions;
 import rtspproxy.rtsp.RtspMessage;
 import rtspproxy.rtsp.RtspRequest;
@@ -36,18 +33,7 @@
 	@Override
 	public void sessionCreated( IoSession session ) throws Exception
 	{
-		IoFilterChain filterChain = session.getFilterChain();
-
-		// TODO: move this to RtspFilter
-		String rewritingFilter = Config.get(
-				"filter.requestUrlRewriting.implementationClass", null );
-
-		if ( rewritingFilter != null )
-			filterChain.addLast( "requestUrlRewriting", new RequestUrlRewritingImpl(
-					rewritingFilter ) );
-
 		log.info( "Created session to server: " + session.getRemoteAddress() );
-
 	}
 
 	@Override



From merlimat at berlios.de  Thu Dec  8 15:44:09 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 15:44:09 +0100
Subject: [Rtspproxy-devel] r332 - trunk/src/main/java/rtspproxy/rtsp
Message-ID: <200512081444.jB8Ei95u020018@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 15:43:34 +0100 (Thu, 08 Dec 2005)
New Revision: 332

Modified:
   trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java
Log:
Forgot to close stream

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2005-12-08 14:20:04 UTC (rev 331)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2005-12-08 14:43:34 UTC (rev 332)
@@ -29,6 +29,7 @@
 import org.apache.mina.filter.codec.ProtocolDecoderOutput;
 
 import rtspproxy.lib.Exceptions;
+import sun.tools.tree.FinallyStatement;
 
 /**
  * 
@@ -210,6 +211,12 @@
 			 */
 			Exceptions.logStackTrace( e );
 			return;
+
+		} finally {
+			try {
+				reader.close();
+			} catch ( Exception e ) {
+			}
 		}
 
 		if ( state == ReadState.Dispatch ) {



From merlimat at berlios.de  Thu Dec  8 17:49:45 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 17:49:45 +0100
Subject: [Rtspproxy-devel] r333 - in trunk/src/main/java/rtspproxy: . lib
Message-ID: <200512081649.jB8Gnjej007849@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 17:49:37 +0100 (Thu, 08 Dec 2005)
New Revision: 333

Added:
   trunk/src/main/java/rtspproxy/ShutdownHandler.java
Removed:
   trunk/src/main/java/rtspproxy/lib/SignalInterceptor.java
   trunk/src/main/java/rtspproxy/lib/SignalInterceptorException.java
   trunk/src/main/java/rtspproxy/lib/SignalInterceptorHelper.java
Modified:
   trunk/src/main/java/rtspproxy/Main.java
   trunk/src/main/java/rtspproxy/Reactor.java
Log:
Getting rid of woodoo Signal interceptor. Using shutdown hook to handle 
shutdown.

Modified: trunk/src/main/java/rtspproxy/Main.java
===================================================================
--- trunk/src/main/java/rtspproxy/Main.java	2005-12-08 14:43:34 UTC (rev 332)
+++ trunk/src/main/java/rtspproxy/Main.java	2005-12-08 16:49:37 UTC (rev 333)
@@ -20,13 +20,11 @@
 import org.apache.log4j.Logger;
 
 import rtspproxy.lib.Exceptions;
-import rtspproxy.lib.SignalInterceptor;
-import rtspproxy.lib.SignalInterceptorException;
 
 /**
  * 
  */
-public class Main extends SignalInterceptor
+public class Main
 {
 
 	static Logger log = Logger.getLogger( "rtspproxy" );
@@ -46,16 +44,8 @@
 		new Config();
 
 		// Register the signal handler
-		try {
-			Main main = new Main();
-			main.register( "TERM" );
-			main.register( "INT" );
-			log.debug( "Signal handlig enabled." );
+		Runtime.getRuntime().addShutdownHook( new ShutdownHandler() );
 
-		} catch ( SignalInterceptorException sie ) {
-			log.warn( "Unable to register signal handling." );
-		}
-
 		try {
 			log.info( "Starting " + Config.getName() + " " + Config.getVersion() );
 			Reactor.setStandalone( true );
@@ -68,25 +58,4 @@
 		}
 	}
 
-	/*
-	 * (non-Javadoc)
-	 * 
-	 * @see rtspproxy.lib.SignalInterceptor#handle(java.lang.String)
-	 */
-	@Override
-	protected boolean handle( String signalName )
-	{
-		log.info( "Received signal: " + signalName );
-		try {
-			log.info( "Stopping " + Config.getName() + " " + Config.getVersion() );
-			Reactor.stop();
-
-		} catch ( Exception e ) {
-			log.fatal( "Exception in the reactor: " + e );
-			Exceptions.logStackTrace( e );
-		}
-
-		return true;
-	}
-
 }

Modified: trunk/src/main/java/rtspproxy/Reactor.java
===================================================================
--- trunk/src/main/java/rtspproxy/Reactor.java	2005-12-08 14:43:34 UTC (rev 332)
+++ trunk/src/main/java/rtspproxy/Reactor.java	2005-12-08 16:49:37 UTC (rev 333)
@@ -69,11 +69,13 @@
 			if ( rtpServerService != null )
 				rtpServerService.stop();
 		} catch ( Exception e ) {
-			log.debug( "Error shutting down: " + e  );
+			log.debug( "Error shutting down: " + e );
 		}
+		
+		log.info( "Shutdown completed" );
 
 		if ( isStandalone )
-			System.exit( 0 );
+			Runtime.getRuntime().halt( 0 );
 	}
 
 	protected static synchronized ServiceRegistry getRegistry()

Added: trunk/src/main/java/rtspproxy/ShutdownHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/ShutdownHandler.java	2005-12-08 14:43:34 UTC (rev 332)
+++ trunk/src/main/java/rtspproxy/ShutdownHandler.java	2005-12-08 16:49:37 UTC (rev 333)
@@ -0,0 +1,48 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy;
+
+import org.apache.log4j.Logger;
+
+import rtspproxy.lib.Exceptions;
+
+/**
+ * The thread holded by this class is started in the shutdown phase.
+ * 
+ * @author Matteo Merli
+ */
+public class ShutdownHandler extends Thread
+{
+
+	private static Logger log = Logger.getLogger( ShutdownHandler.class );
+
+	public void run()
+	{
+		log.info( "Shutting down" );
+		try {
+			log.info( "Stopping " + Config.getName() + " " + Config.getVersion() );
+			Reactor.stop();
+
+		} catch ( Exception e ) {
+			log.fatal( "Exception in the reactor: " + e );
+			Exceptions.logStackTrace( e );
+		}
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/ShutdownHandler.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Deleted: trunk/src/main/java/rtspproxy/lib/SignalInterceptor.java
===================================================================
--- trunk/src/main/java/rtspproxy/lib/SignalInterceptor.java	2005-12-08 14:43:34 UTC (rev 332)
+++ trunk/src/main/java/rtspproxy/lib/SignalInterceptor.java	2005-12-08 16:49:37 UTC (rev 333)
@@ -1,130 +0,0 @@
-/*
- * SignalInterceptor.java
- * Copyright (C) 2005 David Clausen
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public 
- * License as published by the Free Software Foundation; either 
- * version 2.1 of the License, or (at your option) any later 
- * version.
- *
- * This library is distributed in the hope that it will be useful, 
- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
- * GNU Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public 
- * License along with this library; if not, write to the 
- * Free Software Foundation, Inc., 
- * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
- */
-
-/*
- * $Id$
- * 
- * $URL$
- * 
- */
-
-package rtspproxy.lib;
-
-/**
- * <p>
- * A simple wrapper around the undocumented and unsupported
- * <code>sun.misc.Signal*</code> classes which are present in most JVM
- * implementations. It can be used to trap OS signals such as SIGINT, SIGTERM,
- * and SIGHUP on these JVMs.
- * </p>
- * <p>
- * <code>SignalInterceptor</code> provides a level of indirection between your
- * code and <code>sun.misc.SignalHandler</code> which can be useful for the
- * following reasons:
- * </p>
- * <ol>
- * <li>It gracefully handles the situation when the
- * <code>sun.misc.Signal*</code> classes are not available, throwing a checked
- * exception out of the <code>register</code> method, rather than awkward
- * <code>LinkageErrors</code> durring class initialization.</li>
- * <li>It has a simple technique for chaining signal handlers.</li>
- * <li>It is documented and has gone through some testing.</li>
- * </ol>
- * <p>
- * Some possible uses of this class are:
- * </p>
- * <ul>
- * <li>Change the behavior of SIGHUP so that instead of exiting the JVM, your
- * application reloads its configuration file.</li>
- * <li>Log the fatal signals SIGHUP, SIGINT, and SIGTERM before passing them
- * onto the JVM's native handlers, so that you have a record of when and why
- * your application exited.</li>
- * <li>Implement your own version of ShutdownHooks which run prior to the
- * standard ones. This can be useful because many other packages have their own
- * ShutdownHooks which close resources which you might like to use. For example
- * the <code>java.util.logging</code> package closes all of its files in its
- * ShutdownHook, which means your ShutdownHook might not be able to log
- * anything. Note that you would still need to deal with
- * <code>System.exit()</code>, but there is a different hack available for
- * that <code>;)</code>.</li>
- * </ul>
- */
-public abstract class SignalInterceptor
-{
-
-	protected SignalInterceptor()
-	{
-	}
-
-	/**
-	 * <p>
-	 * Register for the given signal. Note that the signal name should <b>not</b>
-	 * begin with <b>SIG</b>. For example, if you are interested in <b>SIGTERM</b>,
-	 * you should call <code>register("TERM")</code>.
-	 * </p>
-	 * <p>
-	 * If the registration fails for any reason, a
-	 * <code>SignalInterceptorException</code> will be thrown. This is usually
-	 * caused by one of the following conditions:
-	 * </p>
-	 * <ul>
-	 * <li>The <code>sun.misc.Signal*</code> classes are not available (e.g.
-	 * you are not using Sun's JVM).</li>
-	 * <li><code>signame</code> is not a valid trappable signal name on this
-	 * OS (e.g. <b>KILL</b> can't be trapped, <b>HUP</b> does not exist on
-	 * Windows)</li>
-	 * <li>The JVM refuses to let you trap <code>signame</code> because it is
-	 * already being used for some other important purpose (e.g. <b>QUIT</b>
-	 * and/or <b>BREAK</b> cause the JVM to print diagnostic output).</li>
-	 * </ul>
-	 */
-	protected void register( String signame ) throws SignalInterceptorException
-	{
-		try {
-			new SignalInterceptorHelper( signame, this );
-		} catch ( Throwable e ) {
-			throw new SignalInterceptorException( signame, e );
-		}
-	}
-
-	/**
-	 * A wrapper around <code>register(String)</code> which never throws an
-	 * exception. Instead, it returns <code>true</code> if registration
-	 * succeeded, and <code>false</code> if it failed.
-	 */
-	protected boolean registerQuietly( String signame )
-	{
-		try {
-			register( signame );
-		} catch ( Throwable e ) {
-			return false;
-		}
-		return true;
-	}
-
-	/**
-	 * Handle the given signal (which you had previously registered for). If
-	 * this method return false, or throws an exception, subsequent handlers in
-	 * the chain will <b>not</b> be called.
-	 */
-	protected abstract boolean handle( String signame );
-
-}

Deleted: trunk/src/main/java/rtspproxy/lib/SignalInterceptorException.java
===================================================================
--- trunk/src/main/java/rtspproxy/lib/SignalInterceptorException.java	2005-12-08 14:43:34 UTC (rev 332)
+++ trunk/src/main/java/rtspproxy/lib/SignalInterceptorException.java	2005-12-08 16:49:37 UTC (rev 333)
@@ -1,44 +0,0 @@
-// $Id$
-/*
- * SignalInterceptorException.java
- * Copyright (C) 2005 David Clausen
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public 
- * License as published by the Free Software Foundation; either 
- * version 2.1 of the License, or (at your option) any later 
- * version.
- *
- * This library is distributed in the hope that it will be useful, 
- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
- * GNU Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public 
- * License along with this library; if not, write to the 
- * Free Software Foundation, Inc., 
- * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
- */
-
-/*
- * $Id$
- * 
- * $URL$
- * 
- */
-
-package rtspproxy.lib;
-
-/**
- * @see SignalInterceptor#register
- */
- at SuppressWarnings("serial")
-public class SignalInterceptorException extends Exception
-{
-
-	SignalInterceptorException( String signal, Throwable cause )
-	{
-		super( "Unable to register for SIG" + signal, cause );
-	}
-
-}

Deleted: trunk/src/main/java/rtspproxy/lib/SignalInterceptorHelper.java
===================================================================
--- trunk/src/main/java/rtspproxy/lib/SignalInterceptorHelper.java	2005-12-08 14:43:34 UTC (rev 332)
+++ trunk/src/main/java/rtspproxy/lib/SignalInterceptorHelper.java	2005-12-08 16:49:37 UTC (rev 333)
@@ -1,63 +0,0 @@
-/*
- * SignalInterceptorHelper.java
- * Copyright (C) 2005 David Clausen
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public 
- * License as published by the Free Software Foundation; either 
- * version 2.1 of the License, or (at your option) any later 
- * version.
- *
- * This library is distributed in the hope that it will be useful, 
- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
- * GNU Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public 
- * License along with this library; if not, write to the 
- * Free Software Foundation, Inc., 
- * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
- */
-
-/*
- * $Id$
- * 
- * $URL$
- * 
- */
-
-package rtspproxy.lib;
-
-import sun.misc.Signal;
-import sun.misc.SignalHandler;
-
-/**
- * <p>
- * Private helper class for <code>SignalInterceptor</code>.
- * </p>
- * 
- * <p>
- * This class exists separately from <code>SignalInterceptor</code> to permit
- * graceful handling of LinkageErrors when the <code>sun.misc.Signal*</code>
- * classes don't exist.
- * </p>
- */
-final class SignalInterceptorHelper implements SignalHandler {
-
-    private final SignalHandler oldHandler;
-
-    private final SignalInterceptor interceptor;
-
-    SignalInterceptorHelper(String signame, SignalInterceptor interceptor) {
-        this.interceptor = interceptor;
-        Signal signal = new Signal(signame);
-        oldHandler = Signal.handle(signal, this);
-    }
-
-    public void handle(Signal sig) {
-        if (interceptor.handle(sig.getName()) && (oldHandler != null)) {
-            oldHandler.handle(sig);
-        }
-    }
-
-}
\ No newline at end of file



From merlimat at berlios.de  Thu Dec  8 17:51:07 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 17:51:07 +0100
Subject: [Rtspproxy-devel] r334 - trunk/src/main/java/rtspproxy/filter
Message-ID: <200512081651.jB8Gp7TY008001@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 17:51:03 +0100 (Thu, 08 Dec 2005)
New Revision: 334

Removed:
   trunk/src/main/java/rtspproxy/filter/RequestUrlRewritingFilter.java
Log:
* Moved rewrite filter under rtspproxy.filter.rewrite

Deleted: trunk/src/main/java/rtspproxy/filter/RequestUrlRewritingFilter.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/RequestUrlRewritingFilter.java	2005-12-08 16:49:37 UTC (rev 333)
+++ trunk/src/main/java/rtspproxy/filter/RequestUrlRewritingFilter.java	2005-12-08 16:51:03 UTC (rev 334)
@@ -1,40 +0,0 @@
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
- *                                                                         *
- ***************************************************************************/
-
-/*
- * $Id: Handler.java 248 2005-10-23 18:47:41Z merlimat $
- * 
- * $URL: https://rbieniek at svn.berlios.de/svnroot/repos/rtspproxy/trunk/src/main/java/rtspproxy/rtsp/Handler.java $
- * 
- */
-package rtspproxy.filter;
-
-import java.net.URL;
-
-/**
- * This filter is used to rewrite the requested URL before passing it
- * to the upstream server.
- * 
- * @author Rainer Bieniek
- */
-public interface RequestUrlRewritingFilter {
-	/**
-	 * rewrite the request URL.
-	 * @return a replacement URL or null if the URL is not to be modified.
-	 */
-	public URL rewriteRequestUrl(URL request);
-
-	/**
-	 * rewrite an URL in a response header.
-	 * @return a replacement URL or null if the URL is not to be modified.
-	 */
-	public URL rewriteResponseHeaderUrl(URL request);
-}



From merlimat at berlios.de  Thu Dec  8 21:46:24 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 21:46:24 +0100
Subject: [Rtspproxy-devel] r335 - in trunk: . src/changes src/resources/conf src/site src/site/xdoc
Message-ID: <200512082046.jB8KkO12026207@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 21:46:19 +0100 (Thu, 08 Dec 2005)
New Revision: 335

Added:
   trunk/src/resources/conf/users.txt
   trunk/src/site/xdoc/authentication.xml
   trunk/src/site/xdoc/filters.xml
   trunk/src/site/xdoc/ipAddressFilter.xml
   trunk/src/site/xdoc/sources.xml
Modified:
   trunk/pom.xml
   trunk/src/changes/changes.xml
   trunk/src/resources/conf/rtspproxy.properties
   trunk/src/site/site.xml
   trunk/src/site/xdoc/configuration.xml
   trunk/src/site/xdoc/download.xml
   trunk/src/site/xdoc/index.xml
   trunk/src/site/xdoc/todo.xml
Log:
Updated documentation

Modified: trunk/pom.xml
===================================================================
--- trunk/pom.xml	2005-12-08 16:51:03 UTC (rev 334)
+++ trunk/pom.xml	2005-12-08 20:46:19 UTC (rev 335)
@@ -12,7 +12,7 @@
 	<name>RTSP Proxy</name>
 	<groupId>net.merlimat</groupId>
 	<artifactId>rtspproxy</artifactId>
-	<version>3.0-ALPHA1</version>
+	<version>3.0-ALPHA2</version>
 	<url>http://rtspproxy.berlios.de</url>
 	<inceptionYear>2003</inceptionYear>
 
@@ -92,7 +92,7 @@
 		<dependency>
 			<groupId>org.apache.directory.network</groupId>
 			<artifactId>mina</artifactId>
-			<version>0.9.0-SNAPSHOT</version>
+			<version>0.9.0</version>
 		</dependency>
 
 		<dependency>
@@ -147,7 +147,7 @@
 				<configuration>
 					<outputEncoding>UTF-8</outputEncoding>
 				</configuration>
-				<version>2.0-beta-2</version>
+				<!--  <version>2.0-beta-2</version> -->
 			</plugin>
 			<plugin>
 				<groupId>org.codehaus.mojo</groupId>
@@ -202,7 +202,6 @@
 				<artifactId>
 					maven-project-info-reports-plugin
 				</artifactId>
-				<!-- <version>2.0-beta-1</version> -->
 			</plugin>
 			<plugin>
 				<groupId>org.codehaus.mojo</groupId>
@@ -216,38 +215,34 @@
 				<groupId>org.codehaus.mojo</groupId>
 				<artifactId>changes-maven-plugin</artifactId>
 			</plugin>
-			<!--
-				<plugin>
+			<plugin>
 				<groupId>org.codehaus.mojo</groupId>
 				<artifactId>taglist-maven-plugin</artifactId>
-				</plugin>
-				
-				<plugin>
+			</plugin>
+<!-- 
+			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-javadoc-plugin</artifactId>
 				<configuration>
-				<charset>UTF-8</charset>
-				<docencoding>UTF-8</docencoding>
-				<link>
-				http://java.sun.com/j2se/1.5.0/docs/api/,
-				http://www.junit.org/junit/javadoc/3.8.1/,
-				http://directory.apache.org/subprojects/network/apidocs/
-				</link>
-				<minmemory>128m</minmemory>
-				<maxmemory>512</maxmemory>
+					<charset>UTF-8</charset>
+					<docencoding>UTF-8</docencoding>
+					<link>
+						http://java.sun.com/j2se/1.5.0/docs/api/,
+						http://www.junit.org/junit/javadoc/3.8.1/,
+						http://directory.apache.org/subprojects/network/apidocs/
+					</link>
 				</configuration>
-				<version>2.0-beta-1</version>
-				</plugin>
-			-->
+			</plugin>
+-->
 			<!-- 
-			<plugin>
+				<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-pmd-plugin</artifactId>
 				<configuration>
-					<targetJdk implementation="java.lang.String">1.5</targetJdk>
+				<targetJdk implementation="java.lang.String">1.5</targetJdk>
 				</configuration>
-			</plugin>
-			 -->
+				</plugin>
+			-->
 		</plugins>
 	</reporting>
 

Modified: trunk/src/changes/changes.xml
===================================================================
--- trunk/src/changes/changes.xml	2005-12-08 16:51:03 UTC (rev 334)
+++ trunk/src/changes/changes.xml	2005-12-08 20:46:19 UTC (rev 335)
@@ -6,7 +6,7 @@
 	</properties>
 	<body>
 
-		<release version="3.0-ALPHA2-SNAPSHOT" date="in SVN">
+		<release version="3.0-ALPHA2" date="2005-12-08">
 			<action dev="merlimat" type="add">
 				Added preliminary implementation of the IP address and
 				host name filter.
@@ -14,16 +14,19 @@
 			<action dev="merlimat" type="fix">
 				Fixed Windows startup script.
 			</action>
+			<action dev="merlimat" type="update">
+				Using only a UDP port pair for all RTP/RTCP packet
+				handling and sending for all the connected clients.
+			</action>
 			<action dev="merlimat" type="fix">
+				Properly clear session data when a session is closed.
+			</action>
+			<action dev="merlimat" type="fix">
 				Fixed several NullPointerException.
 			</action>
 			<action dev="merlimat" type="update">
 				Faster parsing of RTSP messages.
 			</action>
-			<action dev="merlimat" type="update">
-				Using only a UDP port pair for all RTP/RTCP packet
-				handling and sending for all the connected clients.
-			</action>
 			<action dev="merlimat" type="add">
 				Handling proper shutdown of the service.
 			</action>

Modified: trunk/src/resources/conf/rtspproxy.properties
===================================================================
--- trunk/src/resources/conf/rtspproxy.properties	2005-12-08 16:51:03 UTC (rev 334)
+++ trunk/src/resources/conf/rtspproxy.properties	2005-12-08 20:46:19 UTC (rev 335)
@@ -14,7 +14,7 @@
 
 # This flag let you to enable or disable the debug 
 # output of the program..
-log.debug = Yes
+log.debug = No
 
 # If you want to save to a file the debug output
 # set this to Yes
@@ -78,15 +78,32 @@
 ##################################################
 
 # Unconmment the following line to enable filtering
-# proxy.auth.ipAddressFilter.enable = true
+# proxy.filter.ipaddress.enable = true
 
 # Use an alternative backend class. The default is 
-# rtspproxy.auth.PlainTextIpAddressProvider
+# rtspproxy.filter.ipaddress.PlainTextIpAddressProvider
 # This can be any class that implements the 
-# rtspproxy.auth.IpAddressProvider interface.
-# auth.ipAddressFilter.implementationClass = rtspproxy.auth.OtherImplementation
+# rtspproxy.filter.ipaddress.IpAddressProvider interface.
+# proxy.filter.ipaddress.implementationClass = rtspproxy.auth.OtherImplementation
 
 # Plain Text based implementation specific configuration
-# proxy.auth.ipAddressFilter.plainText.file = conf/ipfilter.txt
+# proxy.filter.ipaddress.text.file = conf/ipfilter.txt
 # 
 
+##################################################
+#             AUTHENTICATION FILTER              # 
+##################################################
+
+# Unconmment the following line to enable filtering
+# proxy.filter.authentication.enable = true
+
+# Use an alternative backend class. The default is 
+# rtspproxy.filter.authentication.PlainTextAuthenticationProvider
+# This can be any class that implements the 
+# rtspproxy.filter.authentication.AuthenticationProvider interface.
+# proxy.filter.authentication.implementationClass = rtspproxy.OtherImplementationClass
+
+# Plain Text based implementation specific configuration
+# proxy.filter.authentication.text.file = conf/ipfilter.txt
+# 
+

Added: trunk/src/resources/conf/users.txt
===================================================================
--- trunk/src/resources/conf/users.txt	2005-12-08 16:51:03 UTC (rev 334)
+++ trunk/src/resources/conf/users.txt	2005-12-08 20:46:19 UTC (rev 335)
@@ -0,0 +1,6 @@
+
+# List here the users and passwords
+#
+# myuser : itspassword
+# joe : zxsfsdfdsdg
+#


Property changes on: trunk/src/resources/conf/users.txt
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/src/site/site.xml
===================================================================
--- trunk/src/site/site.xml	2005-12-08 16:51:03 UTC (rev 334)
+++ trunk/src/site/site.xml	2005-12-08 20:46:19 UTC (rev 335)
@@ -23,12 +23,24 @@
 			<item
 				name="Overview"
 				href="overview.html" />
-			<!-- <item
-				name="Install"
-				href="install.html" /> -->
 			<item
 				name="Configuration"
-				href="configuration.html" />
+				href="configuration.html">
+				
+				<item
+					name="Compile from sources"
+					href="sources.html" />
+				<item
+					name="Filters"
+					href="filters.html">
+					<item
+						name="Authentication"
+						href="authentication.html" />
+					<item
+						name="IP address filter"
+						href="ipAddressFilter.html" />
+				</item>
+			</item>
 		</menu>
 
 		<menu name="Project">
@@ -36,9 +48,6 @@
 				name="Download"
 				href="download.html" />
 			<item
-				name="SVN"
-				href="source-repository.html" />
-			<item
 				name="Mailing Lists"
 				href="mail-lists.html" />
 			<item
@@ -57,6 +66,9 @@
 
 		<menu name="Development">
 			<item
+				name="SVN"
+				href="source-repository.html" />
+			<item
 				name="Todo"
 				href="todo.html" />
 			<item
@@ -65,29 +77,13 @@
 			<item
 				name="File Activity"
 				href="file-activity.html" />
+				<!-- 
 			<item
 				name="Javadocs"
-				href="apidocs/index.html" 
-				target="_blank"/>
+				href="apidocs/index.html"
+				target="_blank" />
+				-->
 		</menu>
-		<!-- 
-			<menu name="Download">
-			<item
-			name="Source Code"
-			href="download/source_code.html" />
-			<item
-			name="Binaries"
-			href="download/binaries.html"
-			collapse="true">
-			<item
-			name="Unix"
-			href="download/unix.html" />
-			<item
-			name="Windows"
-			href="download/windows.html" />
-			</item>
-			</menu>
-		-->
 
 	</body>
 </project>
\ No newline at end of file

Added: trunk/src/site/xdoc/authentication.xml
===================================================================
--- trunk/src/site/xdoc/authentication.xml	2005-12-08 16:51:03 UTC (rev 334)
+++ trunk/src/site/xdoc/authentication.xml	2005-12-08 20:46:19 UTC (rev 335)
@@ -0,0 +1,211 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<document>
+	<properties>
+		<title>Authentication</title>
+		<author email="matteo.merli at gmail.com">Matteo Merli</author>
+	</properties>
+
+	<body>
+		<section name="Authentication">
+			<p>
+				<b>Beware: The authentication support is still a work in progress.</b>
+			</p>
+			<p>
+				The RTSP specification foresees the optional presence of
+				a proxy-level authentication layer. This authentication
+				works in the same way of RTSP and HTTP server
+				authentication.
+
+			</p>
+			
+							<p>
+					The default implementation of this filter reads the
+					users from a plain text file located in
+					<code>conf/users.txt</code>.
+				</p>
+
+
+				<table>
+					<thead>
+						<tr>
+							<th>Name</th>
+							<th>Type</th>
+							<th>Default</th>
+							<th>Description</th>
+						</tr>
+					</thead>
+					<tbody>
+						<tr>
+							<td>
+								<code>
+									proxy.filter.authentication.enable
+								</code>
+							</td>
+							<td>Boolean</td>
+							<td>
+								<code>false</code>
+							</td>
+							<td>
+								This flag let you to enable or disable
+								the authentication filter.
+							</td>
+						</tr>
+						<tr>
+							<td>
+								<code>
+									proxy.filter.authentication.
+	implementationClass
+								</code>
+							</td>
+							<td>String</td>
+							<td>
+								<code>
+									rtspproxy.filter.authentication.
+	PlainTextAuthenticationProvider
+								</code>
+							</td>
+							<td>
+								Name of a class that implements the
+								<code>
+									rtspproxy.filter.authentication. AuthenticationProvider
+								</code>
+								interface.
+							</td>
+						</tr>
+					</tbody>
+				</table>
+
+				<subsection name="Plain text Implementation">
+					<p>
+						This is the default implementation of the authentication
+						 filter. The users and associated password 
+						 should be contained into a a text file, by default
+						 located in <code>conf/users.txt</code>.
+					</p>
+					<p>
+						The users file will contain one user per line:
+					</p>
+					<source>joe : joepass 
+bill : passwd</source>
+					<p>
+						That's all you need to know.
+					</p>
+					<subsection name="Properties">
+						<table>
+							<thead>
+								<tr>
+									<th>Name</th>
+									<th>Type</th>
+									<th>Default</th>
+									<th>Description</th>
+								</tr>
+							</thead>
+							<tbody>
+								<tr>
+									<td>
+										<code>
+											proxy.filter.authentication.text.file
+										</code>
+									</td>
+									<td>String</td>
+									<td>
+										<code>conf/users.txt</code>
+									</td>
+									<td>Location of the users file.</td>
+								</tr>
+							</tbody>
+						</table>
+					</subsection>
+				</subsection>
+
+				<subsection
+					name="Using an alternative implementation">
+					<p>
+						The PlainTextAuthenticationProvider is a very basic 
+						backend system, mostly meant as a guideline. 
+						In real world situations users will be kept in a 
+						relational database, LDAP, etc..
+					</p>
+					<p>
+						In all of these situations, you can provide a
+						custom implementation of the backend. All it
+						needs to be done is to provide a class that
+						implements the
+						<code>proxy.filter.authentication.AuthenticationProvider</code>
+						interface.
+					</p>
+					<source>public interface AuthenticationProvider 
+{ 
+	public void init() throws Exception; 
+	public void shutdown() throws Exception; 
+	public boolean isAuthenticated( Credentials credentials );
+}</source>
+					<p>
+						This interface is only composed of three
+						methods:
+					</p>
+					<table>
+						<thead>
+							<tr>
+								<th>Method</th>
+								<th>Description</th>
+							</tr>
+						</thead>
+						<tbody>
+							<tr>
+								<td>init()</td>
+								<td>
+									Called at startup. Should be used to
+									properly setup the subsystem.
+								</td>
+							</tr>
+							<tr>
+								<td>shutdown()</td>
+								<td>
+									Called before the proxy shutdown.
+									Should be used close opened
+									connections...
+								</td>
+							</tr>
+							<tr>
+								<td>
+									public boolean isAuthenticated( Credentials credentials )
+								</td>
+								<td>
+									This method must return
+									<code>true</code>
+									if the user identificated with 
+									<code>credentials</code> has the right
+									to access to the RtspProxy system
+									and <code>false</code>
+									otherwise.
+								</td>
+							</tr>
+						</tbody>
+					</table>
+					
+					<p>
+						<code>Credentials</code> is a class that holds the data supplied
+						by the user, typically username and password.
+					</p>
+
+					<p>
+						To use your custom implementation instead of the
+						default one, the class should be made available
+						in the Java ClassPath (eg: by putting the
+						containing Jar in the
+						<code>lib</code>
+						directory). Then you should tell the
+						AuthenticationFilter to use your implementation by
+						adding the following line in the
+						<code>rtspproxy.properties</code>
+						file.
+					</p>
+					<source>proxy.filter.authentication.implementationClass = path.to.MyCustomClass</source>
+
+				</subsection>
+
+		</section>
+	</body>
+</document>
\ No newline at end of file


Property changes on: trunk/src/site/xdoc/authentication.xml
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/src/site/xdoc/configuration.xml
===================================================================
--- trunk/src/site/xdoc/configuration.xml	2005-12-08 16:51:03 UTC (rev 334)
+++ trunk/src/site/xdoc/configuration.xml	2005-12-08 20:46:19 UTC (rev 335)
@@ -24,30 +24,6 @@
 				<source>$ export PATH=$PATH:/path/to/rtspproxy/folder</source>
 			</subsection>
 
-			<subsection name="Installing from sources">
-				<p>
-					In order to compile the sources, you will need the
-					<a href="http://maven.apache.org/maven2">Maven 2</a>
-					tool. This is a tool that assist in project
-					management, builds and releases and it is especially
-					tailored to Java projects. Please refer to its
-					website for installing and configuring it.
-				</p>
-				<p>
-					Once you have Maven configured and working you can
-					compile the project simply by doing:
-				</p>
-				<source>$ mvn</source>
-				<p>in the base project folder.</p>
-				<p>
-					This will produce, if there are no problems, 
-					a folder named <code>target/rtspproxy-<i>[version]</i>-default</code>
-					containing the binaries and generated 
-					documentations.
-					Then you can proceed like explained above.
-				</p>
-			</subsection>
-
 			<subsection name="Setup">
 				<p>
 					The proxy parameters are managed trough a
@@ -246,210 +222,20 @@
 
 			</subsection>
 			
-			<subsection name="Authorization and Authentication">
+			<subsection name="Running RtspProxy">
+			
 				<p>
-					The RtspProxy is capable of restricting access only to 
-					authorized clients. This access control scheme is 
-					completeley separated from the server access control 
-					because it's proxy specific.
-				</p>
+					On Unix-like systems the proxy can be launched using the script
+					located in the base directory: 
+				</p>	
+				<source>$ ./rtspproxy</source>
+				
 				<p>
-					If the server ask for authentication to give access to 
-					media content, the two access control layers will work
-					together, providing a two step authentication. The proxy
-					will forward client authorization data to the server in 
-					order to obtain itself access to protected contents.
+					For Windows systems there is a batch script: <code>rtspproxy.bat</code>. 
 				</p>
-				<p>
-					There are two possible access control schemes that can be 
-					enabled at the proxy level, one based on user/password
-					data sent by client and the other that use the client IP 
-					address or host name.
-				</p>
-				
-				<subsection name="Authentication">
-					<p>
-						The RTSP specification foresees the optional presence of 
-						a proxy-level authentication layer. This authentication
-						works in the same way of RTSP and HTTP server authentication.
-						
-					</p>
-				</subsection>
-				
-				<subsection name="IP address / host name filter">
-					<p>
-						This access control scheme does use a set of user defined
-						rules to evaluate if a client has or not the right to use 
-						the proxy services. 
-					</p>
-					<p>
-						The default implementation of this filter reads the rules
-						from a plain text file located in <code>conf/ipfilter.txt</code>.
-						T
-					</p>
-					
-					
-					<table>
-						<thead>
-							<tr>
-								<th>Name</th>
-								<th>Type</th>
-								<th>Default</th>
-								<th>Description</th>
-							</tr>
-						</thead>
-						<tbody>
-							<tr>
-								<td>
-									<code>proxy.auth.ipAddressFilter.enable</code>
-								</td>
-								<td>Boolean</td>
-								<td>
-									<code>false</code>
-								</td>
-								<td>
-									This flag let you to enable or disable
-									the IP address filter.
-								</td>
-							</tr>
-							<tr>
-								<td>
-									<code>auth.ipAddressFilter.implementationClass</code>
-								</td>
-								<td>String</td>
-								<td><code>rtspproxy.auth.PlainTextIpAddressProvider</code></td>
-								<td>
-									Name of a class that implements the 
-									<code>rtspproxy.auth.IpAddressProvider</code> interface.
-								</td>
-							</tr>
-						</tbody>
-					</table>
-					
-					<subsection name="Plain text Implementation">
-						<p>	
-							This is the default implementation of the IP address filter. It reads 
-							the rules from a plain text file and try to match IP address and hostname
-							of clients with these rules.
-						</p>
-						<p>
-							The rules file consist of a sequence of directives, for example:
-						</p>
-						<source>Deny *
-Allow 10.0.0.*
-Allow *.mydomain.com</source>
-						<p>
-							The order of the rules is extremely important, because the client
-							address will be compared with all of these rules in the given order.
-							In the example, the above rules file states that are denied all 
-							connection except from clients which addresses are in the subnet 
-							<code>10.0.0.0-255</code> and those that have an hostname that 
-							contains <code>mydomain.com</code>.
-						</p>
-						<p>
-							The inverse situation would be to allow connection from all addresses
-							and deny a few selected ones.
-						</p>
-						<source>Allow *
-Deny 192.123.25.*
-Deny *.bad-domain.com</source>
-						<p>
-							You can put as many rules as you want to acheive a fine grained 
-							access control.
-						</p>
-						<subsection name="Properties">
-							<table>
-								<thead>
-									<tr>
-										<th>Name</th>
-										<th>Type</th>
-										<th>Default</th>
-										<th>Description</th>
-									</tr>
-								</thead>
-								<tbody>
-									<tr>
-										<td>
-											<code>proxy.auth.ipAddressFilter.plainText.file</code>
-										</td>
-										<td>String</td>
-										<td>
-											<code>conf/ipfilter.txt</code>
-										</td>
-										<td>
-											Location of the rules file.
-										</td>
-									</tr>
-								</tbody>
-							</table>
-						</subsection>
-					</subsection>
-					
-					<subsection name="Using an alternative implementation">
-						<p>
-							Sometimes a fixed set of rules is not enough to set 
-							up a good access control policy, or perhaps the 
-							authorization must be integrated with an existing
-							system.
-						</p>
-						<p>
-							In all of these situations, you can provide a custom
-							implementation of the backend. All it needs to be done
-							is to provide a class that implements the
-							<code>rtspproxy.auth.IpAddressProvider</code> interface.
-						</p>
-						<source>public interface IpAddressProvider
-{
-	public void init() throws Exception;
-	public void shutdown() throws Exception;
-	public boolean isBlocked( InetAddress address );
-}</source>
-						<p>
-							This interface is only composed of three methods:
-						</p>
-						<table>
-							<thead>
-								<tr>
-									<th>Method</th>
-									<th>Description</th>
-								</tr>
-							</thead>
-							<tbody>
-								<tr>
-									<td>init()</td>
-									<td>Called at startup. Should be used to </td>
-								</tr>
-								<tr>
-									<td>shutdown()</td>
-									<td>Called before the proxy shutdown. Should be used close
-										opened connections...
-									</td>
-								</tr>
-								<tr>
-									<td>isBlocked( InetAddress address )</td>
-									<td>This method must return <code>true</code> if the
-										connection from the given <code>address</code> should
-										be closed or <code>false</code> otherwise.
-									</td>
-								</tr>
-							</tbody>
-						</table>
-
-						<p>
-							To use your custom implementation instead of the default one, the class
-							should be made available in the Java ClassPath (eg: by putting the 
-							containing Jar in the <code>lib</code> directory). Then you should 
-							tell the IpAddressFilter to use you implementation by adding 
-							the following line in the <code>rtspproxy.properties</code> file.
-						</p>
-						<source>auth.ipAddressFilter.implementationClass = path.to.MyCustomClass</source>
-						
-					</subsection>
-					
-				</subsection>
-				
+			
 			</subsection>
-
+				
 		</section>
 	</body>
 </document>

Modified: trunk/src/site/xdoc/download.xml
===================================================================
--- trunk/src/site/xdoc/download.xml	2005-12-08 16:51:03 UTC (rev 334)
+++ trunk/src/site/xdoc/download.xml	2005-12-08 20:46:19 UTC (rev 335)
@@ -37,8 +37,8 @@
 						<tr>
 							<td>
 								<a
-									href="http://download.berlios.de/rtspproxy/rtspproxy-3.0-ALPHA1-src.zip">
-									rtspproxy-3.0-ALPHA1-src.zip
+									href="http://download.berlios.de/rtspproxy/rtspproxy-3.0-ALPHA2-src.zip">
+									rtspproxy-3.0-ALPHA2-src.zip
 								</a>
 							</td>
 							<td>Sources</td>
@@ -47,8 +47,8 @@
 						<tr>
 							<td>
 								<a
-									href="http://download.berlios.de/rtspproxy/rtspproxy-3.0-ALPHA1-bin.zip">
-									rtspproxy-3.0-ALPHA1-bin.zip
+									href="http://download.berlios.de/rtspproxy/rtspproxy-3.0-ALPHA2-bin.zip">
+									rtspproxy-3.0-ALPHA2-bin.zip
 								</a>
 							</td>
 							<td>Binaries</td>

Added: trunk/src/site/xdoc/filters.xml
===================================================================
--- trunk/src/site/xdoc/filters.xml	2005-12-08 16:51:03 UTC (rev 334)
+++ trunk/src/site/xdoc/filters.xml	2005-12-08 20:46:19 UTC (rev 335)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<document>
+	<properties>
+		<title>Filters</title>
+		<author email="matteo.merli at gmail.com">Matteo Merli</author>
+	</properties>
+
+	<body>
+		<section name="Filters">
+			<subsection name="Authorization and Authentication">
+				<p>
+					The RtspProxy is capable of restricting access only
+					to authorized clients. This access control scheme is
+					completeley separated from the server access control
+					because it's proxy specific.
+				</p>
+				<p>
+					If the server ask for authentication to give access
+					to media content, the two access control layers will
+					work together, providing a two step authentication.
+					The proxy will forward client authorization data to
+					the server in order to obtain itself access to
+					protected contents.
+				</p>
+				<p>
+					There are two possible access control schemes that
+					can be enabled at the proxy level, one based on
+					user/password data sent by client and the other that
+					use the client IP address or host name.
+				</p>
+			</subsection>
+		</section>
+	</body>
+</document>
\ No newline at end of file


Property changes on: trunk/src/site/xdoc/filters.xml
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/src/site/xdoc/index.xml
===================================================================
--- trunk/src/site/xdoc/index.xml	2005-12-08 16:51:03 UTC (rev 334)
+++ trunk/src/site/xdoc/index.xml	2005-12-08 20:46:19 UTC (rev 335)
@@ -39,8 +39,13 @@
 
 
 		<section name="News">
+			<subsection name="08 Dec 2005 - Released RtspProxy 3.0-ALPHA2">
+				<p>
+				</p>
+			</subsection>
+		
 			<subsection
-				name="24 Oct 2005 - Released RTSP Proxy 3.0-ALPHA1">
+				name="24 Oct 2005 - Released RtspProxy 3.0-ALPHA1">
 				<p>
 					The first release of the brand new Java based
 					RtspProxy branch has been released.

Added: trunk/src/site/xdoc/ipAddressFilter.xml
===================================================================
--- trunk/src/site/xdoc/ipAddressFilter.xml	2005-12-08 16:51:03 UTC (rev 334)
+++ trunk/src/site/xdoc/ipAddressFilter.xml	2005-12-08 20:46:19 UTC (rev 335)
@@ -0,0 +1,226 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<document>
+	<properties>
+		<title>Filters</title>
+		<author email="matteo.merli at gmail.com">Matteo Merli</author>
+	</properties>
+
+	<body>
+		<section name="Filters">
+			<subsection name="IP address / host name filter">
+				<p>
+					This access control scheme does use a set of user
+					defined rules to evaluate if a client has or not the
+					right to use the proxy services.
+				</p>
+				<p>
+					The default implementation of this filter reads the
+					rules from a plain text file located in
+					<code>conf/ipfilter.txt</code>
+					.
+				</p>
+
+
+				<table>
+					<thead>
+						<tr>
+							<th>Name</th>
+							<th>Type</th>
+							<th>Default</th>
+							<th>Description</th>
+						</tr>
+					</thead>
+					<tbody>
+						<tr>
+							<td>
+								<code>
+									proxy.filter.ipaddress.enable
+								</code>
+							</td>
+							<td>Boolean</td>
+							<td>
+								<code>false</code>
+							</td>
+							<td>
+								This flag let you to enable or disable
+								the IP address filter.
+							</td>
+						</tr>
+						<tr>
+							<td>
+								<code>
+									proxy.filter.ipaddress.
+	implementationClass
+								</code>
+							</td>
+							<td>String</td>
+							<td>
+								<code>
+									rtspproxy.filter.ipaddress.
+	PlainTextIpAddressProvider
+								</code>
+							</td>
+							<td>
+								Name of a class that implements the
+								<code>
+									rtspproxy.filter.ipaddress. IpAddressProvider
+								</code>
+								interface.
+							</td>
+						</tr>
+					</tbody>
+				</table>
+
+				<subsection name="Plain text Implementation">
+					<p>
+						This is the default implementation of the IP
+						address filter. It reads the rules from a plain
+						text file and try to match IP address and
+						hostname of clients with these rules.
+					</p>
+					<p>
+						The rules file consist of a sequence of
+						directives, for example:
+					</p>
+					<source>Deny * 
+Allow 10.0.0.* 
+Allow *.mydomain.com	</source>
+					<p>
+						The order of the rules is extremely important,
+						because the client address will be compared with
+						all of these rules in the given order. In the
+						example, the above rules file states that are
+						denied all connection except from clients which
+						addresses are in the subnet
+						<code>10.0.0.0-255</code>
+						and those that have an hostname that contains
+						<code>mydomain.com</code>
+						.
+					</p>
+					<p>
+						The inverse situation would be to allow
+						connection from all addresses and deny a few
+						selected ones.
+					</p>
+					<source>Allow * 
+Deny 192.123.25.* 
+Deny *.bad-domain.com	</source>
+					<p>
+						You can put as many rules as you want to acheive
+						a fine grained access control.
+					</p>
+					<subsection name="Properties">
+						<table>
+							<thead>
+								<tr>
+									<th>Name</th>
+									<th>Type</th>
+									<th>Default</th>
+									<th>Description</th>
+								</tr>
+							</thead>
+							<tbody>
+								<tr>
+									<td>
+										<code>
+											proxy.filter.ipaddress.text.file
+										</code>
+									</td>
+									<td>String</td>
+									<td>
+										<code>conf/ipfilter.txt</code>
+									</td>
+									<td>Location of the rules file.</td>
+								</tr>
+							</tbody>
+						</table>
+					</subsection>
+				</subsection>
+
+				<subsection
+					name="Using an alternative implementation">
+					<p>
+						Sometimes a fixed set of rules is not enough to
+						set up a good access control policy, or perhaps
+						the authorization must be integrated with an
+						existing system.
+					</p>
+					<p>
+						In all of these situations, you can provide a
+						custom implementation of the backend. All it
+						needs to be done is to provide a class that
+						implements the
+						<code>proxy.filter.ipaddress.IpAddressProvider</code>
+						interface.
+					</p>
+					<source>public interface IpAddressProvider 
+{ 
+	public void init() throws Exception; 
+	public void shutdown() throws Exception; 
+	public boolean isBlocked( InetAddress address ); 
+}</source>
+					<p>
+						This interface is only composed of three
+						methods:
+					</p>
+					<table>
+						<thead>
+							<tr>
+								<th>Method</th>
+								<th>Description</th>
+							</tr>
+						</thead>
+						<tbody>
+							<tr>
+								<td>init()</td>
+								<td>
+									Called at startup. Should be used to
+									properly setup the subsystem.
+								</td>
+							</tr>
+							<tr>
+								<td>shutdown()</td>
+								<td>
+									Called before the proxy shutdown.
+									Should be used close opened
+									connections...
+								</td>
+							</tr>
+							<tr>
+								<td>
+									isBlocked( InetAddress address )
+								</td>
+								<td>
+									This method must return
+									<code>true</code>
+									if the connection from the given
+									<code>address</code>
+									should be closed or
+									<code>false</code>
+									otherwise.
+								</td>
+							</tr>
+						</tbody>
+					</table>
+
+					<p>
+						To use your custom implementation instead of the
+						default one, the class should be made available
+						in the Java ClassPath (eg: by putting the
+						containing Jar in the
+						<code>lib</code>
+						directory). Then you should tell the
+						IpAddressFilter to use your implementation by
+						adding the following line in the
+						<code>rtspproxy.properties</code>
+						file.
+					</p>
+					<source>proxy.filter.ipaddress.implementationClass = path.to.MyCustomClass</source>
+
+				</subsection>
+
+			</subsection>
+		</section>
+	</body>
+</document>
\ No newline at end of file


Property changes on: trunk/src/site/xdoc/ipAddressFilter.xml
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/site/xdoc/sources.xml
===================================================================
--- trunk/src/site/xdoc/sources.xml	2005-12-08 16:51:03 UTC (rev 334)
+++ trunk/src/site/xdoc/sources.xml	2005-12-08 20:46:19 UTC (rev 335)
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<document>
+	<properties>
+		<title>Compiling from sources</title>
+		<author email="matteo.merli at gmail.com">Matteo Merli</author>
+	</properties>
+
+	<body>
+		<section name="Compiling from sources">
+			<p>
+				In order to compile the sources, you will need the
+				<a href="http://maven.apache.org">Maven 2</a>
+				tool. This is a tool that assist in project management,
+				builds and releases and it is especially tailored to
+				Java projects. Please refer to its website for
+				installing and configuring it.
+			</p>
+			<p>
+				Once you have Maven configured and working you can
+				compile the project simply by doing:
+			</p>
+			<source>$ mvn</source>
+			<p>in the base project folder.</p>
+			<p>
+				This will produce, if there are no problems, a folder
+				named
+				<code>
+					target/rtspproxy-<i>[version]</i>-default
+				</code>
+				containing the binaries.
+			</p>
+
+			<p>To generate the documentation, just enter:</p>
+			<source>$ mvn site</source>
+			<p>
+				Documentation will be put under
+				<code>target/site</code>
+				directory.
+			</p>
+			
+			<subsection name="Eclipse">
+				<p>
+					If you want to import the project into 
+					<a href="http://www.eclipse.org">Eclipse</a>, you can generate 
+					the project files using:
+				</p>
+				<source>$ mvn eclipse:eclipse</source>
+				<p>
+					Also, be sure to check that the <code>M2_REPO</code> variable 
+					is defined in Eclipse. If not, set it to the path of your
+					Maven repository which in Unix systems is usually located
+					in 
+					<code>~/.m2/repository</code>.
+				</p>
+				
+			</subsection>
+		</section>
+	</body>
+</document>
+


Property changes on: trunk/src/site/xdoc/sources.xml
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/src/site/xdoc/todo.xml
===================================================================
--- trunk/src/site/xdoc/todo.xml	2005-12-08 16:51:03 UTC (rev 334)
+++ trunk/src/site/xdoc/todo.xml	2005-12-08 20:46:19 UTC (rev 335)
@@ -79,7 +79,7 @@
 						<tr>
 							<td>
 								<strong>
-									Remote Control Interface
+									Remote Management Interface
 								</strong>
 							</td>
 							<td>



From merlimat at berlios.de  Thu Dec  8 21:48:09 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 21:48:09 +0100
Subject: [Rtspproxy-devel] r336 - in trunk/src/main/java/rtspproxy/filter: . authentication ipaddress
Message-ID: <200512082048.jB8Km9MK026341@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 21:48:05 +0100 (Thu, 08 Dec 2005)
New Revision: 336

Modified:
   trunk/src/main/java/rtspproxy/filter/RtspFilters.java
   trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
   trunk/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java
   trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java
   trunk/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java
Log:
Using constistent names for configuration properties.

Modified: trunk/src/main/java/rtspproxy/filter/RtspFilters.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/RtspFilters.java	2005-12-08 20:46:19 UTC (rev 335)
+++ trunk/src/main/java/rtspproxy/filter/RtspFilters.java	2005-12-08 20:48:05 UTC (rev 336)
@@ -76,7 +76,7 @@
 	protected void addIpAddressFilter( IoFilterChain chain )
 	{
 		boolean enableIpAddressFilter = Config.getBoolean(
-				"proxy.auth.ipAddressFilter.enable", false );
+				"proxy.filter.ipaddress.enable", false );
 
 		if ( enableIpAddressFilter ) {
 			if ( ipAddressFilter == null )
@@ -100,7 +100,7 @@
 	protected void addAuthenticationFilter( IoFilterChain chain )
 	{
 		boolean enableAuthenticationFilter = Config.getBoolean(
-				"proxy.auth.authentication.enable", false );
+				"proxy.filter.authentication.enable", false );
 
 		if ( enableAuthenticationFilter ) {
 			if ( authenticationFilter == null )

Modified: trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java	2005-12-08 20:46:19 UTC (rev 335)
+++ trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java	2005-12-08 20:48:05 UTC (rev 336)
@@ -41,6 +41,8 @@
 {
 
 	private static Logger log = Logger.getLogger( AuthenticationFilter.class );
+	
+	private static final String ATTR = AuthenticationFilter.class.toString() + "Attr";
 
 	/** Different authentication schemes implementation */
 	private static AuthenticationScheme[] schemes = { new BasicAuthentication() };
@@ -73,8 +75,8 @@
 	{
 		// Check which backend implementation to use
 		// Default is plain-text implementation
-		String className = Config.get( "proxy.auth.authentication.implementationClass",
-				"rtspproxy.auth.PlainTextAuthenticationProvider" );
+		String className = Config.get( "proxy.filter.authentication.implementationClass",
+				"rtspproxy.filter.authentication.PlainTextAuthenticationProvider" );
 
 		Class providerClass;
 		try {
@@ -126,9 +128,9 @@
 			return;
 		}
 
-		if ( session.getAttribute( "auth" ) != null ) {
+		if ( session.getAttribute( ATTR ) != null ) {
 			// Client already autheticated
-			log.debug( "Already authenticaed: " + session.getAttribute( "auth" ) );
+			log.debug( "Already authenticaed: " + session.getAttribute( ATTR ) );
 			nextFilter.messageReceived( session, message );
 		}
 
@@ -179,7 +181,7 @@
 		 * Mark the session with an "authenticated" attribute. This will prevent
 		 * the check for the credentials for every message received.
 		 */
-		session.setAttribute( "auth", credentials.getUserName() );
+		session.setAttribute( ATTR, credentials.getUserName() );
 
 		// Forward message
 		nextFilter.messageReceived( session, message );

Modified: trunk/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java	2005-12-08 20:46:19 UTC (rev 335)
+++ trunk/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java	2005-12-08 20:48:05 UTC (rev 336)
@@ -45,7 +45,7 @@
 		// Load users from file
 		String fileName = Config.getHome()
 				+ File.separator
-				+ Config.get( "auth.authentication.text.file", "conf" + File.separator
+				+ Config.get( "proxy.filter.authentication.text.file", "conf" + File.separator
 						+ "users.txt" );
 
 		try {

Modified: trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java	2005-12-08 20:46:19 UTC (rev 335)
+++ trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java	2005-12-08 20:48:05 UTC (rev 336)
@@ -42,8 +42,8 @@
 	{
 		// Check which backend implementation to use
 		// Default is plain-text implementation
-		String className = Config.get( "auth.ipAddressFilter.implementationClass",
-				"rtspproxy.auth.PlainTextIpAddressProvider" );
+		String className = Config.get( "proxy.filter.ipaddress.implementationClass",
+				"rtspproxy.filter.ipaddress.PlainTextIpAddressProvider" );
 
 		Class providerClass;
 		try {

Modified: trunk/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java	2005-12-08 20:46:19 UTC (rev 335)
+++ trunk/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java	2005-12-08 20:48:05 UTC (rev 336)
@@ -65,7 +65,7 @@
 		// Load rules from file
 		String fileName = Config.getHome()
 				+ File.separator
-				+ Config.get( "auth.ipfilter.text.file", "conf" + File.separator
+				+ Config.get( "proxy.filter.ipaddress.text.file", "conf" + File.separator
 						+ "ipfilter.txt" );
 
 		loadRules( new FileReader( new File( fileName ) ) );



From merlimat at berlios.de  Thu Dec  8 22:06:51 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 22:06:51 +0100
Subject: [Rtspproxy-devel] r337 - in trunk: . src/main/java/rtspproxy/rtsp src/site/xdoc
Message-ID: <200512082106.jB8L6psL027824@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 22:06:48 +0100 (Thu, 08 Dec 2005)
New Revision: 337

Modified:
   trunk/pom.xml
   trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java
   trunk/src/main/java/rtspproxy/rtsp/RtspSession.java
   trunk/src/site/xdoc/download.xml
Log:
Preparing to tag ALPHA2

Modified: trunk/pom.xml
===================================================================
--- trunk/pom.xml	2005-12-08 20:48:05 UTC (rev 336)
+++ trunk/pom.xml	2005-12-08 21:06:48 UTC (rev 337)
@@ -131,7 +131,7 @@
 					<showWarnings>true</showWarnings>
 				</configuration>
 			</plugin>
-
+<!-- 
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-assembly-plugin</artifactId>
@@ -140,7 +140,7 @@
 						src/resources/release/default.xml
 					</descriptor>
 				</configuration>
-			</plugin>
+			</plugin> -->
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-site-plugin</artifactId>

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2005-12-08 20:48:05 UTC (rev 336)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2005-12-08 21:06:48 UTC (rev 337)
@@ -29,7 +29,6 @@
 import org.apache.mina.filter.codec.ProtocolDecoderOutput;
 
 import rtspproxy.lib.Exceptions;
-import sun.tools.tree.FinallyStatement;
 
 /**
  * 

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspSession.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspSession.java	2005-12-08 20:48:05 UTC (rev 336)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspSession.java	2005-12-08 21:06:48 UTC (rev 337)
@@ -18,11 +18,14 @@
 
 package rtspproxy.rtsp;
 
-import java.util.HashMap;
+import java.util.Map;
 import java.util.Random;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.log4j.Logger;
 
+import rtspproxy.lib.number.UnsignedLong;
+
 /**
  * RTSP is primarly a connection-less protocol, that means that RTSP request can
  * be made over multiples TCP connections. To identify such a "session", a
@@ -31,16 +34,16 @@
 public class RtspSession
 {
 
+	private static Logger log = Logger.getLogger( RtspSession.class );
+
+	private static Map<String, RtspSession> sessions = new ConcurrentHashMap<String, RtspSession>();
+
 	// Members
 	/** Session ID */
-	private long id;
+	private String sessionId;
 	/** Session associated tracks */
-	private HashMap<String, Track> tracks = new HashMap<String, Track>();
+	private Map<String, Track> tracks = new ConcurrentHashMap<String, Track>();
 
-	// Static access
-	private static Logger log = Logger.getLogger( RtspSession.class );
-	private static HashMap<Long, RtspSession> sessions = new HashMap<Long, RtspSession>();
-
 	/**
 	 * Creates a new empty RtspSession and stores it.
 	 * 
@@ -48,17 +51,16 @@
 	 *        Session identifier
 	 * @return The newly created session
 	 */
-	static public RtspSession create( String id )
+	static public RtspSession create( String sessionId )
 	{
-		long key = Long.valueOf( id );
 
-		if ( sessions.get( key ) != null ) {
+		if ( sessions.get( sessionId ) != null ) {
 			log.error( "Session key conflit!!" );
 			return null;
 		}
-		RtspSession session = new RtspSession( key );
-		sessions.put( key, session );
-		log.debug( "New session created - id=" + key );
+		RtspSession session = new RtspSession( sessionId );
+		sessions.put( sessionId, session );
+		log.debug( "New session created - id=" + sessionId );
 		return session;
 	}
 
@@ -67,7 +69,7 @@
 	 */
 	static public RtspSession create()
 	{
-		return create( Long.toString( newSessionID() ) );
+		return create( newSessionID() );
 	}
 
 	/**
@@ -100,28 +102,31 @@
 
 	/**
 	 * Close the session and removes it.
-	 * @param id the session ID
+	 * 
+	 * @param id
+	 *        the session ID
 	 */
 	static public void close( long id )
 	{
 		sessions.remove( id );
 	}
 
-	private RtspSession( long id )
+	protected RtspSession( String sessionId )
 	{
-		this.id = id;
+		this.sessionId = sessionId;
 	}
 
 	/**
 	 * @return the session ID
 	 */
-	public long getId()
+	public String getId()
 	{
-		return id;
+		return sessionId;
 	}
 
-	/** 
-	 * @param control the key to access the track
+	/**
+	 * @param control
+	 *        the key to access the track
 	 * @return the track
 	 */
 	public Track getTrack( String control )
@@ -139,7 +144,9 @@
 
 	/**
 	 * Adds a new track to the session
-	 * @param track a Track object
+	 * 
+	 * @param track
+	 *        a Track object
 	 */
 	public void addTrack( Track track )
 	{
@@ -156,14 +163,17 @@
 	 * 
 	 * @return the session ID
 	 */
-	private static long newSessionID()
+	private static String newSessionID()
 	{
-		long id;
-		while ( true ) {
-			id = random.nextLong();
-			if ( sessions.get( id ) == null ) {
-				// Ok, the id is unique
-				return id;
+		String id;
+		synchronized ( random ) {
+			while ( true ) {
+
+				id = new UnsignedLong( random ).toString();
+				if ( sessions.get( id ) == null ) {
+					// Ok, the id is unique
+					return id;
+				}
 			}
 			// try with another id
 		}

Modified: trunk/src/site/xdoc/download.xml
===================================================================
--- trunk/src/site/xdoc/download.xml	2005-12-08 20:48:05 UTC (rev 336)
+++ trunk/src/site/xdoc/download.xml	2005-12-08 21:06:48 UTC (rev 337)
@@ -42,7 +42,7 @@
 								</a>
 							</td>
 							<td>Sources</td>
-							<td>336 KB</td>
+							<td>536 KB</td>
 						</tr>
 						<tr>
 							<td>
@@ -52,7 +52,7 @@
 								</a>
 							</td>
 							<td>Binaries</td>
-							<td>975 KB</td>
+							<td>1903 KB</td>
 						</tr>
 					</tbody>
 				</table>



From merlimat at berlios.de  Thu Dec  8 22:08:30 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 22:08:30 +0100
Subject: [Rtspproxy-devel] r338 - /
Message-ID: <200512082108.jB8L8UIl028264@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 22:08:30 +0100 (Thu, 08 Dec 2005)
New Revision: 338

Removed:
   trunk/
Log:
Delete Eclipse project files from repository.



From merlimat at berlios.de  Thu Dec  8 22:20:01 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 22:20:01 +0100
Subject: [Rtspproxy-devel] r339 - / trunk
Message-ID: <200512082120.jB8LK1GS030101@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 22:19:56 +0100 (Thu, 08 Dec 2005)
New Revision: 339

Added:
   trunk/
Log:
Reverted unwanted deletion of trunk/

Copied: trunk (from rev 337, trunk)


Property changes on: trunk
___________________________________________________________________
Name: svn:ignore
   + 
doc




From merlimat at berlios.de  Thu Dec  8 22:22:30 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 22:22:30 +0100
Subject: [Rtspproxy-devel] r340 - tags
Message-ID: <200512082122.jB8LMUgS030472@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 22:22:29 +0100 (Thu, 08 Dec 2005)
New Revision: 340

Added:
   tags/3.0-ALPHA2/
Log:
Tagged version 3.0-ALPHA2

Copied: tags/3.0-ALPHA2 (from rev 339, trunk)



From merlimat at berlios.de  Thu Dec  8 22:25:35 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Thu, 8 Dec 2005 22:25:35 +0100
Subject: [Rtspproxy-devel] r341 - trunk
Message-ID: <200512082125.jB8LPZE4031348@sheep.berlios.de>

Author: merlimat
Date: 2005-12-08 22:25:33 +0100 (Thu, 08 Dec 2005)
New Revision: 341

Removed:
   trunk/.classpath
   trunk/.project
   trunk/.settings/
Log:
Delete Eclipse project files from repository.

Deleted: trunk/.classpath
===================================================================
--- trunk/.classpath	2005-12-08 21:22:29 UTC (rev 340)
+++ trunk/.classpath	2005-12-08 21:25:33 UTC (rev 341)
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
-	<classpathentry kind="src" path="src/main/java"/>
-	<classpathentry kind="lib" path="/Users/mat/.maven/repository/log4j/jars/log4j-1.2.9.jar"/>
-	<classpathentry kind="src" path="src/test/java"/>
-	<classpathentry sourcepath="ECLIPSE_HOME/plugins/org.eclipse.jdt.source_3.1.0/src/org.junit_3.8.1/junitsrc.zip" kind="var" path="JUNIT_HOME/junit.jar"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/mina"/>
-	<classpathentry kind="output" path="target/classes"/>
-</classpath>

Deleted: trunk/.project
===================================================================
--- trunk/.project	2005-12-08 21:22:29 UTC (rev 340)
+++ trunk/.project	2005-12-08 21:25:33 UTC (rev 341)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>rtspproxy-java</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>



From merlimat at berlios.de  Fri Dec  9 01:13:03 2005
From: merlimat at berlios.de (merlimat at BerliOS)
Date: Fri, 9 Dec 2005 01:13:03 +0100
Subject: [Rtspproxy-devel] r342 - in trunk: . src/site src/site/xdoc
Message-ID: <200512090013.jB90D3Yh005742@sheep.berlios.de>

Author: merlimat
Date: 2005-12-09 01:12:05 +0100 (Fri, 09 Dec 2005)
New Revision: 342

Modified:
   trunk/pom.xml
   trunk/src/site/site.xml
   trunk/src/site/xdoc/index.xml
Log:
Started with 3.0-ALPHA3-SNAPSHOT

Modified: trunk/pom.xml
===================================================================
--- trunk/pom.xml	2005-12-08 21:25:33 UTC (rev 341)
+++ trunk/pom.xml	2005-12-09 00:12:05 UTC (rev 342)
@@ -12,7 +12,7 @@
 	<name>RTSP Proxy</name>
 	<groupId>net.merlimat</groupId>
 	<artifactId>rtspproxy</artifactId>
-	<version>3.0-ALPHA2</version>
+	<version>3.0-ALPHA3-SNAPSHOT</version>
 	<url>http://rtspproxy.berlios.de</url>
 	<inceptionYear>2003</inceptionYear>
 

Modified: trunk/src/site/site.xml
===================================================================
--- trunk/src/site/site.xml	2005-12-08 21:25:33 UTC (rev 341)
+++ trunk/src/site/site.xml	2005-12-09 00:12:05 UTC (rev 342)
@@ -26,7 +26,7 @@
 			<item
 				name="Configuration"
 				href="configuration.html">
-				
+
 				<item
 					name="Compile from sources"
 					href="sources.html" />
@@ -77,12 +77,17 @@
 			<item
 				name="File Activity"
 				href="file-activity.html" />
-				<!-- 
+
 			<item
+				name="Project page on BerliOS"
+				href="http://developer.berlios.de/projects/rtspproxy"
+				target="_blank" />
+			<!-- 
+				<item
 				name="Javadocs"
 				href="apidocs/index.html"
 				target="_blank" />
-				-->
+			-->
 		</menu>
 
 	</body>

Modified: trunk/src/site/xdoc/index.xml
===================================================================
--- trunk/src/site/xdoc/index.xml	2005-12-08 21:25:33 UTC (rev 341)
+++ trunk/src/site/xdoc/index.xml	2005-12-09 00:12:05 UTC (rev 342)
@@ -41,6 +41,9 @@
 		<section name="News">
 			<subsection name="08 Dec 2005 - Released RtspProxy 3.0-ALPHA2">
 				<p>
+					Second alpha release with many bugfix and improvements.
+					See <a href="changes-report.html#3.0-ALPHA2">Changes</a> for an 
+					overview.
 				</p>
 			</subsection>
 		



From merlimat at berlios.de  Tue Dec 13 22:42:57 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 13 Dec 2005 22:42:57 +0100
Subject: [Rtspproxy-devel] r343 - in trunk/src/main/java/rtspproxy: proxy rtsp
Message-ID: <200512132142.jBDLgv1P002676@sheep.berlios.de>

Author: merlimat
Date: 2005-12-13 22:42:36 +0100 (Tue, 13 Dec 2005)
New Revision: 343

Modified:
   trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/src/main/java/rtspproxy/proxy/ProxySession.java
   trunk/src/main/java/rtspproxy/proxy/ServerSide.java
   trunk/src/main/java/rtspproxy/proxy/Track.java
   trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java
   trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java
Log:
Using fixed names for IoSession attributes

Modified: trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java	2005-12-09 00:12:05 UTC (rev 342)
+++ trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java	2005-12-13 21:42:36 UTC (rev 343)
@@ -51,6 +51,8 @@
 
 	/** Used to save a reference to this handler in the IoSession */
 	protected static final String ATTR = ProxyHandler.class.toString() + "Attr";
+	protected static final String setupUrlATTR = "setupUrlATTR";
+	protected static final String clientPortsATTR = "clientPortsATTR";
 
 	private IoSession clientSession = null;
 	private IoSession serverSession = null;
@@ -101,7 +103,7 @@
 
 		switch ( message.getType() ) {
 			case TypeRequest:
-				serverSession.setAttribute( "lastRequestVerb",
+				serverSession.setAttribute( RtspMessage.lastRequestVerbATTR,
 						( (RtspRequest) message ).getVerb() );
 				sendRequest( serverSession, (RtspRequest) message );
 				break;
@@ -146,7 +148,7 @@
 		}
 		switch ( message.getType() ) {
 			case TypeRequest:
-				clientSession.setAttribute( "lastRequestVerb",
+				clientSession.setAttribute( RtspMessage.lastRequestVerbATTR,
 						( (RtspRequest) message ).getVerb() );
 				sendRequest( clientSession, (RtspRequest) message );
 				break;
@@ -188,7 +190,7 @@
 				return;
 			}
 		}
-		serverSession.setAttribute( "lastRequestVerb", request.getVerb() );
+		serverSession.setAttribute( RtspMessage.lastRequestVerbATTR, request.getVerb() );
 
 		log.debug( "Client Transport:" + request.getHeader( "Transport" ) );
 
@@ -196,6 +198,18 @@
 				request.getHeader( "Transport" ) );
 		log.debug( "Parsed:" + rtspTransportList.toString() );
 
+		if ( rtspTransportList.count() == 0 ) {
+			/**
+			 * If no one of the client specified transports is acceptable by the
+			 * proxy, direct reply with an unsupported transport error. Then the
+			 * client will have the chance to reformule the request with another
+			 * transports set.
+			 */
+			sendResponse( clientSession,
+					RtspResponse.errorResponse( RtspCode.UnsupportedTransport ) );
+			return;
+		}
+
 		int proxyRtpPort = Config.getInt( "proxy.server.rtp.port", -1 );
 		int proxyRtcpPort = Config.getInt( "proxy.server.rtcp.port", -1 );
 
@@ -203,8 +217,8 @@
 		// because I will need to know which port the client will
 		// use for RTP/RTCP connections.
 		int[] clientPorts = rtspTransportList.get( 0 ).getClientPort();
-		clientSession.setAttribute( "clientPorts", clientPorts );
-		clientSession.setAttribute( "setupURL", request.getUrl().toString() );
+		clientSession.setAttribute( clientPortsATTR, clientPorts );
+		clientSession.setAttribute( setupUrlATTR, request.getUrl().toString() );
 
 		for ( RtspTransport transport : rtspTransportList.getList() ) {
 			log.debug( "Transport:" + transport );
@@ -266,7 +280,7 @@
 
 		// Create a new Track object
 		Track track = proxySession.addTrack(
-				(String) clientSession.getAttribute( "setupURL" ), transport.getSSRC() );
+				(String) clientSession.getAttribute( setupUrlATTR ), transport.getSSRC() );
 
 		// Setting client and server info on the track
 		InetAddress serverAddress = null;
@@ -288,7 +302,7 @@
 		} catch ( UnknownHostException e ) {
 			log.warn( "Unknown host: " + clientSession.getRemoteAddress() );
 		}
-		int clientPorts[] = (int[]) clientSession.getAttribute( "clientPorts" );
+		int clientPorts[] = (int[]) clientSession.getAttribute( clientPortsATTR );
 		track.setClientAddress( clientAddress, clientPorts[0], clientPorts[1] );
 
 		if ( transport.getLowerTransport() == RtspTransport.LowerTransport.TCP ) {
@@ -305,7 +319,7 @@
 			}
 
 			// Obtaing client specified ports
-			int ports[] = (int[]) clientSession.getAttribute( "clientPorts" );
+			int ports[] = (int[]) clientSession.getAttribute( clientPortsATTR );
 			transport.setClientPort( ports );
 
 			log.debug( "Transport Rewritten: " + transport );
@@ -356,6 +370,7 @@
 			log.warn( "Destination unreachable: " + host + ":" + port );
 			sendResponse( clientSession,
 					RtspResponse.errorResponse( RtspCode.DestinationUnreachable ) );
+			clientSession.close();
 			return;
 		}
 

Modified: trunk/src/main/java/rtspproxy/proxy/ProxySession.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ProxySession.java	2005-12-09 00:12:05 UTC (rev 342)
+++ trunk/src/main/java/rtspproxy/proxy/ProxySession.java	2005-12-13 21:42:36 UTC (rev 343)
@@ -54,7 +54,10 @@
 	 */
 	public static ProxySession getByClientSessionID( String clientSessionId )
 	{
-		return clientSessionIds.get( clientSessionId );
+		if ( clientSessionId == null )
+			return null;
+		else
+			return clientSessionIds.get( clientSessionId );
 	}
 
 	/**
@@ -67,7 +70,10 @@
 	 */
 	public static ProxySession getByServerSessionID( String serverSessionId )
 	{
-		return serverSessionIds.get( serverSessionId );
+		if ( serverSessionId == null )
+			return null;
+		else
+			return serverSessionIds.get( serverSessionId );
 	}
 
 	/**
@@ -158,7 +164,8 @@
 	public synchronized void setServerSessionId( String serverSessionId )
 	{
 		this.serverSessionId = serverSessionId;
-		serverSessionIds.put( serverSessionId, this );
+		if ( serverSessionId != null )
+			serverSessionIds.put( serverSessionId, this );
 	}
 
 	/**

Modified: trunk/src/main/java/rtspproxy/proxy/ServerSide.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ServerSide.java	2005-12-09 00:12:05 UTC (rev 342)
+++ trunk/src/main/java/rtspproxy/proxy/ServerSide.java	2005-12-13 21:42:36 UTC (rev 343)
@@ -18,6 +18,7 @@
 import org.apache.mina.common.IoSession;
 
 import rtspproxy.lib.Exceptions;
+import rtspproxy.rtsp.RtspCode;
 import rtspproxy.rtsp.RtspMessage;
 import rtspproxy.rtsp.RtspRequest;
 import rtspproxy.rtsp.RtspResponse;
@@ -50,7 +51,7 @@
 		// close all: same as sessionClosed()
 		log.info( "Exception: " + cause );
 		Exceptions.logStackTrace( cause );
-		
+
 		sessionClosed( session );
 	}
 
@@ -177,7 +178,11 @@
 	public void onResponseSetup( ProxyHandler proxyHandler, RtspResponse response )
 	{
 		log.debug( "RESPONSE SETUP" );
-		proxyHandler.passSetupResponseToClient( response );
+		if ( response.getCode() != RtspCode.OK )
+			// Report the error to the client
+			proxyHandler.passToClient( response );
+		else
+			proxyHandler.passSetupResponseToClient( response );
 	}
 
 	public void onResponseTeardown( ProxyHandler proxyHandler, RtspResponse response )

Modified: trunk/src/main/java/rtspproxy/proxy/Track.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/Track.java	2005-12-09 00:12:05 UTC (rev 342)
+++ trunk/src/main/java/rtspproxy/proxy/Track.java	2005-12-13 21:42:36 UTC (rev 343)
@@ -51,6 +51,8 @@
 
 	private static Logger log = Logger.getLogger( Track.class );
 
+	protected static final String ATTR = Track.class.toString() + "Attr";
+
 	/** Maps a server SSRC id to a Track */
 	private static Map<UnsignedInt, Track> serverSsrcMap = new ConcurrentHashMap<UnsignedInt, Track>();
 

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2005-12-09 00:12:05 UTC (rev 342)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2005-12-13 21:42:36 UTC (rev 343)
@@ -36,6 +36,9 @@
 public class RtspDecoder implements ProtocolDecoder
 {
 
+	private static final String readStateATTR = RtspDecoder.class.toString() + "readState";
+	private static final String rtspMessageATTR = RtspDecoder.class.toString() + "rtspMessage";
+
 	/**
 	 * State enumerator that indicates the reached state in the RTSP message
 	 * decoding process.
@@ -85,10 +88,10 @@
 		}
 
 		// Retrieve status from session
-		ReadState state = (ReadState) session.getAttribute( "state" );
+		ReadState state = (ReadState) session.getAttribute( readStateATTR );
 		if ( state == null )
 			state = ReadState.Command;
-		RtspMessage rtspMessage = (RtspMessage) session.getAttribute( "rtspMessage" );
+		RtspMessage rtspMessage = (RtspMessage) session.getAttribute( rtspMessageATTR );
 
 		try {
 
@@ -125,7 +128,7 @@
 							RtspCode code = RtspCode.fromString( m.group( 1 ) );
 							rtspMessage = new RtspResponse();
 							( (RtspResponse) ( rtspMessage ) ).setCode( code );
-							RtspRequest.Verb verb = (RtspRequest.Verb) session.getAttribute( "lastRequestVerb" );
+							RtspRequest.Verb verb = (RtspRequest.Verb) session.getAttribute( RtspMessage.lastRequestVerbATTR );
 							( (RtspResponse) ( rtspMessage ) ).setRequestVerb( verb );
 
 						} else {
@@ -144,7 +147,7 @@
 								} catch ( MalformedURLException e ) {
 									log.info( e );
 									url = null;
-									session.setAttribute( "state", ReadState.Failed );
+									session.setAttribute( readStateATTR, ReadState.Failed );
 									throw new ProtocolDecoderException( "Invalid URL" );
 								}
 							}
@@ -152,7 +155,7 @@
 							( (RtspRequest) rtspMessage ).setVerb( verb );
 
 							if ( ( (RtspRequest) rtspMessage ).getVerb() == RtspRequest.Verb.None ) {
-								session.setAttribute( "state", ReadState.Failed );
+								session.setAttribute( readStateATTR, ReadState.Failed );
 								throw new ProtocolDecoderException( "Invalid method: "
 										+ verb );
 							}
@@ -221,8 +224,8 @@
 		if ( state == ReadState.Dispatch ) {
 			// The message is already formed
 			// send it
-			session.removeAttribute( "state" );
-			session.removeAttribute( "rtspMessage" );
+			session.removeAttribute( readStateATTR );
+			session.removeAttribute( rtspMessageATTR );
 			out.write( rtspMessage );
 			return;
 		}
@@ -230,8 +233,8 @@
 		// log.debug( "INCOMPLETE MESSAGE \n" + rtspMessage );
 
 		// Save attributes in session
-		session.setAttribute( "state", state );
-		session.setAttribute( "rtspMessage", rtspMessage );
+		session.setAttribute( readStateATTR, state );
+		session.setAttribute( rtspMessageATTR, rtspMessage );
 	}
 
 	/*

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java	2005-12-09 00:12:05 UTC (rev 342)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java	2005-12-13 21:42:36 UTC (rev 343)
@@ -24,13 +24,16 @@
 import rtspproxy.Config;
 
 /**
- * Base abstract class for RTSP messages. 
+ * Base abstract class for RTSP messages.
  * 
  * @author mat
  */
 public abstract class RtspMessage
 {
 
+	public static final String lastRequestVerbATTR = RtspMessage.class.toString()
+			+ "lastRequestVerb";
+
 	/**
 	 * RTSP Message Type
 	 */
@@ -94,7 +97,6 @@
 	}
 
 	/**
-	 * 
 	 * @param key
 	 *        Header name
 	 * @param defaultValue
@@ -126,9 +128,9 @@
 	 * Formats all the headers into a string ready to be sent in a RTSP message.
 	 * 
 	 * <pre>
-	 * Header1: Value1
-	 * Header2: value 2
-	 * ... 
+	 *  Header1: Value1
+	 *  Header2: value 2
+	 *  ... 
 	 * </pre>
 	 * 
 	 * @return a string containing the serialzed headers
@@ -144,7 +146,6 @@
 	}
 
 	/**
-	 * 
 	 * @return the number of headers owned by the message
 	 */
 	public int getHeadersCount()
@@ -165,8 +166,8 @@
 	}
 
 	/**
-	 * 
-	 * @param buffer StringBuffer containing the contents
+	 * @param buffer
+	 *        StringBuffer containing the contents
 	 */
 	public void setBuffer( StringBuffer buffer )
 	{
@@ -174,19 +175,21 @@
 	}
 
 	/**
-	 * @param other buffer with content to be appended
+	 * @param other
+	 *        buffer with content to be appended
 	 */
 	public void appendToBuffer( StringBuffer other )
 	{
 		this.buffer.append( other );
 	}
-	
+
 	/**
-	 * @param other buffer with content to be appended
+	 * @param other
+	 *        buffer with content to be appended
 	 */
 	public void appendToBuffer( CharBuffer other )
 	{
-		this.buffer.append(other);
+		this.buffer.append( other );
 	}
 
 	/**



From merlimat at berlios.de  Tue Dec 13 22:46:53 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 13 Dec 2005 22:46:53 +0100
Subject: [Rtspproxy-devel] r344 - in trunk/src: main/java/rtspproxy/rtsp test/java/rtspproxy/rtsp
Message-ID: <200512132146.jBDLkr7x003477@sheep.berlios.de>

Author: merlimat
Date: 2005-12-13 22:46:39 +0100 (Tue, 13 Dec 2005)
New Revision: 344

Added:
   trunk/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java
   trunk/src/test/java/rtspproxy/rtsp/RtspTransportTest.java
Modified:
   trunk/src/main/java/rtspproxy/rtsp/RtspTransport.java
   trunk/src/main/java/rtspproxy/rtsp/RtspTransportList.java
Log:
Fixed problems with RTSP Transport header (bug #5850)

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspTransport.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspTransport.java	2005-12-13 21:42:36 UTC (rev 343)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspTransport.java	2005-12-13 21:46:39 UTC (rev 344)
@@ -18,65 +18,75 @@
 
 package rtspproxy.rtsp;
 
-import org.apache.log4j.Logger;
 
 /**
  * Parse the RTSP Transport header field. Reference Grammar:
  * 
  * <pre>
- *         Transport           =    &quot;Transport&quot; &quot;:&quot;
- *                                  1\#transport-spec
- *         transport-spec      =    transport-protocol/profile[/lower-transport]
- *                                  *parameter
- *         transport-protocol  =    &quot;RTP&quot;
- *         profile             =    &quot;AVP&quot;
- *         lower-transport     =    &quot;TCP&quot; | &quot;UDP&quot;
- *         parameter           =    ( &quot;unicast&quot; | &quot;multicast&quot; )
- *                             |    &quot;;&quot; &quot;destination&quot; [ &quot;=&quot; address ]
- *                             |    &quot;;&quot; &quot;interleaved&quot; &quot;=&quot; channel [ &quot;-&quot; channel ]
- *                             |    &quot;;&quot; &quot;append&quot;
- *                             |    &quot;;&quot; &quot;ttl&quot; &quot;=&quot; ttl
- *                             |    &quot;;&quot; &quot;layers&quot; &quot;=&quot; 1*DIGIT
- *                             |    &quot;;&quot; &quot;port&quot; &quot;=&quot; port [ &quot;-&quot; port ]
- *                             |    &quot;;&quot; &quot;client_port&quot; &quot;=&quot; port [ &quot;-&quot; port ]
- *                             |    &quot;;&quot; &quot;server_port&quot; &quot;=&quot; port [ &quot;-&quot; port ]
- *                             |    &quot;;&quot; &quot;ssrc&quot; &quot;=&quot; ssrc
- *                             |    &quot;;&quot; &quot;mode&quot; = &lt;&quot;&gt; 1\#mode &lt;&quot;&gt;
- *         ttl                 =    1*3(DIGIT)
- *         port                =    1*5(DIGIT)
- *         ssrc                =    8*8(HEX)
- *         channel             =    1*3(DIGIT)
- *         address             =    host
- *         mode                =    &lt;&quot;&gt; *Method &lt;&quot;&gt; | Method
- *      
- *      
- *         Example:
- *           Transport: RTP/AVP;multicast;ttl=127;mode=&quot;PLAY&quot;,
- *                      RTP/AVP;unicast;client_port=3456-3457;mode=&quot;PLAY&quot;
+ *                     Transport           =    &quot;Transport&quot; &quot;:&quot;
+ *                                              1\#transport-spec
+ *                     transport-spec      =    transport-protocol/profile[/lower-transport]
+ *                                              *parameter
+ *                     transport-protocol  =    &quot;RTP&quot;
+ *                     profile             =    &quot;AVP&quot;
+ *                     lower-transport     =    &quot;TCP&quot; | &quot;UDP&quot;
+ *                     parameter           =    ( &quot;unicast&quot; | &quot;multicast&quot; )
+ *                                         |    &quot;;&quot; &quot;destination&quot; [ &quot;=&quot; address ]
+ *                                         |    &quot;;&quot; &quot;interleaved&quot; &quot;=&quot; channel [ &quot;-&quot; channel ]
+ *                                         |    &quot;;&quot; &quot;append&quot;
+ *                                         |    &quot;;&quot; &quot;ttl&quot; &quot;=&quot; ttl
+ *                                         |    &quot;;&quot; &quot;layers&quot; &quot;=&quot; 1*DIGIT
+ *                                         |    &quot;;&quot; &quot;port&quot; &quot;=&quot; port [ &quot;-&quot; port ]
+ *                                         |    &quot;;&quot; &quot;client_port&quot; &quot;=&quot; port [ &quot;-&quot; port ]
+ *                                         |    &quot;;&quot; &quot;server_port&quot; &quot;=&quot; port [ &quot;-&quot; port ]
+ *                                         |    &quot;;&quot; &quot;ssrc&quot; &quot;=&quot; ssrc
+ *                                         |    &quot;;&quot; &quot;mode&quot; = &lt;&quot;&gt; 1\#mode &lt;&quot;&gt;
+ *                     ttl                 =    1*3(DIGIT)
+ *                     port                =    1*5(DIGIT)
+ *                     ssrc                =    8*8(HEX)
+ *                     channel             =    1*3(DIGIT)
+ *                     address             =    host
+ *                     mode                =    &lt;&quot;&gt; *Method &lt;&quot;&gt; | Method
+ *                  
+ *                  
+ *                     Example:
+ *                       Transport: RTP/AVP;multicast;ttl=127;mode=&quot;PLAY&quot;,
+ *                                  RTP/AVP;unicast;client_port=3456-3457;mode=&quot;PLAY&quot;
  * </pre>
  */
 public class RtspTransport
 {
 
-	private static Logger log = Logger.getLogger( RtspTransport.class );
-
+	/** Transport Protocol */
 	public enum TransportProtocol {
-		None, RTP, RDT, RAW
+		None,
+		/** Real Time Protocol */
+		RTP,
+		/** RDT: RealNetworks transport protocol */
+		RDT, RAW
 	}
+
+	/** Profile of the streamed data */
 	public enum Profile {
-		None, AVP
+		None,
+		/** Audio-Video Profile */
+		AVP
 	}
+
+	/** Underlying transport protocol */
 	public enum LowerTransport {
 		None, TCP, UDP
 	}
+
+	/** Delivery method */
 	public enum DeliveryType {
 		None, unicast, multicast
 	}
 
-	TransportProtocol transportProtocol;
-	Profile profile;
-	LowerTransport lowerTransport;
-	DeliveryType deliveryType;
+	TransportProtocol transportProtocol = null;
+	Profile profile = null;
+	LowerTransport lowerTransport = null;
+	DeliveryType deliveryType = null;
 
 	String destination;
 	String interleaved;
@@ -116,9 +126,6 @@
 		source = null;
 
 		parseTransport( transport );
-		if ( transport.compareToIgnoreCase( this.toString() ) != 0 ) {
-			log.warn( "Transport header incorrectly parsed." );
-		}
 	}
 
 	private void parseTransport( String transport )
@@ -175,6 +182,17 @@
 															if ( tok.startsWith( "source" ) )
 																setSource( _getStrValue( tok ) );
 		}
+
+		if ( transportProtocol == TransportProtocol.RTP
+				&& lowerTransport == LowerTransport.None )
+			// If it's not specified, let's assume UDP
+			setLowerTransport( LowerTransport.UDP );
+
+		if ( transportProtocol == TransportProtocol.RTP
+				&& deliveryType == DeliveryType.None )
+			// If it's not specified, let's assume unicast
+			setDeliveryType( DeliveryType.unicast );
+
 	}
 
 	public String toString()
@@ -216,6 +234,25 @@
 	}
 
 	/**
+	 * Test if the specified transport can be used by the proxy.
+	 * 
+	 * @return
+	 */
+	public boolean isSupportedByProxy()
+	{
+		/*
+		 * At now, the only transport supported by the server is
+		 * "RTP/AVP/UDP;unicast"
+		 */
+		if ( transportProtocol == TransportProtocol.RTP && profile == Profile.AVP
+				&& lowerTransport == LowerTransport.UDP
+				&& deliveryType == DeliveryType.unicast )
+			return true;
+		else
+			return false;
+	}
+
+	/**
 	 * @return Returns the append.
 	 */
 	public boolean isAppend()

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspTransportList.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspTransportList.java	2005-12-13 21:42:36 UTC (rev 343)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspTransportList.java	2005-12-13 21:46:39 UTC (rev 344)
@@ -36,8 +36,11 @@
 	{
 		transportList = new ArrayList<RtspTransport>();
 
-		for ( String transport : transportHeader.split( "," ) ) {
-			transportList.add( new RtspTransport( transport ) );
+		RtspTransport transport;
+		for ( String transportString : transportHeader.split( "," ) ) {
+			transport = new RtspTransport( transportString );
+			if ( transport.isSupportedByProxy() )
+				transportList.add( transport );
 		}
 	}
 

Added: trunk/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java
===================================================================
--- trunk/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java	2005-12-13 21:42:36 UTC (rev 343)
+++ trunk/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java	2005-12-13 21:46:39 UTC (rev 344)
@@ -0,0 +1,61 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.rtsp;
+
+import junit.framework.TestCase;
+
+/**
+ * @author Matteo Merli
+ */
+public class RtspTransportListTest extends TestCase
+{
+
+	public static void main( String[] args )
+	{
+		junit.textui.TestRunner.run( RtspTransportListTest.class );
+	}
+
+	RtspTransportList transportList;
+	String transportTest;
+
+	@Override
+	protected void setUp() throws Exception
+	{
+		transportTest = "x-real-rdt/mcast;client_port=6972;mode=play,"
+				+ "x-real-rdt/udp;client_port=6972;mode=play,"
+				+ "x-pn-tng/udp;client_port=6972;mode=play,"
+				+ "RTP/AVP;unicast;client_port=6972-6973;mode=play,"
+				+ "x-pn-tng/tcp;mode=play," + "x-real-rdt/tcp;mode=play,"
+				+ "RTP/AVP/TCP;unicast;mode=play";
+		transportList = new RtspTransportList( transportTest );
+	}
+
+	public void testToString()
+	{
+		String expected = "RTP/AVP/UDP;unicast;client_port=6972-6973;mode=play";
+		assertEquals( expected, transportList.toString() );
+	}
+
+	public void testCount()
+	{
+		// only a transport type is valid in this test
+		assertEquals( 1, transportList.count() );
+	}
+
+}


Property changes on: trunk/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/test/java/rtspproxy/rtsp/RtspTransportTest.java
===================================================================
--- trunk/src/test/java/rtspproxy/rtsp/RtspTransportTest.java	2005-12-13 21:42:36 UTC (rev 343)
+++ trunk/src/test/java/rtspproxy/rtsp/RtspTransportTest.java	2005-12-13 21:46:39 UTC (rev 344)
@@ -0,0 +1,312 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.rtsp;
+
+import java.util.Arrays;
+
+import junit.framework.TestCase;
+import rtspproxy.rtsp.RtspTransport.DeliveryType;
+
+/**
+ * @author Matteo Merli
+ */
+public class RtspTransportTest extends TestCase
+{
+
+	public static void main( String[] args )
+	{
+		junit.textui.TestRunner.run( RtspTransportTest.class );
+	}
+
+	String test1 = "x-real-rdt/mcast;client_port=6972;mode=play";
+	String test2 = "x-real-rdt/udp;client_port=6972;mode=play";
+	String test3 = "x-pn-tng/udp;client_port=6972;mode=play";
+	String test4 = "RTP/AVP;unicast;client_port=6972-6973;mode=play";
+	String test5 = "x-pn-tng/tcp;mode=play";
+	String test6 = "x-real-rdt/tcp;mode=play";
+	String test7 = "RTP/AVP/TCP;unicast;mode=play";
+
+	RtspTransport transport1;
+	RtspTransport transport2;
+	RtspTransport transport3;
+	RtspTransport transport4;
+	RtspTransport transport5;
+	RtspTransport transport6;
+	RtspTransport transport7;
+
+	@Override
+	protected void setUp() throws Exception
+	{
+		transport1 = new RtspTransport( test1 );
+		transport2 = new RtspTransport( test2 );
+		transport3 = new RtspTransport( test3 );
+		transport4 = new RtspTransport( test4 );
+		transport5 = new RtspTransport( test5 );
+		transport6 = new RtspTransport( test6 );
+		transport7 = new RtspTransport( test7 );
+	}
+
+	public void testIsSupportedByProxy()
+	{
+		assertEquals( false, transport1.isSupportedByProxy() );
+		assertEquals( false, transport2.isSupportedByProxy() );
+		assertEquals( false, transport3.isSupportedByProxy() );
+		assertEquals( true, transport4.isSupportedByProxy() );
+		assertEquals( false, transport5.isSupportedByProxy() );
+		assertEquals( false, transport6.isSupportedByProxy() );
+		assertEquals( false, transport7.isSupportedByProxy() );
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.toString()'
+	 */
+	public void testToString()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.isAppend()'
+	 */
+	public void testIsAppend()
+	{
+		assertEquals( false, transport1.isAppend() );
+		assertEquals( false, transport2.isAppend() );
+		assertEquals( false, transport3.isAppend() );
+		assertEquals( false, transport4.isAppend() );
+		assertEquals( false, transport5.isAppend() );
+		assertEquals( false, transport6.isAppend() );
+		assertEquals( false, transport7.isAppend() );
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.getClientPort()'
+	 */
+	public void testGetClientPort()
+	{
+		assertTrue( Arrays.equals( new int[] { 6972, 0 }, transport1.getClientPort() ) );
+		assertTrue( Arrays.equals( new int[] { 6972, 0 }, transport2.getClientPort() ) );
+		assertTrue( Arrays.equals( new int[] { 6972, 0 }, transport3.getClientPort() ) );
+		assertTrue( Arrays.equals( new int[] { 6972, 6973 }, transport4.getClientPort() ) );
+		assertTrue( Arrays.equals( new int[] { 0, 0 }, transport5.getClientPort() ) );
+		assertTrue( Arrays.equals( new int[] { 0, 0 }, transport6.getClientPort() ) );
+		assertTrue( Arrays.equals( new int[] { 0, 0 }, transport7.getClientPort() ) );
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.getDeliveryType()'
+	 */
+	public void testGetDeliveryType()
+	{
+		assertEquals( DeliveryType.None, transport1.getDeliveryType() );
+		assertEquals( DeliveryType.None, transport2.getDeliveryType() );
+		assertEquals( DeliveryType.None, transport3.getDeliveryType() );
+		assertEquals( DeliveryType.unicast, transport4.getDeliveryType() );
+		assertEquals( DeliveryType.None, transport5.getDeliveryType() );
+		assertEquals( DeliveryType.None, transport6.getDeliveryType() );
+		assertEquals( DeliveryType.unicast, transport7.getDeliveryType() );
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.getInterleaved()'
+	 */
+	public void testGetInterleaved()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.setInterleaved(String)'
+	 */
+	public void testSetInterleaved()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.getLayers()'
+	 */
+	public void testGetLayers()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.setLayers(int)'
+	 */
+	public void testSetLayers()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.getLowerTransport()'
+	 */
+	public void testGetLowerTransport()
+	{
+
+	}
+
+	/*
+	 * Test method for
+	 * 'rtspproxy.rtsp.RtspTransport.setLowerTransport(LowerTransport)'
+	 */
+	public void testSetLowerTransport()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.getMode()'
+	 */
+	public void testGetMode()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.setMode(String)'
+	 */
+	public void testSetMode()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.getPort()'
+	 */
+	public void testGetPort()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.setPort(int[])'
+	 */
+	public void testSetPort()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.getProfile()'
+	 */
+	public void testGetProfile()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.setProfile(Profile)'
+	 */
+	public void testSetProfile()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.getServerPort()'
+	 */
+	public void testGetServerPort()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.setServerPort(int[])'
+	 */
+	public void testSetServerPort()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.getSSRC()'
+	 */
+	public void testGetSSRC()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.setSSRC(String)'
+	 */
+	public void testSetSSRCString()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.setSSRC(long)'
+	 */
+	public void testSetSSRCLong()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.getTransportProtocol()'
+	 */
+	public void testGetTransportProtocol()
+	{
+
+	}
+
+	/*
+	 * Test method for
+	 * 'rtspproxy.rtsp.RtspTransport.setTransportProtocol(TransportProtocol)'
+	 */
+	public void testSetTransportProtocol()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.getTTL()'
+	 */
+	public void testGetTTL()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.setTTL(int)'
+	 */
+	public void testSetTTL()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.setSource(String)'
+	 */
+	public void testSetSource()
+	{
+
+	}
+
+	/*
+	 * Test method for 'rtspproxy.rtsp.RtspTransport.getSource()'
+	 */
+	public void testGetSource()
+	{
+
+	}
+
+}


Property changes on: trunk/src/test/java/rtspproxy/rtsp/RtspTransportTest.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev



From merlimat at berlios.de  Sat Dec 17 16:46:35 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Sat, 17 Dec 2005 16:46:35 +0100
Subject: [Rtspproxy-devel] r345 - trunk/src/main/java/rtspproxy/rtsp
Message-ID: <200512171546.jBHFkZis032136@sheep.berlios.de>

Author: merlimat
Date: 2005-12-17 16:46:28 +0100 (Sat, 17 Dec 2005)
New Revision: 345

Modified:
   trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java
Log:
Using a static charset definition instead of lookup the charset every time.

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2005-12-13 21:46:39 UTC (rev 344)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspDecoder.java	2005-12-17 15:46:28 UTC (rev 345)
@@ -14,10 +14,10 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
-import java.io.UnsupportedEncodingException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.nio.CharBuffer;
+import java.nio.charset.Charset;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -36,8 +36,10 @@
 public class RtspDecoder implements ProtocolDecoder
 {
 
-	private static final String readStateATTR = RtspDecoder.class.toString() + "readState";
-	private static final String rtspMessageATTR = RtspDecoder.class.toString() + "rtspMessage";
+	private static final String readStateATTR = RtspDecoder.class.toString()
+			+ "readState";
+	private static final String rtspMessageATTR = RtspDecoder.class.toString()
+			+ "rtspMessage";
 
 	/**
 	 * State enumerator that indicates the reached state in the RTSP message
@@ -68,6 +70,8 @@
 	private static final Pattern rtspResponsePattern = Pattern.compile( "RTSP/1.0 ([0-9]+) .+" );
 	private static final Pattern rtspHeaderPattern = Pattern.compile( "([a-zA-Z\\-]+[0-9]?):\\s?(.*)" );
 
+	private static final Charset asciiCharset = Charset.forName( "US-ASCII" );
+
 	/**
 	 * Do the parsing on the incoming stream. If the stream does not contain the
 	 * entire RTSP message wait for other data to arrive, before dispatching the
@@ -81,12 +85,10 @@
 			throws ProtocolDecoderException
 	{
 		BufferedReader reader = null;
-		try {
-			reader = new BufferedReader( new InputStreamReader( buffer.asInputStream(),
-					"US-ASCII" ) );
-		} catch ( UnsupportedEncodingException e1 ) {
-		}
 
+		reader = new BufferedReader( new InputStreamReader( buffer.asInputStream(),
+				asciiCharset ) );
+
 		// Retrieve status from session
 		ReadState state = (ReadState) session.getAttribute( readStateATTR );
 		if ( state == null )



From merlimat at berlios.de  Sun Dec 18 16:51:42 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Sun, 18 Dec 2005 16:51:42 +0100
Subject: [Rtspproxy-devel] r347 - trunk/src/test/java/rtspproxy/rtsp
Message-ID: <200512181551.jBIFpgbb032273@sheep.berlios.de>

Author: merlimat
Date: 2005-12-18 16:51:39 +0100 (Sun, 18 Dec 2005)
New Revision: 347

Modified:
   trunk/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java
   trunk/src/test/java/rtspproxy/rtsp/RtspTransportTest.java
Log:
Initial support for RDT packets handling.

Modified: trunk/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java
===================================================================
--- trunk/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java	2005-12-18 15:50:15 UTC (rev 346)
+++ trunk/src/test/java/rtspproxy/rtsp/RtspTransportListTest.java	2005-12-18 15:51:39 UTC (rev 347)
@@ -48,14 +48,15 @@
 
 	public void testToString()
 	{
-		String expected = "RTP/AVP/UDP;unicast;client_port=6972-6973;mode=play";
+		String expected = "x-real-rdt/udp;client_port=6972;mode=play,"
+				+ "RTP/AVP/UDP;unicast;client_port=6972-6973;mode=play";
 		assertEquals( expected, transportList.toString() );
 	}
 
 	public void testCount()
 	{
 		// only a transport type is valid in this test
-		assertEquals( 1, transportList.count() );
+		assertEquals( 2, transportList.count() );
 	}
 
 }

Modified: trunk/src/test/java/rtspproxy/rtsp/RtspTransportTest.java
===================================================================
--- trunk/src/test/java/rtspproxy/rtsp/RtspTransportTest.java	2005-12-18 15:50:15 UTC (rev 346)
+++ trunk/src/test/java/rtspproxy/rtsp/RtspTransportTest.java	2005-12-18 15:51:39 UTC (rev 347)
@@ -65,7 +65,7 @@
 	public void testIsSupportedByProxy()
 	{
 		assertEquals( false, transport1.isSupportedByProxy() );
-		assertEquals( false, transport2.isSupportedByProxy() );
+		assertEquals( true, transport2.isSupportedByProxy() );
 		assertEquals( false, transport3.isSupportedByProxy() );
 		assertEquals( true, transport4.isSupportedByProxy() );
 		assertEquals( false, transport5.isSupportedByProxy() );
@@ -114,12 +114,12 @@
 	 */
 	public void testGetDeliveryType()
 	{
-		assertEquals( DeliveryType.None, transport1.getDeliveryType() );
-		assertEquals( DeliveryType.None, transport2.getDeliveryType() );
+		assertEquals( DeliveryType.unicast, transport1.getDeliveryType() );
+		assertEquals( DeliveryType.unicast, transport2.getDeliveryType() );
 		assertEquals( DeliveryType.None, transport3.getDeliveryType() );
 		assertEquals( DeliveryType.unicast, transport4.getDeliveryType() );
 		assertEquals( DeliveryType.None, transport5.getDeliveryType() );
-		assertEquals( DeliveryType.None, transport6.getDeliveryType() );
+		assertEquals( DeliveryType.unicast, transport6.getDeliveryType() );
 		assertEquals( DeliveryType.unicast, transport7.getDeliveryType() );
 	}
 



From merlimat at berlios.de  Mon Dec 19 20:14:37 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Mon, 19 Dec 2005 20:14:37 +0100
Subject: [Rtspproxy-devel] r348 - trunk/src/main/java/rtspproxy/rtsp
Message-ID: <200512191914.jBJJEbdQ002179@sheep.berlios.de>

Author: merlimat
Date: 2005-12-19 20:14:26 +0100 (Mon, 19 Dec 2005)
New Revision: 348

Modified:
   trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java
Log:
Using LinkedHashMap instead of Properties for headers management

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java	2005-12-18 15:51:39 UTC (rev 347)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java	2005-12-19 19:14:26 UTC (rev 348)
@@ -19,14 +19,15 @@
 package rtspproxy.rtsp;
 
 import java.nio.CharBuffer;
-import java.util.Properties;
+import java.util.LinkedHashMap;
+import java.util.Map;
 
 import rtspproxy.Config;
 
 /**
  * Base abstract class for RTSP messages.
  * 
- * @author mat
+ * @author Matteo Merli
  */
 public abstract class RtspMessage
 {
@@ -47,7 +48,9 @@
 	};
 
 	private int sequenceNumber;
-	private Properties headers;
+
+	private Map<String, String> headers;
+
 	private StringBuffer buffer;
 
 	/**
@@ -56,7 +59,7 @@
 	public RtspMessage()
 	{
 		sequenceNumber = 0;
-		headers = new Properties();
+		headers = new LinkedHashMap<String, String>();
 		buffer = new StringBuffer();
 	}
 
@@ -72,35 +75,35 @@
 	 * Adds a new header to the RTSP message.
 	 * 
 	 * @param key
-	 *        The name of the header
+	 *            The name of the header
 	 * @param value
-	 *        Its value
+	 *            Its value
 	 */
 	public void setHeader( String key, String value )
 	{
 		// Handle some bad formatted headers
 		if ( key.compareToIgnoreCase( "content-length" ) == 0 ) {
-			headers.setProperty( "Content-Length", value );
+			headers.put( "Content-Length", value );
 		} else {
-			headers.setProperty( key, value );
+			headers.put( key, value );
 		}
 	}
 
 	/**
 	 * @param key
-	 *        Header name
+	 *            Header name
 	 * @return the value of the header
 	 */
 	public String getHeader( String key )
 	{
-		return headers.getProperty( key );
+		return headers.get( key );
 	}
 
 	/**
 	 * @param key
-	 *        Header name
+	 *            Header name
 	 * @param defaultValue
-	 *        the default value
+	 *            the default value
 	 * @return the value of the header of <i>defaultValue</i> if header is not
 	 *         found
 	 */
@@ -117,7 +120,7 @@
 	 * Remove an header from the message headers collection
 	 * 
 	 * @param key
-	 *        the name of the header
+	 *            the name of the header
 	 */
 	public void removeHeader( String key )
 	{
@@ -128,9 +131,9 @@
 	 * Formats all the headers into a string ready to be sent in a RTSP message.
 	 * 
 	 * <pre>
-	 *  Header1: Value1
-	 *  Header2: value 2
-	 *  ... 
+	 *     Header1: Value1
+	 *     Header2: value 2
+	 *     ... 
 	 * </pre>
 	 * 
 	 * @return a string containing the serialzed headers
@@ -138,9 +141,8 @@
 	public String getHeadersString()
 	{
 		StringBuilder buf = new StringBuilder();
-		for ( Object key : headers.keySet() ) {
-			String value = headers.getProperty( (String) key );
-			buf.append( key + ": " + value + CRLF );
+		for ( String key : headers.keySet() ) {
+			buf.append( key ).append( ": " ).append( headers.get( key ) ).append( CRLF );
 		}
 		return buf.toString();
 	}
@@ -167,7 +169,7 @@
 
 	/**
 	 * @param buffer
-	 *        StringBuffer containing the contents
+	 *            StringBuffer containing the contents
 	 */
 	public void setBuffer( StringBuffer buffer )
 	{
@@ -176,7 +178,7 @@
 
 	/**
 	 * @param other
-	 *        buffer with content to be appended
+	 *            buffer with content to be appended
 	 */
 	public void appendToBuffer( StringBuffer other )
 	{
@@ -185,7 +187,7 @@
 
 	/**
 	 * @param other
-	 *        buffer with content to be appended
+	 *            buffer with content to be appended
 	 */
 	public void appendToBuffer( CharBuffer other )
 	{
@@ -221,7 +223,7 @@
 
 	/**
 	 * @param sequenceNumber
-	 *        The sequenceNumber to set.
+	 *            The sequenceNumber to set.
 	 */
 	public void setSequenceNumber( int sequenceNumber )
 	{



From merlimat at berlios.de  Mon Dec 19 20:17:33 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Mon, 19 Dec 2005 20:17:33 +0100
Subject: [Rtspproxy-devel] r349 - trunk/src/main/java/rtspproxy/lib
Message-ID: <200512191917.jBJJHXuh003876@sheep.berlios.de>

Author: merlimat
Date: 2005-12-19 20:17:28 +0100 (Mon, 19 Dec 2005)
New Revision: 349

Added:
   trunk/src/main/java/rtspproxy/lib/Singleton.java
Log:
Added Singleton class

Added: trunk/src/main/java/rtspproxy/lib/Singleton.java
===================================================================
--- trunk/src/main/java/rtspproxy/lib/Singleton.java	2005-12-19 19:14:26 UTC (rev 348)
+++ trunk/src/main/java/rtspproxy/lib/Singleton.java	2005-12-19 19:17:28 UTC (rev 349)
@@ -0,0 +1,55 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.lib;
+
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * Simple base implementation of the Singleton pattern. A singleton is a class
+ * that can have only one instance.
+ * 
+ * @author Matteo Merli
+ */
+public abstract class Singleton
+{
+
+	private static Set<Class> classSet = Collections.synchronizedSet( new HashSet<Class>() );
+
+	/**
+	 * Constructor. Takes care that only one instance at a time of this class is
+	 * present.
+	 */
+	protected Singleton()
+	{
+		if ( classSet.contains( this.getClass() ) ) {
+			throw new RuntimeException( "There can be only one instance of class "
+					+ this.getClass().getName() );
+		}
+
+		classSet.add( this.getClass() );
+	}
+
+	public void finalize()
+	{
+		classSet.remove( this.getClass() );
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/lib/Singleton.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev



From merlimat at berlios.de  Sun Dec 18 16:50:40 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Sun, 18 Dec 2005 16:50:40 +0100
Subject: [Rtspproxy-devel] r346 - in trunk/src/main/java/rtspproxy: . lib proxy proxy/track rtsp
Message-ID: <200512181550.jBIFoekA032054@sheep.berlios.de>

Author: merlimat
Date: 2005-12-18 16:50:15 +0100 (Sun, 18 Dec 2005)
New Revision: 346

Added:
   trunk/src/main/java/rtspproxy/ProxyServiceRegistry.java
   trunk/src/main/java/rtspproxy/RdtClientService.java
   trunk/src/main/java/rtspproxy/RdtServerService.java
   trunk/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java
   trunk/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java
   trunk/src/main/java/rtspproxy/proxy/track/
   trunk/src/main/java/rtspproxy/proxy/track/RdtTrack.java
   trunk/src/main/java/rtspproxy/proxy/track/RtpTrack.java
   trunk/src/main/java/rtspproxy/proxy/track/Track.java
Removed:
   trunk/src/main/java/rtspproxy/proxy/Track.java
Modified:
   trunk/src/main/java/rtspproxy/Reactor.java
   trunk/src/main/java/rtspproxy/RtpClientService.java
   trunk/src/main/java/rtspproxy/RtpServerService.java
   trunk/src/main/java/rtspproxy/RtspService.java
   trunk/src/main/java/rtspproxy/lib/PortManager.java
   trunk/src/main/java/rtspproxy/proxy/ClientRtcpPacketHandler.java
   trunk/src/main/java/rtspproxy/proxy/ClientRtpPacketHandler.java
   trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/src/main/java/rtspproxy/proxy/ProxySession.java
   trunk/src/main/java/rtspproxy/proxy/ServerRtcpPacketHandler.java
   trunk/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java
   trunk/src/main/java/rtspproxy/rtsp/RtspTransport.java
Log:
Initial support for RDT packets handling.

Added: trunk/src/main/java/rtspproxy/ProxyServiceRegistry.java
===================================================================
--- trunk/src/main/java/rtspproxy/ProxyServiceRegistry.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/ProxyServiceRegistry.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -0,0 +1,185 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+
+import org.apache.mina.common.IoAcceptor;
+import org.apache.mina.common.IoFilterChain;
+import org.apache.mina.common.IoFilterChainBuilder;
+import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.TransportType;
+import org.apache.mina.filter.ThreadPoolFilter;
+import org.apache.mina.registry.Service;
+import org.apache.mina.registry.ServiceRegistry;
+import org.apache.mina.transport.socket.nio.DatagramAcceptor;
+import org.apache.mina.transport.socket.nio.SocketAcceptor;
+import org.apache.mina.transport.vmpipe.VmPipeAcceptor;
+
+/**
+ * Custom implementation of the ServiceRegistry interface. Creates an acceptor
+ * for every service.
+ * 
+ * @author Matteo Merli
+ */
+public class ProxyServiceRegistry implements ServiceRegistry
+{
+
+	protected final ThreadPoolFilter threadPoolFilter = new ThreadPoolFilter();
+
+	private final ConcurrentMap<String, IoAcceptor> acceptors = new ConcurrentHashMap<String, IoAcceptor>();
+	private final ConcurrentMap<String, Service> services = new ConcurrentHashMap<String, Service>();
+
+	public void bind( Service service, IoHandler ioHandler ) throws IOException
+	{
+		bind( service, ioHandler, null );
+	}
+
+	public void bind( Service service, IoHandler ioHandler,
+			IoFilterChainBuilder filterChainBuilder ) throws IOException
+	{
+		IoAcceptor acceptor = newAcceptor( service );
+		if ( filterChainBuilder == null ) {
+			filterChainBuilder = IoFilterChainBuilder.NOOP;
+		}
+		acceptor.bind( service.getAddress(), ioHandler, new IoFilterChainBuilderWrapper(
+				service, filterChainBuilder ) );
+
+		services.put( service.getName(), service );
+		acceptors.put( service.getName(), acceptor );
+	}
+
+	public synchronized void unbind( Service service )
+	{
+		IoAcceptor acceptor = acceptors.get( service.getName() );
+		try {
+			acceptor.unbind( service.getAddress() );
+		} catch ( Exception e ) {
+			// ignore
+		}
+
+		services.remove( service.getName() );
+		acceptors.remove( service.getName() );
+	}
+
+	public void unbind( String serviceName )
+	{
+		Service service = services.get( serviceName );
+		if ( service == null )
+			return;
+		else
+			unbind( service );
+	}
+
+	public synchronized void unbindAll()
+	{
+		Collection<Service> serviceList = services.values();
+		for ( Service service : serviceList ) {
+			unbind( service );
+		}
+	}
+
+	public synchronized Set getAllServices()
+	{
+		return new HashSet<Service>( services.values() );
+	}
+
+	public Service getService( String name )
+	{
+		return services.get( name );
+	}
+
+	public Set getServices( String name )
+	{
+		Set<Service> oneService = new HashSet<Service>();
+		Service service = services.get( name );
+		if ( service != null )
+			oneService.add( service );
+		return oneService;
+	}
+
+	public Set getServices( TransportType transportType )
+	{
+		// Not implemented
+		return null;
+	}
+
+	public Set getServices( int port )
+	{
+		// Not implemented
+		return null;
+	}
+
+	public IoAcceptor getAcceptor( TransportType transportType )
+	{
+		// Not implemented
+		return null;
+	}
+
+	public IoAcceptor getAcceptor( String serviceName )
+	{
+		return acceptors.get( serviceName );
+	}
+
+	private static IoAcceptor newAcceptor( Service service )
+	{
+		TransportType transportType = service.getTransportType();
+		if ( transportType == TransportType.SOCKET )
+			return new SocketAcceptor();
+		else
+			if ( transportType == TransportType.DATAGRAM )
+				return new DatagramAcceptor();
+			else
+				if ( transportType == TransportType.VM_PIPE )
+					return new VmPipeAcceptor();
+				else
+					return null;
+	}
+
+	private class IoFilterChainBuilderWrapper implements IoFilterChainBuilder
+	{
+
+		private final Service service;
+		private final IoFilterChainBuilder originalBuilder;
+
+		private IoFilterChainBuilderWrapper( Service service,
+				IoFilterChainBuilder originalBuilder )
+		{
+			this.service = service;
+			this.originalBuilder = originalBuilder;
+		}
+
+		public void buildFilterChain( IoFilterChain chain ) throws Exception
+		{
+			chain.getSession().setAttribute( SERVICE, service );
+
+			try {
+				originalBuilder.buildFilterChain( chain );
+			} finally {
+				chain.addFirst( "threadPool", threadPoolFilter );
+			}
+		}
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/ProxyServiceRegistry.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/RdtClientService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RdtClientService.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/RdtClientService.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -0,0 +1,109 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+
+import org.apache.log4j.Logger;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.TransportType;
+import org.apache.mina.registry.Service;
+
+import rtspproxy.lib.NoPortAvailableException;
+import rtspproxy.lib.PortManager;
+import rtspproxy.proxy.ClientRdtPacketHandler;
+
+/**
+ * This service is responsible of receiving and sending RTP and RTCP packets to
+ * clients.
+ * 
+ * @author Matteo Merli
+ */
+public class RdtClientService implements ProxyService
+{
+
+	private static Logger log = Logger.getLogger( RtpClientService.class );
+
+	private static InetSocketAddress rdtAddress = null;
+	
+	private static final String NAME = "RdtClientService";
+
+	public void start() throws IOException, NoPortAvailableException
+	{
+		int rdtPort = Config.getInt( "proxy.client.rdt.port", 8018 );
+		String netInterface = Config.get( "proxy.client.interface", null );
+		boolean dinPorts = Config.getBoolean( "proxy.client.dynamicPorts", false );
+
+		// If dinPorts is true, we have to first check the availability
+		// of the ports and choose 2 valid ports.
+		if ( dinPorts ) {
+			int[] ports = PortManager.findAvailablePorts( 1, rdtPort );
+			rdtPort = ports[0];
+		}
+
+		rdtAddress = new InetSocketAddress( InetAddress.getByName( netInterface ),
+				rdtPort );
+
+		try {
+			Service rdtService;
+
+			rdtService = new Service( NAME, TransportType.DATAGRAM,
+					rdtAddress );
+			
+			Reactor.getRegistry().bind( rdtService, new ClientRdtPacketHandler() );
+			log.info( "RdtClientService Started - Listening on: "
+					+ InetAddress.getByName( netInterface ) + " " + rdtPort  );
+
+		} catch ( IOException e ) {
+			log.fatal( "Can't start RdtClientService. " + e );
+			throw e;
+		}
+	}
+
+	public void stop()
+	{
+		Reactor.getRegistry().unbind( NAME );
+		log.info( "RdtClientService Stopped" );
+	}
+
+	public static IoSession newRdtSession( SocketAddress remoteAddress )
+	{
+		return Reactor.getRegistry().getAcceptor( NAME ).newSession(
+				remoteAddress, rdtAddress );
+	}
+
+	public static InetSocketAddress getRdtAddress()
+	{
+		return rdtAddress;
+	}
+
+	public static InetAddress getHostAddress()
+	{
+		return rdtAddress.getAddress();
+	}
+
+	public static int getPort()
+	{
+		return rdtAddress.getPort();
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/RdtClientService.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/RdtServerService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RdtServerService.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/RdtServerService.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -0,0 +1,108 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+
+import org.apache.log4j.Logger;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.TransportType;
+import org.apache.mina.registry.Service;
+
+import rtspproxy.lib.NoPortAvailableException;
+import rtspproxy.lib.PortManager;
+import rtspproxy.proxy.ServerRdtPacketHandler;
+
+/**
+ * This service is responsible of receiving and sending RTP and RTCP packets to
+ * clients.
+ * 
+ * @author Matteo Merli
+ */
+public class RdtServerService implements ProxyService
+{
+
+	private static Logger log = Logger.getLogger( RtpClientService.class );
+
+	private static InetSocketAddress rdtAddress = null;
+
+	private static final String NAME = "RdtServerService";
+
+	public void start() throws IOException, NoPortAvailableException
+	{
+		int rdtPort = Config.getInt( "proxy.server.rdt.port", 8020 );
+		String netInterface = Config.get( "proxy.server.interface", null );
+		boolean dinPorts = Config.getBoolean( "proxy.server.dynamicPorts", false );
+
+		// If dinPorts is true, we have to first check the availability
+		// of the ports and choose 2 valid ports.
+		if ( dinPorts ) {
+			int[] ports = PortManager.findAvailablePorts( 1, rdtPort );
+			rdtPort = ports[0];
+		}
+
+		rdtAddress = new InetSocketAddress( InetAddress.getByName( netInterface ),
+				rdtPort );
+
+		try {
+			Service rdtService;
+
+			rdtService = new Service( NAME, TransportType.DATAGRAM, rdtAddress );
+
+			Reactor.getRegistry().bind( rdtService, new ServerRdtPacketHandler() );
+			log.info( "RdtServerService Started - Listening on: "
+					+ InetAddress.getByName( netInterface ) + " " + rdtPort );
+
+		} catch ( IOException e ) {
+			log.fatal( "Can't start RdtServerService. " + e );
+			throw e;
+		}
+	}
+
+	public void stop()
+	{
+		Reactor.getRegistry().unbind( NAME );
+		log.info( "RdtServerService Stopped" );
+	}
+
+	public static IoSession newRdtSession( SocketAddress remoteAddress )
+	{
+		return Reactor.getRegistry().getAcceptor( NAME ).newSession(
+				remoteAddress, rdtAddress );
+	}
+
+	public static InetSocketAddress getRdtAddress()
+	{
+		return rdtAddress;
+	}
+
+	public static InetAddress getHostAddress()
+	{
+		return rdtAddress.getAddress();
+	}
+
+	public static int getPort()
+	{
+		return rdtAddress.getPort();
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/RdtServerService.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/src/main/java/rtspproxy/Reactor.java
===================================================================
--- trunk/src/main/java/rtspproxy/Reactor.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/Reactor.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -19,8 +19,6 @@
 package rtspproxy;
 
 import org.apache.log4j.Logger;
-import org.apache.mina.registry.ServiceRegistry;
-import org.apache.mina.registry.SimpleServiceRegistry;
 
 /**
  * 
@@ -30,11 +28,13 @@
 
 	private static Logger log = Logger.getLogger( Reactor.class );
 
-	private static ServiceRegistry registry = new SimpleServiceRegistry();
+	private static ProxyServiceRegistry registry = new ProxyServiceRegistry();
 
 	private static ProxyService rtspService;
 	private static ProxyService rtpClientService;
 	private static ProxyService rtpServerService;
+	private static ProxyService rdtClientService;
+	private static ProxyService rdtServerService;
 
 	private static boolean isStandalone = false;
 
@@ -56,6 +56,12 @@
 
 		rtpServerService = new RtpServerService();
 		rtpServerService.start();
+		
+		rdtClientService = new RdtClientService();
+		rdtClientService.start();
+		
+		rdtServerService = new RdtServerService();
+		rdtServerService.start();
 	}
 
 	static public void stop()
@@ -68,6 +74,10 @@
 				rtpClientService.stop();
 			if ( rtpServerService != null )
 				rtpServerService.stop();
+			if ( rdtClientService != null )
+				rdtClientService.stop();
+			if ( rdtServerService != null )
+				rdtServerService.stop();
 		} catch ( Exception e ) {
 			log.debug( "Error shutting down: " + e );
 		}
@@ -78,7 +88,7 @@
 			Runtime.getRuntime().halt( 0 );
 	}
 
-	protected static synchronized ServiceRegistry getRegistry()
+	protected static ProxyServiceRegistry getRegistry()
 	{
 		return registry;
 	}

Modified: trunk/src/main/java/rtspproxy/RtpClientService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtpClientService.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/RtpClientService.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -44,9 +44,12 @@
 
 	private static Logger log = Logger.getLogger( RtpClientService.class );
 
-	static InetSocketAddress rtpAddress = null;
-	static InetSocketAddress rtcpAddress = null;
+	private static InetSocketAddress rtpAddress = null;
+	private static InetSocketAddress rtcpAddress = null;
 
+	private static final String rtpNAME = "RtpClientService";
+	private static final String rtcpNAME = "RtcpClientService";
+
 	public void start() throws IOException, NoPortAvailableException
 	{
 		int rtpPort = Config.getInt( "proxy.client.rtp.port", 8002 );
@@ -74,10 +77,8 @@
 		try {
 			Service rtpService, rtcpService;
 
-			rtpService = new Service( "RtpClientService", TransportType.DATAGRAM,
-					rtpAddress );
-			rtcpService = new Service( "RtcpClientService", TransportType.DATAGRAM,
-					rtcpAddress );
+			rtpService = new Service( rtpNAME, TransportType.DATAGRAM, rtpAddress );
+			rtcpService = new Service( rtcpNAME, TransportType.DATAGRAM, rtcpAddress );
 
 			Reactor.getRegistry().bind( rtpService, new ClientRtpPacketHandler() );
 			Reactor.getRegistry().bind( rtcpService, new ClientRtcpPacketHandler() );
@@ -93,26 +94,21 @@
 
 	public void stop()
 	{
-		for ( Object service : Reactor.getRegistry().getServices( "RtpClientService" ) ) {
-			Reactor.getRegistry().unbind( (Service) service );
-		}
-		for ( Object service : Reactor.getRegistry().getServices( "RtcpClientService" ) ) {
-			Reactor.getRegistry().unbind( (Service) service );
-		}
-
+		Reactor.getRegistry().unbind( rtpNAME );
+		Reactor.getRegistry().unbind( rtcpNAME );
 		log.info( "RtpClientService Stopped" );
 	}
 
 	public static IoSession newRtpSession( SocketAddress remoteAddress )
 	{
-		return Reactor.getRegistry().getAcceptor( TransportType.DATAGRAM ).newSession(
-				remoteAddress, rtpAddress );
+		return Reactor.getRegistry().getAcceptor( rtpNAME ).newSession( remoteAddress,
+				rtpAddress );
 	}
 
 	public static IoSession newRtcpSession( SocketAddress remoteAddress )
 	{
-		return Reactor.getRegistry().getAcceptor( TransportType.DATAGRAM ).newSession(
-				remoteAddress, rtcpAddress );
+		return Reactor.getRegistry().getAcceptor( rtcpNAME ).newSession( remoteAddress,
+				rtcpAddress );
 	}
 
 	public static InetSocketAddress getRtpAddress()

Modified: trunk/src/main/java/rtspproxy/RtpServerService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtpServerService.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/RtpServerService.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -40,14 +40,12 @@
 
 	private static Logger log = Logger.getLogger( RtpServerService.class );
 
-	static InetSocketAddress rtpAddress = null;
-	static InetSocketAddress rtcpAddress = null;
+	private static InetSocketAddress rtpAddress = null;
+	private static InetSocketAddress rtcpAddress = null;
 
-	/*
-	 * (non-Javadoc)
-	 * 
-	 * @see rtspproxy.ProxyService#start()
-	 */
+	private static final String rtpNAME = "RtpServerService";
+	private static final String rtcpNAME = "RtcpServerService";
+
 	public void start() throws Exception
 	{
 		int rtpPort = Config.getInt( "proxy.server.rtp.port", 8000 );
@@ -75,10 +73,8 @@
 		try {
 			Service rtpService, rtcpService;
 
-			rtpService = new Service( "RtpServerService", TransportType.DATAGRAM,
-					rtpAddress );
-			rtcpService = new Service( "RtcpServerService", TransportType.DATAGRAM,
-					rtcpAddress );
+			rtpService = new Service( rtpNAME, TransportType.DATAGRAM, rtpAddress );
+			rtcpService = new Service( rtcpNAME, TransportType.DATAGRAM, rtcpAddress );
 
 			Reactor.getRegistry().bind( rtpService, new ServerRtpPacketHandler() );
 			Reactor.getRegistry().bind( rtcpService, new ServerRtcpPacketHandler() );
@@ -100,26 +96,21 @@
 	 */
 	public void stop() throws Exception
 	{
-		for ( Object service : Reactor.getRegistry().getServices( "RtpServerService" ) ) {
-			Reactor.getRegistry().unbind( (Service) service );
-		}
-		for ( Object service : Reactor.getRegistry().getServices( "RtcpServerService" ) ) {
-			Reactor.getRegistry().unbind( (Service) service );
-		}
-
+		Reactor.getRegistry().unbind( rtpNAME );
+		Reactor.getRegistry().unbind( rtcpNAME );
 		log.info( "RtpServerService Stopped" );
 	}
 
 	public static IoSession newRtpSession( SocketAddress remoteAddress )
 	{
-		return Reactor.getRegistry().getAcceptor( TransportType.DATAGRAM ).newSession(
-				remoteAddress, rtpAddress );
+		return Reactor.getRegistry().getAcceptor( rtpNAME ).newSession( remoteAddress,
+				rtpAddress );
 	}
 
 	public static IoSession newRtcpSession( SocketAddress remoteAddress )
 	{
-		return Reactor.getRegistry().getAcceptor( TransportType.DATAGRAM ).newSession(
-				remoteAddress, rtcpAddress );
+		return Reactor.getRegistry().getAcceptor( rtcpNAME ).newSession( remoteAddress,
+				rtcpAddress );
 	}
 
 	public static InetSocketAddress getRtpAddress()

Modified: trunk/src/main/java/rtspproxy/RtspService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtspService.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/RtspService.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -38,6 +38,8 @@
 
 	private static Logger log = Logger.getLogger( RtspService.class );
 
+	private static final String NAME = "RtspService";
+
 	public void start() throws IOException
 	{
 		// get port and network interface from config file
@@ -49,12 +51,13 @@
 
 				Service service;
 				if ( netInterface == null )
-					service = new Service( "RtspService", TransportType.SOCKET, port );
+					service = new Service( NAME, TransportType.SOCKET, port );
 				else
-					service = new Service( "RtspService", TransportType.SOCKET,
+					service = new Service( NAME, TransportType.SOCKET,
 							new InetSocketAddress( netInterface, port ) );
 
-				Reactor.getRegistry().bind( service, new ClientSide(), new RtspClientFilters() );
+				Reactor.getRegistry().bind( service, new ClientSide(),
+						new RtspClientFilters() );
 
 				log.info( "RtspService Started - Listening on: "
 						+ InetAddress.getByName( netInterface ) + ":" + port );
@@ -68,10 +71,7 @@
 
 	public void stop() throws Exception
 	{
-		for ( Object service : Reactor.getRegistry().getServices( "RtspService" ) ) {
-			Reactor.getRegistry().unbind( (Service) service );
-		}
-
+		Reactor.getRegistry().unbind(NAME);
 		log.info( "RtspService Stopped" );
 	}
 }

Modified: trunk/src/main/java/rtspproxy/lib/PortManager.java
===================================================================
--- trunk/src/main/java/rtspproxy/lib/PortManager.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/lib/PortManager.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -39,7 +39,7 @@
 	private static Set<Integer> reservedPorts = Collections.synchronizedSet( new HashSet<Integer>() );
 
 	// TODO: Using custom exceptions
-	public static synchronized void reservePort( int port ) throws Exception
+	public static void reservePort( int port ) throws Exception
 	{
 		if ( reservedPorts.contains( port ) )
 			throw new Exception( "Port " + port + "is reserved" );
@@ -47,7 +47,7 @@
 		reservedPorts.add( port );
 	}
 
-	public static synchronized void removePort( int port )
+	public static void removePort( int port )
 	{
 		reservedPorts.remove( port );
 	}
@@ -58,7 +58,7 @@
 	 * @return true if the port is already reserved, false if the port can be
 	 *         used.
 	 */
-	public static synchronized boolean isPortReserved( int port )
+	public static boolean isPortReserved( int port )
 	{
 		return reservedPorts.contains( port );
 	}
@@ -71,7 +71,7 @@
 	 *        the base port number to start from
 	 * @return the port number if found
 	 */
-	public static synchronized int getNextNotReservedPort( int start )
+	public static int getNextNotReservedPort( int start )
 			throws NoPortAvailableException
 	{
 		int port = start;
@@ -85,7 +85,7 @@
 		return port;
 	}
 
-	public static synchronized int[] findAvailablePorts( int nPorts, int startFrom )
+	public static int[] findAvailablePorts( int nPorts, int startFrom )
 		throws NoPortAvailableException
 	{
 		int dataPort, controlPort, startingPort;

Added: trunk/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -0,0 +1,79 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.proxy;
+
+import java.net.InetSocketAddress;
+
+import org.apache.log4j.Logger;
+import org.apache.mina.common.ByteBuffer;
+import org.apache.mina.common.IoHandlerAdapter;
+import org.apache.mina.common.IoSession;
+
+import rtspproxy.lib.Exceptions;
+import rtspproxy.proxy.track.RdtTrack;
+import rtspproxy.proxy.track.Track;
+
+/**
+ * Handles RDT packets from client and forward them to server. The RTSP session
+ * is obtained using the client IP address and port.
+ * 
+ * @author Matteo Merli
+ */
+public class ClientRdtPacketHandler extends IoHandlerAdapter
+{
+
+	private static Logger log = Logger.getLogger( ClientRdtPacketHandler.class );
+
+	@Override
+	public void sessionCreated( IoSession session ) throws Exception
+	{
+	}
+
+	@Override
+	public void messageReceived( IoSession session, Object buffer ) throws Exception
+	{
+		// RtcpPacket packet = new RtcpPacket( (ByteBuffer) buffer );
+		log.debug( "Received RDT packet from client" );
+
+		RdtTrack track = (RdtTrack) Track.getByClientAddress( (InetSocketAddress) session.getRemoteAddress() );
+
+		if ( track == null ) {
+			// drop packet
+			log.debug( "Invalid address: "
+					+ (InetSocketAddress) session.getRemoteAddress()
+					+ " - Class: "
+					+ ( (InetSocketAddress) session.getRemoteAddress() ).getAddress().getClass() );
+			return;
+		}
+
+		ByteBuffer receivedBuffer = (ByteBuffer) buffer;
+		byte[] bytes = new byte[receivedBuffer.limit()];
+		receivedBuffer.get( bytes );
+		ByteBuffer rdtPacket = ByteBuffer.wrap( bytes );
+		track.forwardRdtToServer( rdtPacket );
+	}
+
+	@Override
+	public void exceptionCaught( IoSession session, Throwable cause ) throws Exception
+	{
+		log.info( "Exception: " + cause );
+		Exceptions.logStackTrace( cause );
+		session.close();
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/proxy/ClientRdtPacketHandler.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/src/main/java/rtspproxy/proxy/ClientRtcpPacketHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ClientRtcpPacketHandler.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/proxy/ClientRtcpPacketHandler.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -26,6 +26,8 @@
 import org.apache.mina.common.IoSession;
 
 import rtspproxy.lib.Exceptions;
+import rtspproxy.proxy.track.RtpTrack;
+import rtspproxy.proxy.track.Track;
 import rtspproxy.rtp.rtcp.RtcpPacket;
 
 /**
@@ -50,10 +52,8 @@
 		RtcpPacket packet = new RtcpPacket( (ByteBuffer) buffer );
 		// log.debug( "Received RTCP packet: " + packet.getType() );
 
-		// / Track track = (Track)session.getAttribute( "track" );
+		RtpTrack track = (RtpTrack)Track.getByClientAddress( (InetSocketAddress) session.getRemoteAddress() );
 
-		Track track = Track.getByClientAddress( (InetSocketAddress) session.getRemoteAddress() );
-
 		if ( track == null ) {
 			// drop packet
 			log.debug( "Invalid address: "

Modified: trunk/src/main/java/rtspproxy/proxy/ClientRtpPacketHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ClientRtpPacketHandler.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/proxy/ClientRtpPacketHandler.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -26,6 +26,8 @@
 import org.apache.mina.common.IoSession;
 
 import rtspproxy.lib.Exceptions;
+import rtspproxy.proxy.track.RtpTrack;
+import rtspproxy.proxy.track.Track;
 import rtspproxy.rtp.RtpPacket;
 
 /**
@@ -51,7 +53,7 @@
 		RtpPacket packet = new RtpPacket( (ByteBuffer) buffer );
 		log.debug( "Received RTP packet: " + packet.getSequence() );
 
-		Track track = Track.getByClientAddress( (InetSocketAddress) session.getRemoteAddress() );
+		RtpTrack track = (RtpTrack)Track.getByClientAddress( (InetSocketAddress) session.getRemoteAddress() );
 
 		if ( track == null ) {
 			// drop packet

Modified: trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -32,14 +32,21 @@
 import org.apache.mina.transport.socket.nio.SocketConnector;
 
 import rtspproxy.Config;
+import rtspproxy.RdtClientService;
+import rtspproxy.RdtServerService;
 import rtspproxy.RtpClientService;
+import rtspproxy.RtpServerService;
 import rtspproxy.filter.RtspServerFilters;
+import rtspproxy.proxy.track.RdtTrack;
+import rtspproxy.proxy.track.RtpTrack;
 import rtspproxy.rtsp.RtspCode;
 import rtspproxy.rtsp.RtspMessage;
 import rtspproxy.rtsp.RtspRequest;
 import rtspproxy.rtsp.RtspResponse;
 import rtspproxy.rtsp.RtspTransport;
 import rtspproxy.rtsp.RtspTransportList;
+import rtspproxy.rtsp.RtspTransport.LowerTransport;
+import rtspproxy.rtsp.RtspTransport.TransportProtocol;
 
 /**
  * @author mat
@@ -51,8 +58,9 @@
 
 	/** Used to save a reference to this handler in the IoSession */
 	protected static final String ATTR = ProxyHandler.class.toString() + "Attr";
-	protected static final String setupUrlATTR = "setupUrlATTR";
-	protected static final String clientPortsATTR = "clientPortsATTR";
+	protected static final String setupUrlATTR = ProxyHandler.class.toString() + "setupUrlATTR";
+	protected static final String clientPortsATTR = ProxyHandler.class.toString() + "clientPortsATTR";
+	protected static final String clientRdtPortATTR = ProxyHandler.class.toString() + "clientRdtPortATTR";
 
 	private IoSession clientSession = null;
 	private IoSession serverSession = null;
@@ -146,6 +154,7 @@
 				}
 			}
 		}
+		
 		switch ( message.getType() ) {
 			case TypeRequest:
 				clientSession.setAttribute( RtspMessage.lastRequestVerbATTR,
@@ -210,25 +219,31 @@
 			return;
 		}
 
-		int proxyRtpPort = Config.getInt( "proxy.server.rtp.port", -1 );
-		int proxyRtcpPort = Config.getInt( "proxy.server.rtcp.port", -1 );
+		int proxyRtpPort = RtpServerService.getRtpPort();
+		int proxyRtcpPort = RtpServerService.getRtcpPort();
+		int proxyRdtPort = RdtServerService.getPort();
 
 		// I'm saving the client Transport header before modifying it,
 		// because I will need to know which port the client will
 		// use for RTP/RTCP connections.
-		int[] clientPorts = rtspTransportList.get( 0 ).getClientPort();
-		clientSession.setAttribute( clientPortsATTR, clientPorts );
 		clientSession.setAttribute( setupUrlATTR, request.getUrl().toString() );
 
 		for ( RtspTransport transport : rtspTransportList.getList() ) {
 			log.debug( "Transport:" + transport );
 
-			if ( transport.getLowerTransport() == RtspTransport.LowerTransport.TCP ) {
+			if ( transport.getLowerTransport() == LowerTransport.TCP ) {
 				log.debug( "Transport is TCP based." );
 			} else {
+				if ( transport.getTransportProtocol() == TransportProtocol.RTP ) {
 
-				// / int clientPort[] = transport.getClientPort();
-				transport.setClientPort( new int[] { proxyRtpPort, proxyRtcpPort } );
+					clientSession.setAttribute( clientPortsATTR, transport.getClientPort() );
+					transport.setClientPort( new int[] { proxyRtpPort, proxyRtcpPort } );
+
+				} else
+					if ( transport.getTransportProtocol() == TransportProtocol.RDT ) {
+						clientSession.setAttribute( clientRdtPortATTR, new Integer(transport.getClientPort()[0]) );
+						transport.setClientPort( proxyRdtPort );
+					}
 				log.debug( "Transport Rewritten: " + transport );
 			}
 		}
@@ -271,60 +286,113 @@
 		RtspTransportList rtspTransportList = new RtspTransportList(
 				response.getHeader( "Transport" ) );
 
-		// int proxyRtpPort = Config.getInt( "proxy.client.rtp.port", -1 );
-		// int proxyRtcpPort = Config.getInt( "proxy.client.rtcp.port", -1 );
 		String netInterface = Config.get( "proxy.client.interface", null );
 
 		RtspTransport transport = rtspTransportList.getList().get( 0 );
-		log.debug( "Transport:" + transport );
+		log.debug( "Using Transport:" + transport );
 
-		// Create a new Track object
-		Track track = proxySession.addTrack(
-				(String) clientSession.getAttribute( setupUrlATTR ), transport.getSSRC() );
+		if ( transport.getTransportProtocol() == TransportProtocol.RTP ) {
 
-		// Setting client and server info on the track
-		InetAddress serverAddress = null;
-		if ( transport.getSource() != null ) {
+			// Create a new Track object
+			RtpTrack track = proxySession.addRtpTrack(
+					(String) clientSession.getAttribute( setupUrlATTR ),
+					transport.getSSRC() );
+
+			// Setting client and server info on the track
+			InetAddress serverAddress = null;
+			if ( transport.getSource() != null ) {
+				try {
+					serverAddress = InetAddress.getByName( transport.getSource() );
+				} catch ( UnknownHostException e ) {
+					log.warn( "Unknown host: " + transport.getSource() );
+				}
+			} else {
+				serverAddress = ( (InetSocketAddress) serverSession.getRemoteAddress() ).getAddress();
+			}
+			int[] serverPorts = transport.getServerPort();
+			track.setServerAddress( serverAddress, serverPorts[0], serverPorts[1] );
+
+			InetAddress clientAddress = null;
 			try {
-				serverAddress = InetAddress.getByName( transport.getSource() );
+				clientAddress = Inet4Address.getByName( ( (InetSocketAddress) clientSession.getRemoteAddress() ).getHostName() );
 			} catch ( UnknownHostException e ) {
-				log.warn( "Unknown host: " + transport.getSource() );
+				log.warn( "Unknown host: " + clientSession.getRemoteAddress() );
 			}
-		} else {
-			serverAddress = ( (InetSocketAddress) serverSession.getRemoteAddress() ).getAddress();
-		}
-		int[] serverPorts = transport.getServerPort();
-		track.setServerAddress( serverAddress, serverPorts[0], serverPorts[1] );
+			int clientPorts[] = (int[]) clientSession.getAttribute( clientPortsATTR );
+			track.setClientAddress( clientAddress, clientPorts[0], clientPorts[1] );
 
-		InetAddress clientAddress = null;
-		try {
-			clientAddress = Inet4Address.getByName( ( (InetSocketAddress) clientSession.getRemoteAddress() ).getHostName() );
-		} catch ( UnknownHostException e ) {
-			log.warn( "Unknown host: " + clientSession.getRemoteAddress() );
-		}
-		int clientPorts[] = (int[]) clientSession.getAttribute( clientPortsATTR );
-		track.setClientAddress( clientAddress, clientPorts[0], clientPorts[1] );
+			if ( transport.getLowerTransport() == RtspTransport.LowerTransport.TCP ) {
+				log.debug( "Transport is TCP based." );
+			} else {
+				transport.setSSRC( track.getProxySSRC().toHexString() );
+				transport.setServerPort( new int[] { RtpClientService.getRtpPort(),
+						RtpClientService.getRtcpPort() } );
+				// transport.setClientPort( );
+				try {
+					transport.setSource( InetAddress.getByName( netInterface ).getHostAddress() );
+				} catch ( UnknownHostException e ) {
+					transport.setSource( netInterface );
+				}
 
-		if ( transport.getLowerTransport() == RtspTransport.LowerTransport.TCP ) {
-			log.debug( "Transport is TCP based." );
-		} else {
-			transport.setSSRC( track.getProxySSRC().toHexString() );
-			transport.setServerPort( new int[] { RtpClientService.getRtpPort(),
-					RtpClientService.getRtcpPort() } );
-			// transport.setClientPort( );
-			try {
-				transport.setSource( InetAddress.getByName( netInterface ).getHostAddress() );
-			} catch ( UnknownHostException e ) {
-				transport.setSource( netInterface );
+				// Obtaing client specified ports
+				int ports[] = (int[]) clientSession.getAttribute( clientPortsATTR );
+				transport.setClientPort( ports );
+
+				log.debug( "Transport Rewritten: " + transport );
 			}
 
-			// Obtaing client specified ports
-			int ports[] = (int[]) clientSession.getAttribute( clientPortsATTR );
-			transport.setClientPort( ports );
+		} else
+			if ( transport.getTransportProtocol() == TransportProtocol.RDT ) {
 
-			log.debug( "Transport Rewritten: " + transport );
-		}
+				// Create a new Track object
+				RdtTrack track = proxySession.addRdtTrack( (String) clientSession.getAttribute( setupUrlATTR ) );
 
+				// Setting client and server info on the track
+				InetAddress serverAddress = null;
+				if ( transport.getSource() != null ) {
+					try {
+						serverAddress = InetAddress.getByName( transport.getSource() );
+					} catch ( UnknownHostException e ) {
+						log.warn( "Unknown host: " + transport.getSource() );
+					}
+				} else {
+					serverAddress = ( (InetSocketAddress) serverSession.getRemoteAddress() ).getAddress();
+				}
+				int[] serverPorts = transport.getServerPort();
+				track.setServerAddress( serverAddress, serverPorts[0] );
+
+				InetAddress clientAddress = null;
+				try {
+					clientAddress = Inet4Address.getByName( ( (InetSocketAddress) clientSession.getRemoteAddress() ).getHostName() );
+				} catch ( UnknownHostException e ) {
+					log.warn( "Unknown host: " + clientSession.getRemoteAddress() );
+				}
+				int clientRdtPort = ((Integer) clientSession.getAttribute( clientRdtPortATTR ) ).intValue();
+				track.setClientAddress( clientAddress, clientRdtPort );
+
+				if ( transport.getLowerTransport() == RtspTransport.LowerTransport.TCP ) {
+					log.debug( "Transport is TCP based." );
+				} else {
+					transport.setServerPort( RdtClientService.getPort() );
+					try {
+						transport.setSource( InetAddress.getByName( netInterface ).getHostAddress() );
+					} catch ( UnknownHostException e ) {
+						transport.setSource( netInterface );
+					}
+
+					// Obtaing client specified ports
+					int port = ((Integer) clientSession.getAttribute( clientRdtPortATTR ) ).intValue();
+					transport.setClientPort( port );
+
+					log.debug( "Transport Rewritten: " + transport );
+				}
+
+			} else {
+				sendResponse( clientSession,
+						RtspResponse.errorResponse( RtspCode.UnsupportedTransport ) );
+				return;
+			}
+
 		response.setHeader( "Session", proxySession.getClientSessionId() );
 		response.setHeader( "Transport", transport.toString() );
 

Modified: trunk/src/main/java/rtspproxy/proxy/ProxySession.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ProxySession.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/proxy/ProxySession.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -25,6 +25,9 @@
 import org.apache.log4j.Logger;
 
 import rtspproxy.lib.number.UnsignedLong;
+import rtspproxy.proxy.track.RdtTrack;
+import rtspproxy.proxy.track.RtpTrack;
+import rtspproxy.proxy.track.Track;
 
 /**
  * Manages RTSP sessions with both client and server.
@@ -116,9 +119,9 @@
 	 *        the SSRC id given by the server or null if not provided
 	 * @return a reference to the newly created Track
 	 */
-	public synchronized Track addTrack( String url, String serverSsrc )
+	public synchronized RtpTrack addRtpTrack( String url, String serverSsrc )
 	{
-		Track track = new Track( url );
+		RtpTrack track = new RtpTrack( url );
 		if ( serverSsrc != null )
 			track.setServerSSRC( serverSsrc );
 		trackList.put( url, track );
@@ -126,6 +129,24 @@
 				+ trackList );
 		return track;
 	}
+	
+	/**
+	 * Adds a new Track associated with this ProxySession.
+	 * 
+	 * @param url
+	 *        The URL used as a control reference for the Track
+	 * @param serverSsrc
+	 *        the SSRC id given by the server or null if not provided
+	 * @return a reference to the newly created Track
+	 */
+	public synchronized RdtTrack addRdtTrack( String url )
+	{
+		RdtTrack track = new RdtTrack( url );
+		trackList.put( url, track );
+		log.debug( "ProxySession: " + clientSessionId + " Added track. TrackList: "
+				+ trackList );
+		return track;
+	}
 
 	/**
 	 * @return the RTSP session id used by the client in this session.

Added: trunk/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -0,0 +1,79 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.proxy;
+
+import java.net.InetSocketAddress;
+
+import org.apache.log4j.Logger;
+import org.apache.mina.common.ByteBuffer;
+import org.apache.mina.common.IoHandlerAdapter;
+import org.apache.mina.common.IoSession;
+
+import rtspproxy.lib.Exceptions;
+import rtspproxy.proxy.track.RdtTrack;
+import rtspproxy.proxy.track.Track;
+
+/**
+ * Handles RDT packets from server and forward them to client. The RTSP 
+ * session is obtained using the client IP address and port.
+ * 
+ * @author Matteo Merli
+ */
+public class ServerRdtPacketHandler extends IoHandlerAdapter
+{
+
+	private static Logger log = Logger.getLogger( ServerRdtPacketHandler.class );
+
+	@Override
+	public void sessionCreated( IoSession session ) throws Exception
+	{
+	}
+
+	@Override
+	public void messageReceived( IoSession session, Object buffer ) throws Exception
+	{
+		// RtcpPacket packet = new RtcpPacket( (ByteBuffer) buffer );
+		log.debug( "Received RDT packet from server" );
+
+		RdtTrack track = (RdtTrack)Track.getByServerAddress( (InetSocketAddress) session.getRemoteAddress() );
+
+		if ( track == null ) {
+			// drop packet
+			log.debug( "Invalid address: "
+					+ (InetSocketAddress) session.getRemoteAddress()
+					+ " - Class: "
+					+ ( (InetSocketAddress) session.getRemoteAddress() ).getAddress().getClass() );
+			return;
+		}
+
+		ByteBuffer receivedBuffer = (ByteBuffer) buffer;
+		byte[] bytes = new byte[receivedBuffer.limit()];
+		receivedBuffer.get( bytes );
+		ByteBuffer rdtPacket = ByteBuffer.wrap( bytes );
+		track.forwardRdtToClient( rdtPacket );
+	}
+
+	@Override
+	public void exceptionCaught( IoSession session, Throwable cause ) throws Exception
+	{
+		log.info( "Exception: " + cause );
+		Exceptions.logStackTrace( cause );
+		session.close();
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/proxy/ServerRdtPacketHandler.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/src/main/java/rtspproxy/proxy/ServerRtcpPacketHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ServerRtcpPacketHandler.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/proxy/ServerRtcpPacketHandler.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -26,6 +26,8 @@
 import org.apache.mina.common.IoSession;
 
 import rtspproxy.lib.Exceptions;
+import rtspproxy.proxy.track.RtpTrack;
+import rtspproxy.proxy.track.Track;
 import rtspproxy.rtp.rtcp.RtcpPacket;
 
 /**
@@ -41,10 +43,10 @@
 	{
 		RtcpPacket packet = new RtcpPacket( (ByteBuffer) buffer );
 		// log.debug( "Receive RTCP packet: " + packet.getType() );
-		Track track = Track.getByServerSSRC( packet.getSsrc() );
+		RtpTrack track = RtpTrack.getByServerSSRC( packet.getSsrc() );
 
 		if ( track == null ) {
-			track = Track.getByServerAddress( (InetSocketAddress) session.getRemoteAddress() );
+			track = (RtpTrack)Track.getByServerAddress( (InetSocketAddress) session.getRemoteAddress() );
 
 			if ( track == null ) {
 				// drop packet

Modified: trunk/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -26,6 +26,8 @@
 import org.apache.mina.common.IoSession;
 
 import rtspproxy.lib.Exceptions;
+import rtspproxy.proxy.track.RtpTrack;
+import rtspproxy.proxy.track.Track;
 import rtspproxy.rtp.RtpPacket;
 
 /**
@@ -43,12 +45,12 @@
 	@Override
 	public void messageReceived( IoSession session, Object buffer ) throws Exception
 	{
-		// log.debug( "Received RTP packet" );
+		log.debug( "Received RTP packet" );
 		RtpPacket packet = new RtpPacket( (ByteBuffer) buffer );
-		Track track = Track.getByServerSSRC( packet.getSsrc() );
+		RtpTrack track = RtpTrack.getByServerSSRC( packet.getSsrc() );
 
 		if ( track == null ) {
-			track = Track.getByServerAddress( (InetSocketAddress) session.getRemoteAddress() );
+			track = (RtpTrack)Track.getByServerAddress( (InetSocketAddress) session.getRemoteAddress() );
 
 			if ( track == null ) {
 				// drop packet

Deleted: trunk/src/main/java/rtspproxy/proxy/Track.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/Track.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/proxy/Track.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -1,410 +0,0 @@
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
- *                                                                         *
- ***************************************************************************/
-
-/*
- * $Id$
- * 
- * $URL$
- * 
- */
-
-package rtspproxy.proxy;
-
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Random;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-
-import org.apache.log4j.Logger;
-import org.apache.mina.common.IoSession;
-
-import rtspproxy.RtpClientService;
-import rtspproxy.RtpServerService;
-import rtspproxy.lib.number.UnsignedInt;
-import rtspproxy.rtp.RtpPacket;
-import rtspproxy.rtp.rtcp.RtcpPacket;
-
-/**
- * A Track is a part of a RTSP session. A typical RTSP session for a video
- * stream trasmission is composed of 2 tracks: a track for video data and
- * another track for audio data.
- * <p>
- * These two stream are independent and usually are activated by the same
- * <code>PLAY</code> and <code>TEARDOWN</code> requests.
- * 
- * @author Matteo Merli
- */
-public class Track
-{
-
-	private static Logger log = Logger.getLogger( Track.class );
-
-	protected static final String ATTR = Track.class.toString() + "Attr";
-
-	/** Maps a server SSRC id to a Track */
-	private static Map<UnsignedInt, Track> serverSsrcMap = new ConcurrentHashMap<UnsignedInt, Track>();
-
-	/** Maps a client address to a Track */
-	private static Map<InetSocketAddress, Track> clientAddressMap = new ConcurrentHashMap<InetSocketAddress, Track>();
-
-	/** Maps a server address to a Track */
-	private static Map<InetSocketAddress, Track> serverAddressMap = new ConcurrentHashMap<InetSocketAddress, Track>();
-
-	/** Keeps track of the SSRC IDs used by the proxy, to avoid collisions. */
-	private static Set<UnsignedInt> proxySsrcList = Collections.synchronizedSet( new HashSet<UnsignedInt>() );
-
-	/**
-	 * Control Url of the track. This is the url handle given by the server to
-	 * control different tracks in a RTSP session.
-	 */
-	private String url;
-
-	/** SSRC id given by the server */
-	private UnsignedInt serverSSRC = new UnsignedInt( 0 );
-	/** SSRC id selected by the proxy */
-	private UnsignedInt proxySSRC = new UnsignedInt( 0 );;
-
-	/**
-	 * Cached references to IoSession objects used to send packets to server and
-	 * client.
-	 */
-	private IoSession rtpServerSession = null;
-	private IoSession rtcpServerSession = null;
-	private IoSession rtpClientSession = null;
-	private IoSession rtcpClientSession = null;
-
-	/**
-	 * IP address and RTP/RTCP ports for client and server.
-	 * <p>
-	 * TODO: When using reflection, there will be more than one connected client
-	 * at a time to the same Track. So the track should keep a list of connected
-	 * clients and forward packets to each of them.
-	 */
-	private InetAddress clientAddress;
-	private int clientRtpPort;
-	private int clientRtcpPort;
-	private InetAddress serverAddress;
-	private int serverRtpPort;
-	private int serverRtcpPort;
-
-	/**
-	 * Construct a new Track.
-	 * 
-	 * @param url
-	 *        the control name for this track.
-	 */
-	public Track( String url )
-	{
-		this.url = url;
-		setProxySSRC( newSSRC() );
-	}
-
-	/**
-	 * Get the track by looking at client socket address.
-	 * 
-	 * @return a Track instance if a matching pair is found or null
-	 */
-	public static Track getByClientAddress( InetSocketAddress clientAddress )
-	{
-		return clientAddressMap.get( clientAddress );
-	}
-
-	/**
-	 * Get the track by looking at server socket address.
-	 * <p>
-	 * Used as a workaround for streaming servers which do not hand out a ssrc
-	 * in the setup handshake.
-	 * 
-	 * @return a Track instance if a matching pair is found or null
-	 */
-	public static Track getByServerAddress( InetSocketAddress serverAddress )
-	{
-		return serverAddressMap.get( serverAddress );
-	}
-
-	/**
-	 * Get the track by looking at server SSRC id.
-	 * 
-	 * @return a Track instance if a matching SSRC is found or null
-	 */
-	public static Track getByServerSSRC( UnsignedInt serverSsrc )
-	{
-		return serverSsrcMap.get( serverSsrc );
-	}
-
-	// /// Member methods
-
-	/**
-	 * @return the SSRC id used byt the proxy
-	 */
-	public UnsignedInt getProxySSRC()
-	{
-		return proxySSRC;
-	}
-
-	/**
-	 * Sets the proxy SSRC id.
-	 * 
-	 * @param proxySSRC
-	 */
-	public void setProxySSRC( String proxySSRC )
-	{
-		try {
-			this.proxySSRC = UnsignedInt.fromString( proxySSRC, 16 );
-
-			proxySsrcList.add( this.proxySSRC );
-		} catch ( NumberFormatException nfe ) {
-			log.debug( "Cannot convert " + proxySSRC + " to integer." );
-			throw nfe;
-		}
-	}
-
-	/**
-	 * @return the server SSRC id
-	 */
-	public UnsignedInt getServerSSRC()
-	{
-		return serverSSRC;
-	}
-
-	/**
-	 * Sets the server SSRC id.
-	 * 
-	 * @param serverSSRC
-	 */
-	public void setServerSSRC( String serverSSRC )
-	{
-		this.serverSSRC = UnsignedInt.fromString( serverSSRC, 16 );
-		serverSsrcMap.put( this.serverSSRC, this );
-	}
-
-	/**
-	 * Sets the server SSRC id.
-	 * 
-	 * @param serverSSRC
-	 */
-	public void setServerSSRC( UnsignedInt serverSSRC )
-	{
-		this.serverSSRC = serverSSRC;
-		serverSsrcMap.put( this.serverSSRC, this );
-	}
-
-	public String getUrl()
-	{
-		return url;
-	}
-
-	public void setUrl( String url )
-	{
-		this.url = url;
-	}
-
-	public void setRtcpClientSession( IoSession rtcpClientSession )
-	{
-		this.rtcpClientSession = rtcpClientSession;
-	}
-
-	public void setRtcpServerSession( IoSession rtcpServerSession )
-	{
-		this.rtcpServerSession = rtcpServerSession;
-	}
-
-	public void setRtpClientSession( IoSession rtpClientSession )
-	{
-		this.rtpClientSession = rtpClientSession;
-	}
-
-	public void setRtpServerSession( IoSession rtpServerSession )
-	{
-		this.rtpServerSession = rtpServerSession;
-	}
-
-	/**
-	 * Forwards a RTP packet to server. The packet will be set to the address
-	 * indicated by the server at RTP (even) port.
-	 * 
-	 * @param packet
-	 *        a RTP packet
-	 */
-	public void forwardRtpToServer( RtpPacket packet )
-	{
-		// modify the SSRC for the server
-		packet.setSsrc( proxySSRC );
-
-		if ( rtpServerSession == null )
-			rtpServerSession = RtpServerService.newRtpSession( new InetSocketAddress(
-					serverAddress, serverRtpPort ) );
-
-		rtpServerSession.write( packet.toByteBuffer() );
-	}
-
-	/**
-	 * Forwards a RTCP packet to server. The packet will be set to the address
-	 * indicated by the server at RTCP (odd) port.
-	 * 
-	 * @param packet
-	 *        a RTCP packet
-	 */
-	public void forwardRtcpToServer( RtcpPacket packet )
-	{
-		// modify the SSRC for the server
-		packet.setSsrc( proxySSRC );
-
-		if ( rtcpServerSession == null )
-			rtcpServerSession = RtpServerService.newRtcpSession( new InetSocketAddress(
-					serverAddress, serverRtcpPort ) );
-
-		rtcpServerSession.write( packet.toByteBuffer() );
-	}
-
-	/**
-	 * Forwards a RTP packet to client. The packet will be set to the address
-	 * indicated by the client at RTP (even) port.
-	 * <p>
-	 * TODO: This will be changed to support multiple clients connected to the
-	 * same (live) track.
-	 * 
-	 * @param packet
-	 *        a RTP packet
-	 */
-	public void forwardRtpToClient( RtpPacket packet )
-	{
-		// modify the SSRC for the client
-		packet.setSsrc( proxySSRC );
-
-		if ( rtpClientSession == null ) {
-			rtpClientSession = RtpClientService.newRtpSession( new InetSocketAddress(
-					clientAddress, clientRtpPort ) );
-
-		}
-
-		rtpClientSession.write( packet.toByteBuffer() );
-	}
-
-	/**
-	 * Forwards a RTCP packet to client. The packet will be set to the address
-	 * indicated by the client at RTCP (odd) port.
-	 * <p>
-	 * TODO: This will be changed to support multiple clients connected to the
-	 * same (live) track.
-	 * 
-	 * @param packet
-	 *        a RTCP packet
-	 */
-	public void forwardRtcpToClient( RtcpPacket packet )
-	{
-		// modify the SSRC for the client
-		packet.setSsrc( proxySSRC );
-
-		if ( rtcpClientSession == null ) {
-			rtcpClientSession = RtpClientService.newRtcpSession( new InetSocketAddress(
-					clientAddress, clientRtcpPort ) );
-
-		}
-
-		rtcpClientSession.write( packet.toByteBuffer() );
-	}
-
-	/**
-	 * Set the address of the server associated with this track.
-	 * <p>
-	 * TODO: This will be changed to support multiple clients connected to the
-	 * same (live) track.
-	 * 
-	 * @param serverHost
-	 *        The serverHost to set.
-	 * @param rtpPort
-	 *        the port number used for RTP packets
-	 * @param rtcpPort
-	 *        the port number used for RTCP packets
-	 */
-	public synchronized void setClientAddress( InetAddress clientAddress, int rtpPort,
-			int rtcpPort )
-	{
-		this.clientAddress = clientAddress;
-		this.clientRtpPort = rtpPort;
-		this.clientRtcpPort = rtcpPort;
-
-		clientAddressMap.put( new InetSocketAddress( clientAddress, rtpPort ), this );
-		clientAddressMap.put( new InetSocketAddress( clientAddress, rtcpPort ), this );
-	}
-
-	/**
-	 * Set the address of the server associated with this track.
-	 * 
-	 * @param serverHost
-	 *        The serverHost to set.
-	 * @param rtpPort
-	 *        the port number used for RTP packets
-	 * @param rtcpPort
-	 *        the port number used for RTCP packets
-	 */
-	public synchronized void setServerAddress( InetAddress serverAddress, int rtpPort,
-			int rtcpPort )
-	{
-		this.serverAddress = serverAddress;
-		this.serverRtpPort = rtpPort;
-		this.serverRtcpPort = rtcpPort;
-
-		serverAddressMap.put( new InetSocketAddress( serverAddress, rtpPort ), this );
-		serverAddressMap.put( new InetSocketAddress( serverAddress, rtcpPort ), this );
-	}
-
-	public synchronized void close()
-	{
-		if ( serverSSRC != null )
-			serverSsrcMap.remove( serverSSRC );
-		serverAddressMap.remove( new InetSocketAddress( serverAddress, serverRtpPort ) );
-		serverAddressMap.remove( new InetSocketAddress( serverAddress, serverRtcpPort ) );
-
-		clientAddressMap.remove( new InetSocketAddress( clientAddress, clientRtpPort ) );
-		clientAddressMap.remove( new InetSocketAddress( clientAddress, clientRtcpPort ) );
-
-		if ( proxySSRC != null )
-			proxySsrcList.remove( proxySSRC );
-		log.debug( "Closed track " + url );
-	}
-
-	public String toString()
-	{
-		return "Track(url=\"" + url + "\"";
-	}
-
-	// ////////////////
-
-	/** Used in SSRC id generation */
-	private static Random random = new Random();
-
-	/**
-	 * Creates a new SSRC id that is unique in the proxy.
-	 * 
-	 * @return the session ID
-	 */
-	private static String newSSRC()
-	{
-		long id;
-		while ( true ) {
-			id = random.nextLong() & 0xFFFFFFFFL;
-
-			if ( !proxySsrcList.contains( id ) ) {
-				// Ok, the id is unique
-				String ids = Long.toString( id, 16 );
-				return ids;
-			}
-			// try with another id
-		}
-	}
-
-}

Added: trunk/src/main/java/rtspproxy/proxy/track/RdtTrack.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -0,0 +1,129 @@
+package rtspproxy.proxy.track;
+
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+
+import org.apache.log4j.Logger;
+import org.apache.mina.common.ByteBuffer;
+import org.apache.mina.common.IoSession;
+
+import rtspproxy.RdtClientService;
+import rtspproxy.RdtServerService;
+
+public class RdtTrack extends Track
+{
+
+	private static Logger log = Logger.getLogger( RdtTrack.class );
+
+	/**
+	 * Cached references to IoSession objects used to send packets to server and
+	 * client.
+	 */
+	private IoSession rdtClientSession = null;
+	private IoSession rdtServerSession = null;
+
+	private int clientRdtPort;
+	private int serverRdtPort;
+
+	/**
+	 * Construct a new Track.
+	 * 
+	 * @param url
+	 *        the control name for this track.
+	 */
+	public RdtTrack( String url )
+	{
+		super( url );
+	}
+
+	/**
+	 * Forwards a RDT packet to client. The packet will be set to the address
+	 * indicated by the client at RDT port.
+	 * <p>
+	 * TODO: This will be changed to support multiple clients connected to the
+	 * same (live) track.
+	 * 
+	 * @param packet
+	 *        a buffer containing a RDT packet
+	 */
+	public void forwardRdtToClient( ByteBuffer packet )
+	{
+		// modify the SSRC for the client
+		// packet.setSsrc( proxySSRC );
+
+		if ( rdtClientSession == null ) {
+			rdtClientSession = RdtClientService.newRdtSession( new InetSocketAddress(
+					clientAddress, clientRdtPort ) );
+		}
+
+		log.debug( "Packet: " + packet );
+		rdtClientSession.write( packet );
+	}
+
+	/**
+	 * Forwards a RDT packet to server. The packet will be set to the address
+	 * indicated by the server at RDT port.
+	 * 
+	 * @param packet
+	 *        a RDT packet
+	 */
+	public void forwardRdtToServer( ByteBuffer packet )
+	{
+		if ( rdtServerSession == null || !rdtServerSession.isConnected() ) {
+			InetSocketAddress remoteAddress = new InetSocketAddress( serverAddress,
+					serverRdtPort );
+			log.debug( "Creating RDT session to: " + remoteAddress );
+			rdtServerSession = RdtServerService.newRdtSession( remoteAddress );
+		}
+
+		// log.debug( "Packet: " + packet );
+		// packet.reset();
+		// log.debug("Packet: " + packet );
+		//  log.debug( "Written bytes1: " + rdtServerSession.getWrittenBytes() );
+		rdtServerSession.write( packet );
+//		 log.debug( "Written bytes2: " + rdtServerSession.getWrittenBytes() );
+	}
+
+	/**
+	 * Set the address of the server associated with this track.
+	 * <p>
+	 * TODO: This will be changed to support multiple clients connected to the
+	 * same (live) track.
+	 * 
+	 * @param serverHost
+	 *        The serverHost to set.
+	 * @param rdtpPort
+	 *        the port number used for RDT packets
+	 */
+	public synchronized void setClientAddress( InetAddress clientAddress, int rdtPort )
+	{
+		this.clientAddress = clientAddress;
+		this.clientRdtPort = rdtPort;
+
+		clientAddressMap.put( new InetSocketAddress( clientAddress, rdtPort ), this );
+	}
+
+	/**
+	 * Set the address of the server associated with this track.
+	 * 
+	 * @param serverHost
+	 *        The serverHost to set.
+	 * @param rdtPort
+	 *        the port number used for RDT packets
+	 */
+	public synchronized void setServerAddress( InetAddress serverAddress, int rdtPort )
+	{
+		this.serverAddress = serverAddress;
+		this.serverRdtPort = rdtPort;
+
+		serverAddressMap.put( new InetSocketAddress( serverAddress, rdtPort ), this );
+	}
+
+	public synchronized void close()
+	{
+		serverAddressMap.remove( new InetSocketAddress( serverAddress, serverRdtPort ) );
+		clientAddressMap.remove( new InetSocketAddress( clientAddress, clientRdtPort ) );
+
+		log.debug( "Closed track " + url );
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/proxy/track/RdtTrack.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/proxy/track/RtpTrack.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/track/RtpTrack.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/proxy/track/RtpTrack.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -0,0 +1,322 @@
+package rtspproxy.proxy.track;
+
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Random;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+
+import org.apache.log4j.Logger;
+import org.apache.mina.common.IoSession;
+
+import rtspproxy.RtpClientService;
+import rtspproxy.RtpServerService;
+import rtspproxy.lib.number.UnsignedInt;
+import rtspproxy.rtp.RtpPacket;
+import rtspproxy.rtp.rtcp.RtcpPacket;
+
+public class RtpTrack extends Track {
+	
+	private static Logger log = Logger.getLogger( RtpTrack.class );
+
+	/** Maps a server SSRC id to a Track */
+	private static Map<UnsignedInt, RtpTrack> serverSsrcMap = new ConcurrentHashMap<UnsignedInt, RtpTrack>();
+	
+	/** Keeps track of the SSRC IDs used by the proxy, to avoid collisions. */
+	private static Set<UnsignedInt> proxySsrcList = Collections.synchronizedSet( new HashSet<UnsignedInt>() );
+	
+	
+	/**
+	 * Get the track by looking at server SSRC id.
+	 * 
+	 * @return a Track instance if a matching SSRC is found or null
+	 */
+	public static RtpTrack getByServerSSRC( UnsignedInt serverSsrc )
+	{
+		return serverSsrcMap.get( serverSsrc );
+	}
+	
+	
+	/** SSRC id given by the server */
+	private UnsignedInt serverSSRC = new UnsignedInt( 0 );
+	/** SSRC id selected by the proxy */
+	private UnsignedInt proxySSRC = new UnsignedInt( 0 );
+	
+	/**
+	 * Cached references to IoSession objects used to send packets to server and
+	 * client.
+	 */
+	private IoSession rtpServerSession = null;
+	private IoSession rtcpServerSession = null;
+	private IoSession rtpClientSession = null;
+	private IoSession rtcpClientSession = null;
+	
+	private int clientRtpPort;
+	private int clientRtcpPort;
+	private int serverRtpPort;
+	private int serverRtcpPort;
+	
+	/**
+	 * Construct a new Track.
+	 * 
+	 * @param url
+	 *        the control name for this track.
+	 */
+	public RtpTrack( String url )
+	{
+		super( url );
+		setProxySSRC( newSSRC() );
+	}
+	
+	/**
+	 * @return the SSRC id used byt the proxy
+	 */
+	public UnsignedInt getProxySSRC()
+	{
+		return proxySSRC;
+	}
+
+	/**
+	 * Sets the proxy SSRC id.
+	 * 
+	 * @param proxySSRC
+	 */
+	public void setProxySSRC( String proxySSRC )
+	{
+		try {
+			this.proxySSRC = UnsignedInt.fromString( proxySSRC, 16 );
+
+			proxySsrcList.add( this.proxySSRC );
+		} catch ( NumberFormatException nfe ) {
+			log.debug( "Cannot convert " + proxySSRC + " to integer." );
+			throw nfe;
+		}
+	}
+
+	/**
+	 * @return the server SSRC id
+	 */
+	public UnsignedInt getServerSSRC()
+	{
+		return serverSSRC;
+	}
+
+	/**
+	 * Sets the server SSRC id.
+	 * 
+	 * @param serverSSRC
+	 */
+	public void setServerSSRC( String serverSSRC )
+	{
+		this.serverSSRC = UnsignedInt.fromString( serverSSRC, 16 );
+		serverSsrcMap.put( this.serverSSRC, this );
+	}
+
+	/**
+	 * Sets the server SSRC id.
+	 * 
+	 * @param serverSSRC
+	 */
+	public void setServerSSRC( UnsignedInt serverSSRC )
+	{
+		this.serverSSRC = serverSSRC;
+		serverSsrcMap.put( this.serverSSRC, this );
+	}
+
+	
+	public void setRtcpClientSession( IoSession rtcpClientSession )
+	{
+		this.rtcpClientSession = rtcpClientSession;
+	}
+
+	public void setRtcpServerSession( IoSession rtcpServerSession )
+	{
+		this.rtcpServerSession = rtcpServerSession;
+	}
+
+	public void setRtpClientSession( IoSession rtpClientSession )
+	{
+		this.rtpClientSession = rtpClientSession;
+	}
+
+	public void setRtpServerSession( IoSession rtpServerSession )
+	{
+		this.rtpServerSession = rtpServerSession;
+	}
+	
+	/**
+	 * Forwards a RTP packet to server. The packet will be set to the address
+	 * indicated by the server at RTP (even) port.
+	 * 
+	 * @param packet
+	 *        a RTP packet
+	 */
+	public void forwardRtpToServer( RtpPacket packet )
+	{
+		// modify the SSRC for the server
+		packet.setSsrc( proxySSRC );
+
+		if ( rtpServerSession == null )
+			rtpServerSession = RtpServerService.newRtpSession( new InetSocketAddress(
+					serverAddress, serverRtpPort ) );
+
+		rtpServerSession.write( packet.toByteBuffer() );
+	}
+
+	/**
+	 * Forwards a RTCP packet to server. The packet will be set to the address
+	 * indicated by the server at RTCP (odd) port.
+	 * 
+	 * @param packet
+	 *        a RTCP packet
+	 */
+	public void forwardRtcpToServer( RtcpPacket packet )
+	{
+		// modify the SSRC for the server
+		packet.setSsrc( proxySSRC );
+
+		if ( rtcpServerSession == null )
+			rtcpServerSession = RtpServerService.newRtcpSession( new InetSocketAddress(
+					serverAddress, serverRtcpPort ) );
+
+		rtcpServerSession.write( packet.toByteBuffer() );
+	}
+
+	/**
+	 * Forwards a RTP packet to client. The packet will be set to the address
+	 * indicated by the client at RTP (even) port.
+	 * <p>
+	 * TODO: This will be changed to support multiple clients connected to the
+	 * same (live) track.
+	 * 
+	 * @param packet
+	 *        a RTP packet
+	 */
+	public void forwardRtpToClient( RtpPacket packet )
+	{
+		// modify the SSRC for the client
+		packet.setSsrc( proxySSRC );
+
+		if ( rtpClientSession == null ) {
+			rtpClientSession = RtpClientService.newRtpSession( new InetSocketAddress(
+					clientAddress, clientRtpPort ) );
+
+		}
+
+		rtpClientSession.write( packet.toByteBuffer() );
+	}
+
+	/**
+	 * Forwards a RTCP packet to client. The packet will be set to the address
+	 * indicated by the client at RTCP (odd) port.
+	 * <p>
+	 * TODO: This will be changed to support multiple clients connected to the
+	 * same (live) track.
+	 * 
+	 * @param packet
+	 *        a RTCP packet
+	 */
+	public void forwardRtcpToClient( RtcpPacket packet )
+	{
+		// modify the SSRC for the client
+		packet.setSsrc( proxySSRC );
+
+		if ( rtcpClientSession == null ) {
+			rtcpClientSession = RtpClientService.newRtcpSession( new InetSocketAddress(
+					clientAddress, clientRtcpPort ) );
+
+		}
+
+		rtcpClientSession.write( packet.toByteBuffer() );
+	}
+	
+
+	/**
+	 * Set the address of the server associated with this track.
+	 * <p>
+	 * TODO: This will be changed to support multiple clients connected to the
+	 * same (live) track.
+	 * 
+	 * @param serverHost
+	 *        The serverHost to set.
+	 * @param rtpPort
+	 *        the port number used for RTP packets
+	 * @param rtcpPort
+	 *        the port number used for RTCP packets
+	 */
+	public synchronized void setClientAddress( InetAddress clientAddress, int rtpPort,
+			int rtcpPort )
+	{
+		this.clientAddress = clientAddress;
+		this.clientRtpPort = rtpPort;
+		this.clientRtcpPort = rtcpPort;
+
+		clientAddressMap.put( new InetSocketAddress( clientAddress, rtpPort ), this );
+		clientAddressMap.put( new InetSocketAddress( clientAddress, rtcpPort ), this );
+	}
+
+	/**
+	 * Set the address of the server associated with this track.
+	 * 
+	 * @param serverHost
+	 *        The serverHost to set.
+	 * @param rtpPort
+	 *        the port number used for RTP packets
+	 * @param rtcpPort
+	 *        the port number used for RTCP packets
+	 */
+	public synchronized void setServerAddress( InetAddress serverAddress, int rtpPort,
+			int rtcpPort )
+	{
+		this.serverAddress = serverAddress;
+		this.serverRtpPort = rtpPort;
+		this.serverRtcpPort = rtcpPort;
+
+		serverAddressMap.put( new InetSocketAddress( serverAddress, rtpPort ), this );
+		serverAddressMap.put( new InetSocketAddress( serverAddress, rtcpPort ), this );
+	}
+	
+	public synchronized void close()
+	{
+		if ( serverSSRC != null )
+			serverSsrcMap.remove( serverSSRC );
+		serverAddressMap.remove( new InetSocketAddress( serverAddress, serverRtpPort ) );
+		serverAddressMap.remove( new InetSocketAddress( serverAddress, serverRtcpPort ) );
+
+		clientAddressMap.remove( new InetSocketAddress( clientAddress, clientRtpPort ) );
+		clientAddressMap.remove( new InetSocketAddress( clientAddress, clientRtcpPort ) );
+
+		if ( proxySSRC != null )
+			proxySsrcList.remove( proxySSRC );
+		log.debug( "Closed track " + url );
+	}
+
+	
+	// ////////////////
+
+	/** Used in SSRC id generation */
+	private static Random random = new Random();
+
+	/**
+	 * Creates a new SSRC id that is unique in the proxy.
+	 * 
+	 * @return the session ID
+	 */
+	private static String newSSRC()
+	{
+		long id;
+		while ( true ) {
+			id = random.nextLong() & 0xFFFFFFFFL;
+
+			if ( !proxySsrcList.contains( id ) ) {
+				// Ok, the id is unique
+				String ids = Long.toString( id, 16 );
+				return ids;
+			}
+			// try with another id
+		}
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/proxy/track/RtpTrack.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/proxy/track/Track.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/track/Track.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/proxy/track/Track.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -0,0 +1,117 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.proxy.track;
+
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
+/**
+ * A Track is a part of a RTSP session. A typical RTSP session for a video
+ * stream trasmission is composed of 2 tracks: a track for video data and
+ * another track for audio data.
+ * <p>
+ * These two stream are independent and usually are activated by the same
+ * <code>PLAY</code> and <code>TEARDOWN</code> requests.
+ * 
+ * @author Matteo Merli
+ */
+public abstract class Track
+{
+
+	protected static final String ATTR = Track.class.toString() + "Attr";
+
+	/** Maps a client address to a Track */
+	protected static Map<InetSocketAddress, Track> clientAddressMap = new ConcurrentHashMap<InetSocketAddress, Track>();
+
+	/** Maps a server address to a Track */
+	protected static Map<InetSocketAddress, Track> serverAddressMap = new ConcurrentHashMap<InetSocketAddress, Track>();
+
+	/**
+	 * Control Url of the track. This is the url handle given by the server to
+	 * control different tracks in a RTSP session.
+	 */
+	protected
+	String url;
+
+	/**
+	 * IP address and RTP/RTCP ports for client and server.
+	 * <p>
+	 * TODO: When using reflection, there will be more than one connected client
+	 * at a time to the same Track. So the track should keep a list of connected
+	 * clients and forward packets to each of them.
+	 */
+	protected InetAddress clientAddress;
+	protected InetAddress serverAddress;
+
+	/**
+	 * Construct a new Track.
+	 * 
+	 * @param url
+	 *        the control name for this track.
+	 */
+	public Track( String url )
+	{
+		this.url = url;
+	}
+
+	/**
+	 * Get the track by looking at client socket address.
+	 * 
+	 * @return a Track instance if a matching pair is found or null
+	 */
+	public static Track getByClientAddress( InetSocketAddress clientAddress )
+	{
+		return clientAddressMap.get( clientAddress );
+	}
+
+	/**
+	 * Get the track by looking at server socket address.
+	 * <p>
+	 * Used as a workaround for streaming servers which do not hand out a ssrc
+	 * in the setup handshake.
+	 * 
+	 * @return a Track instance if a matching pair is found or null
+	 */
+	public static Track getByServerAddress( InetSocketAddress serverAddress )
+	{
+		return serverAddressMap.get( serverAddress );
+	}
+
+	// /// Member methods
+
+
+	public String getUrl()
+	{
+		return url;
+	}
+
+	public void setUrl( String url )
+	{
+		this.url = url;
+	}
+	
+	public abstract void close();
+
+	public String toString()
+	{
+		return "Track(url=\"" + url + "\"";
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/proxy/track/Track.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspTransport.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspTransport.java	2005-12-17 15:46:28 UTC (rev 345)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspTransport.java	2005-12-18 15:50:15 UTC (rev 346)
@@ -18,40 +18,39 @@
 
 package rtspproxy.rtsp;
 
-
 /**
  * Parse the RTSP Transport header field. Reference Grammar:
  * 
  * <pre>
- *                     Transport           =    &quot;Transport&quot; &quot;:&quot;
- *                                              1\#transport-spec
- *                     transport-spec      =    transport-protocol/profile[/lower-transport]
- *                                              *parameter
- *                     transport-protocol  =    &quot;RTP&quot;
- *                     profile             =    &quot;AVP&quot;
- *                     lower-transport     =    &quot;TCP&quot; | &quot;UDP&quot;
- *                     parameter           =    ( &quot;unicast&quot; | &quot;multicast&quot; )
- *                                         |    &quot;;&quot; &quot;destination&quot; [ &quot;=&quot; address ]
- *                                         |    &quot;;&quot; &quot;interleaved&quot; &quot;=&quot; channel [ &quot;-&quot; channel ]
- *                                         |    &quot;;&quot; &quot;append&quot;
- *                                         |    &quot;;&quot; &quot;ttl&quot; &quot;=&quot; ttl
- *                                         |    &quot;;&quot; &quot;layers&quot; &quot;=&quot; 1*DIGIT
- *                                         |    &quot;;&quot; &quot;port&quot; &quot;=&quot; port [ &quot;-&quot; port ]
- *                                         |    &quot;;&quot; &quot;client_port&quot; &quot;=&quot; port [ &quot;-&quot; port ]
- *                                         |    &quot;;&quot; &quot;server_port&quot; &quot;=&quot; port [ &quot;-&quot; port ]
- *                                         |    &quot;;&quot; &quot;ssrc&quot; &quot;=&quot; ssrc
- *                                         |    &quot;;&quot; &quot;mode&quot; = &lt;&quot;&gt; 1\#mode &lt;&quot;&gt;
- *                     ttl                 =    1*3(DIGIT)
- *                     port                =    1*5(DIGIT)
- *                     ssrc                =    8*8(HEX)
- *                     channel             =    1*3(DIGIT)
- *                     address             =    host
- *                     mode                =    &lt;&quot;&gt; *Method &lt;&quot;&gt; | Method
- *                  
- *                  
- *                     Example:
- *                       Transport: RTP/AVP;multicast;ttl=127;mode=&quot;PLAY&quot;,
- *                                  RTP/AVP;unicast;client_port=3456-3457;mode=&quot;PLAY&quot;
+ *                       Transport           =    &quot;Transport&quot; &quot;:&quot;
+ *                                                1\#transport-spec
+ *                       transport-spec      =    transport-protocol/profile[/lower-transport]
+ *                                                *parameter
+ *                       transport-protocol  =    &quot;RTP&quot;
+ *                       profile             =    &quot;AVP&quot;
+ *                       lower-transport     =    &quot;TCP&quot; | &quot;UDP&quot;
+ *                       parameter           =    ( &quot;unicast&quot; | &quot;multicast&quot; )
+ *                                           |    &quot;;&quot; &quot;destination&quot; [ &quot;=&quot; address ]
+ *                                           |    &quot;;&quot; &quot;interleaved&quot; &quot;=&quot; channel [ &quot;-&quot; channel ]
+ *                                           |    &quot;;&quot; &quot;append&quot;
+ *                                           |    &quot;;&quot; &quot;ttl&quot; &quot;=&quot; ttl
+ *                                           |    &quot;;&quot; &quot;layers&quot; &quot;=&quot; 1*DIGIT
+ *                                           |    &quot;;&quot; &quot;port&quot; &quot;=&quot; port [ &quot;-&quot; port ]
+ *                                           |    &quot;;&quot; &quot;client_port&quot; &quot;=&quot; port [ &quot;-&quot; port ]
+ *                                           |    &quot;;&quot; &quot;server_port&quot; &quot;=&quot; port [ &quot;-&quot; port ]
+ *                                           |    &quot;;&quot; &quot;ssrc&quot; &quot;=&quot; ssrc
+ *                                           |    &quot;;&quot; &quot;mode&quot; = &lt;&quot;&gt; 1\#mode &lt;&quot;&gt;
+ *                       ttl                 =    1*3(DIGIT)
+ *                       port                =    1*5(DIGIT)
+ *                       ssrc                =    8*8(HEX)
+ *                       channel             =    1*3(DIGIT)
+ *                       address             =    host
+ *                       mode                =    &lt;&quot;&gt; *Method &lt;&quot;&gt; | Method
+ *                    
+ *                    
+ *                       Example:
+ *                         Transport: RTP/AVP;multicast;ttl=127;mode=&quot;PLAY&quot;,
+ *                                    RTP/AVP;unicast;client_port=3456-3457;mode=&quot;PLAY&quot;
  * </pre>
  */
 public class RtspTransport
@@ -63,19 +62,50 @@
 		/** Real Time Protocol */
 		RTP,
 		/** RDT: RealNetworks transport protocol */
-		RDT, RAW
+		RDT, RAW;
+
+		public static TransportProtocol fromString( String transportName )
+		{
+			if ( "RTP".equalsIgnoreCase( transportName ) )
+				return RTP;
+			else
+				if ( "RDT".equalsIgnoreCase( transportName )
+						|| "x-real-rdt".equalsIgnoreCase( transportName ) )
+					return RDT;
+				else
+					return None;
+		}
 	}
 
 	/** Profile of the streamed data */
 	public enum Profile {
 		None,
 		/** Audio-Video Profile */
-		AVP
+		AVP;
+
+		public static Profile fromString( String profile )
+		{
+			if ( "AVP".equalsIgnoreCase( profile ) )
+				return AVP;
+			else
+				return None;
+		}
 	}
 
 	/** Underlying transport protocol */
 	public enum LowerTransport {
-		None, TCP, UDP
+		None, TCP, UDP;
+
+		public static LowerTransport fromString( String transportName )
+		{
+			if ( "TCP".equalsIgnoreCase( transportName ) )
+				return TCP;
+			else
+				if ( "UDP".equalsIgnoreCase( transportName ) )
+					return UDP;
+				else
+					return None;
+		}
 	}
 
 	/** Delivery method */
@@ -133,11 +163,22 @@
 		for ( String tok : transport.split( ";" ) ) {
 
 			// First check for the transport protocol
-			if ( tok.startsWith( "RTP" ) || tok.startsWith( "RDT" ) ) {
+			if ( tok.startsWith( "RTP" ) || tok.startsWith( "RDT" )
+					|| tok.startsWith( "x-real-rdt" ) ) {
 				String[] tpl = tok.split( "/" );
-				transportProtocol = TransportProtocol.valueOf( tpl[0] );
+				transportProtocol = TransportProtocol.fromString( tpl[0] );
 				if ( tpl.length > 1 )
-					profile = Profile.valueOf( tpl[1] );
+					try {
+						profile = Profile.valueOf( tpl[1] );
+					} catch ( Exception e ) {
+						profile = Profile.None;
+					}
+
+				if ( profile == Profile.None ) {
+					// Maybe this is a lower transport definition
+					lowerTransport = LowerTransport.fromString( tpl[1] );
+				}
+
 				if ( tpl.length > 2 )
 					lowerTransport = LowerTransport.valueOf( tpl[2] );
 				continue;
@@ -193,19 +234,36 @@
 			// If it's not specified, let's assume unicast
 			setDeliveryType( DeliveryType.unicast );
 
+		if ( transportProtocol == TransportProtocol.RDT
+				&& deliveryType == DeliveryType.None )
+			// If it's not specified, let's assume unicast
+			setDeliveryType( DeliveryType.unicast );
+
 	}
 
 	public String toString()
 	{
 		StringBuilder sb = new StringBuilder();
-		sb.append( transportProtocol );
-		if ( profile != Profile.None ) {
-			sb.append( "/" ).append( profile );
+		if ( transportProtocol == TransportProtocol.RDT ) {
+			// RDT is a little bit "special"
+			sb.append( "x-real-rdt" );
+
 			if ( lowerTransport != LowerTransport.None )
-				sb.append( "/" ).append( lowerTransport );
+				sb.append( "/" ).append( lowerTransport.toString().toLowerCase() );
+			
+			if ( deliveryType == DeliveryType.multicast )
+				sb.append( "/mcast" );
+
+		} else {
+			sb.append( transportProtocol );
+			if ( profile != Profile.None ) {
+				sb.append( "/" ).append( profile );
+				if ( lowerTransport != LowerTransport.None )
+					sb.append( "/" ).append( lowerTransport );
+			}
+			if ( deliveryType != DeliveryType.None )
+				sb.append( ";" ).append( deliveryType );
 		}
-		if ( deliveryType != DeliveryType.None )
-			sb.append( ";" ).append( deliveryType );
 		if ( destination != null )
 			sb.append( ";destination=" ).append( destination );
 		if ( interleaved != null )
@@ -216,14 +274,21 @@
 			sb.append( ";layers=" ).append( layers );
 		if ( ttl > 0 )
 			sb.append( ";ttl=" ).append( ttl );
-		if ( port[0] > 0 )
-			sb.append( ";port=" ).append( port[0] ).append( "-" ).append( port[1] );
-		if ( client_port[0] > 0 )
-			sb.append( ";client_port=" ).append( client_port[0] ).append( "-" ).append(
-					client_port[1] );
-		if ( server_port[0] > 0 )
-			sb.append( ";server_port=" ).append( server_port[0] ).append( "-" ).append(
-					server_port[1] );
+		if ( port[0] > 0 ) {
+			sb.append( ";port=" ).append( port[0] );
+			if ( port[1] > 0 )
+				sb.append( "-" ).append( port[1] );
+		}
+		if ( client_port[0] > 0 ) {
+			sb.append( ";client_port=" ).append( client_port[0] );
+			if ( client_port[1] > 0 )
+				sb.append( "-" ).append( client_port[1] );
+		}
+		if ( server_port[0] > 0 ) {
+			sb.append( ";server_port=" ).append( server_port[0] );
+			if ( server_port[1] > 0 )
+				sb.append( "-" ).append( server_port[1] );
+		}
 		if ( ssrc != null )
 			sb.append( ";ssrc=" ).append( ssrc );
 		if ( source != null )
@@ -249,7 +314,12 @@
 				&& deliveryType == DeliveryType.unicast )
 			return true;
 		else
-			return false;
+			if ( transportProtocol == TransportProtocol.RDT
+					&& lowerTransport == LowerTransport.UDP
+					&& deliveryType == DeliveryType.unicast )
+				return true;
+			else
+				return false;
 	}
 
 	/**
@@ -287,6 +357,15 @@
 	}
 
 	/**
+	 * @param client_port
+	 *        The client_port to set.
+	 */
+	public void setClientPort( int client_port )
+	{
+		this.client_port = new int[] { client_port, 0 };
+	}
+
+	/**
 	 * @return Returns the deliveryType.
 	 */
 	public DeliveryType getDeliveryType()
@@ -440,6 +519,15 @@
 	}
 
 	/**
+	 * @param server_port
+	 *        The server_port to set.
+	 */
+	public void setServerPort( int server_port )
+	{
+		this.server_port = new int[] { server_port, 0 };
+	}
+
+	/**
 	 * @return Returns the ssrc.
 	 */
 	public String getSSRC()



From merlimat at berlios.de  Mon Dec 19 20:27:32 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Mon, 19 Dec 2005 20:27:32 +0100
Subject: [Rtspproxy-devel] r350 - in trunk/src/main/java/rtspproxy: . lib proxy proxy/track
Message-ID: <200512191927.jBJJRWXW009912@sheep.berlios.de>

Author: merlimat
Date: 2005-12-19 20:27:06 +0100 (Mon, 19 Dec 2005)
New Revision: 350

Added:
   trunk/src/main/java/rtspproxy/RtcpClientService.java
   trunk/src/main/java/rtspproxy/RtcpServerService.java
   trunk/src/main/java/rtspproxy/lib/NetworkInterface.java
Modified:
   trunk/src/main/java/rtspproxy/ProxyService.java
   trunk/src/main/java/rtspproxy/ProxyServiceRegistry.java
   trunk/src/main/java/rtspproxy/RdtClientService.java
   trunk/src/main/java/rtspproxy/RdtServerService.java
   trunk/src/main/java/rtspproxy/RtpClientService.java
   trunk/src/main/java/rtspproxy/RtpServerService.java
   trunk/src/main/java/rtspproxy/RtspService.java
   trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/src/main/java/rtspproxy/proxy/track/RdtTrack.java
   trunk/src/main/java/rtspproxy/proxy/track/RtpTrack.java
   trunk/src/main/java/rtspproxy/proxy/track/Track.java
Log:
* Totally refactored the Service code.
* Explicetely bind on all network interface when a default one is not specified

Modified: trunk/src/main/java/rtspproxy/ProxyService.java
===================================================================
--- trunk/src/main/java/rtspproxy/ProxyService.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/ProxyService.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -18,30 +18,185 @@
 
 package rtspproxy;
 
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.util.Observable;
+import java.util.Observer;
+import java.util.Set;
+
+import org.apache.log4j.Logger;
+import org.apache.mina.common.IoFilterChainBuilder;
+import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.IoSession;
+import org.apache.mina.common.TransportType;
+
+import rtspproxy.lib.NetworkInterface;
+import rtspproxy.lib.Singleton;
+
 /**
  * @author Matteo Merli
  */
-public interface ProxyService
+public abstract class ProxyService extends Singleton implements Observer
 {
 
+	private static Logger log = Logger.getLogger( ProxyService.class );
+
+	private InetSocketAddress socketAddress = null;
+
+	private volatile boolean isRunning = false;
+
+	public static final String SERVICE = ProxyService.class.getName();
+
 	/**
 	 * Starts the service.
 	 * 
 	 * @throws Exception
 	 */
-	public void start() throws Exception;
+	public void start() throws Exception
+	{
+		if ( isRunning ) {
+			log.warn( getName() + " is already running." );
+			return;
+		}
 
+		String netInterface = getNetworkInterface();
+		int[] ports = getBindPorts();
+
+		try {
+
+			Set<InetAddress> addressSet = NetworkInterface.getAddresses( netInterface );
+
+			for ( InetAddress inetAddress : addressSet ) {
+				// Bind to all addresses
+
+				for ( int port : ports ) {
+					// Bind to all the specified ports
+					socketAddress = new InetSocketAddress( inetAddress, port );
+
+					Reactor.getRegistry().bind( this, getIoHandler(), socketAddress,
+							getFilterChainBuilder() );
+				}
+			}
+
+			// Choose a bind address
+			InetAddress inetAddress = NetworkInterface.getBindAddress( addressSet );
+			socketAddress = new InetSocketAddress( inetAddress, ports[0] );
+
+			log.info( getName() + " Started - Listening on: " + socketAddress );
+
+		} catch ( IOException e ) {
+			log.fatal( "Can't start " + getName() + " " + e );
+			throw e;
+		}
+
+		isRunning = true;
+	}
+
 	/**
 	 * Stops the service
 	 * 
 	 * @throws Exception
 	 */
-	public void stop() throws Exception;
+	protected void stop() throws Exception
+	{
+		if ( !isRunning ) {
+			log.warn( getName() + " is not running." );
+			return;
+		}
 
+		log.info( getName() + " Stopped" );
+		isRunning = false;
+	}
+
+	protected void restart() throws Exception
+	{
+		if ( !isRunning ) {
+			log.warn( getName() + " is not running." );
+			return;
+		}
+
+		log.info( "Restarting " + getName() );
+		stop();
+		start();
+	}
+
+	public boolean isRunning()
+	{
+		return isRunning;
+	}
+
 	/**
-	 * @return true if the service is started, false otherwise.
+	 * @return the transport type used by this service
 	 */
-	// TODO: Not really sure if it's needed
-	// public boolean isRunning();
+	public abstract TransportType getTransportType();
 
+	/**
+	 * @return an instance to the IoHandler object that will receive all the
+	 *         messages.
+	 */
+	public abstract IoHandler getIoHandler();
+
+	public IoFilterChainBuilder getFilterChainBuilder()
+	{
+		// By default there's no filter chain
+		return null;
+	}
+
+	/**
+	 * Return the name of the service.
+	 * 
+	 * @return the human readable name
+	 */
+	public abstract String getName();
+
+	public abstract String getNetworkInterface();
+
+	public abstract int[] getBindPorts();
+
+	public InetAddress getAddress()
+	{
+		return socketAddress.getAddress();
+	}
+
+	public int getPort()
+	{
+		return socketAddress.getPort();
+	}
+
+	public SocketAddress getSocketAddress()
+	{
+		return socketAddress;
+	}
+
+	public IoSession newSession( SocketAddress remoteAddress )
+	{
+		return Reactor.getRegistry().getAcceptor( this ).newSession( remoteAddress,
+				socketAddress );
+	}
+
+	/**
+	 * Update the ProxyService state. A proxy service will likely subscribe to
+	 * some parameter changes notifications. When a change is notified the
+	 * service will be restarted.
+	 * <p>
+	 * <i>NOTE:</i>
+	 * <ul>
+	 * <li>if the service is TCP based, all connected clients will be
+	 * disconnected! </li>
+	 * <li>If the service is UDP based some packets may be missed when the
+	 * service is down. </li>
+	 * </ul>
+	 * 
+	 * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
+	 */
+	public void update( Observable o, Object arg )
+	{
+		try {
+			restart();
+		} catch ( Exception e ) {
+			log.error( "Error restarting " + getName(), e );
+		}
+	}
 }

Modified: trunk/src/main/java/rtspproxy/ProxyServiceRegistry.java
===================================================================
--- trunk/src/main/java/rtspproxy/ProxyServiceRegistry.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/ProxyServiceRegistry.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -19,7 +19,8 @@
 package rtspproxy;
 
 import java.io.IOException;
-import java.util.Collection;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
@@ -31,8 +32,6 @@
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
 import org.apache.mina.filter.ThreadPoolFilter;
-import org.apache.mina.registry.Service;
-import org.apache.mina.registry.ServiceRegistry;
 import org.apache.mina.transport.socket.nio.DatagramAcceptor;
 import org.apache.mina.transport.socket.nio.SocketAcceptor;
 import org.apache.mina.transport.vmpipe.VmPipeAcceptor;
@@ -43,127 +42,129 @@
  * 
  * @author Matteo Merli
  */
-public class ProxyServiceRegistry implements ServiceRegistry
+public class ProxyServiceRegistry
 {
 
+	/**
+	 * Thread pool instance that will be added to all acceptors.
+	 */
 	protected final ThreadPoolFilter threadPoolFilter = new ThreadPoolFilter();
 
-	private final ConcurrentMap<String, IoAcceptor> acceptors = new ConcurrentHashMap<String, IoAcceptor>();
-	private final ConcurrentMap<String, Service> services = new ConcurrentHashMap<String, Service>();
+	/** All the services, mapped by name. */
+	private final ConcurrentMap<String, ProxyService> services = new ConcurrentHashMap<String, ProxyService>();
 
-	public void bind( Service service, IoHandler ioHandler ) throws IOException
+	/** Map a ProxyService to all its bound addresses. */
+	private final ConcurrentMap<ProxyService, Set<SocketAddress>> addresses = new ConcurrentHashMap<ProxyService, Set<SocketAddress>>();
+
+	private final ConcurrentMap<ProxyService, IoAcceptor> acceptors = new ConcurrentHashMap<ProxyService, IoAcceptor>();
+
+	public void bind( ProxyService service, IoHandler ioHandler, InetSocketAddress address )
+			throws IOException
 	{
-		bind( service, ioHandler, null );
+		bind( service, ioHandler, address, null );
 	}
 
-	public void bind( Service service, IoHandler ioHandler,
-			IoFilterChainBuilder filterChainBuilder ) throws IOException
+	public void bind( ProxyService service, IoHandler ioHandler,
+			InetSocketAddress address, IoFilterChainBuilder filterChainBuilder )
+			throws IOException
 	{
 		IoAcceptor acceptor = newAcceptor( service );
 		if ( filterChainBuilder == null ) {
 			filterChainBuilder = IoFilterChainBuilder.NOOP;
 		}
-		acceptor.bind( service.getAddress(), ioHandler, new IoFilterChainBuilderWrapper(
-				service, filterChainBuilder ) );
+		acceptor.bind( address, ioHandler, new IoFilterChainBuilderWrapper( service,
+				filterChainBuilder ) );
 
 		services.put( service.getName(), service );
-		acceptors.put( service.getName(), acceptor );
+
+		if ( addresses.get( service ) == null )
+			addresses.put( service, new HashSet<SocketAddress>() );
+		addresses.get( service ).add( address );
 	}
 
-	public synchronized void unbind( Service service )
+	public synchronized void unbind( ProxyService service ) throws Exception
 	{
-		IoAcceptor acceptor = acceptors.get( service.getName() );
-		try {
-			acceptor.unbind( service.getAddress() );
-		} catch ( Exception e ) {
-			// ignore
+		IoAcceptor acceptor = acceptors.get( service );
+		for ( SocketAddress address : addresses.get( service ) ) {
+			try {
+				acceptor.unbind( address );
+			} catch ( Exception e ) {
+				// ignore
+			}
 		}
 
+		if ( service.isRunning() ) {
+			service.stop();
+		}
+
 		services.remove( service.getName() );
-		acceptors.remove( service.getName() );
+		acceptors.remove( service );
+		addresses.remove( service );
 	}
 
-	public void unbind( String serviceName )
+	public synchronized void unbindAll() throws Exception
 	{
-		Service service = services.get( serviceName );
-		if ( service == null )
-			return;
-		else
+		Set<ProxyService> serviceList = new HashSet<ProxyService>( services.values() );
+		for ( ProxyService service : serviceList ) {
 			unbind( service );
-	}
-
-	public synchronized void unbindAll()
-	{
-		Collection<Service> serviceList = services.values();
-		for ( Service service : serviceList ) {
-			unbind( service );
 		}
 	}
 
 	public synchronized Set getAllServices()
 	{
-		return new HashSet<Service>( services.values() );
+		return new HashSet<ProxyService>( services.values() );
 	}
 
-	public Service getService( String name )
+	public ProxyService getService( String name )
 	{
 		return services.get( name );
 	}
 
-	public Set getServices( String name )
+	public IoAcceptor getAcceptor( String serviceName )
 	{
-		Set<Service> oneService = new HashSet<Service>();
-		Service service = services.get( name );
-		if ( service != null )
-			oneService.add( service );
-		return oneService;
+		ProxyService service = services.get( serviceName );
+		if ( service == null )
+			return null;
+		else
+			return acceptors.get( service );
 	}
 
-	public Set getServices( TransportType transportType )
+	public IoAcceptor getAcceptor( ProxyService service )
 	{
-		// Not implemented
-		return null;
+		return acceptors.get( service );
 	}
 
-	public Set getServices( int port )
+	private IoAcceptor newAcceptor( ProxyService service )
 	{
-		// Not implemented
-		return null;
-	}
+		// First check if there's already an acceptor
+		IoAcceptor acceptor = acceptors.get( service );
+		if ( acceptor != null )
+			return acceptor;
 
-	public IoAcceptor getAcceptor( TransportType transportType )
-	{
-		// Not implemented
-		return null;
-	}
-
-	public IoAcceptor getAcceptor( String serviceName )
-	{
-		return acceptors.get( serviceName );
-	}
-
-	private static IoAcceptor newAcceptor( Service service )
-	{
+		// Create a new one
 		TransportType transportType = service.getTransportType();
 		if ( transportType == TransportType.SOCKET )
-			return new SocketAcceptor();
+			acceptor = new SocketAcceptor();
+		else if ( transportType == TransportType.DATAGRAM )
+			acceptor = new DatagramAcceptor();
+		else if ( transportType == TransportType.VM_PIPE )
+			acceptor = new VmPipeAcceptor();
 		else
-			if ( transportType == TransportType.DATAGRAM )
-				return new DatagramAcceptor();
-			else
-				if ( transportType == TransportType.VM_PIPE )
-					return new VmPipeAcceptor();
-				else
-					return null;
+			acceptor = null;
+
+		// Save the acceptor
+		acceptors.put( service, acceptor );
+		return acceptor;
 	}
 
 	private class IoFilterChainBuilderWrapper implements IoFilterChainBuilder
 	{
 
-		private final Service service;
+		private final ProxyService service;
+
 		private final IoFilterChainBuilder originalBuilder;
 
-		private IoFilterChainBuilderWrapper( Service service,
+		private IoFilterChainBuilderWrapper( ProxyService service,
 				IoFilterChainBuilder originalBuilder )
 		{
 			this.service = service;
@@ -172,7 +173,7 @@
 
 		public void buildFilterChain( IoFilterChain chain ) throws Exception
 		{
-			chain.getSession().setAttribute( SERVICE, service );
+			chain.getSession().setAttribute( ProxyService.SERVICE, service );
 
 			try {
 				originalBuilder.buildFilterChain( chain );

Modified: trunk/src/main/java/rtspproxy/RdtClientService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RdtClientService.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/RdtClientService.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -18,92 +18,63 @@
 
 package rtspproxy;
 
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-
-import org.apache.log4j.Logger;
-import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
-import org.apache.mina.registry.Service;
 
-import rtspproxy.lib.NoPortAvailableException;
-import rtspproxy.lib.PortManager;
 import rtspproxy.proxy.ClientRdtPacketHandler;
 
 /**
- * This service is responsible of receiving and sending RTP and RTCP packets to
- * clients.
- * 
  * @author Matteo Merli
  */
-public class RdtClientService implements ProxyService
+public class RdtClientService extends ProxyService
 {
 
-	private static Logger log = Logger.getLogger( RtpClientService.class );
+	private IoHandler clientRdtPacketHandler = new ClientRdtPacketHandler();
 
-	private static InetSocketAddress rdtAddress = null;
-	
-	private static final String NAME = "RdtClientService";
+	public static final String NAME = "RdtClientService";
 
-	public void start() throws IOException, NoPortAvailableException
+	private static RdtClientService instance;
+
+	public RdtClientService()
 	{
-		int rdtPort = Config.getInt( "proxy.client.rdt.port", 8018 );
-		String netInterface = Config.get( "proxy.client.interface", null );
-		boolean dinPorts = Config.getBoolean( "proxy.client.dynamicPorts", false );
+		super();
+		instance = this;
+	}
 
-		// If dinPorts is true, we have to first check the availability
-		// of the ports and choose 2 valid ports.
-		if ( dinPorts ) {
-			int[] ports = PortManager.findAvailablePorts( 1, rdtPort );
-			rdtPort = ports[0];
-		}
-
-		rdtAddress = new InetSocketAddress( InetAddress.getByName( netInterface ),
-				rdtPort );
-
-		try {
-			Service rdtService;
-
-			rdtService = new Service( NAME, TransportType.DATAGRAM,
-					rdtAddress );
-			
-			Reactor.getRegistry().bind( rdtService, new ClientRdtPacketHandler() );
-			log.info( "RdtClientService Started - Listening on: "
-					+ InetAddress.getByName( netInterface ) + " " + rdtPort  );
-
-		} catch ( IOException e ) {
-			log.fatal( "Can't start RdtClientService. " + e );
-			throw e;
-		}
+	@Override
+	public TransportType getTransportType()
+	{
+		return TransportType.DATAGRAM;
 	}
 
-	public void stop()
+	@Override
+	public String getName()
 	{
-		Reactor.getRegistry().unbind( NAME );
-		log.info( "RdtClientService Stopped" );
+		return NAME;
 	}
 
-	public static IoSession newRdtSession( SocketAddress remoteAddress )
+	@Override
+	public IoHandler getIoHandler()
 	{
-		return Reactor.getRegistry().getAcceptor( NAME ).newSession(
-				remoteAddress, rdtAddress );
+		return clientRdtPacketHandler;
 	}
 
-	public static InetSocketAddress getRdtAddress()
+	@Override
+	public String getNetworkInterface()
 	{
-		return rdtAddress;
+		return Config.get( "proxy.client.interface", null );
 	}
 
-	public static InetAddress getHostAddress()
+	@Override
+	public int[] getBindPorts()
 	{
-		return rdtAddress.getAddress();
+		int port = Config.getInt( "proxy.client.rdt.port", 8018 );
+		return new int[] { port };
 	}
 
-	public static int getPort()
+	public static RdtClientService getInstance()
 	{
-		return rdtAddress.getPort();
+		return instance;
 	}
 
 }

Modified: trunk/src/main/java/rtspproxy/RdtServerService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RdtServerService.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/RdtServerService.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -18,91 +18,62 @@
 
 package rtspproxy;
 
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-
-import org.apache.log4j.Logger;
-import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
-import org.apache.mina.registry.Service;
 
-import rtspproxy.lib.NoPortAvailableException;
-import rtspproxy.lib.PortManager;
 import rtspproxy.proxy.ServerRdtPacketHandler;
 
 /**
- * This service is responsible of receiving and sending RTP and RTCP packets to
- * clients.
- * 
  * @author Matteo Merli
  */
-public class RdtServerService implements ProxyService
+public class RdtServerService extends ProxyService
 {
+	private IoHandler serverRdtPacketHandler = new ServerRdtPacketHandler();
 
-	private static Logger log = Logger.getLogger( RtpClientService.class );
+	public static final String NAME = "RdtServerService";
 
-	private static InetSocketAddress rdtAddress = null;
+	private static RdtServerService instance;
 
-	private static final String NAME = "RdtServerService";
-
-	public void start() throws IOException, NoPortAvailableException
+	public RdtServerService()
 	{
-		int rdtPort = Config.getInt( "proxy.server.rdt.port", 8020 );
-		String netInterface = Config.get( "proxy.server.interface", null );
-		boolean dinPorts = Config.getBoolean( "proxy.server.dynamicPorts", false );
+		super();
+		instance = this;
+	}
 
-		// If dinPorts is true, we have to first check the availability
-		// of the ports and choose 2 valid ports.
-		if ( dinPorts ) {
-			int[] ports = PortManager.findAvailablePorts( 1, rdtPort );
-			rdtPort = ports[0];
-		}
-
-		rdtAddress = new InetSocketAddress( InetAddress.getByName( netInterface ),
-				rdtPort );
-
-		try {
-			Service rdtService;
-
-			rdtService = new Service( NAME, TransportType.DATAGRAM, rdtAddress );
-
-			Reactor.getRegistry().bind( rdtService, new ServerRdtPacketHandler() );
-			log.info( "RdtServerService Started - Listening on: "
-					+ InetAddress.getByName( netInterface ) + " " + rdtPort );
-
-		} catch ( IOException e ) {
-			log.fatal( "Can't start RdtServerService. " + e );
-			throw e;
-		}
+	@Override
+	public TransportType getTransportType()
+	{
+		return TransportType.DATAGRAM;
 	}
 
-	public void stop()
+	@Override
+	public String getName()
 	{
-		Reactor.getRegistry().unbind( NAME );
-		log.info( "RdtServerService Stopped" );
+		return NAME;
 	}
 
-	public static IoSession newRdtSession( SocketAddress remoteAddress )
+	@Override
+	public IoHandler getIoHandler()
 	{
-		return Reactor.getRegistry().getAcceptor( NAME ).newSession(
-				remoteAddress, rdtAddress );
+		return serverRdtPacketHandler;
 	}
 
-	public static InetSocketAddress getRdtAddress()
+	@Override
+	public String getNetworkInterface()
 	{
-		return rdtAddress;
+		return Config.get( "proxy.server.interface", null );
 	}
 
-	public static InetAddress getHostAddress()
+	@Override
+	public int[] getBindPorts()
 	{
-		return rdtAddress.getAddress();
+		int port = Config.getInt( "proxy.server.rdt.port", 8020 );
+		return new int[] { port };
 	}
 
-	public static int getPort()
+	public static RdtServerService getInstance()
 	{
-		return rdtAddress.getPort();
+		return instance;
 	}
 
 }

Added: trunk/src/main/java/rtspproxy/RtcpClientService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtcpClientService.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/RtcpClientService.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -0,0 +1,79 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy;
+
+import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.TransportType;
+
+import rtspproxy.proxy.ClientRtcpPacketHandler;
+
+/**
+ * @author Matteo Merli
+ */
+public class RtcpClientService extends ProxyService
+{
+	private IoHandler clientRtcpPacketHandler = new ClientRtcpPacketHandler();
+
+	public static final String NAME = "RtcpClientService";
+	
+	private static RtcpClientService instance;
+
+	public RtcpClientService()
+	{
+		super();
+		instance = this;
+	}
+
+	@Override
+	public TransportType getTransportType()
+	{
+		return TransportType.DATAGRAM;
+	}
+
+	@Override
+	public String getName()
+	{
+		return NAME;
+	}
+
+	@Override
+	public IoHandler getIoHandler()
+	{
+		return clientRtcpPacketHandler;
+	}
+
+	@Override
+	public String getNetworkInterface()
+	{
+		return Config.get( "proxy.client.interface", null );
+	}
+
+	@Override
+	public int[] getBindPorts()
+	{
+		int port = Config.getInt( "proxy.client.rtcp.port", 8003 );
+		return new int[] { port };
+	}
+	
+	public static RtcpClientService getInstance()
+	{
+		return instance;
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/RtcpClientService.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/RtcpServerService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtcpServerService.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/RtcpServerService.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -0,0 +1,79 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy;
+
+import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.TransportType;
+
+import rtspproxy.proxy.ServerRtcpPacketHandler;
+
+/**
+ * @author Matteo Merli
+ */
+public class RtcpServerService extends ProxyService
+{
+	private IoHandler serverRtcpPacketHandler = new ServerRtcpPacketHandler();
+
+	public static final String NAME = "RtcpServerService";
+	
+	private static RtcpServerService instance;
+
+	public RtcpServerService()
+	{
+		super();
+		instance = this;
+	}
+
+	@Override
+	public TransportType getTransportType()
+	{
+		return TransportType.DATAGRAM;
+	}
+
+	@Override
+	public String getName()
+	{
+		return NAME;
+	}
+
+	@Override
+	public IoHandler getIoHandler()
+	{
+		return serverRtcpPacketHandler;
+	}
+
+	@Override
+	public String getNetworkInterface()
+	{
+		return Config.get( "proxy.server.interface", null );
+	}
+
+	@Override
+	public int[] getBindPorts()
+	{
+		int port = Config.getInt( "proxy.server.rtcp.port", 8001 );
+		return new int[] { port };
+	}
+	
+	public static RtcpServerService getInstance()
+	{
+		return instance;
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/RtcpServerService.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/src/main/java/rtspproxy/RtpClientService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtpClientService.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/RtpClientService.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -18,124 +18,62 @@
 
 package rtspproxy;
 
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-
-import org.apache.log4j.Logger;
-import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
-import org.apache.mina.registry.Service;
 
-import rtspproxy.lib.NoPortAvailableException;
-import rtspproxy.lib.PortManager;
-import rtspproxy.proxy.ClientRtcpPacketHandler;
 import rtspproxy.proxy.ClientRtpPacketHandler;
 
 /**
- * This service is responsible of receiving and sending RTP and RTCP packets to
- * clients.
- * 
  * @author Matteo Merli
  */
-public class RtpClientService implements ProxyService
+public class RtpClientService extends ProxyService
 {
+	private IoHandler clientRtpPacketHandler = new ClientRtpPacketHandler();
 
-	private static Logger log = Logger.getLogger( RtpClientService.class );
+	public static final String NAME = "RtpClientService";
+	
+	private static RtpClientService instance;
 
-	private static InetSocketAddress rtpAddress = null;
-	private static InetSocketAddress rtcpAddress = null;
-
-	private static final String rtpNAME = "RtpClientService";
-	private static final String rtcpNAME = "RtcpClientService";
-
-	public void start() throws IOException, NoPortAvailableException
+	public RtpClientService()
 	{
-		int rtpPort = Config.getInt( "proxy.client.rtp.port", 8002 );
-		int rtcpPort = Config.getInt( "proxy.client.rtcp.port", 8003 );
-		String netInterface = Config.get( "proxy.client.interface", null );
-		boolean dinPorts = Config.getBoolean( "proxy.client.dynamicPorts", false );
-
-		// If dinPorts is true, we have to first check the availability
-		// of the ports and choose 2 valid ports.
-		if ( dinPorts ) {
-			int[] ports = PortManager.findAvailablePorts( 2, rtpPort );
-			rtpPort = ports[0];
-			rtcpPort = ports[1];
-		}
-
-		// Update properties with effective ports
-		Config.setInt( "proxy.client.rtp.port", rtpPort );
-		Config.setInt( "proxy.client.rtcp.port", rtcpPort );
-
-		rtpAddress = new InetSocketAddress( InetAddress.getByName( netInterface ),
-				rtpPort );
-		rtcpAddress = new InetSocketAddress( InetAddress.getByName( netInterface ),
-				rtcpPort );
-
-		try {
-			Service rtpService, rtcpService;
-
-			rtpService = new Service( rtpNAME, TransportType.DATAGRAM, rtpAddress );
-			rtcpService = new Service( rtcpNAME, TransportType.DATAGRAM, rtcpAddress );
-
-			Reactor.getRegistry().bind( rtpService, new ClientRtpPacketHandler() );
-			Reactor.getRegistry().bind( rtcpService, new ClientRtcpPacketHandler() );
-			log.info( "RtpClientService Started - Listening on: "
-					+ InetAddress.getByName( netInterface ) + " " + rtpPort + "-"
-					+ rtcpPort );
-
-		} catch ( IOException e ) {
-			log.fatal( "Can't start RtpClientService. " + e );
-			throw e;
-		}
+		super();
+		instance = this;
 	}
 
-	public void stop()
+	@Override
+	public TransportType getTransportType()
 	{
-		Reactor.getRegistry().unbind( rtpNAME );
-		Reactor.getRegistry().unbind( rtcpNAME );
-		log.info( "RtpClientService Stopped" );
+		return TransportType.DATAGRAM;
 	}
 
-	public static IoSession newRtpSession( SocketAddress remoteAddress )
+	@Override
+	public String getName()
 	{
-		return Reactor.getRegistry().getAcceptor( rtpNAME ).newSession( remoteAddress,
-				rtpAddress );
+		return NAME;
 	}
 
-	public static IoSession newRtcpSession( SocketAddress remoteAddress )
+	@Override
+	public IoHandler getIoHandler()
 	{
-		return Reactor.getRegistry().getAcceptor( rtcpNAME ).newSession( remoteAddress,
-				rtcpAddress );
+		return clientRtpPacketHandler;
 	}
 
-	public static InetSocketAddress getRtpAddress()
+	@Override
+	public String getNetworkInterface()
 	{
-		return rtpAddress;
+		return Config.get( "proxy.client.interface", null );
 	}
 
-	public static InetSocketAddress getRtcpAddress()
+	@Override
+	public int[] getBindPorts()
 	{
-		return rtcpAddress;
+		int port = Config.getInt( "proxy.client.rtp.port", 8002 );
+		return new int[] { port };
 	}
-
-	public static InetAddress getHostAddress()
+	
+	public static RtpClientService getInstance()
 	{
-		/*
-		 * The InetAddress (IP) is the same for both RTP and RTCP.
-		 */
-		return rtpAddress.getAddress();
+		return instance;
 	}
 
-	public static int getRtpPort()
-	{
-		return rtpAddress.getPort();
-	}
-
-	public static int getRtcpPort()
-	{
-		return rtcpAddress.getPort();
-	}
 }

Modified: trunk/src/main/java/rtspproxy/RtpServerService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtpServerService.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/RtpServerService.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -18,126 +18,62 @@
 
 package rtspproxy;
 
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-
-import org.apache.log4j.Logger;
-import org.apache.mina.common.IoSession;
+import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
-import org.apache.mina.registry.Service;
 
-import rtspproxy.lib.PortManager;
-import rtspproxy.proxy.ServerRtcpPacketHandler;
 import rtspproxy.proxy.ServerRtpPacketHandler;
 
 /**
  * @author Matteo Merli
  */
-public class RtpServerService implements ProxyService
+public class RtpServerService extends ProxyService
 {
+	private IoHandler serverRtpPacketHandler = new ServerRtpPacketHandler();
 
-	private static Logger log = Logger.getLogger( RtpServerService.class );
+	public static final String NAME = "RtpServerService";
+	
+	private static RtpServerService instance;
 
-	private static InetSocketAddress rtpAddress = null;
-	private static InetSocketAddress rtcpAddress = null;
-
-	private static final String rtpNAME = "RtpServerService";
-	private static final String rtcpNAME = "RtcpServerService";
-
-	public void start() throws Exception
+	public RtpServerService()
 	{
-		int rtpPort = Config.getInt( "proxy.server.rtp.port", 8000 );
-		int rtcpPort = Config.getInt( "proxy.server.rtcp.port", 8001 );
-		String netInterface = Config.get( "proxy.server.interface", null );
-		boolean dinPorts = Config.getBoolean( "proxy.server.dynamicPorts", false );
-
-		// If dinPorts is true, we have to first check the availability
-		// of the ports and choose 2 valid ports.
-		if ( dinPorts ) {
-			int[] ports = PortManager.findAvailablePorts( 2, rtpPort );
-			rtpPort = ports[0];
-			rtcpPort = ports[1];
-		}
-
-		// Update properties with effective ports
-		Config.setInt( "proxy.server.rtp.port", rtpPort );
-		Config.setInt( "proxy.server.rtcp.port", rtcpPort );
-
-		rtpAddress = new InetSocketAddress( InetAddress.getByName( netInterface ),
-				rtpPort );
-		rtcpAddress = new InetSocketAddress( InetAddress.getByName( netInterface ),
-				rtcpPort );
-
-		try {
-			Service rtpService, rtcpService;
-
-			rtpService = new Service( rtpNAME, TransportType.DATAGRAM, rtpAddress );
-			rtcpService = new Service( rtcpNAME, TransportType.DATAGRAM, rtcpAddress );
-
-			Reactor.getRegistry().bind( rtpService, new ServerRtpPacketHandler() );
-			Reactor.getRegistry().bind( rtcpService, new ServerRtcpPacketHandler() );
-			log.info( "RtpServerService Started - Listening on: "
-					+ InetAddress.getByName( netInterface ) + " " + rtpPort + "-"
-					+ rtcpPort );
-
-		} catch ( IOException e ) {
-			log.fatal( "Can't start the service. " + e );
-			throw e;
-		}
-
+		super();
+		instance = this;
 	}
 
-	/*
-	 * (non-Javadoc)
-	 * 
-	 * @see rtspproxy.ProxyService#stop()
-	 */
-	public void stop() throws Exception
+	@Override
+	public TransportType getTransportType()
 	{
-		Reactor.getRegistry().unbind( rtpNAME );
-		Reactor.getRegistry().unbind( rtcpNAME );
-		log.info( "RtpServerService Stopped" );
+		return TransportType.DATAGRAM;
 	}
 
-	public static IoSession newRtpSession( SocketAddress remoteAddress )
+	@Override
+	public String getName()
 	{
-		return Reactor.getRegistry().getAcceptor( rtpNAME ).newSession( remoteAddress,
-				rtpAddress );
+		return NAME;
 	}
 
-	public static IoSession newRtcpSession( SocketAddress remoteAddress )
+	@Override
+	public IoHandler getIoHandler()
 	{
-		return Reactor.getRegistry().getAcceptor( rtcpNAME ).newSession( remoteAddress,
-				rtcpAddress );
+		return serverRtpPacketHandler;
 	}
 
-	public static InetSocketAddress getRtpAddress()
+	@Override
+	public String getNetworkInterface()
 	{
-		return rtpAddress;
+		return Config.get( "proxy.server.interface", null );
 	}
 
-	public static InetSocketAddress getRtcpAddress()
+	@Override
+	public int[] getBindPorts()
 	{
-		return rtcpAddress;
+		int port = Config.getInt( "proxy.server.rtp.port", 8000 );
+		return new int[] { port };
 	}
-
-	public static InetAddress getHostAddress()
+	
+	public static RtpServerService getInstance()
 	{
-		/*
-		 * The InetAddress (IP) is the same for both RTP and RTCP.
-		 */
-		return rtpAddress.getAddress();
+		return instance;
 	}
 
-	public static int getRtpPort()
-	{
-		return rtpAddress.getPort();
-	}
-
-	public static int getRtcpPort()
-	{
-		return rtcpAddress.getPort();
-	}
 }

Modified: trunk/src/main/java/rtspproxy/RtspService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtspService.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/RtspService.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -18,13 +18,9 @@
 
 package rtspproxy;
 
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-
-import org.apache.log4j.Logger;
+import org.apache.mina.common.IoFilterChainBuilder;
+import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
-import org.apache.mina.registry.Service;
 
 import rtspproxy.filter.RtspClientFilters;
 import rtspproxy.proxy.ClientSide;
@@ -33,45 +29,62 @@
 /**
  * @author Matteo Merli
  */
-public class RtspService implements ProxyService
+public class RtspService extends ProxyService
 {
+	private IoHandler rtspHandler = new ClientSide();
 
-	private static Logger log = Logger.getLogger( RtspService.class );
+	private IoFilterChainBuilder filterChainBuilder = new RtspClientFilters();
 
-	private static final String NAME = "RtspService";
+	public static final String NAME = "RtspService";
+	
+	private static RtspService instance;
 
-	public void start() throws IOException
+	public RtspService()
 	{
-		// get port and network interface from config file
-		int[] ports = Config.getIntArray( "proxy.rtsp.port", Handler.DEFAULT_RTSP_PORT );
-		String netInterface = Config.get( "proxy.rtsp.interface", null );
+		super();
+		instance = this;
+	}
 
-		for ( int port : ports ) {
-			try {
+	@Override
+	public TransportType getTransportType()
+	{
+		return TransportType.SOCKET;
+	}
 
-				Service service;
-				if ( netInterface == null )
-					service = new Service( NAME, TransportType.SOCKET, port );
-				else
-					service = new Service( NAME, TransportType.SOCKET,
-							new InetSocketAddress( netInterface, port ) );
+	@Override
+	public String getName()
+	{
+		return NAME;
+	}
 
-				Reactor.getRegistry().bind( service, new ClientSide(),
-						new RtspClientFilters() );
+	@Override
+	public IoHandler getIoHandler()
+	{
+		return rtspHandler;
+	}
 
-				log.info( "RtspService Started - Listening on: "
-						+ InetAddress.getByName( netInterface ) + ":" + port );
+	@Override
+	public IoFilterChainBuilder getFilterChainBuilder()
+	{
+		return filterChainBuilder;
+	}
 
-			} catch ( IOException e ) {
-				log.fatal( e.getMessage() + " (port = " + port + ")" );
-				throw e;
-			}
-		}
+	@Override
+	public String getNetworkInterface()
+	{
+		return Config.get( "proxy.rtsp.interface", null );
 	}
 
-	public void stop() throws Exception
+	@Override
+	public int[] getBindPorts()
 	{
-		Reactor.getRegistry().unbind(NAME);
-		log.info( "RtspService Stopped" );
+		return Config
+				.getIntArray( "proxy.rtsp.port", Handler.DEFAULT_RTSP_PORT );
 	}
+	
+	public static RtspService getInstance()
+	{
+		return instance;
+	}
+
 }

Added: trunk/src/main/java/rtspproxy/lib/NetworkInterface.java
===================================================================
--- trunk/src/main/java/rtspproxy/lib/NetworkInterface.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/lib/NetworkInterface.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -0,0 +1,176 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.lib;
+
+import java.net.Inet4Address;
+import java.net.Inet6Address;
+import java.net.InetAddress;
+import java.net.SocketException;
+import java.util.Enumeration;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.apache.log4j.Logger;
+
+/**
+ * Utility used to get all the addresses of the network interfaces found on the
+ * system.
+ * 
+ * @author Matteo Merli
+ */
+public class NetworkInterface
+{
+
+	private static Logger log = Logger.getLogger( NetworkInterface.class );
+
+	/**
+	 * Return all the addresses associated with the given interface. If the
+	 * supplied interface name is null, all the addresses from all interfaces
+	 * will be returned.
+	 * 
+	 * @param interfaceName
+	 * @return a set of InetAddress
+	 */
+	public static Set<InetAddress> getAddresses( String interfaceAddress )
+	{
+		Set<InetAddress> addresses = new HashSet<InetAddress>();
+
+		if ( interfaceAddress != null ) {
+			try {
+				InetAddress address = InetAddress.getByName( interfaceAddress );
+				java.net.NetworkInterface networkInterface = java.net.NetworkInterface.getByInetAddress( address);
+				addresses.addAll( getAddresses( networkInterface ) );
+
+			} catch ( Exception e ) {
+				log.fatal( "Cannot register network interface: " + interfaceAddress, e );
+				return null;
+			}
+		} else {
+			// Add all addresses from all interfaces
+
+			Enumeration<java.net.NetworkInterface> interfaces;
+			try {
+				interfaces = java.net.NetworkInterface.getNetworkInterfaces();
+			} catch ( SocketException se ) {
+				log.fatal( "Cannot get the interfaces list." );
+				return null;
+			}
+
+			while ( interfaces.hasMoreElements() ) {
+				addresses.addAll( getAddresses( interfaces.nextElement() ) );
+			}
+		}
+
+		return addresses;
+	}
+
+	private static Set<InetAddress> getAddresses(
+			java.net.NetworkInterface networkInterface )
+	{
+		Set<InetAddress> addresses = new HashSet<InetAddress>();
+		Enumeration<InetAddress> enumeration = networkInterface.getInetAddresses();
+		while ( enumeration.hasMoreElements() ) {
+			addresses.add( enumeration.nextElement() );
+		}
+		return addresses;
+	}
+
+	/**
+	 * Returns an address between a set of addresses. This is used to select an
+	 * address when binding is done on multiple network interface and we need a
+	 * network address as a reference.
+	 * <p>
+	 * For example if we don't specify a particular network interface, the proxy
+	 * will bind on both 127.0.0.1 ::1 and 10.0.0.4 addresses.
+	 * <p>
+	 * The scope of this method is to select the "better" address to be notified
+	 * to clients or servers. This is a guess, for a better solution, just
+	 * provide the interface to bind in the configuration file.
+	 * 
+	 * @param addresses
+	 * @return
+	 */
+	public static InetAddress getBindAddress( Set<InetAddress> addresses )
+	{
+		if ( addresses.size() == 1 )
+			return (InetAddress) addresses.toArray()[0];
+
+		/*
+		 * The rules are: - Ip4 addresses are preferred over Ip6 - Non-loopback
+		 * are preferred over loopback ones
+		 */
+
+		for ( InetAddress address : addresses ) {
+			if ( isIp6Address( address ) && hasIp4Addresses( addresses ) )
+				continue;
+
+			if ( isLoopbackAddress( address ) && hasNonLoopbackAddresses( addresses ) )
+				continue;
+
+			// this is the best guess
+			return address;
+		}
+
+		return null;
+	}
+
+	private static boolean isIp4Address( InetAddress address )
+	{
+		return ( address instanceof Inet4Address );
+	}
+
+	private static boolean isIp6Address( InetAddress address )
+	{
+		return ( address instanceof Inet6Address );
+	}
+
+	private static boolean isLoopbackAddress( InetAddress address )
+	{
+		return ( address.isLoopbackAddress() || address.isLinkLocalAddress() );
+	}
+
+	/**
+	 * @param addresses
+	 *        the address set to test
+	 * @return true if there is at least one IPv4 address
+	 */
+	private static boolean hasIp4Addresses( Set<InetAddress> addresses )
+	{
+		for ( InetAddress address : addresses ) {
+			if ( isIp4Address( address ) )
+				return true;
+		}
+		return false;
+	}
+
+	/**
+	 * @param addresses
+	 *        the address set to test
+	 * @return true if there is at least one address which is not on the
+	 *         loopback interface
+	 */
+	private static boolean hasNonLoopbackAddresses( Set<InetAddress> addresses )
+	{
+		for ( InetAddress address : addresses ) {
+			if ( !isLoopbackAddress( address ) )
+				return true;
+		}
+		return false;
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/lib/NetworkInterface.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -34,6 +34,8 @@
 import rtspproxy.Config;
 import rtspproxy.RdtClientService;
 import rtspproxy.RdtServerService;
+import rtspproxy.RtcpClientService;
+import rtspproxy.RtcpServerService;
 import rtspproxy.RtpClientService;
 import rtspproxy.RtpServerService;
 import rtspproxy.filter.RtspServerFilters;
@@ -58,11 +60,18 @@
 
 	/** Used to save a reference to this handler in the IoSession */
 	protected static final String ATTR = ProxyHandler.class.toString() + "Attr";
-	protected static final String setupUrlATTR = ProxyHandler.class.toString() + "setupUrlATTR";
-	protected static final String clientPortsATTR = ProxyHandler.class.toString() + "clientPortsATTR";
-	protected static final String clientRdtPortATTR = ProxyHandler.class.toString() + "clientRdtPortATTR";
 
+	protected static final String setupUrlATTR = ProxyHandler.class.toString()
+			+ "setupUrlATTR";
+
+	protected static final String clientPortsATTR = ProxyHandler.class.toString()
+			+ "clientPortsATTR";
+
+	protected static final String clientRdtPortATTR = ProxyHandler.class.toString()
+			+ "clientRdtPortATTR";
+
 	private IoSession clientSession = null;
+
 	private IoSession serverSession = null;
 
 	/**
@@ -79,49 +88,49 @@
 	{
 		log.debug( "Pass to server" );
 		if ( message.getHeader( "Session" ) != null ) {
-			ProxySession proxySession = ProxySession.getByClientSessionID( message.getHeader( "Session" ) );
+			ProxySession proxySession = ProxySession.getByClientSessionID( message
+					.getHeader( "Session" ) );
 			if ( proxySession != null ) {
 				// Session is Ok
 				message.setHeader( "Session", proxySession.getServerSessionId() );
 			} else {
 				// Error. The client specified a session ID but it's
 				// not valid
-				sendResponse( clientSession,
-						RtspResponse.errorResponse( RtspCode.SessionNotFound ) );
+				sendResponse( clientSession, RtspResponse
+						.errorResponse( RtspCode.SessionNotFound ) );
 				return;
 			}
 		}
 		if ( serverSession == null && message.getType() == RtspMessage.Type.TypeResponse ) {
 			log.error( "We can't send a response message to an uninitialized serverSide" );
 			return;
-		} else
-			if ( serverSession == null ) {
-				RtspRequest request = (RtspRequest) message;
-				try {
-					connectServerSide( request.getUrl() );
+		} else if ( serverSession == null ) {
+			RtspRequest request = (RtspRequest) message;
+			try {
+				connectServerSide( request.getUrl() );
 
-				} catch ( IOException e ) {
-					log.error( e );
-					// closeAll();
-				} finally {
-					if ( serverSession == null )
-						return;
-				}
+			} catch ( IOException e ) {
+				log.error( e );
+				// closeAll();
+			} finally {
+				if ( serverSession == null )
+					return;
 			}
+		}
 
 		switch ( message.getType() ) {
-			case TypeRequest:
-				serverSession.setAttribute( RtspMessage.lastRequestVerbATTR,
-						( (RtspRequest) message ).getVerb() );
-				sendRequest( serverSession, (RtspRequest) message );
-				break;
+		case TypeRequest:
+			serverSession.setAttribute( RtspMessage.lastRequestVerbATTR,
+					((RtspRequest) message).getVerb() );
+			sendRequest( serverSession, (RtspRequest) message );
+			break;
 
-			case TypeResponse:
-				sendResponse( serverSession, (RtspResponse) message );
-				break;
+		case TypeResponse:
+			sendResponse( serverSession, (RtspResponse) message );
+			break;
 
-			default:
-				log.error( "Message type not valid: " + message.getType() );
+		default:
+			log.error( "Message type not valid: " + message.getType() );
 		}
 	}
 
@@ -129,7 +138,8 @@
 	{
 		log.debug( "Pass to client" );
 		if ( message.getHeader( "Session" ) != null ) {
-			ProxySession proxySession = ProxySession.getByServerSessionID( message.getHeader( "Session" ) );
+			ProxySession proxySession = ProxySession.getByServerSessionID( message
+					.getHeader( "Session" ) );
 			if ( proxySession != null ) {
 				// Session is Ok
 				message.setHeader( "Session", proxySession.getClientSessionId() );
@@ -148,26 +158,26 @@
 				} else {
 					// Error. The client specified a session ID but it's
 					// not valid
-					sendResponse( clientSession,
-							RtspResponse.errorResponse( RtspCode.SessionNotFound ) );
+					sendResponse( clientSession, RtspResponse
+							.errorResponse( RtspCode.SessionNotFound ) );
 					return;
 				}
 			}
 		}
-		
+
 		switch ( message.getType() ) {
-			case TypeRequest:
-				clientSession.setAttribute( RtspMessage.lastRequestVerbATTR,
-						( (RtspRequest) message ).getVerb() );
-				sendRequest( clientSession, (RtspRequest) message );
-				break;
+		case TypeRequest:
+			clientSession.setAttribute( RtspMessage.lastRequestVerbATTR,
+					((RtspRequest) message).getVerb() );
+			sendRequest( clientSession, (RtspRequest) message );
+			break;
 
-			case TypeResponse:
-				sendResponse( clientSession, (RtspResponse) message );
-				break;
+		case TypeResponse:
+			sendResponse( clientSession, (RtspResponse) message );
+			break;
 
-			default:
-				log.error( "Message type not valid: " + message.getType() );
+		default:
+			log.error( "Message type not valid: " + message.getType() );
 		}
 	}
 
@@ -177,7 +187,7 @@
 	 * and server, such as modifying RTP/RTCP port.
 	 * 
 	 * @param request
-	 *        SETUP request message
+	 *            SETUP request message
 	 */
 	public void passSetupRequestToServer( RtspRequest request )
 	{
@@ -186,7 +196,8 @@
 		if ( request.getHeader( "Session" ) != null ) {
 			// The client already specified a session ID.
 			// Let's validate it
-			proxySession = ProxySession.getByClientSessionID( request.getHeader( "Session" ) );
+			proxySession = ProxySession.getByClientSessionID( request
+					.getHeader( "Session" ) );
 			if ( proxySession != null ) {
 				// Session ID is ok
 				request.setHeader( "Session", proxySession.getServerSessionId() );
@@ -194,8 +205,8 @@
 				// Error. The client specified a session ID but it's
 				// not valid
 				log.debug( "Invalid sessionId: " + request.getHeader( "Session" ) );
-				sendResponse( clientSession,
-						RtspResponse.errorResponse( RtspCode.SessionNotFound ) );
+				sendResponse( clientSession, RtspResponse
+						.errorResponse( RtspCode.SessionNotFound ) );
 				return;
 			}
 		}
@@ -203,8 +214,8 @@
 
 		log.debug( "Client Transport:" + request.getHeader( "Transport" ) );
 
-		RtspTransportList rtspTransportList = new RtspTransportList(
-				request.getHeader( "Transport" ) );
+		RtspTransportList rtspTransportList = new RtspTransportList( request
+				.getHeader( "Transport" ) );
 		log.debug( "Parsed:" + rtspTransportList.toString() );
 
 		if ( rtspTransportList.count() == 0 ) {
@@ -214,14 +225,14 @@
 			 * client will have the chance to reformule the request with another
 			 * transports set.
 			 */
-			sendResponse( clientSession,
-					RtspResponse.errorResponse( RtspCode.UnsupportedTransport ) );
+			sendResponse( clientSession, RtspResponse
+					.errorResponse( RtspCode.UnsupportedTransport ) );
 			return;
 		}
 
-		int proxyRtpPort = RtpServerService.getRtpPort();
-		int proxyRtcpPort = RtpServerService.getRtcpPort();
-		int proxyRdtPort = RdtServerService.getPort();
+		int proxyRtpPort = RtpServerService.getInstance().getPort();
+		int proxyRtcpPort = RtcpServerService.getInstance().getPort();
+		int proxyRdtPort = RdtServerService.getInstance().getPort();
 
 		// I'm saving the client Transport header before modifying it,
 		// because I will need to know which port the client will
@@ -236,14 +247,15 @@
 			} else {
 				if ( transport.getTransportProtocol() == TransportProtocol.RTP ) {
 
-					clientSession.setAttribute( clientPortsATTR, transport.getClientPort() );
+					clientSession.setAttribute( clientPortsATTR, transport
+							.getClientPort() );
 					transport.setClientPort( new int[] { proxyRtpPort, proxyRtcpPort } );
 
-				} else
-					if ( transport.getTransportProtocol() == TransportProtocol.RDT ) {
-						clientSession.setAttribute( clientRdtPortATTR, new Integer(transport.getClientPort()[0]) );
-						transport.setClientPort( proxyRdtPort );
-					}
+				} else if ( transport.getTransportProtocol() == TransportProtocol.RDT ) {
+					clientSession.setAttribute( clientRdtPortATTR, new Integer( transport
+							.getClientPort()[0] ) );
+					transport.setClientPort( proxyRdtPort );
+				}
 				log.debug( "Transport Rewritten: " + transport );
 			}
 		}
@@ -264,12 +276,13 @@
 	 * Forward a RTSP SETUP response message to client.
 	 * 
 	 * @param response
-	 *        Setup response message
+	 *            Setup response message
 	 */
 	public void passSetupResponseToClient( RtspResponse response )
 	{
 		// If there isn't yet a proxySession, create a new one
-		ProxySession proxySession = ProxySession.getByServerSessionID( response.getHeader( "Session" ) );
+		ProxySession proxySession = ProxySession.getByServerSessionID( response
+				.getHeader( "Session" ) );
 		if ( proxySession == null ) {
 			proxySession = (ProxySession) clientSession.getAttribute( ProxySession.ATTR );
 			if ( proxySession == null ) {
@@ -283,8 +296,8 @@
 		}
 
 		// Modify transport parameters for the client.
-		RtspTransportList rtspTransportList = new RtspTransportList(
-				response.getHeader( "Transport" ) );
+		RtspTransportList rtspTransportList = new RtspTransportList( response
+				.getHeader( "Transport" ) );
 
 		String netInterface = Config.get( "proxy.client.interface", null );
 
@@ -294,9 +307,8 @@
 		if ( transport.getTransportProtocol() == TransportProtocol.RTP ) {
 
 			// Create a new Track object
-			RtpTrack track = proxySession.addRtpTrack(
-					(String) clientSession.getAttribute( setupUrlATTR ),
-					transport.getSSRC() );
+			RtpTrack track = proxySession.addRtpTrack( (String) clientSession
+					.getAttribute( setupUrlATTR ), transport.getSSRC() );
 
 			// Setting client and server info on the track
 			InetAddress serverAddress = null;
@@ -307,14 +319,17 @@
 					log.warn( "Unknown host: " + transport.getSource() );
 				}
 			} else {
-				serverAddress = ( (InetSocketAddress) serverSession.getRemoteAddress() ).getAddress();
+				serverAddress = ((InetSocketAddress) serverSession.getRemoteAddress())
+						.getAddress();
 			}
 			int[] serverPorts = transport.getServerPort();
 			track.setServerAddress( serverAddress, serverPorts[0], serverPorts[1] );
 
 			InetAddress clientAddress = null;
 			try {
-				clientAddress = Inet4Address.getByName( ( (InetSocketAddress) clientSession.getRemoteAddress() ).getHostName() );
+				clientAddress = Inet4Address
+						.getByName( ((InetSocketAddress) clientSession.getRemoteAddress())
+								.getHostName() );
 			} catch ( UnknownHostException e ) {
 				log.warn( "Unknown host: " + clientSession.getRemoteAddress() );
 			}
@@ -325,11 +340,13 @@
 				log.debug( "Transport is TCP based." );
 			} else {
 				transport.setSSRC( track.getProxySSRC().toHexString() );
-				transport.setServerPort( new int[] { RtpClientService.getRtpPort(),
-						RtpClientService.getRtcpPort() } );
+				int rtpPort = RtpClientService.getInstance().getPort();
+				int rtcpPort = RtcpClientService.getInstance().getPort();
+				transport.setServerPort( new int[] { rtpPort, rtcpPort } );
 				// transport.setClientPort( );
 				try {
-					transport.setSource( InetAddress.getByName( netInterface ).getHostAddress() );
+					transport.setSource( InetAddress.getByName( netInterface )
+							.getHostAddress() );
 				} catch ( UnknownHostException e ) {
 					transport.setSource( netInterface );
 				}
@@ -341,58 +358,65 @@
 				log.debug( "Transport Rewritten: " + transport );
 			}
 
-		} else
-			if ( transport.getTransportProtocol() == TransportProtocol.RDT ) {
+		} else if ( transport.getTransportProtocol() == TransportProtocol.RDT ) {
 
-				// Create a new Track object
-				RdtTrack track = proxySession.addRdtTrack( (String) clientSession.getAttribute( setupUrlATTR ) );
+			// Create a new Track object
+			RdtTrack track = proxySession.addRdtTrack( (String) clientSession
+					.getAttribute( setupUrlATTR ) );
 
-				// Setting client and server info on the track
-				InetAddress serverAddress = null;
-				if ( transport.getSource() != null ) {
-					try {
-						serverAddress = InetAddress.getByName( transport.getSource() );
-					} catch ( UnknownHostException e ) {
-						log.warn( "Unknown host: " + transport.getSource() );
-					}
-				} else {
-					serverAddress = ( (InetSocketAddress) serverSession.getRemoteAddress() ).getAddress();
+			// Setting client and server info on the track
+			InetAddress serverAddress = null;
+			if ( transport.getSource() != null ) {
+				try {
+					serverAddress = InetAddress.getByName( transport.getSource() );
+				} catch ( UnknownHostException e ) {
+					log.warn( "Unknown host: " + transport.getSource() );
 				}
-				int[] serverPorts = transport.getServerPort();
-				track.setServerAddress( serverAddress, serverPorts[0] );
+			} else {
+				serverAddress = ((InetSocketAddress) serverSession.getRemoteAddress())
+						.getAddress();
+			}
+			int[] serverPorts = transport.getServerPort();
+			track.setServerAddress( serverAddress, serverPorts[0] );
 
-				InetAddress clientAddress = null;
+			InetAddress clientAddress = null;
+			try {
+				clientAddress = Inet4Address
+						.getByName( ((InetSocketAddress) clientSession.getRemoteAddress())
+								.getHostName() );
+			} catch ( UnknownHostException e ) {
+				log.warn( "Unknown host: " + clientSession.getRemoteAddress() );
+			}
+			int clientRdtPort = ((Integer) clientSession.getAttribute( clientRdtPortATTR ))
+					.intValue();
+			track.setClientAddress( clientAddress, clientRdtPort );
+
+			if ( transport.getLowerTransport() == RtspTransport.LowerTransport.TCP ) {
+				log.debug( "Transport is TCP based." );
+			} else {
+				int rdtPort = RdtClientService.getInstance().getPort();
+				transport.setServerPort( rdtPort );
 				try {
-					clientAddress = Inet4Address.getByName( ( (InetSocketAddress) clientSession.getRemoteAddress() ).getHostName() );
+					transport.setSource( InetAddress.getByName( netInterface )
+							.getHostAddress() );
 				} catch ( UnknownHostException e ) {
-					log.warn( "Unknown host: " + clientSession.getRemoteAddress() );
+					transport.setSource( netInterface );
 				}
-				int clientRdtPort = ((Integer) clientSession.getAttribute( clientRdtPortATTR ) ).intValue();
-				track.setClientAddress( clientAddress, clientRdtPort );
 
-				if ( transport.getLowerTransport() == RtspTransport.LowerTransport.TCP ) {
-					log.debug( "Transport is TCP based." );
-				} else {
-					transport.setServerPort( RdtClientService.getPort() );
-					try {
-						transport.setSource( InetAddress.getByName( netInterface ).getHostAddress() );
-					} catch ( UnknownHostException e ) {
-						transport.setSource( netInterface );
-					}
+				// Obtaing client specified ports
+				int port = ((Integer) clientSession.getAttribute( clientRdtPortATTR ))
+						.intValue();
+				transport.setClientPort( port );
 
-					// Obtaing client specified ports
-					int port = ((Integer) clientSession.getAttribute( clientRdtPortATTR ) ).intValue();
-					transport.setClientPort( port );
+				log.debug( "Transport Rewritten: " + transport );
+			}
 
-					log.debug( "Transport Rewritten: " + transport );
-				}
+		} else {
+			sendResponse( clientSession, RtspResponse
+					.errorResponse( RtspCode.UnsupportedTransport ) );
+			return;
+		}
 
-			} else {
-				sendResponse( clientSession,
-						RtspResponse.errorResponse( RtspCode.UnsupportedTransport ) );
-				return;
-			}
-
 		response.setHeader( "Session", proxySession.getClientSessionId() );
 		response.setHeader( "Transport", transport.toString() );
 
@@ -405,7 +429,7 @@
 	 * Tries to connect to remote RTSP server.
 	 * 
 	 * @param url
-	 *        the URI of the server
+	 *            the URI of the server
 	 * @throws IOException
 	 */
 	private void connectServerSide( URL url ) throws IOException
@@ -436,8 +460,8 @@
 
 		} catch ( UnresolvedAddressException e ) {
 			log.warn( "Destination unreachable: " + host + ":" + port );
-			sendResponse( clientSession,
-					RtspResponse.errorResponse( RtspCode.DestinationUnreachable ) );
+			sendResponse( clientSession, RtspResponse
+					.errorResponse( RtspCode.DestinationUnreachable ) );
 			clientSession.close();
 			return;
 		}
@@ -462,7 +486,8 @@
 
 		// Remove ProxySession and Track instances
 		if ( clientSession != null ) {
-			ProxySession proxySession = (ProxySession) clientSession.getAttribute( ProxySession.ATTR );
+			ProxySession proxySession = (ProxySession) clientSession
+					.getAttribute( ProxySession.ATTR );
 			if ( proxySession != null )
 				proxySession.close();
 		}
@@ -472,9 +497,9 @@
 	 * Sends an RTSP request message
 	 * 
 	 * @param session
-	 *        current IoSession
+	 *            current IoSession
 	 * @param request
-	 *        the message
+	 *            the message
 	 */
 	private void sendRequest( IoSession session, RtspRequest request )
 	{
@@ -490,9 +515,9 @@
 	 * Sends an RTSP response message
 	 * 
 	 * @param session
-	 *        current IoSession
+	 *            current IoSession
 	 * @param response
-	 *        the message
+	 *            the message
 	 */
 	private void sendResponse( IoSession session, RtspResponse response )
 	{

Modified: trunk/src/main/java/rtspproxy/proxy/track/RdtTrack.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/proxy/track/RdtTrack.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -20,16 +20,18 @@
 	 * client.
 	 */
 	private IoSession rdtClientSession = null;
+
 	private IoSession rdtServerSession = null;
 
 	private int clientRdtPort;
+
 	private int serverRdtPort;
 
 	/**
 	 * Construct a new Track.
 	 * 
 	 * @param url
-	 *        the control name for this track.
+	 *            the control name for this track.
 	 */
 	public RdtTrack( String url )
 	{
@@ -44,7 +46,7 @@
 	 * same (live) track.
 	 * 
 	 * @param packet
-	 *        a buffer containing a RDT packet
+	 *            a buffer containing a RDT packet
 	 */
 	public void forwardRdtToClient( ByteBuffer packet )
 	{
@@ -52,8 +54,8 @@
 		// packet.setSsrc( proxySSRC );
 
 		if ( rdtClientSession == null ) {
-			rdtClientSession = RdtClientService.newRdtSession( new InetSocketAddress(
-					clientAddress, clientRdtPort ) );
+			rdtClientSession = RdtClientService.getInstance().newSession(
+					new InetSocketAddress( clientAddress, clientRdtPort ) );
 		}
 
 		log.debug( "Packet: " + packet );
@@ -65,7 +67,7 @@
 	 * indicated by the server at RDT port.
 	 * 
 	 * @param packet
-	 *        a RDT packet
+	 *            a RDT packet
 	 */
 	public void forwardRdtToServer( ByteBuffer packet )
 	{
@@ -73,15 +75,15 @@
 			InetSocketAddress remoteAddress = new InetSocketAddress( serverAddress,
 					serverRdtPort );
 			log.debug( "Creating RDT session to: " + remoteAddress );
-			rdtServerSession = RdtServerService.newRdtSession( remoteAddress );
+			rdtServerSession = RdtServerService.getInstance().newSession( remoteAddress );
 		}
 
 		// log.debug( "Packet: " + packet );
 		// packet.reset();
 		// log.debug("Packet: " + packet );
-		//  log.debug( "Written bytes1: " + rdtServerSession.getWrittenBytes() );
+		// log.debug( "Written bytes1: " + rdtServerSession.getWrittenBytes() );
 		rdtServerSession.write( packet );
-//		 log.debug( "Written bytes2: " + rdtServerSession.getWrittenBytes() );
+		// log.debug( "Written bytes2: " + rdtServerSession.getWrittenBytes() );
 	}
 
 	/**
@@ -91,9 +93,9 @@
 	 * same (live) track.
 	 * 
 	 * @param serverHost
-	 *        The serverHost to set.
+	 *            The serverHost to set.
 	 * @param rdtpPort
-	 *        the port number used for RDT packets
+	 *            the port number used for RDT packets
 	 */
 	public synchronized void setClientAddress( InetAddress clientAddress, int rdtPort )
 	{
@@ -107,9 +109,9 @@
 	 * Set the address of the server associated with this track.
 	 * 
 	 * @param serverHost
-	 *        The serverHost to set.
+	 *            The serverHost to set.
 	 * @param rdtPort
-	 *        the port number used for RDT packets
+	 *            the port number used for RDT packets
 	 */
 	public synchronized void setServerAddress( InetAddress serverAddress, int rdtPort )
 	{

Modified: trunk/src/main/java/rtspproxy/proxy/track/RtpTrack.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/track/RtpTrack.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/proxy/track/RtpTrack.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -12,23 +12,26 @@
 import org.apache.log4j.Logger;
 import org.apache.mina.common.IoSession;
 
+import rtspproxy.RtcpClientService;
+import rtspproxy.RtcpServerService;
 import rtspproxy.RtpClientService;
 import rtspproxy.RtpServerService;
 import rtspproxy.lib.number.UnsignedInt;
 import rtspproxy.rtp.RtpPacket;
 import rtspproxy.rtp.rtcp.RtcpPacket;
 
-public class RtpTrack extends Track {
-	
+public class RtpTrack extends Track
+{
+
 	private static Logger log = Logger.getLogger( RtpTrack.class );
 
 	/** Maps a server SSRC id to a Track */
 	private static Map<UnsignedInt, RtpTrack> serverSsrcMap = new ConcurrentHashMap<UnsignedInt, RtpTrack>();
-	
+
 	/** Keeps track of the SSRC IDs used by the proxy, to avoid collisions. */
-	private static Set<UnsignedInt> proxySsrcList = Collections.synchronizedSet( new HashSet<UnsignedInt>() );
-	
-	
+	private static Set<UnsignedInt> proxySsrcList = Collections
+			.synchronizedSet( new HashSet<UnsignedInt>() );
+
 	/**
 	 * Get the track by looking at server SSRC id.
 	 * 
@@ -38,39 +41,45 @@
 	{
 		return serverSsrcMap.get( serverSsrc );
 	}
-	
-	
+
 	/** SSRC id given by the server */
 	private UnsignedInt serverSSRC = new UnsignedInt( 0 );
+
 	/** SSRC id selected by the proxy */
 	private UnsignedInt proxySSRC = new UnsignedInt( 0 );
-	
+
 	/**
 	 * Cached references to IoSession objects used to send packets to server and
 	 * client.
 	 */
 	private IoSession rtpServerSession = null;
+
 	private IoSession rtcpServerSession = null;
+
 	private IoSession rtpClientSession = null;
+
 	private IoSession rtcpClientSession = null;
-	
+
 	private int clientRtpPort;
+
 	private int clientRtcpPort;
+
 	private int serverRtpPort;
+
 	private int serverRtcpPort;
-	
+
 	/**
 	 * Construct a new Track.
 	 * 
 	 * @param url
-	 *        the control name for this track.
+	 *            the control name for this track.
 	 */
 	public RtpTrack( String url )
 	{
 		super( url );
 		setProxySSRC( newSSRC() );
 	}
-	
+
 	/**
 	 * @return the SSRC id used byt the proxy
 	 */
@@ -126,7 +135,6 @@
 		serverSsrcMap.put( this.serverSSRC, this );
 	}
 
-	
 	public void setRtcpClientSession( IoSession rtcpClientSession )
 	{
 		this.rtcpClientSession = rtcpClientSession;
@@ -146,13 +154,13 @@
 	{
 		this.rtpServerSession = rtpServerSession;
 	}
-	
+
 	/**
 	 * Forwards a RTP packet to server. The packet will be set to the address
 	 * indicated by the server at RTP (even) port.
 	 * 
 	 * @param packet
-	 *        a RTP packet
+	 *            a RTP packet
 	 */
 	public void forwardRtpToServer( RtpPacket packet )
 	{
@@ -160,8 +168,8 @@
 		packet.setSsrc( proxySSRC );
 
 		if ( rtpServerSession == null )
-			rtpServerSession = RtpServerService.newRtpSession( new InetSocketAddress(
-					serverAddress, serverRtpPort ) );
+			rtpServerSession = RtpServerService.getInstance().newSession(
+					new InetSocketAddress( serverAddress, serverRtpPort ) );
 
 		rtpServerSession.write( packet.toByteBuffer() );
 	}
@@ -171,7 +179,7 @@
 	 * indicated by the server at RTCP (odd) port.
 	 * 
 	 * @param packet
-	 *        a RTCP packet
+	 *            a RTCP packet
 	 */
 	public void forwardRtcpToServer( RtcpPacket packet )
 	{
@@ -179,8 +187,8 @@
 		packet.setSsrc( proxySSRC );
 
 		if ( rtcpServerSession == null )
-			rtcpServerSession = RtpServerService.newRtcpSession( new InetSocketAddress(
-					serverAddress, serverRtcpPort ) );
+			rtcpServerSession = RtcpServerService.getInstance().newSession(
+					new InetSocketAddress( clientAddress, clientRtcpPort ) );
 
 		rtcpServerSession.write( packet.toByteBuffer() );
 	}
@@ -193,7 +201,7 @@
 	 * same (live) track.
 	 * 
 	 * @param packet
-	 *        a RTP packet
+	 *            a RTP packet
 	 */
 	public void forwardRtpToClient( RtpPacket packet )
 	{
@@ -201,9 +209,8 @@
 		packet.setSsrc( proxySSRC );
 
 		if ( rtpClientSession == null ) {
-			rtpClientSession = RtpClientService.newRtpSession( new InetSocketAddress(
-					clientAddress, clientRtpPort ) );
-
+			rtpClientSession = RtpClientService.getInstance().newSession(
+					new InetSocketAddress( clientAddress, clientRtpPort ) );
 		}
 
 		rtpClientSession.write( packet.toByteBuffer() );
@@ -217,7 +224,7 @@
 	 * same (live) track.
 	 * 
 	 * @param packet
-	 *        a RTCP packet
+	 *            a RTCP packet
 	 */
 	public void forwardRtcpToClient( RtcpPacket packet )
 	{
@@ -225,14 +232,12 @@
 		packet.setSsrc( proxySSRC );
 
 		if ( rtcpClientSession == null ) {
-			rtcpClientSession = RtpClientService.newRtcpSession( new InetSocketAddress(
-					clientAddress, clientRtcpPort ) );
-
+			rtcpClientSession = RtcpClientService.getInstance().newSession(
+					new InetSocketAddress( clientAddress, clientRtcpPort ) );
 		}
 
 		rtcpClientSession.write( packet.toByteBuffer() );
 	}
-	
 
 	/**
 	 * Set the address of the server associated with this track.
@@ -241,11 +246,11 @@
 	 * same (live) track.
 	 * 
 	 * @param serverHost
-	 *        The serverHost to set.
+	 *            The serverHost to set.
 	 * @param rtpPort
-	 *        the port number used for RTP packets
+	 *            the port number used for RTP packets
 	 * @param rtcpPort
-	 *        the port number used for RTCP packets
+	 *            the port number used for RTCP packets
 	 */
 	public synchronized void setClientAddress( InetAddress clientAddress, int rtpPort,
 			int rtcpPort )
@@ -262,11 +267,11 @@
 	 * Set the address of the server associated with this track.
 	 * 
 	 * @param serverHost
-	 *        The serverHost to set.
+	 *            The serverHost to set.
 	 * @param rtpPort
-	 *        the port number used for RTP packets
+	 *            the port number used for RTP packets
 	 * @param rtcpPort
-	 *        the port number used for RTCP packets
+	 *            the port number used for RTCP packets
 	 */
 	public synchronized void setServerAddress( InetAddress serverAddress, int rtpPort,
 			int rtcpPort )
@@ -278,7 +283,7 @@
 		serverAddressMap.put( new InetSocketAddress( serverAddress, rtpPort ), this );
 		serverAddressMap.put( new InetSocketAddress( serverAddress, rtcpPort ), this );
 	}
-	
+
 	public synchronized void close()
 	{
 		if ( serverSSRC != null )
@@ -294,7 +299,6 @@
 		log.debug( "Closed track " + url );
 	}
 
-	
 	// ////////////////
 
 	/** Used in SSRC id generation */

Modified: trunk/src/main/java/rtspproxy/proxy/track/Track.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/track/Track.java	2005-12-19 19:17:28 UTC (rev 349)
+++ trunk/src/main/java/rtspproxy/proxy/track/Track.java	2005-12-19 19:27:06 UTC (rev 350)
@@ -48,24 +48,24 @@
 	 * Control Url of the track. This is the url handle given by the server to
 	 * control different tracks in a RTSP session.
 	 */
-	protected
-	String url;
+	protected String url;
 
 	/**
-	 * IP address and RTP/RTCP ports for client and server.
+	 * IP address of client and server.
 	 * <p>
 	 * TODO: When using reflection, there will be more than one connected client
 	 * at a time to the same Track. So the track should keep a list of connected
 	 * clients and forward packets to each of them.
 	 */
 	protected InetAddress clientAddress;
+
 	protected InetAddress serverAddress;
 
 	/**
 	 * Construct a new Track.
 	 * 
 	 * @param url
-	 *        the control name for this track.
+	 *            the control name for this track.
 	 */
 	public Track( String url )
 	{
@@ -97,7 +97,6 @@
 
 	// /// Member methods
 
-
 	public String getUrl()
 	{
 		return url;
@@ -107,7 +106,7 @@
 	{
 		this.url = url;
 	}
-	
+
 	public abstract void close();
 
 	public String toString()



From merlimat at berlios.de  Mon Dec 19 20:32:22 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Mon, 19 Dec 2005 20:32:22 +0100
Subject: [Rtspproxy-devel] r351 - trunk/src/main/java/rtspproxy
Message-ID: <200512191932.jBJJWMZ5012401@sheep.berlios.de>

Author: merlimat
Date: 2005-12-19 20:32:18 +0100 (Mon, 19 Dec 2005)
New Revision: 351

Modified:
   trunk/src/main/java/rtspproxy/Reactor.java
Log:
* Totally refactored the Service code.


Modified: trunk/src/main/java/rtspproxy/Reactor.java
===================================================================
--- trunk/src/main/java/rtspproxy/Reactor.java	2005-12-19 19:27:06 UTC (rev 350)
+++ trunk/src/main/java/rtspproxy/Reactor.java	2005-12-19 19:32:18 UTC (rev 351)
@@ -30,12 +30,6 @@
 
 	private static ProxyServiceRegistry registry = new ProxyServiceRegistry();
 
-	private static ProxyService rtspService;
-	private static ProxyService rtpClientService;
-	private static ProxyService rtpServerService;
-	private static ProxyService rdtClientService;
-	private static ProxyService rdtServerService;
-
 	private static boolean isStandalone = false;
 
 	public static void setStandalone( boolean standalone )
@@ -48,40 +42,36 @@
 	 */
 	static public void start() throws Exception
 	{
-		rtspService = new RtspService();
+		ProxyService rtspService = new RtspService();
 		rtspService.start();
 
-		rtpClientService = new RtpClientService();
+		ProxyService rtpClientService = new RtpClientService();
 		rtpClientService.start();
 
-		rtpServerService = new RtpServerService();
+		ProxyService rtcpClientService = new RtcpClientService();
+		rtcpClientService.start();
+
+		ProxyService rtpServerService = new RtpServerService();
 		rtpServerService.start();
 		
-		rdtClientService = new RdtClientService();
+		ProxyService rtcpServerService = new RtcpServerService();
+		rtcpServerService.start();
+
+		ProxyService rdtClientService = new RdtClientService();
 		rdtClientService.start();
-		
-		rdtServerService = new RdtServerService();
+
+		ProxyService rdtServerService = new RdtServerService();
 		rdtServerService.start();
 	}
 
 	static public void stop()
 	{
 		try {
-			// registry.unbindAll();
-			if ( rtspService != null )
-				rtspService.stop();
-			if ( rtpClientService != null )
-				rtpClientService.stop();
-			if ( rtpServerService != null )
-				rtpServerService.stop();
-			if ( rdtClientService != null )
-				rdtClientService.stop();
-			if ( rdtServerService != null )
-				rdtServerService.stop();
+			registry.unbindAll();
 		} catch ( Exception e ) {
 			log.debug( "Error shutting down: " + e );
 		}
-		
+
 		log.info( "Shutdown completed" );
 
 		if ( isStandalone )



From rbieniek at berlios.de  Tue Dec 20 17:58:47 2005
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Tue, 20 Dec 2005 17:58:47 +0100
Subject: [Rtspproxy-devel] r352 - in trunk: . src/changes
Message-ID: <200512201658.jBKGwla6011957@sheep.berlios.de>

Author: rbieniek
Date: 2005-12-20 17:58:28 +0100 (Tue, 20 Dec 2005)
New Revision: 352

Modified:
   trunk/pom.xml
   trunk/src/changes/changes.xml
Log:
- added assembly descriptor in POM, thus making maven build working again.
- bumped version number in changes.xml, thus making maven build working again.


Modified: trunk/pom.xml
===================================================================
--- trunk/pom.xml	2005-12-19 19:32:18 UTC (rev 351)
+++ trunk/pom.xml	2005-12-20 16:58:28 UTC (rev 352)
@@ -131,7 +131,6 @@
 					<showWarnings>true</showWarnings>
 				</configuration>
 			</plugin>
-<!-- 
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-assembly-plugin</artifactId>
@@ -140,7 +139,7 @@
 						src/resources/release/default.xml
 					</descriptor>
 				</configuration>
-			</plugin> -->
+			</plugin>
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-site-plugin</artifactId>

Modified: trunk/src/changes/changes.xml
===================================================================
--- trunk/src/changes/changes.xml	2005-12-19 19:32:18 UTC (rev 351)
+++ trunk/src/changes/changes.xml	2005-12-20 16:58:28 UTC (rev 352)
@@ -6,6 +6,9 @@
 	</properties>
 	<body>
 
+		<release version="3.0-ALPHA3-SNAPSHOT" date="2005-12-20">
+		</release>
+
 		<release version="3.0-ALPHA2" date="2005-12-08">
 			<action dev="merlimat" type="add">
 				Added preliminary implementation of the IP address and



From merlimat at berlios.de  Tue Dec 20 21:18:34 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 20 Dec 2005 21:18:34 +0100
Subject: [Rtspproxy-devel] r353 - trunk/src/main/java/rtspproxy/rtsp
Message-ID: <200512202018.jBKKIYJK032458@sheep.berlios.de>

Author: merlimat
Date: 2005-12-20 21:18:30 +0100 (Tue, 20 Dec 2005)
New Revision: 353

Modified:
   trunk/src/main/java/rtspproxy/rtsp/RtspResponse.java
Log:
Set common headers in pre-built error messages.

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspResponse.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspResponse.java	2005-12-20 16:58:28 UTC (rev 352)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspResponse.java	2005-12-20 20:18:30 UTC (rev 353)
@@ -120,6 +120,7 @@
 	{
 		RtspResponse response = new RtspResponse();
 		response.setCode( errorCode );
+		response.setCommonHeaders();
 		return response;
 	}
 



From merlimat at berlios.de  Tue Dec 20 21:23:13 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 20 Dec 2005 21:23:13 +0100
Subject: [Rtspproxy-devel] r355 - in trunk/src/main/java/rtspproxy: filter filter/authentication filter/authentication/scheme filter/ipaddress lib
Message-ID: <200512202023.jBKKNDPk000231@sheep.berlios.de>

Author: merlimat
Date: 2005-12-20 21:23:02 +0100 (Tue, 20 Dec 2005)
New Revision: 355

Added:
   trunk/src/main/java/rtspproxy/filter/authentication/scheme/DigestAuthentication.java
   trunk/src/main/java/rtspproxy/lib/StringUtil.java
Modified:
   trunk/src/main/java/rtspproxy/filter/RtspFilters.java
   trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
   trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationProvider.java
   trunk/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java
   trunk/src/main/java/rtspproxy/filter/authentication/scheme/AuthenticationScheme.java
   trunk/src/main/java/rtspproxy/filter/authentication/scheme/BasicAuthentication.java
   trunk/src/main/java/rtspproxy/filter/authentication/scheme/Credentials.java
   trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java
   trunk/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java
Log:
* Switched filter code to new config system
* Implemented Digest authentication

Modified: trunk/src/main/java/rtspproxy/filter/RtspFilters.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/RtspFilters.java	2005-12-20 20:20:43 UTC (rev 354)
+++ trunk/src/main/java/rtspproxy/filter/RtspFilters.java	2005-12-20 20:23:02 UTC (rev 355)
@@ -26,8 +26,8 @@
 import org.apache.mina.filter.codec.ProtocolDecoder;
 import org.apache.mina.filter.codec.ProtocolEncoder;
 
-import rtspproxy.Config;
 import rtspproxy.Reactor;
+import rtspproxy.config.Config;
 import rtspproxy.filter.authentication.AuthenticationFilter;
 import rtspproxy.filter.ipaddress.IpAddressFilter;
 import rtspproxy.filter.rewrite.RequestUrlRewritingImpl;
@@ -47,6 +47,7 @@
 
 		// Decoders can be shared
 		private ProtocolEncoder rtspEncoder = new RtspEncoder();
+
 		private ProtocolDecoder rtspDecoder = new RtspDecoder();
 
 		public ProtocolEncoder getEncoder()
@@ -64,6 +65,7 @@
 
 	// These filters are instanciated only one time, when requested
 	private static IpAddressFilter ipAddressFilter = null;
+
 	private static AuthenticationFilter authenticationFilter = null;
 
 	/**
@@ -75,8 +77,7 @@
 	 */
 	protected void addIpAddressFilter( IoFilterChain chain )
 	{
-		boolean enableIpAddressFilter = Config.getBoolean(
-				"proxy.filter.ipaddress.enable", false );
+		boolean enableIpAddressFilter = Config.proxyFilterIpaddressEnable.getValue();
 
 		if ( enableIpAddressFilter ) {
 			if ( ipAddressFilter == null )
@@ -99,8 +100,8 @@
 	 */
 	protected void addAuthenticationFilter( IoFilterChain chain )
 	{
-		boolean enableAuthenticationFilter = Config.getBoolean(
-				"proxy.filter.authentication.enable", false );
+		boolean enableAuthenticationFilter = Config.proxyFilterAuthenticationEnable
+				.getValue();
 
 		if ( enableAuthenticationFilter ) {
 			if ( authenticationFilter == null )
@@ -111,9 +112,9 @@
 
 	protected void addRewriteFilter( IoFilterChain chain )
 	{
-		// TODO: move this to RtspFilters
-		String rewritingFilter = Config.get(
-				"filter.requestUrlRewriting.implementationClass", null );
+		// TODO: use different parameters..
+		String rewritingFilter = null; //Config.get(
+				//"filter.requestUrlRewriting.implementationClass", null );
 
 		try {
 			if ( rewritingFilter != null )

Modified: trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java	2005-12-20 20:20:43 UTC (rev 354)
+++ trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java	2005-12-20 20:23:02 UTC (rev 355)
@@ -18,17 +18,20 @@
 
 package rtspproxy.filter.authentication;
 
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+
 import org.apache.log4j.Logger;
-import org.apache.mina.common.ByteBuffer;
 import org.apache.mina.common.IoFilterAdapter;
 import org.apache.mina.common.IoSession;
-import org.apache.mina.common.WriteFuture;
 
-import rtspproxy.Config;
 import rtspproxy.Reactor;
+import rtspproxy.config.Config;
 import rtspproxy.filter.authentication.scheme.AuthenticationScheme;
 import rtspproxy.filter.authentication.scheme.BasicAuthentication;
 import rtspproxy.filter.authentication.scheme.Credentials;
+import rtspproxy.filter.authentication.scheme.DigestAuthentication;
 import rtspproxy.rtsp.RtspCode;
 import rtspproxy.rtsp.RtspMessage;
 import rtspproxy.rtsp.RtspRequest;
@@ -41,23 +44,15 @@
 {
 
 	private static Logger log = Logger.getLogger( AuthenticationFilter.class );
-	
+
 	private static final String ATTR = AuthenticationFilter.class.toString() + "Attr";
 
-	/** Different authentication schemes implementation */
-	private static AuthenticationScheme[] schemes = { new BasicAuthentication() };
+	private static final Map<String, Class> schemeRegistry = new HashMap<String, Class>();
 
-	/** Contains a comma-separated list of the scheme names. */
-	private static String schemesString;
-
 	static {
-		// Pre-fill the scheme names
-		schemesString = new String();
-		for ( int i = 0; i < schemes.length; i++ ) {
-			schemesString += schemes[i].getName();
-			if ( i < schemes.length - 1 )
-				schemesString += ", ";
-		}
+		// Fill in known schemes
+		schemeRegistry.put( "basic", BasicAuthentication.class );
+		schemeRegistry.put( "digest", DigestAuthentication.class );
 	}
 
 	/**
@@ -65,7 +60,8 @@
 	 */
 	private AuthenticationProvider provider;
 
-	private String realm;
+	/** Different authentication schemes implementation */
+	private AuthenticationScheme scheme = null;
 
 	/**
 	 * Construct a new AuthenticationFilter. Looks at the configuration to load
@@ -75,8 +71,7 @@
 	{
 		// Check which backend implementation to use
 		// Default is plain-text implementation
-		String className = Config.get( "proxy.filter.authentication.implementationClass",
-				"rtspproxy.filter.authentication.PlainTextAuthenticationProvider" );
+		String className = Config.proxyFilterAuthenticationImplementationClass.getValue();
 
 		Class providerClass;
 		try {
@@ -114,15 +109,32 @@
 			return;
 		}
 
-		realm = "RtspProxy " + Config.get( "proxy.rtsp.interface", "" );
+		// Validate the choosen authentication scheme
+		String schemeName = Config.proxyFilterAuthenticationScheme.getValue();
+		Class schemeClass = schemeRegistry.get( schemeName.toLowerCase() );
+		if ( schemeClass == null ) {
+			// scheme not found
+			log.fatal( "Authentication Scheme not found: " + schemeName
+					+ ". Valid values are: "
+					+ Arrays.toString( schemeRegistry.keySet().toArray() ) );
+			Reactor.stop();
+			return;
+		}
 
-		log.info( "Using AuthenticationFilter (" + className + ")" );
+		// Instanciate the selected scheme
+		try {
+			scheme = (AuthenticationScheme) schemeClass.newInstance();
+		} catch ( Exception e ) {
+		}
+
+		log.info( "Using AuthenticationFilter " + scheme.getName() + " (" + className
+				+ ")" );
 	}
 
 	public void messageReceived( NextFilter nextFilter, IoSession session, Object message )
 			throws Exception
 	{
-		if ( !( message instanceof RtspRequest ) ) {
+		if ( !(message instanceof RtspRequest) ) {
 			// Shouldn't happen
 			log.warn( "Object message is not a RTSP message" );
 			return;
@@ -134,49 +146,53 @@
 			nextFilter.messageReceived( session, message );
 		}
 
-		String authString = ( (RtspMessage) message ).getHeader( "Proxy-Authorization" );
+		String authString = ((RtspMessage) message).getHeader( "Proxy-Authorization" );
 		if ( authString == null ) {
 			log.debug( "RTSP message: \n" + message );
-			RtspResponse response = RtspResponse.errorResponse( RtspCode.ProxyAuthenticationRequired );
-			response.setHeader( "Proxy-Authenticate", schemesString + " realm=\"" + realm
-					+ "\"" );
+			RtspResponse response = RtspResponse
+					.errorResponse( RtspCode.ProxyAuthenticationRequired );
+			response.setHeader( "Proxy-Authenticate", scheme.getName() + " "
+					+ scheme.getChallenge() );
 
-			// TODO: I should be able to send a RtspMessage here using the
-			// already provided encoder.
-			WriteFuture written = session.write( response );
-			// Why have I to wait here????
-			written.join();
-			// session.close();
+			log.debug( "Sending RTSP message: \n" + response );
+
+			session.write( response );
 			return;
 		}
 
-		AuthenticationScheme scheme = getAuthenticationScheme( authString );
-		if ( scheme == null ) {
+		if ( !validateAuthenticationScheme( authString ) ) {
 			RtspResponse response = RtspResponse.errorResponse( RtspCode.BadRequest );
 
-			// TODO: I should be able to send a RtspMessage here using the
-			// already provided encoder.
-			WriteFuture written = session.write( response );
-			// Why have I to wait here????
-			written.join();
-			// session.close();
+			session.write( response );
 			return;
 		}
 
+		log.debug( "RTSP message: \n" + message );
+
 		// Check the authentication credentials
-		Credentials credentials = scheme.getCredentials( authString );
-		if ( credentials == null || provider.isAuthenticated( credentials ) == false ) {
-			RtspResponse response = RtspResponse.errorResponse( RtspCode.Unauthorized );
+		Credentials credentials = scheme.getCredentials( (RtspMessage) message );
 
-			// TODO: I should be able to send a RtspMessage here using the
-			// already provided encoder.
-			WriteFuture written = session.write( ByteBuffer.wrap( response.toString().getBytes() ) );
-			// Why have I to wait here????
-			written.join();
-			session.close();
+		boolean authenticationOk = false;
+		if ( credentials != null ) {
+			String password = provider.getPassword( credentials.getUserName() );
+			if ( password != null )
+				if ( scheme.computeAuthentication( credentials, password ) == true )
+					authenticationOk = true;
+		}
+
+		if ( !authenticationOk ) {
+			log.warn( "Authentication failed for user: " + credentials );
+			RtspResponse response = RtspResponse
+					.errorResponse( RtspCode.ProxyAuthenticationRequired );
+			response.setHeader( "Proxy-Authenticate", scheme.getName() + " "
+					+ scheme.getChallenge() );
+
+			session.write( response );
 			return;
 		}
 
+		log.debug( "Authentication succesfull for user: " + credentials );
+
 		/*
 		 * Mark the session with an "authenticated" attribute. This will prevent
 		 * the check for the credentials for every message received.
@@ -193,23 +209,21 @@
 	 * @param authString
 	 * @return
 	 */
-	private static AuthenticationScheme getAuthenticationScheme( String authString )
+	private boolean validateAuthenticationScheme( String authString )
 	{
 		String schemeName;
 		try {
 			schemeName = authString.split( " " )[0];
 		} catch ( IndexOutOfBoundsException e ) {
 			// Malformed auth string
-			return null;
+			return false;
 		}
 
-		for ( int i = 0; i < schemes.length; i++ ) {
-			if ( schemeName.equalsIgnoreCase( schemes[i].getName() ) )
-				return schemes[i];
-		}
+		if ( schemeName.equalsIgnoreCase( scheme.getName() ) )
+			return true;
 
 		// Scheme not valid
-		return null;
+		return false;
 	}
 
 }

Modified: trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationProvider.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationProvider.java	2005-12-20 20:20:43 UTC (rev 354)
+++ trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationProvider.java	2005-12-20 20:23:02 UTC (rev 355)
@@ -53,4 +53,6 @@
 	 *         wrong.
 	 */
 	public boolean isAuthenticated( Credentials credentials );
+	
+	public String getPassword( String username );
 }

Modified: trunk/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java	2005-12-20 20:20:43 UTC (rev 354)
+++ trunk/src/main/java/rtspproxy/filter/authentication/PlainTextAuthenticationProvider.java	2005-12-20 20:23:02 UTC (rev 355)
@@ -26,8 +26,8 @@
 
 import org.apache.log4j.Logger;
 
-import rtspproxy.Config;
 import rtspproxy.Reactor;
+import rtspproxy.config.Config;
 import rtspproxy.filter.authentication.scheme.Credentials;
 
 /**
@@ -43,10 +43,8 @@
 	public void init() throws Exception
 	{
 		// Load users from file
-		String fileName = Config.getHome()
-				+ File.separator
-				+ Config.get( "proxy.filter.authentication.text.file", "conf" + File.separator
-						+ "users.txt" );
+		String fileName = Config.getHome() + File.separator
+				+ Config.proxyFilterAuthenticationTextFile.getValue();
 
 		try {
 			usersDb.load( new FileInputStream( new File( fileName ) ) );
@@ -68,6 +66,11 @@
 	{
 		// Do nothing
 	}
+	
+	public String getPassword( String username )
+	{
+		return usersDb.getProperty( username );
+	}
 
 	public boolean isAuthenticated( Credentials credentials )
 	{

Modified: trunk/src/main/java/rtspproxy/filter/authentication/scheme/AuthenticationScheme.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/scheme/AuthenticationScheme.java	2005-12-20 20:20:43 UTC (rev 354)
+++ trunk/src/main/java/rtspproxy/filter/authentication/scheme/AuthenticationScheme.java	2005-12-20 20:23:02 UTC (rev 355)
@@ -18,6 +18,8 @@
 
 package rtspproxy.filter.authentication.scheme;
 
+import rtspproxy.rtsp.RtspMessage;
+
 /**
  * Base interface for diverse authentication schemes such as "Basic", "Digest"
  * and possibly others.
@@ -31,7 +33,22 @@
 	 * @return the name of the authentication scheme.
 	 */
 	public String getName();
-	
-	public Credentials getCredentials( String authString );
 
+	/**
+	 * Constructs a Credentials object from the scheme-specific authentication
+	 * string.
+	 * 
+	 * @param authString
+	 *            the authentication string
+	 * @return a new Credentials object
+	 */
+	public Credentials getCredentials( RtspMessage message );
+
+	/**
+	 * @return the challenge string to be sent to client
+	 */
+	public String getChallenge();
+
+	public boolean computeAuthentication( Credentials credentials, String storedPassword );
+
 }
\ No newline at end of file

Modified: trunk/src/main/java/rtspproxy/filter/authentication/scheme/BasicAuthentication.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/scheme/BasicAuthentication.java	2005-12-20 20:20:43 UTC (rev 354)
+++ trunk/src/main/java/rtspproxy/filter/authentication/scheme/BasicAuthentication.java	2005-12-20 20:23:02 UTC (rev 355)
@@ -20,7 +20,10 @@
 
 import org.apache.log4j.Logger;
 
+import rtspproxy.RtspService;
 import rtspproxy.lib.Base64;
+import rtspproxy.lib.StringUtil;
+import rtspproxy.rtsp.RtspMessage;
 
 /**
  * Implementation of the Basic authentication scheme.
@@ -32,36 +35,56 @@
 
 	private static Logger log = Logger.getLogger( BasicAuthentication.class );
 
+	private String realm;
+
+	public BasicAuthentication()
+	{
+		// Initiazialize the realm string
+		realm = "realm=\"RtspProxy @ "
+				+ RtspService.getInstance().getAddress().getHostAddress() + "\"";
+	}
+
 	public String getName()
 	{
 		return "Basic";
 	}
 
-	public Credentials getCredentials( String authString )
+	public Credentials getCredentials( RtspMessage message )
 	{
 		String username;
 		String password;
 
+		String authString = message.getHeader( "Proxy-Authorization" );
+
 		try {
 			// authString = Basic [base64 data]
 			authString = authString.split( " " )[1];
 			// Basic scheme credential are BASE64 encoded.
 			byte[] decBytes = Base64.decode( authString );
-			StringBuilder sb = new StringBuilder();
-			for ( byte b : decBytes )
-				sb.append( (char)b );
-			String auth = sb.toString();
+			String auth = StringUtil.toString( decBytes );
 
 			log.debug( "auth: " + auth );
 			username = auth.split( ":", 2 )[0];
 			password = auth.split( ":", 2 )[1];
 			log.debug( "username=" + username + " - password=" + password );
 		} catch ( Exception e ) {
-			log.info( "Malformed authString: " + authString );
+			log.warn( "Malformed authString: " + authString );
 			return null;
 		}
 
 		return new Credentials( username, password );
 	}
 
+	public String getChallenge()
+	{
+		// The Basic authentication challenge is simply composed of the Realm
+		return realm;
+	}
+
+	public boolean computeAuthentication( Credentials credentials, String storedPassword )
+	{
+		// In basic authentication the password is supplied in clear text
+		return storedPassword.equals( credentials.getPassword() );
+	}
+
 }

Modified: trunk/src/main/java/rtspproxy/filter/authentication/scheme/Credentials.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/scheme/Credentials.java	2005-12-20 20:20:43 UTC (rev 354)
+++ trunk/src/main/java/rtspproxy/filter/authentication/scheme/Credentials.java	2005-12-20 20:23:02 UTC (rev 355)
@@ -26,9 +26,14 @@
 public class Credentials
 {
 
-	private String userName;
-	private String password;
+	protected String userName;
 
+	protected String password;
+	
+	public Credentials()
+	{
+	}
+
 	public Credentials( String userName, String password )
 	{
 		this.userName = userName;
@@ -45,7 +50,7 @@
 
 	/**
 	 * @param password
-	 *        The password to set.
+	 *            The password to set.
 	 */
 	public void setPassword( String password )
 	{
@@ -62,10 +67,15 @@
 
 	/**
 	 * @param userName
-	 *        The userName to set.
+	 *            The userName to set.
 	 */
 	public void setUserName( String userName )
 	{
 		this.userName = userName;
 	}
+
+	public String toString()
+	{
+		return "(" + userName + ":" + password + ")";
+	}
 }

Added: trunk/src/main/java/rtspproxy/filter/authentication/scheme/DigestAuthentication.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/scheme/DigestAuthentication.java	2005-12-20 20:20:43 UTC (rev 354)
+++ trunk/src/main/java/rtspproxy/filter/authentication/scheme/DigestAuthentication.java	2005-12-20 20:23:02 UTC (rev 355)
@@ -0,0 +1,318 @@
+package rtspproxy.filter.authentication.scheme;
+
+import static rtspproxy.lib.StringUtil.getStringMap;
+import static rtspproxy.lib.StringUtil.quote;
+import static rtspproxy.lib.StringUtil.toByteArray;
+import static rtspproxy.lib.StringUtil.toHexString;
+
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.Map;
+import java.util.Random;
+
+import org.apache.log4j.Logger;
+
+import rtspproxy.RtspService;
+import rtspproxy.lib.number.UnsignedLong;
+import rtspproxy.rtsp.RtspMessage;
+import rtspproxy.rtsp.RtspRequest;
+
+public class DigestAuthentication implements AuthenticationScheme
+{
+
+	private static Logger log = Logger.getLogger( DigestAuthentication.class );
+
+	/** This is the value of the validity of a challenge response. */
+	private static final int NONCE_TIMEOUT = 60 * 5; // 5 minutes
+
+	private UnsignedLong privateKey;
+
+	private String realm;
+
+	private MessageDigest md5;
+
+	public DigestAuthentication()
+	{
+		// Generate the private key
+		Random random = new Random();
+		privateKey = new UnsignedLong( random );
+
+		try {
+			md5 = MessageDigest.getInstance( "MD5" );
+		} catch ( NoSuchAlgorithmException e ) {
+		}
+
+		// Initiazialize the realm string
+		realm = "realm="
+				+ quote( "RtspProxy@"
+						+ RtspService.getInstance().getAddress().getHostAddress() );
+	}
+
+	public String getName()
+	{
+		return "Digest";
+	}
+
+	public Credentials getCredentials( RtspMessage message )
+	{
+		String authString = message.getHeader( "Proxy-Authorization" );
+		authString = authString.split( " " )[1];
+		Map<String, String> params = getStringMap( authString );
+		if ( params == null )
+			return null;
+
+		String username = params.get( "username" );
+		String response = params.get( "response" );
+		String realm = params.get( "realm" );
+		String nonce = params.get( "nonce" );
+		String uri = params.get( "uri" );
+		String cnonce = params.get( "cnonce" );
+		String nc = params.get( "nc" );
+		if ( username == null || response == null || realm == null || nonce == null
+				|| uri == null || cnonce == null || nc == null )
+			return null;
+
+		// Check the validity of the nonce
+		String sTimeStamp = nonce.substring( 0, 16 );
+		long timestamp = Long.valueOf( sTimeStamp, 16 );
+		long current = System.currentTimeMillis();
+		long diff = current - timestamp;
+		log.debug( "Time diff: " + ((float)diff / 1000) + " sec" );
+		if ( diff < 0 || diff > NONCE_TIMEOUT * 1000 )
+			// Timeout excedeed
+			return null;
+
+		DigestCredentials credentials = new DigestCredentials();
+		credentials.setUserName( username );
+		credentials.setResponse( response );
+		credentials.setRealm( realm );
+		credentials.setNonce( nonce );
+		credentials.setUri( uri );
+		credentials.setMethod( ((RtspRequest) message).getVerbString() );
+		credentials.setCnonce( cnonce );
+		credentials.setNc( nc );
+
+		return credentials;
+	}
+
+	public String getChallenge()
+	{
+		StringBuilder challenge = new StringBuilder();
+		challenge.append( realm ).append( "," );
+		challenge.append( "nonce=" ).append( quote( newNonce() ) );
+		challenge.append( "qop=auth," );
+		challenge.append( "algorithm=MD5" );
+		return challenge.toString();
+	}
+
+	/**
+	 * Generate a new nonce, defined as
+	 * <code>time-stamp H(time-stamp ":" private-key)</code>
+	 * 
+	 * encoded in Base64.
+	 * 
+	 * @return the nonce
+	 */
+	private String newNonce()
+	{
+		UnsignedLong timestamp = new UnsignedLong( System.currentTimeMillis() );
+
+		byte[] firstPart = null;
+		synchronized ( md5 ) {
+			md5.update( timestamp.getBytes() );
+			md5.update( (byte) ':' );
+			md5.update( privateKey.getBytes() );
+			firstPart = md5.digest();
+		}
+
+		return toHexString( timestamp.getBytes() ) + toHexString( firstPart );
+	}
+
+	public boolean computeAuthentication( Credentials credentials, String storedPassword )
+	{
+		if ( !(credentials instanceof DigestCredentials) )
+			return false;
+
+		// response = KD ( H(A1), unq(nonce-value) ":" H(A2) )
+		// A1 = unq(username-value) ":" unq(realm-value) ":" passwd
+		// A2 = Method ":" digest-uri-value
+
+		DigestCredentials creds = (DigestCredentials) credentials;
+		String A1 = creds.getUserName() + ":" + creds.getRealm() + ":" + storedPassword;
+		String A2 = creds.getMethod() + ":" + creds.getUri();
+
+		byte[] response;
+		synchronized ( md5 ) {
+			md5.update( toByteArray( A1 ) );
+			byte[] HA1 = md5.digest();
+			md5.update( toByteArray( A2 ) );
+			byte[] HA2 = md5.digest();
+
+			String sHA1 = toHexString( HA1 );
+			String sHA2 = toHexString( HA2 );
+
+			md5.update( toByteArray( sHA1 ) );
+			md5.update( (byte) ':' );
+			md5.update( toByteArray( creds.getNonce() ) );
+			md5.update( (byte) ':' );
+			md5.update( toByteArray( creds.getNc() ) );
+			md5.update( (byte) ':' );
+			md5.update( toByteArray( creds.getCnonce() ) );
+			md5.update( (byte) ':' );
+			md5.update( toByteArray( "auth" ) );
+			md5.update( (byte) ':' );
+			md5.update( toByteArray( sHA2 ) );
+			response = md5.digest();
+		}
+
+		String expectedResponse = toHexString( response );
+		log.debug( "Expected: " + expectedResponse );
+		log.debug( "Got:      " + creds.getResponse() );
+		return expectedResponse.equals( creds.getResponse() );
+	}
+
+	/**
+	 * Specialized credentials class that holds all the relevant digest data.
+	 */
+	private static class DigestCredentials extends Credentials
+	{
+		private String response;
+
+		private String realm;
+
+		private String nonce;
+
+		private String uri;
+
+		private String method;
+
+		private String cnonce;
+
+		private String nc;
+
+		/**
+		 * @return Returns the nonce.
+		 */
+		public String getNonce()
+		{
+			return nonce;
+		}
+
+		/**
+		 * @param nonce
+		 *            The nonce to set.
+		 */
+		public void setNonce( String nonce )
+		{
+			this.nonce = nonce;
+		}
+
+		/**
+		 * @return Returns the realm.
+		 */
+		public String getRealm()
+		{
+			return realm;
+		}
+
+		/**
+		 * @param realm
+		 *            The realm to set.
+		 */
+		public void setRealm( String realm )
+		{
+			this.realm = realm;
+		}
+
+		/**
+		 * @return Returns the response.
+		 */
+		public String getResponse()
+		{
+			return response;
+		}
+
+		/**
+		 * @param response
+		 *            The response to set.
+		 */
+		public void setResponse( String response )
+		{
+			this.response = response;
+		}
+
+		/**
+		 * @return Returns the uri.
+		 */
+		public String getUri()
+		{
+			return uri;
+		}
+
+		/**
+		 * @param uri
+		 *            The uri to set.
+		 */
+		public void setUri( String uri )
+		{
+			this.uri = uri;
+		}
+
+		/**
+		 * @return Returns the method.
+		 */
+		public String getMethod()
+		{
+			return method;
+		}
+
+		/**
+		 * @param method
+		 *            The method to set.
+		 */
+		public void setMethod( String method )
+		{
+			this.method = method;
+		}
+
+		/**
+		 * @return Returns the cnonce.
+		 */
+		public String getCnonce()
+		{
+			return cnonce;
+		}
+
+		/**
+		 * @param cnonce
+		 *            The cnonce to set.
+		 */
+		public void setCnonce( String cnonce )
+		{
+			this.cnonce = cnonce;
+		}
+
+		/**
+		 * @return Returns the nc.
+		 */
+		public String getNc()
+		{
+			return nc;
+		}
+
+		/**
+		 * @param nc
+		 *            The nc to set.
+		 */
+		public void setNc( String nc )
+		{
+			this.nc = nc;
+		}
+
+		public String toString()
+		{
+			return "(" + userName + ":" + response + ")";
+		}
+
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/filter/authentication/scheme/DigestAuthentication.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java	2005-12-20 20:20:43 UTC (rev 354)
+++ trunk/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java	2005-12-20 20:23:02 UTC (rev 355)
@@ -24,8 +24,8 @@
 import org.apache.mina.common.IoFilterAdapter;
 import org.apache.mina.common.IoSession;
 
-import rtspproxy.Config;
 import rtspproxy.Reactor;
+import rtspproxy.config.Config;
 
 /**
  * @author Matteo Merli
@@ -42,8 +42,7 @@
 	{
 		// Check which backend implementation to use
 		// Default is plain-text implementation
-		String className = Config.get( "proxy.filter.ipaddress.implementationClass",
-				"rtspproxy.filter.ipaddress.PlainTextIpAddressProvider" );
+		String className = Config.proxyFilterIpaddressImplementationClass.getValue();
 
 		Class providerClass;
 		try {

Modified: trunk/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java	2005-12-20 20:20:43 UTC (rev 354)
+++ trunk/src/main/java/rtspproxy/filter/ipaddress/PlainTextIpAddressProvider.java	2005-12-20 20:23:02 UTC (rev 355)
@@ -30,12 +30,11 @@
 
 import org.apache.log4j.Logger;
 
-import rtspproxy.Config;
+import rtspproxy.config.Config;
 
 /**
- * Implementation of the IpAddressFilter that is based on plain 
- * text file containing instruction on "allowed" and "denied" 
- * addresses and hosts.
+ * Implementation of the IpAddressFilter that is based on plain text file
+ * containing instruction on "allowed" and "denied" addresses and hosts.
  * 
  * @author Matteo Merli
  */
@@ -52,27 +51,30 @@
 	{
 
 		public RuleType type;
+
 		public Pattern pattern;
 	}
 
 	private static List<Rule> rules = new LinkedList<Rule>();
 
-	/* (non-Javadoc)
+	/*
+	 * (non-Javadoc)
+	 * 
 	 * @see rtspproxy.auth.IpAddressProvider#init()
 	 */
 	public void init() throws Exception
 	{
 		// Load rules from file
-		String fileName = Config.getHome()
-				+ File.separator
-				+ Config.get( "proxy.filter.ipaddress.text.file", "conf" + File.separator
-						+ "ipfilter.txt" );
+		String fileName = Config.getHome() + File.separator
+				+ Config.proxyFilterIpaddressTextFile.getValue();
 
 		loadRules( new FileReader( new File( fileName ) ) );
 
 	}
 
-	/* (non-Javadoc)
+	/*
+	 * (non-Javadoc)
+	 * 
 	 * @see rtspproxy.auth.IpAddressProvider#shutdown()
 	 */
 	public void shutdown() throws Exception
@@ -80,7 +82,9 @@
 		rules.clear();
 	}
 
-	/* (non-Javadoc)
+	/*
+	 * (non-Javadoc)
+	 * 
 	 * @see rtspproxy.auth.IpAddressProvider#isBlocked(java.net.InetAddress)
 	 */
 	public boolean isBlocked( InetAddress address )
@@ -98,17 +102,19 @@
 
 			if ( rule.pattern.matcher( ip ).matches()
 					|| rule.pattern.matcher( host ).matches() )
-				// the address matches the pattern 
+				// the address matches the pattern
 				// check if it's allow or deny
-				blocked = ( rule.type == RuleType.Allow ) ? false : true;
+				blocked = (rule.type == RuleType.Allow) ? false : true;
 		}
 
 		return blocked;
 	}
 
-	/** 
+	/**
 	 * Reads the rules from a file
-	 * @param reader Reader of a file containing the access rules
+	 * 
+	 * @param reader
+	 *            Reader of a file containing the access rules
 	 * @throws IOException
 	 */
 	protected void loadRules( Reader reader ) throws IOException
@@ -118,24 +124,23 @@
 		String line;
 		int lineNumber = 0;
 		try {
-			while ( ( line = in.readLine() ) != null ) {
-				line = line.replaceAll( "\t", " " ); // replace tabs 
+			while ( (line = in.readLine()) != null ) {
+				line = line.replaceAll( "\t", " " ); // replace tabs
 				line = line.trim();
 				++lineNumber;
 
 				if ( line.length() == 0 )
-					continue; // Ignore empty lines 
+					continue; // Ignore empty lines
 				if ( line.startsWith( "#" ) )
 					continue; // Ignore comments
 				RuleType ruleType = null;
 				if ( line.startsWith( "Allow" ) )
 					ruleType = RuleType.Allow;
+				else if ( line.startsWith( "Deny" ) )
+					ruleType = RuleType.Deny;
 				else
-					if ( line.startsWith( "Deny" ) )
-						ruleType = RuleType.Deny;
-					else
-						throw new IOException( "Invalid filter pattern (line "
-								+ lineNumber + ")" );
+					throw new IOException( "Invalid filter pattern (line " + lineNumber
+							+ ")" );
 
 				// read the pattern
 				String[] patternSplit = line.split( " ", 2 );

Added: trunk/src/main/java/rtspproxy/lib/StringUtil.java
===================================================================
--- trunk/src/main/java/rtspproxy/lib/StringUtil.java	2005-12-20 20:20:43 UTC (rev 354)
+++ trunk/src/main/java/rtspproxy/lib/StringUtil.java	2005-12-20 20:23:02 UTC (rev 355)
@@ -0,0 +1,99 @@
+package rtspproxy.lib;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Random collection of strings utility function.
+ * 
+ * @author Matteo Merli
+ */
+public class StringUtil
+{
+
+	/**
+	 * Return a the passed string double quoted. Eg: <code>
+	 * String s = "test";
+	 * StringUtil.quote( s ) == "\"test\""
+	 * </code>
+	 * 
+	 * @param str
+	 *            the string to be quoted
+	 * @return the quoted string
+	 */
+	public static String quote( String str )
+	{
+		return "\"" + str + "\"";
+	}
+
+	/**
+	 * Remove the quotation marks from the string
+	 * 
+	 * @param str
+	 *            a quoted string
+	 * @return the string unquoted
+	 */
+	public static String unquote( String str )
+	{
+		if ( str.charAt( 0 ) == '"' )
+			str = str.substring( 1 );
+		if ( str.charAt( str.length() - 1 ) == '"' )
+			str = str.substring( 0, str.length() - 1 );
+		return str;
+	}
+
+	public static String toString( byte[] bytes )
+	{
+		StringBuilder sb = new StringBuilder();
+		for ( byte b : bytes )
+			sb.append( (char) b );
+		return sb.toString();
+	}
+	
+	public static String toHexString( byte[] bytes )
+	{
+		StringBuilder sb = new StringBuilder();
+		for ( byte b : bytes )
+			sb.append( hexLetters[(byte) ((b >> 4) & 0x0F)] ).append(
+					hexLetters[b & 0x0F] );
+		if ( sb.length() == 0 )
+			return "0";
+		return sb.toString();
+	}
+
+	public static byte[] toByteArray( String str )
+	{
+		byte[] bytes = new byte[str.length()];
+		for ( int i = str.length() - 1; i >= 0; i-- )
+			bytes[i] = (byte) str.charAt( i );
+		return bytes;
+	}
+
+	/**
+	 * Transforms a comma separated couples of key-values into a string Map (key ->
+	 * value) eg: key1:"value1",key2="value2",....
+	 * 
+	 * @param values
+	 * @return
+	 */
+	public static Map<String, String> getStringMap( String values )
+	{
+		Map<String, String> map = new HashMap<String, String>();
+		String key, value;
+
+		try {
+			for ( String tuple : values.split( "," ) ) {
+				key = tuple.split( "=" )[0];
+				value = unquote( tuple.split( "=" )[1] );
+				map.put( key, value );
+			}
+		} catch ( Exception e ) {
+			return null;
+		}
+		return map;
+	}
+
+	protected static final char[] hexLetters = { '0', '1', '2', '3', '4', '5', '6', '7',
+			'8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
+
+}


Property changes on: trunk/src/main/java/rtspproxy/lib/StringUtil.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev



From merlimat at berlios.de  Tue Dec 20 21:21:02 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 20 Dec 2005 21:21:02 +0100
Subject: [Rtspproxy-devel] r354 - in trunk/src/main/java/rtspproxy: . config proxy rtsp
Message-ID: <200512202021.jBKKL2Y0000019@sheep.berlios.de>

Author: merlimat
Date: 2005-12-20 21:20:43 +0100 (Tue, 20 Dec 2005)
New Revision: 354

Added:
   trunk/src/main/java/rtspproxy/config/
   trunk/src/main/java/rtspproxy/config/BooleanParameter.java
   trunk/src/main/java/rtspproxy/config/Config.java
   trunk/src/main/java/rtspproxy/config/ConfigReader.java
   trunk/src/main/java/rtspproxy/config/IntegerListParameter.java
   trunk/src/main/java/rtspproxy/config/IntegerParameter.java
   trunk/src/main/java/rtspproxy/config/Parameter.java
   trunk/src/main/java/rtspproxy/config/StringListParameter.java
   trunk/src/main/java/rtspproxy/config/StringParameter.java
Modified:
   trunk/src/main/java/rtspproxy/Main.java
   trunk/src/main/java/rtspproxy/RdtClientService.java
   trunk/src/main/java/rtspproxy/RdtServerService.java
   trunk/src/main/java/rtspproxy/Reactor.java
   trunk/src/main/java/rtspproxy/RtcpClientService.java
   trunk/src/main/java/rtspproxy/RtcpServerService.java
   trunk/src/main/java/rtspproxy/RtpClientService.java
   trunk/src/main/java/rtspproxy/RtpServerService.java
   trunk/src/main/java/rtspproxy/RtspService.java
   trunk/src/main/java/rtspproxy/ShutdownHandler.java
   trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java
   trunk/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java
   trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java
Log:
Switched to new config system.

Modified: trunk/src/main/java/rtspproxy/Main.java
===================================================================
--- trunk/src/main/java/rtspproxy/Main.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/Main.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -17,6 +17,7 @@
  */
 package rtspproxy;
 
+import org.apache.log4j.BasicConfigurator;
 import org.apache.log4j.Logger;
 
 import rtspproxy.lib.Exceptions;
@@ -31,23 +32,14 @@
 
 	public static void main( String[] args )
 	{
-		// TODO: remove this temp stuffs
-		/*
-		 * for ( Object key : System.getProperties().keySet() ) { String value =
-		 * System.getProperty( (String)key ); System.out.println( key + " : " +
-		 * value ); }
-		 */
+		// Configure the logger with default settings
+		// useful to track pre-config file errors
+		BasicConfigurator.configure();
 
-		// Register the "rtsp://" protocol scheme
-		System.setProperty( "java.protocol.handler.pkgs", "rtspproxy" );
-
-		new Config();
-
 		// Register the signal handler
 		Runtime.getRuntime().addShutdownHook( new ShutdownHandler() );
 
 		try {
-			log.info( "Starting " + Config.getName() + " " + Config.getVersion() );
 			Reactor.setStandalone( true );
 			Reactor.start();
 

Modified: trunk/src/main/java/rtspproxy/RdtClientService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RdtClientService.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/RdtClientService.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -21,6 +21,7 @@
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
 
+import rtspproxy.config.Config;
 import rtspproxy.proxy.ClientRdtPacketHandler;
 
 /**
@@ -62,13 +63,13 @@
 	@Override
 	public String getNetworkInterface()
 	{
-		return Config.get( "proxy.client.interface", null );
+		return Config.proxyClientInterface.getValue();
 	}
 
 	@Override
 	public int[] getBindPorts()
 	{
-		int port = Config.getInt( "proxy.client.rdt.port", 8018 );
+		int port = Config.proxyClientRdtPort.getValue();
 		return new int[] { port };
 	}
 

Modified: trunk/src/main/java/rtspproxy/RdtServerService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RdtServerService.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/RdtServerService.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -21,6 +21,7 @@
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
 
+import rtspproxy.config.Config;
 import rtspproxy.proxy.ServerRdtPacketHandler;
 
 /**
@@ -61,13 +62,13 @@
 	@Override
 	public String getNetworkInterface()
 	{
-		return Config.get( "proxy.server.interface", null );
+		return Config.proxyServerInterface.getValue();
 	}
 
 	@Override
 	public int[] getBindPorts()
 	{
-		int port = Config.getInt( "proxy.server.rdt.port", 8020 );
+		int port = Config.proxyServerRdtPort.getValue();
 		return new int[] { port };
 	}
 

Modified: trunk/src/main/java/rtspproxy/Reactor.java
===================================================================
--- trunk/src/main/java/rtspproxy/Reactor.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/Reactor.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -20,6 +20,9 @@
 
 import org.apache.log4j.Logger;
 
+import rtspproxy.config.Config;
+import rtspproxy.config.ConfigReader;
+
 /**
  * 
  */
@@ -42,6 +45,39 @@
 	 */
 	static public void start() throws Exception
 	{
+		// Read configuration files
+		new Config();
+
+		String[] paths = new String[5];
+
+		// Used for testing purposes:
+		// checks for the configuration file
+		paths[4] = "src/resources/conf/rtspproxy.properties";
+
+		// Current directory configuration
+		paths[3] = "rtspproxy.properties";
+
+		// RtspProxy home folder
+		paths[2] = Config.getHome() + "/conf/rtspproxy.properties";
+
+		// Per user config
+		paths[1] = System.getProperty( "user.home", "" ) + "/.rtspproxy.properties";
+		// System wide configuration (tipical in unix systems)
+		paths[0] = "/etc/rtspproxy.properties";
+
+		for ( String path : paths ) {
+			new ConfigReader( path );
+		}
+
+		if ( log.isDebugEnabled() ) {
+			log.debug( Config.debugParameters() );
+		}
+
+		log.info( "Starting " + Config.getName() + " " + Config.getVersion() );
+
+		// Register the "rtsp://" protocol scheme
+		System.setProperty( "java.protocol.handler.pkgs", "rtspproxy" );
+
 		ProxyService rtspService = new RtspService();
 		rtspService.start();
 
@@ -53,7 +89,7 @@
 
 		ProxyService rtpServerService = new RtpServerService();
 		rtpServerService.start();
-		
+
 		ProxyService rtcpServerService = new RtcpServerService();
 		rtcpServerService.start();
 

Modified: trunk/src/main/java/rtspproxy/RtcpClientService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtcpClientService.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/RtcpClientService.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -21,6 +21,7 @@
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
 
+import rtspproxy.config.Config;
 import rtspproxy.proxy.ClientRtcpPacketHandler;
 
 /**
@@ -61,13 +62,13 @@
 	@Override
 	public String getNetworkInterface()
 	{
-		return Config.get( "proxy.client.interface", null );
+		return Config.proxyClientInterface.getValue();
 	}
 
 	@Override
 	public int[] getBindPorts()
 	{
-		int port = Config.getInt( "proxy.client.rtcp.port", 8003 );
+		int port = Config.proxyClientRtcpPort.getValue();
 		return new int[] { port };
 	}
 	

Modified: trunk/src/main/java/rtspproxy/RtcpServerService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtcpServerService.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/RtcpServerService.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -21,6 +21,7 @@
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
 
+import rtspproxy.config.Config;
 import rtspproxy.proxy.ServerRtcpPacketHandler;
 
 /**
@@ -61,13 +62,13 @@
 	@Override
 	public String getNetworkInterface()
 	{
-		return Config.get( "proxy.server.interface", null );
+		return Config.proxyServerInterface.getValue();
 	}
 
 	@Override
 	public int[] getBindPorts()
 	{
-		int port = Config.getInt( "proxy.server.rtcp.port", 8001 );
+		int port = Config.proxyServerRtcpPort.getValue();
 		return new int[] { port };
 	}
 	

Modified: trunk/src/main/java/rtspproxy/RtpClientService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtpClientService.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/RtpClientService.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -21,6 +21,7 @@
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
 
+import rtspproxy.config.Config;
 import rtspproxy.proxy.ClientRtpPacketHandler;
 
 /**
@@ -61,13 +62,13 @@
 	@Override
 	public String getNetworkInterface()
 	{
-		return Config.get( "proxy.client.interface", null );
+		return Config.proxyClientInterface.getValue();
 	}
 
 	@Override
 	public int[] getBindPorts()
 	{
-		int port = Config.getInt( "proxy.client.rtp.port", 8002 );
+		int port = Config.proxyClientRtpPort.getValue();
 		return new int[] { port };
 	}
 	

Modified: trunk/src/main/java/rtspproxy/RtpServerService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtpServerService.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/RtpServerService.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -21,6 +21,7 @@
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
 
+import rtspproxy.config.Config;
 import rtspproxy.proxy.ServerRtpPacketHandler;
 
 /**
@@ -61,13 +62,13 @@
 	@Override
 	public String getNetworkInterface()
 	{
-		return Config.get( "proxy.server.interface", null );
+		return Config.proxyServerInterface.getValue();
 	}
 
 	@Override
 	public int[] getBindPorts()
 	{
-		int port = Config.getInt( "proxy.server.rtp.port", 8000 );
+		int port = Config.proxyServerRtpPort.getValue();
 		return new int[] { port };
 	}
 	

Modified: trunk/src/main/java/rtspproxy/RtspService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtspService.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/RtspService.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -22,9 +22,9 @@
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
 
+import rtspproxy.config.Config;
 import rtspproxy.filter.RtspClientFilters;
 import rtspproxy.proxy.ClientSide;
-import rtspproxy.rtsp.Handler;
 
 /**
  * @author Matteo Merli
@@ -72,14 +72,13 @@
 	@Override
 	public String getNetworkInterface()
 	{
-		return Config.get( "proxy.rtsp.interface", null );
+		return Config.proxyClientInterface.getValue();
 	}
 
 	@Override
 	public int[] getBindPorts()
 	{
-		return Config
-				.getIntArray( "proxy.rtsp.port", Handler.DEFAULT_RTSP_PORT );
+		return Config.proxyRtspPort.getValue();
 	}
 	
 	public static RtspService getInstance()

Modified: trunk/src/main/java/rtspproxy/ShutdownHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/ShutdownHandler.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/ShutdownHandler.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -20,6 +20,7 @@
 
 import org.apache.log4j.Logger;
 
+import rtspproxy.config.Config;
 import rtspproxy.lib.Exceptions;
 
 /**

Added: trunk/src/main/java/rtspproxy/config/BooleanParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/BooleanParameter.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/config/BooleanParameter.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -0,0 +1,60 @@
+/**
+ * 
+ */
+package rtspproxy.config;
+
+/**
+ * @author Matteo Merli
+ */
+public class BooleanParameter extends Parameter
+{
+
+	private Boolean value = null;
+
+	private boolean defaultValue;
+
+	public BooleanParameter( String name, boolean defaultValue, boolean mutable,
+			String description )
+	{
+		super( name, mutable, description );
+		this.defaultValue = defaultValue;
+	}
+
+	public void setValue( String value ) throws IllegalArgumentException
+	{
+		value = value.trim().toLowerCase();
+		if ( "true".equals( value ) || "yes".equals( value ) )
+			this.value = true;
+		else if ( "false".equals( value ) || "no".equals( value ) )
+			this.value = false;
+		else
+			throw new IllegalArgumentException( "Boolean value not valid: " + value );
+		
+		setChanged();
+	}
+
+	/**
+	 * @return Returns the defaultValue.
+	 */
+	public String getDefaultValue()
+	{
+		return defaultValue ? "true" : "false";
+	}
+
+	@Override
+	public String getStringValue()
+	{
+		return getValue() ? "true" : "false";
+	}
+
+	@Override
+	public String getType()
+	{
+		return "Boolean";
+	}
+
+	public boolean getValue()
+	{
+		return value == null ? defaultValue : value.booleanValue();
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/config/BooleanParameter.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/Config.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/config/Config.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -0,0 +1,314 @@
+package rtspproxy.config;
+
+import java.io.File;
+import java.util.Collection;
+import java.util.Map;
+import java.util.Properties;
+import java.util.TreeMap;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+
+import org.apache.log4j.PropertyConfigurator;
+
+import rtspproxy.lib.Singleton;
+import rtspproxy.rtsp.Handler;
+
+public class Config extends Singleton
+{
+	private static ConcurrentMap<String, Parameter> parameters = new ConcurrentHashMap<String, Parameter>();
+
+	protected static void addParameter( Parameter parameter )
+	{
+		parameters.put( parameter.getName(), parameter );
+	}
+
+	public static Parameter getParameter( String name )
+	{
+		if ( name == null )
+			throw new IllegalArgumentException( "name is null" );
+
+		return parameters.get( name );
+	}
+
+	public static Collection<Parameter> getAllParameters()
+	{
+		return parameters.values();
+	}
+
+	protected static Map<String, Parameter> getParametersMap()
+	{
+		return parameters;
+	}
+
+	public static final BooleanParameter logDebug = new BooleanParameter( "log.debug", // name
+			false, // default value
+			true, // mutable
+			"This flag let you to enable or disable the debug "
+					+ "output of the program." );
+
+	public static final BooleanParameter logLogToFile = new BooleanParameter(
+			"log.logtofile", // name
+			false, // default value
+			false, // mutable
+			"If you want to save to a file the debug output	set this to Yes" );
+
+	public static final StringParameter logFile = new StringParameter( "log.file", // name
+			"logs/rtspproxy.log", // default value
+			false, // mutable
+			"Here you specify the file to log to." );
+
+	public static final IntegerListParameter proxyRtspPort = new IntegerListParameter(
+			"proxy.rtsp.port", // name
+			new Integer( 0 ), // min value
+			new Integer( 65536 ), // max value
+			new Integer( Handler.DEFAULT_RTSP_PORT ), // default value
+			true, // mutable
+			"This is the port which the proxy will listen for "
+					+ "RTSP connection. The default is 554, like normal RTSP servers." );
+
+	public static final StringParameter proxyClientInterface = new StringParameter(
+			"proxy.client.interface", // name
+			null, // default value
+			true, // mutable
+			"Specify a network interface. Default is to listen on all interfaces." );
+
+	public static final StringParameter proxyServerInterface = new StringParameter(
+			"proxy.server.interface", // name
+			null, // default value
+			true, // mutable
+			"Specify a network interface. Default is to listen on all interfaces." );
+
+	public static final IntegerParameter proxyServerRtpPort = new IntegerParameter(
+			"proxy.server.rtp.port", // name
+			new Integer( 0 ), // min value
+			new Integer( 65536 ), // max value
+			new Integer( 8000 ), // default value
+			true, // mutable
+			"Port to listen for RTP packets arriving from servers." );
+
+	public static final IntegerParameter proxyServerRtcpPort = new IntegerParameter(
+			"proxy.server.rtcp.port", // name
+			new Integer( 0 ), // min value
+			new Integer( 65536 ), // max value
+			new Integer( 8001 ), // default value
+			true, // mutable
+			"Port to listen for RTCP packets arriving from servers." );
+
+	public static final IntegerParameter proxyClientRtpPort = new IntegerParameter(
+			"proxy.client.rtp.port", // name
+			new Integer( 0 ), // min value
+			new Integer( 65536 ), // max value
+			new Integer( 8002 ), // default value
+			true, // mutable
+			"Port to listen for RTP packets arriving from clients." );
+
+	public static final IntegerParameter proxyClientRtcpPort = new IntegerParameter(
+			"proxy.client.rtcp.port", // name
+			new Integer( 0 ), // min value
+			new Integer( 65536 ), // max value
+			new Integer( 8003 ), // default value
+			true, // mutable
+			"Port to listen for RTCP packets arriving from clients." );
+
+	public static final IntegerParameter proxyServerRdtPort = new IntegerParameter(
+			"proxy.server.rdt.port", // name
+			new Integer( 0 ), // min value
+			new Integer( 65536 ), // max value
+			new Integer( 8020 ), // default value
+			true, // mutable
+			"Port to listen for RDT packets arriving from servers." );
+
+	public static final IntegerParameter proxyClientRdtPort = new IntegerParameter(
+			"proxy.client.rdt.port", // name
+			new Integer( 0 ), // min value
+			new Integer( 65536 ), // max value
+			new Integer( 8022 ), // default value
+			true, // mutable
+			"Port to listen for RDT packets arriving from clients." );
+
+	// // IP address filter
+
+	public static final BooleanParameter proxyFilterIpaddressEnable = new BooleanParameter(
+			"proxy.filter.ipaddress.enable", // name
+			false, // default value
+			true, // mutable
+			"Enable or disable the IP address filtering system." );
+
+	public static final StringParameter proxyFilterIpaddressImplementationClass = new StringParameter(
+			"proxy.filter.ipaddress.implementationClass", // name
+			"rtspproxy.filter.ipaddress.PlainTextIpAddressProvider", // default
+			// value
+			false, // mutable
+			"Use an alternative backend class. This can be any class "
+					+ "that implements the rtspproxy.filter.ipaddress.IpAddressProvider "
+					+ "interface." );
+
+	public static final StringParameter proxyFilterIpaddressTextFile = new StringParameter(
+			"proxy.filter.ipaddress.text.file", // name
+			"conf/ipfilter.txt", // default value
+			false, // mutable
+			"Plain Text based implementation specific configuration" );
+
+	// // Authentication filter
+
+	public static final BooleanParameter proxyFilterAuthenticationEnable = new BooleanParameter(
+			"proxy.filter.authentication.enable", // name
+			false, // default value
+			true, // mutable
+			"Enable or disable the authentication system." );
+
+	public static final StringParameter proxyFilterAuthenticationScheme = new StringParameter(
+			"proxy.filter.authentication.scheme", // name
+			"Basic", // default value
+			false, // mutable
+			"Authentication Scheme. This could be Basic (the default), Digest or any "
+					+ "other supported scheme." );
+
+	public static final StringParameter proxyFilterAuthenticationImplementationClass = new StringParameter(
+			"proxy.filter.authentication.implementationClass", // name
+			"rtspproxy.filter.authentication.PlainTextAuthenticationProvider", // default
+			// value
+			false, // mutable
+			"Use an alternative backend class. This can be any class "
+					+ "that implements the rtspproxy.filter.authentication.AuthenticationProvider "
+					+ "interface." );
+
+	public static final StringParameter proxyFilterAuthenticationTextFile = new StringParameter(
+			"proxy.filter.authentication.text.file", // name
+			"conf/users.txt", // default value
+			false, // mutable
+			"Plain Text based implementation specific configuration" );
+
+	// /////////////////////////////////////////////////////////
+
+	private static String rtspproxyHome;
+
+	private static String name;
+
+	private static String version;
+
+	private static String proxySignature;
+
+	// /////////////////////////////////////////////////////////
+
+	public Config()
+	{
+		// Read home directory
+		rtspproxyHome = System.getProperty( "rtspproxy.home" );
+		if ( rtspproxyHome == null ) {
+			rtspproxyHome = System.getProperty( "user.dir" );
+			if ( rtspproxyHome == null )
+				rtspproxyHome = "";
+		}
+
+		// Read program name and version
+		Properties jarProps = new Properties();
+		try {
+			jarProps.load( Thread.currentThread().getContextClassLoader()
+					.getResourceAsStream( "META-INF/application.properties" ) );
+			name = jarProps.getProperty( "application.name" );
+			version = jarProps.getProperty( "application.version" );
+		} catch ( Exception e ) {
+			name = "RtspProxy";
+			version = "";
+		}
+
+		// Build proxy signature
+		StringBuilder sb = new StringBuilder();
+		sb.append( name ).append( " " ).append( version );
+		sb.append( " (" ).append( System.getProperty( "os.name" ) );
+		sb.append( " / " ).append( System.getProperty( "os.version" ) );
+		sb.append( " / " ).append( System.getProperty( "os.arch" ) );
+		sb.append( ")" );
+		proxySignature = sb.toString();
+	}
+
+	/**
+	 * @return the application base dir
+	 */
+	public static String getHome()
+	{
+		return rtspproxyHome;
+	}
+
+	/**
+	 * @return Returns the application name.
+	 */
+	public static String getName()
+	{
+		return name;
+	}
+
+	/**
+	 * @return Returns the application version.
+	 */
+	public static String getVersion()
+	{
+		return version;
+	}
+
+	/**
+	 * @return Returns the proxySignature.
+	 */
+	public static String getProxySignature()
+	{
+		return proxySignature;
+	}
+
+	// /////////////////////////////////////////////////////////
+
+	protected static void updateDebugSettings()
+	{
+		Properties prop = new Properties();
+		// common properties
+		prop.setProperty( "log4j.appender.A1.layout", "org.apache.log4j.PatternLayout" );
+		prop.setProperty( "log4j.appender.A1.layout.ConversionPattern",
+				"%7p [%t] (%F:%L) - %m%n" );
+
+		if ( logDebug.getValue() )
+			prop.setProperty( "log4j.rootLogger", "DEBUG, A1" );
+		else
+			// only write important messages
+			prop.setProperty( "log4j.rootLogger", "INFO, A1" );
+
+		if ( logLogToFile.getValue() ) {
+			// save logs in a file
+			String filename = logFile.getValue();
+			prop
+					.setProperty( "log4j.appender.A1",
+							"org.apache.log4j.RollingFileAppender" );
+			prop.setProperty( "log4j.appender.A1.File", filename );
+
+			// if logs directory does not exists, create it
+			File logs = new File( rtspproxyHome + File.separator + "logs" );
+			if ( !logs.exists() )
+				logs.mkdir();
+
+		} else {
+			// Log to console
+			prop.setProperty( "log4j.appender.A1", "org.apache.log4j.ConsoleAppender" );
+		}
+
+		PropertyConfigurator.configure( prop );
+	}
+
+	/**
+	 * @return a String containing all the parameters
+	 */
+	public static String debugParameters()
+	{
+		StringBuilder sb = new StringBuilder();
+		Map<String, Parameter> parameters = new TreeMap<String, Parameter>( Config
+				.getParametersMap() );
+		sb.append( "Parameters:\n" );
+		for ( Parameter parameter : parameters.values() ) {
+			sb.append( parameter.getName() );
+			sb.append( ": " );
+			sb.append( parameter.getStringValue() );
+			sb.append( "\n" );
+		}
+
+		return sb.toString();
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/config/Config.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/config/ConfigReader.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/ConfigReader.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/config/ConfigReader.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -0,0 +1,58 @@
+package rtspproxy.config;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Properties;
+
+import org.apache.log4j.Logger;
+
+public class ConfigReader
+{
+	private static Logger log = Logger.getLogger( ConfigReader.class );
+
+	public ConfigReader( String fileName ) throws IllegalArgumentException
+	{
+		Properties properties = new Properties();
+		
+		File file = new File( fileName );
+
+		try {
+			InputStream is = new FileInputStream( file );
+			properties.load( is );
+		} catch ( FileNotFoundException e ) {
+			// silently ignore
+			return;
+		} catch ( IOException e ) {
+			log.error( "Error reading configuration file: " + e );
+			return;
+		}
+
+		// cycle throuh all the properties
+		for ( Object key : properties.keySet() ) {
+			String name = (String) key;
+			String value = properties.getProperty( name );
+
+			Parameter parameter = Config.getParameter( name );
+			if ( parameter == null ) {
+				// The property name is invalid
+				log.fatal( "Invalid parameter name: " + name );
+				throw new IllegalArgumentException();
+			}
+
+			try {
+				parameter.setValue( value );
+			} catch ( IllegalArgumentException e ) {
+				log.fatal( "Invalid value for parameter " + name + ": " + value );
+				throw e;
+			}
+		}
+
+		Config.updateDebugSettings();
+
+		log.debug( "Reading configurations from '" + file + "'" );
+
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/config/ConfigReader.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/config/IntegerListParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/IntegerListParameter.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/config/IntegerListParameter.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -0,0 +1,105 @@
+/**
+ * 
+ */
+package rtspproxy.config;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * @author Matteo Merli
+ */
+public class IntegerListParameter extends Parameter
+{
+	private List<Integer> values = null;
+
+	private Integer minValue;
+
+	private Integer maxValue;
+
+	private Integer defaultValue;
+
+	public IntegerListParameter( String name, Integer minValue, Integer maxValue,
+			Integer defaultValue, boolean mutable, String description )
+	{
+		super( name, mutable, description );
+
+		if ( defaultValue == null )
+			throw new IllegalArgumentException( "Default value for " + name
+					+ " must be not null." );
+		this.defaultValue = defaultValue;
+		this.minValue = minValue;
+		this.maxValue = maxValue;
+	}
+
+	@Override
+	public void setValue( String value ) throws IllegalArgumentException
+	{
+		this.values = new ArrayList<Integer>();
+		Integer tmpValue = null;
+		String[] tokens = value.split( "," );
+
+		for ( String token : tokens ) {
+			
+			token = token.trim();
+			try {
+				tmpValue = Integer.valueOf( token );
+			} catch ( NumberFormatException nfe ) {
+				throw new IllegalArgumentException( "Integer value for " + name
+						+ " not valid: " + token );
+			}
+
+			if ( minValue != null && (tmpValue.compareTo( minValue ) < 0) )
+				throw new IllegalArgumentException( "Integer value for " + name
+						+ " must be greater than " + minValue );
+			if ( maxValue != null && (tmpValue.compareTo( maxValue ) > 0) )
+				throw new IllegalArgumentException( "Integer value for " + name
+						+ " must be lesser than " + maxValue );
+			
+			this.values.add( tmpValue );
+		}
+	
+		setChanged();
+	}
+
+	@Override
+	public String getStringValue()
+	{
+		if ( values == null )
+			return defaultValue.toString();
+
+		StringBuilder sb = new StringBuilder();
+		final int size = values.size();
+		for ( int i = 0; i < size; i++ ) {
+			sb.append( values.get( i ).toString() );
+			if ( i < size - 1 )
+				sb.append( ", " );
+		}
+		return sb.toString();
+	}
+
+	/**
+	 * @return Returns the defaultValue.
+	 */
+	public String getDefaultValue()
+	{
+		return defaultValue.toString();
+	}
+
+	public int[] getValue()
+	{
+		if ( values == null )
+			return new int[] { defaultValue };
+
+		int[] v = new int[values.size()];
+		for ( int i = values.size() - 1; i >= 0; i-- )
+			v[i] = values.get( i );
+		return v;
+	}
+
+	@Override
+	public String getType()
+	{
+		return "IntegerList";
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/config/IntegerListParameter.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/config/IntegerParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/IntegerParameter.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/config/IntegerParameter.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -0,0 +1,79 @@
+/**
+ * 
+ */
+package rtspproxy.config;
+
+/**
+ * @author Matteo Merli
+ */
+public class IntegerParameter extends Parameter
+{
+	private Integer value = null;
+
+	private Integer minValue;
+
+	private Integer maxValue;
+
+	private Integer defaultValue;
+
+	public IntegerParameter( String name, Integer minValue, Integer maxValue,
+			Integer defaultValue, boolean mutable, String description )
+	{
+		super( name, mutable, description );
+
+		if ( defaultValue == null )
+			throw new IllegalArgumentException( "Default value for " + name
+					+ " must be not null." );
+		this.defaultValue = defaultValue;
+		this.minValue = minValue;
+		this.maxValue = maxValue;
+	}
+
+	@Override
+	public void setValue( String value ) throws IllegalArgumentException
+	{
+
+		Integer tmpValue;
+		try {
+			tmpValue = Integer.valueOf( value );
+		} catch ( NumberFormatException nfe ) {
+			throw new IllegalArgumentException( "Integer value for " + name
+					+ "not valid: " + value );
+		}
+
+		if ( minValue != null && (tmpValue.compareTo( minValue ) < 0) )
+			throw new IllegalArgumentException( "Integer value for " + name
+					+ " must be greater than " + minValue );
+		if ( maxValue != null && (tmpValue.compareTo( maxValue ) > 0) )
+			throw new IllegalArgumentException( "Integer value for " + name
+					+ " must be lesser than " + maxValue );
+
+		this.value = tmpValue;
+		setChanged();
+	}
+
+	@Override
+	public String getStringValue()
+	{
+		return (value != null ? value : defaultValue).toString();
+	}
+
+	/**
+	 * @return Returns the defaultValue.
+	 */
+	public String getDefaultValue()
+	{
+		return defaultValue.toString();
+	}
+
+	public int getValue()
+	{
+		return value == null ? defaultValue.intValue() : value.intValue();
+	}
+
+	@Override
+	public String getType()
+	{
+		return "Integer";
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/config/IntegerParameter.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/config/Parameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/Parameter.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/config/Parameter.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -0,0 +1,99 @@
+/**
+ * 
+ */
+package rtspproxy.config;
+
+import java.util.Observable;
+
+/**
+ * @author Matteo Merli
+ */
+public abstract class Parameter extends Observable
+{
+
+	protected String name;
+
+	protected boolean mutable;
+
+	protected String description;
+
+	protected Parameter( String name, boolean mutable, String description )
+	{
+		validateName( name );
+
+		this.name = name;
+		this.mutable = mutable;
+		this.description = description;
+		
+		Config.addParameter( this );
+	}
+
+	/**
+	 * Validate the name of the parameter. The name length must be > 0
+	 */
+	private void validateName( String name ) throws IllegalArgumentException
+	{
+		if ( (name == null) || (name.length() < 1) ) {
+			throw new IllegalArgumentException(
+					" A configuration parameter name can't be null or 0 length" );
+		}
+	}
+
+	/**
+	 * Changes the value of this parameter
+	 * 
+	 * @param value
+	 * @throws IllegalArgumentException
+	 */
+	public abstract void setValue( String value ) throws IllegalArgumentException;
+
+	/**
+	 * @return a String representation of the value of this parameter.
+	 */
+	public abstract String getStringValue();
+
+	/**
+	 * @return the name of this parameter
+	 */
+	public String getName()
+	{
+		return name;
+	}
+
+	/**
+	 * @return true if this parameter is "mutable" (so that it can be modified
+	 *         at runtime)
+	 */
+	public boolean isMutable()
+	{
+		return mutable;
+	}
+
+	/**
+	 * @return the description string of this parameter
+	 */
+	public String getDescription()
+	{
+		return description;
+	}
+
+	/**
+	 * @return a human readable type name for this parameter, such as String,
+	 *         Integer...
+	 */
+	public abstract String getType();
+
+	/**
+	 * Marks the parameter as changed and notify all the Observers.
+	 * 
+	 * @see java.util.Observable#setChanged()
+	 */
+	@Override
+	protected void setChanged()
+	{
+		super.setChanged();
+		if ( mutable )
+			notifyObservers();
+	}
+
+}
\ No newline at end of file


Property changes on: trunk/src/main/java/rtspproxy/config/Parameter.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/config/StringListParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/StringListParameter.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/config/StringListParameter.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -0,0 +1,78 @@
+/**
+ * 
+ */
+package rtspproxy.config;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * @author Matteo Merli
+ */
+public class StringListParameter extends Parameter
+{
+	private List<String> values = null;
+
+	private String defaultValue;
+
+	public StringListParameter( String name, String defaultValue, boolean mutable,
+			String description )
+	{
+		super( name, mutable, description );
+
+		if ( defaultValue == null )
+			throw new IllegalArgumentException( "Default value for " + name
+					+ " must be not null." );
+		this.defaultValue = defaultValue;
+	}
+
+	@Override
+	public void setValue( String value ) throws IllegalArgumentException
+	{
+		this.values = new ArrayList<String>();
+		String[] tokens = value.split( "," );
+
+		for ( String token : tokens ) {
+			this.values.add( token );
+		}
+		setChanged();
+	}
+
+	@Override
+	public String getStringValue()
+	{
+		if ( values == null )
+			return defaultValue.toString();
+
+		StringBuilder sb = new StringBuilder();
+		final int size = values.size();
+		for ( int i = 0; i < size; i++ ) {
+			sb.append( values.get( i ) );
+			if ( i < size - 1 )
+				sb.append( ", " );
+		}
+		return sb.toString();
+	}
+
+	/**
+	 * @return Returns the defaultValue.
+	 */
+	public String getDefaultValue()
+	{
+		return defaultValue.toString();
+	}
+
+	public String[] getValue()
+	{
+		String[] v = new String[values.size()];
+		for ( int i = values.size() - 1; i >= 0; i-- )
+			v[i] = values.get( i );
+		return v;
+	}
+
+	@Override
+	public String getType()
+	{
+		return "StringList";
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/config/StringListParameter.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/config/StringParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/StringParameter.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/config/StringParameter.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -0,0 +1,56 @@
+/**
+ * 
+ */
+package rtspproxy.config;
+
+
+/**
+ * @author Matteo Merli
+ */
+public class StringParameter extends Parameter
+{
+
+	private String value = null;
+
+	private String defaultValue;
+
+	public StringParameter( String name, String defaultValue, boolean mutable,
+			String description )
+	{
+		super( name, mutable, description );
+		this.defaultValue = defaultValue;
+	}
+
+	@Override
+	public void setValue( String value ) throws IllegalArgumentException
+	{
+		this.value = value;
+		setChanged();
+	}
+
+	@Override
+	public String getStringValue()
+	{
+		return getValue();
+	}
+
+	@Override
+	public String getType()
+	{
+		return "String";
+	}
+
+	public String getValue()
+	{
+		return value == null ? defaultValue : value;
+	}
+
+	/**
+	 * @return Returns the defaultValue.
+	 */
+	public String getDefaultValue()
+	{
+		return defaultValue;
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/config/StringParameter.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/proxy/ProxyHandler.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -31,7 +31,6 @@
 import org.apache.mina.common.IoSession;
 import org.apache.mina.transport.socket.nio.SocketConnector;
 
-import rtspproxy.Config;
 import rtspproxy.RdtClientService;
 import rtspproxy.RdtServerService;
 import rtspproxy.RtcpClientService;
@@ -230,10 +229,6 @@
 			return;
 		}
 
-		int proxyRtpPort = RtpServerService.getInstance().getPort();
-		int proxyRtcpPort = RtcpServerService.getInstance().getPort();
-		int proxyRdtPort = RdtServerService.getInstance().getPort();
-
 		// I'm saving the client Transport header before modifying it,
 		// because I will need to know which port the client will
 		// use for RTP/RTCP connections.
@@ -249,11 +244,16 @@
 
 					clientSession.setAttribute( clientPortsATTR, transport
 							.getClientPort() );
+					
+					int proxyRtpPort = RtpServerService.getInstance().getPort();
+					int proxyRtcpPort = RtcpServerService.getInstance().getPort();
 					transport.setClientPort( new int[] { proxyRtpPort, proxyRtcpPort } );
 
 				} else if ( transport.getTransportProtocol() == TransportProtocol.RDT ) {
 					clientSession.setAttribute( clientRdtPortATTR, new Integer( transport
 							.getClientPort()[0] ) );
+					
+					int proxyRdtPort = RdtServerService.getInstance().getPort();
 					transport.setClientPort( proxyRdtPort );
 				}
 				log.debug( "Transport Rewritten: " + transport );
@@ -299,8 +299,6 @@
 		RtspTransportList rtspTransportList = new RtspTransportList( response
 				.getHeader( "Transport" ) );
 
-		String netInterface = Config.get( "proxy.client.interface", null );
-
 		RtspTransport transport = rtspTransportList.getList().get( 0 );
 		log.debug( "Using Transport:" + transport );
 
@@ -343,13 +341,7 @@
 				int rtpPort = RtpClientService.getInstance().getPort();
 				int rtcpPort = RtcpClientService.getInstance().getPort();
 				transport.setServerPort( new int[] { rtpPort, rtcpPort } );
-				// transport.setClientPort( );
-				try {
-					transport.setSource( InetAddress.getByName( netInterface )
-							.getHostAddress() );
-				} catch ( UnknownHostException e ) {
-					transport.setSource( netInterface );
-				}
+				transport.setSource( RtpClientService.getInstance().getAddress().getHostAddress() );
 
 				// Obtaing client specified ports
 				int ports[] = (int[]) clientSession.getAttribute( clientPortsATTR );
@@ -396,12 +388,7 @@
 			} else {
 				int rdtPort = RdtClientService.getInstance().getPort();
 				transport.setServerPort( rdtPort );
-				try {
-					transport.setSource( InetAddress.getByName( netInterface )
-							.getHostAddress() );
-				} catch ( UnknownHostException e ) {
-					transport.setSource( netInterface );
-				}
+				// transport.setSource( RdtClientService.getInstance().getAddress().getHostAddress() );
 
 				// Obtaing client specified ports
 				int port = ((Integer) clientSession.getAttribute( clientRdtPortATTR ))

Modified: trunk/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java
===================================================================
--- trunk/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/proxy/ServerRtpPacketHandler.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -45,7 +45,7 @@
 	@Override
 	public void messageReceived( IoSession session, Object buffer ) throws Exception
 	{
-		log.debug( "Received RTP packet" );
+		// log.debug( "Received RTP packet" );
 		RtpPacket packet = new RtpPacket( (ByteBuffer) buffer );
 		RtpTrack track = RtpTrack.getByServerSSRC( packet.getSsrc() );
 

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java	2005-12-20 20:18:30 UTC (rev 353)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspMessage.java	2005-12-20 20:20:43 UTC (rev 354)
@@ -22,7 +22,7 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import rtspproxy.Config;
+import rtspproxy.config.Config;
 
 /**
  * Base abstract class for RTSP messages.



From merlimat at berlios.de  Tue Dec 20 21:42:30 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 20 Dec 2005 21:42:30 +0100
Subject: [Rtspproxy-devel] r356 - trunk/src/resources/conf
Message-ID: <200512202042.jBKKgUel002045@sheep.berlios.de>

Author: merlimat
Date: 2005-12-20 21:42:27 +0100 (Tue, 20 Dec 2005)
New Revision: 356

Modified:
   trunk/src/resources/conf/rtspproxy.properties
Log:
* Removed deleted parameters (dynamic ports)
* Added (commented out) the authentication scheme parameter

Modified: trunk/src/resources/conf/rtspproxy.properties
===================================================================
--- trunk/src/resources/conf/rtspproxy.properties	2005-12-20 20:23:02 UTC (rev 355)
+++ trunk/src/resources/conf/rtspproxy.properties	2005-12-20 20:42:27 UTC (rev 356)
@@ -32,11 +32,6 @@
 # RTSP connection. The default is 554, like normal RTSP servers.
 proxy.rtsp.port = 5540
 
-# If you need to define a particular network interface
-# to bind on, specify it here.
-# Default is to listen on all interfaces.
-## proxy.rtsp.interface = 10.0.0.10
-
 ##################################################
 #         RTP/RTCP CONNECTION TO SERVERS         # 
 ##################################################
@@ -50,11 +45,6 @@
 # listen on all interfaces.
 ## proxy.server.interface = 10.0.0.24
 
-# If true the proxy will try to bind the listener
-# for packet in the first available ports.
-# Default is false.
-proxy.server.dynamicPorts = True
-
 ##################################################
 #        RTP/RTCP CONNECTION TO CLIENTS          # 
 ##################################################
@@ -68,11 +58,6 @@
 # listen on all interfaces.
 ## proxy.client.interface = 10.0.0.23
 
-# If true the proxy will try to bind the listener
-# for packet in the first available ports.
-# Default is false.
-proxy.client.dynamicPorts = True
-
 ##################################################
 #          IP ADDRESS / HOSTNAME FILTER          # 
 ##################################################
@@ -97,6 +82,9 @@
 # Unconmment the following line to enable filtering
 # proxy.filter.authentication.enable = true
 
+# Select the desired authentication scheme: default is Basic
+# proxy.filter.authentication.scheme = Digest
+
 # Use an alternative backend class. The default is 
 # rtspproxy.filter.authentication.PlainTextAuthenticationProvider
 # This can be any class that implements the 



From merlimat at berlios.de  Sat Dec 24 10:09:49 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Sat, 24 Dec 2005 10:09:49 +0100
Subject: [Rtspproxy-devel] r357 - trunk/src/main/java/rtspproxy/rtsp
Message-ID: <200512240909.jBO99nwD010521@sheep.berlios.de>

Author: merlimat
Date: 2005-12-24 10:09:36 +0100 (Sat, 24 Dec 2005)
New Revision: 357

Modified:
   trunk/src/main/java/rtspproxy/rtsp/RtspEncoder.java
Log:
Using default "US-ASCII" encoding for outgoing RTSP message.

Modified: trunk/src/main/java/rtspproxy/rtsp/RtspEncoder.java
===================================================================
--- trunk/src/main/java/rtspproxy/rtsp/RtspEncoder.java	2005-12-20 20:42:27 UTC (rev 356)
+++ trunk/src/main/java/rtspproxy/rtsp/RtspEncoder.java	2005-12-24 09:09:36 UTC (rev 357)
@@ -18,6 +18,8 @@
 
 package rtspproxy.rtsp;
 
+import java.nio.charset.Charset;
+
 import org.apache.mina.common.ByteBuffer;
 import org.apache.mina.common.IoSession;
 import org.apache.mina.filter.codec.ProtocolEncoder;
@@ -29,6 +31,7 @@
  */
 public class RtspEncoder implements ProtocolEncoder
 {
+	private static final Charset asciiCharset = Charset.forName( "US-ASCII" );
 
 	/*
 	 * (non-Javadoc)
@@ -41,18 +44,8 @@
 	{
 		// Serialization to string is already provided in RTSP messages.
 		String val = ( (RtspMessage) message ).toString();
-		/*
-		ByteBuffer buf = ByteBuffer.allocate( val.length() );
-		for ( int i = 0; i < val.length(); i++ ) {
-			buf.put( (byte) val.charAt( i ) );
-		}
-
-		buf.flip();
-		*/
+		ByteBuffer buf = ByteBuffer.wrap( asciiCharset.encode( val ) );
 		
-		// TODO: Alternative implementation, should be better.
-		ByteBuffer buf = ByteBuffer.wrap( val.getBytes() );
-		
 		out.write( buf );
 	}
 



From merlimat at berlios.de  Sat Dec 24 10:12:09 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Sat, 24 Dec 2005 10:12:09 +0100
Subject: [Rtspproxy-devel] r358 - trunk/src/main/java/rtspproxy/lib
Message-ID: <200512240912.jBO9C9h3012163@sheep.berlios.de>

Author: merlimat
Date: 2005-12-24 10:11:59 +0100 (Sat, 24 Dec 2005)
New Revision: 358

Modified:
   trunk/src/main/java/rtspproxy/lib/Singleton.java
Log:
Using a Map<Class,Object> instead of a Set to keep track of singleton instances.

Modified: trunk/src/main/java/rtspproxy/lib/Singleton.java
===================================================================
--- trunk/src/main/java/rtspproxy/lib/Singleton.java	2005-12-24 09:09:36 UTC (rev 357)
+++ trunk/src/main/java/rtspproxy/lib/Singleton.java	2005-12-24 09:11:59 UTC (rev 358)
@@ -18,9 +18,8 @@
 
 package rtspproxy.lib;
 
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * Simple base implementation of the Singleton pattern. A singleton is a class
@@ -31,7 +30,8 @@
 public abstract class Singleton
 {
 
-	private static Set<Class> classSet = Collections.synchronizedSet( new HashSet<Class>() );
+	/** Maps a class to its (unique) instance */
+	private static Map<Class, Object> classMap = new ConcurrentHashMap<Class, Object>();
 
 	/**
 	 * Constructor. Takes care that only one instance at a time of this class is
@@ -39,17 +39,22 @@
 	 */
 	protected Singleton()
 	{
-		if ( classSet.contains( this.getClass() ) ) {
+		if ( classMap.containsKey( this.getClass() ) ) {
 			throw new RuntimeException( "There can be only one instance of class "
 					+ this.getClass().getName() );
 		}
 
-		classSet.add( this.getClass() );
+		classMap.put( this.getClass(), this );
 	}
 
 	public void finalize()
 	{
-		classSet.remove( this.getClass() );
+		classMap.remove( this.getClass() );
 	}
 
+	protected static Object getInstance( Class clazz )
+	{
+		return classMap.get( clazz );
+	}
+
 }



From merlimat at berlios.de  Sat Dec 24 10:24:00 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Sat, 24 Dec 2005 10:24:00 +0100
Subject: [Rtspproxy-devel] r359 - trunk/src/main/java/rtspproxy/config
Message-ID: <200512240924.jBO9O0XU016783@sheep.berlios.de>

Author: merlimat
Date: 2005-12-24 10:23:39 +0100 (Sat, 24 Dec 2005)
New Revision: 359

Modified:
   trunk/src/main/java/rtspproxy/config/BooleanParameter.java
   trunk/src/main/java/rtspproxy/config/Config.java
   trunk/src/main/java/rtspproxy/config/IntegerListParameter.java
   trunk/src/main/java/rtspproxy/config/IntegerParameter.java
   trunk/src/main/java/rtspproxy/config/Parameter.java
   trunk/src/main/java/rtspproxy/config/StringListParameter.java
   trunk/src/main/java/rtspproxy/config/StringParameter.java
Log:
Added 2 methods get/setObjectValue() to Parameters that works with Object arguments, to facilitate
integration with JMX.

Modified: trunk/src/main/java/rtspproxy/config/BooleanParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/BooleanParameter.java	2005-12-24 09:11:59 UTC (rev 358)
+++ trunk/src/main/java/rtspproxy/config/BooleanParameter.java	2005-12-24 09:23:39 UTC (rev 359)
@@ -29,7 +29,7 @@
 			this.value = false;
 		else
 			throw new IllegalArgumentException( "Boolean value not valid: " + value );
-		
+
 		setChanged();
 	}
 
@@ -50,11 +50,34 @@
 	@Override
 	public String getType()
 	{
-		return "Boolean";
+		return "java.lang.Boolean";
 	}
 
+	public void setValue( boolean value )
+	{
+		this.value = value;
+	}
+
 	public boolean getValue()
 	{
 		return value == null ? defaultValue : value.booleanValue();
 	}
+
+	@Override
+	public Object getObjectValue()
+	{
+		return value == null ? defaultValue : value;
+	}
+
+	@Override
+	public void setObjectValue( Object object )
+	{
+		if ( !(object instanceof Boolean) )
+			throw new IllegalArgumentException( "Value must be a Boolean" );
+
+		if ( !object.equals( getObjectValue() ) ) {
+			this.value = (Boolean) object;
+			setChanged();
+		}
+	}
 }

Modified: trunk/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/Config.java	2005-12-24 09:11:59 UTC (rev 358)
+++ trunk/src/main/java/rtspproxy/config/Config.java	2005-12-24 09:23:39 UTC (rev 359)
@@ -2,7 +2,10 @@
 
 import java.io.File;
 import java.util.Collection;
+import java.util.Date;
 import java.util.Map;
+import java.util.Observable;
+import java.util.Observer;
 import java.util.Properties;
 import java.util.TreeMap;
 import java.util.concurrent.ConcurrentHashMap;
@@ -13,8 +16,9 @@
 import rtspproxy.lib.Singleton;
 import rtspproxy.rtsp.Handler;
 
-public class Config extends Singleton
+public class Config extends Singleton implements Observer
 {
+
 	private static ConcurrentMap<String, Parameter> parameters = new ConcurrentHashMap<String, Parameter>();
 
 	protected static void addParameter( Parameter parameter )
@@ -49,15 +53,24 @@
 	public static final BooleanParameter logLogToFile = new BooleanParameter(
 			"log.logtofile", // name
 			false, // default value
-			false, // mutable
+			true, // mutable
 			"If you want to save to a file the debug output	set this to Yes" );
 
 	public static final StringParameter logFile = new StringParameter( "log.file", // name
 			"logs/rtspproxy.log", // default value
-			false, // mutable
+			true, // mutable
 			"Here you specify the file to log to." );
 
-	public static final IntegerListParameter proxyRtspPort = new IntegerListParameter(
+	public static final IntegerParameter threadPoolSize = new IntegerParameter(
+			"thread.pool.size", // name
+			new Integer( 0 ), // min value
+			new Integer( 2147483647 ), // max value
+			new Integer( 10 ), // default value
+			true, // mutable
+			"Maximum size of the thread pool. The thread pool is shared "
+					+ "between all services found in RtspProxy." );
+
+	public static final IntegerParameter proxyRtspPort = new IntegerParameter(
 			"proxy.rtsp.port", // name
 			new Integer( 0 ), // min value
 			new Integer( 65536 ), // max value
@@ -69,13 +82,13 @@
 	public static final StringParameter proxyClientInterface = new StringParameter(
 			"proxy.client.interface", // name
 			null, // default value
-			true, // mutable
+			false, // mutable
 			"Specify a network interface. Default is to listen on all interfaces." );
 
 	public static final StringParameter proxyServerInterface = new StringParameter(
 			"proxy.server.interface", // name
 			null, // default value
-			true, // mutable
+			false, // mutable
 			"Specify a network interface. Default is to listen on all interfaces." );
 
 	public static final IntegerParameter proxyServerRtpPort = new IntegerParameter(
@@ -181,6 +194,68 @@
 
 	// /////////////////////////////////////////////////////////
 
+	// Accounting filter
+
+	public static final BooleanParameter proxyFilterAccountingEnable = new BooleanParameter(
+			"proxy.filter.accounting.enable", // name
+			true, // default value
+			true, // mutable
+			"Controls the activation of the Accounting subsystem." );
+
+	public static final StringParameter proxyFilterAccountingImplementationClass = new StringParameter(
+			"proxy.filter.accounting.implementationClass", // name
+			"rtspproxy.filter.accounting.PlainTextAccountingProvider", // default
+			// value
+			false, // mutable
+			"Use an alternative backend class. This can be any class "
+					+ "that implements the rtspproxy.filter.accounting.AccountingProvider "
+					+ "interface." );
+
+	public static final StringParameter proxyFilterAccountingTextFile = new StringParameter(
+			"proxy.filter.accounting.text.file", // name
+			"logs/access.log", // default value
+			false, // mutable
+			"Plain Text based implementation specific configuration" );
+
+	// /////////////////////////////////////////////////////////
+
+	// JMX
+
+	public static final BooleanParameter proxyManagementEnable = new BooleanParameter(
+			"proxy.management.enable", // name
+			false, // default value
+			false, // mutable
+			"Controls the activation of the management subsystem (JMX)." );
+
+	public static final StringParameter proxyManagementHost = new StringParameter(
+			"proxy.management.host", // name
+			"localhost", // default value
+			false, // mutable
+			"Host to bind the management services. Default is localhost, and the services "
+					+ "will only be reachable from local machine." );
+
+	public static final BooleanParameter proxyManagementWebEnable = new BooleanParameter(
+			"proxy.management.web.enable", // name
+			false, // default value
+			false, // mutable
+			"Controls the activation of the Web management console." );
+
+	public static final IntegerParameter proxyManagementWebPort = new IntegerParameter(
+			"proxy.management.web.port", // name
+			new Integer( 0 ), // min value
+			new Integer( 65536 ), // max value
+			new Integer( 8000 ), // default value
+			false, // mutable
+			"TCP port to be used for the Web Console." );
+
+	public static final BooleanParameter proxyManagementRemoteEnable = new BooleanParameter(
+			"proxy.management.remote.enable", // name
+			false, // default value
+			false, // mutable
+			"Controls the activation of the JMX connector server." );
+
+	// /////////////////////////////////////////////////////////
+
 	private static String rtspproxyHome;
 
 	private static String name;
@@ -189,6 +264,8 @@
 
 	private static String proxySignature;
 
+	private static Date startDate;
+
 	// /////////////////////////////////////////////////////////
 
 	public Config()
@@ -221,9 +298,32 @@
 		sb.append( " / " ).append( System.getProperty( "os.arch" ) );
 		sb.append( ")" );
 		proxySignature = sb.toString();
+
+		startDate = new Date();
+
+		// Subscribe to parameter changes notification
+		logDebug.addObserver( this );
+		logFile.addObserver( this );
+		logLogToFile.addObserver( this );
 	}
 
 	/**
+	 * Manage parameters value changes
+	 * 
+	 * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
+	 */
+	public void update( Observable o, Object arg )
+	{
+		if ( !(o instanceof Parameter) )
+			throw new IllegalArgumentException( "Only observe parameters" );
+
+		if ( o == logDebug || o == logFile || o == logLogToFile ) {
+			updateDebugSettings();
+			// log.debug( "Updated logger settings." );
+		}
+	}
+
+	/**
 	 * @return the application base dir
 	 */
 	public static String getHome()
@@ -255,41 +355,58 @@
 		return proxySignature;
 	}
 
+	public static Date getStartDate()
+	{
+		return startDate;
+	}
+
 	// /////////////////////////////////////////////////////////
 
 	protected static void updateDebugSettings()
 	{
-		Properties prop = new Properties();
+		Properties logProperties = new Properties();
 		// common properties
-		prop.setProperty( "log4j.appender.A1.layout", "org.apache.log4j.PatternLayout" );
-		prop.setProperty( "log4j.appender.A1.layout.ConversionPattern",
-				"%7p [%t] (%F:%L) - %m%n" );
+		logProperties.setProperty( "log4j.appender.A1.layout",
+				"org.apache.log4j.PatternLayout" );
 
-		if ( logDebug.getValue() )
-			prop.setProperty( "log4j.rootLogger", "DEBUG, A1" );
-		else
+		if ( logDebug.getValue() ) {
+			/*
+			 * For debug messages we want to have a special layout
+			 */
+			logProperties.setProperty( "log4j.appender.A1.layout.ConversionPattern",
+					"%9r %5p [%t] %c - %m%n" );
+			logProperties.setProperty( "log4j.rootLogger", "DEBUG, A1" );
+
+		} else {
 			// only write important messages
-			prop.setProperty( "log4j.rootLogger", "INFO, A1" );
+			logProperties.setProperty( "log4j.appender.A1.layout.ConversionPattern",
+					"%5p - %d - %m%n" );
+			logProperties.setProperty( "log4j.rootLogger", "INFO, A1" );
+		}
 
-		if ( logLogToFile.getValue() ) {
+		if ( logLogToFile.getValue() == true ) {
 			// save logs in a file
-			String filename = logFile.getValue();
-			prop
-					.setProperty( "log4j.appender.A1",
-							"org.apache.log4j.RollingFileAppender" );
-			prop.setProperty( "log4j.appender.A1.File", filename );
+			File file = new File( logFile.getValue() );
+			if ( !file.isAbsolute() ) {
+				file = new File( rtspproxyHome + File.separator + logFile.getValue() );
+			}
 
+			logProperties.setProperty( "log4j.appender.A1",
+					"org.apache.log4j.RollingFileAppender" );
+			logProperties.setProperty( "log4j.appender.A1.File", file.getAbsolutePath() );
+
 			// if logs directory does not exists, create it
-			File logs = new File( rtspproxyHome + File.separator + "logs" );
+			File logs = file.getParentFile();
 			if ( !logs.exists() )
 				logs.mkdir();
 
 		} else {
 			// Log to console
-			prop.setProperty( "log4j.appender.A1", "org.apache.log4j.ConsoleAppender" );
+			logProperties.setProperty( "log4j.appender.A1",
+					"org.apache.log4j.ConsoleAppender" );
 		}
 
-		PropertyConfigurator.configure( prop );
+		PropertyConfigurator.configure( logProperties );
 	}
 
 	/**

Modified: trunk/src/main/java/rtspproxy/config/IntegerListParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/IntegerListParameter.java	2005-12-24 09:11:59 UTC (rev 358)
+++ trunk/src/main/java/rtspproxy/config/IntegerListParameter.java	2005-12-24 09:23:39 UTC (rev 359)
@@ -40,7 +40,7 @@
 		String[] tokens = value.split( "," );
 
 		for ( String token : tokens ) {
-			
+
 			token = token.trim();
 			try {
 				tmpValue = Integer.valueOf( token );
@@ -55,10 +55,10 @@
 			if ( maxValue != null && (tmpValue.compareTo( maxValue ) > 0) )
 				throw new IllegalArgumentException( "Integer value for " + name
 						+ " must be lesser than " + maxValue );
-			
+
 			this.values.add( tmpValue );
 		}
-	
+
 		setChanged();
 	}
 
@@ -100,6 +100,26 @@
 	@Override
 	public String getType()
 	{
-		return "IntegerList";
+		return "[I";
 	}
+
+	@Override
+	public Object getObjectValue()
+	{
+		return getValue();
+	}
+
+	@Override
+	public void setObjectValue( Object object )
+	{
+		if ( !(object instanceof int[]) )
+			throw new IllegalArgumentException( "Value must be a int[]" );
+		
+		this.values = new ArrayList<Integer>( ((int[]) object).length );
+		for ( int v : (int[]) object )
+			values.add( v );
+
+		setChanged();
+	}
+
 }

Modified: trunk/src/main/java/rtspproxy/config/IntegerParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/IntegerParameter.java	2005-12-24 09:11:59 UTC (rev 358)
+++ trunk/src/main/java/rtspproxy/config/IntegerParameter.java	2005-12-24 09:23:39 UTC (rev 359)
@@ -41,15 +41,7 @@
 					+ "not valid: " + value );
 		}
 
-		if ( minValue != null && (tmpValue.compareTo( minValue ) < 0) )
-			throw new IllegalArgumentException( "Integer value for " + name
-					+ " must be greater than " + minValue );
-		if ( maxValue != null && (tmpValue.compareTo( maxValue ) > 0) )
-			throw new IllegalArgumentException( "Integer value for " + name
-					+ " must be lesser than " + maxValue );
-
-		this.value = tmpValue;
-		setChanged();
+		setObjectValue( tmpValue );
 	}
 
 	@Override
@@ -74,6 +66,35 @@
 	@Override
 	public String getType()
 	{
-		return "Integer";
+		return "java.lang.Integer";
 	}
+
+	@Override
+	public Object getObjectValue()
+	{
+		return value == null ? defaultValue : value;
+	}
+
+	@Override
+	public void setObjectValue( Object object )
+	{
+		if ( !(object instanceof Integer) )
+			throw new IllegalArgumentException( "Value must be a Integer" );
+
+		Integer intVal = (Integer) object;
+
+		if ( minValue != null && (intVal.compareTo( minValue ) < 0) )
+			throw new IllegalArgumentException( "Integer value for " + name
+					+ " must be greater than " + minValue );
+		if ( maxValue != null && (intVal.compareTo( maxValue ) > 0) )
+			throw new IllegalArgumentException( "Integer value for " + name
+					+ " must be lesser than " + maxValue );
+
+		if ( !intVal.equals( getObjectValue() ) ) {
+			// Only notify if the value is different
+			this.value = intVal;
+			setChanged();
+		}
+	}
+
 }

Modified: trunk/src/main/java/rtspproxy/config/Parameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/Parameter.java	2005-12-24 09:11:59 UTC (rev 358)
+++ trunk/src/main/java/rtspproxy/config/Parameter.java	2005-12-24 09:23:39 UTC (rev 359)
@@ -11,11 +11,11 @@
 public abstract class Parameter extends Observable
 {
 
-	protected String name;
+	protected final String name;
 
-	protected boolean mutable;
+	protected final boolean mutable;
 
-	protected String description;
+	protected final String description;
 
 	protected Parameter( String name, boolean mutable, String description )
 	{
@@ -24,7 +24,7 @@
 		this.name = name;
 		this.mutable = mutable;
 		this.description = description;
-		
+
 		Config.addParameter( this );
 	}
 
@@ -52,6 +52,10 @@
 	 */
 	public abstract String getStringValue();
 
+	public abstract Object getObjectValue();
+
+	public abstract void setObjectValue( Object object );
+
 	/**
 	 * @return the name of this parameter
 	 */
@@ -78,8 +82,8 @@
 	}
 
 	/**
-	 * @return a human readable type name for this parameter, such as String,
-	 *         Integer...
+	 * @return the string representation of the type for this parameter, such as
+	 *         java.lang.String, java.lang.Integer...
 	 */
 	public abstract String getType();
 

Modified: trunk/src/main/java/rtspproxy/config/StringListParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/StringListParameter.java	2005-12-24 09:11:59 UTC (rev 358)
+++ trunk/src/main/java/rtspproxy/config/StringListParameter.java	2005-12-24 09:23:39 UTC (rev 359)
@@ -59,11 +59,14 @@
 	 */
 	public String getDefaultValue()
 	{
-		return defaultValue.toString();
+		return defaultValue;
 	}
 
 	public String[] getValue()
 	{
+		if ( values == null )
+			return new String[] { defaultValue };
+
 		String[] v = new String[values.size()];
 		for ( int i = values.size() - 1; i >= 0; i-- )
 			v[i] = values.get( i );
@@ -73,6 +76,26 @@
 	@Override
 	public String getType()
 	{
-		return "StringList";
+		return "[Ljava.lang.String";
 	}
+
+	@Override
+	public Object getObjectValue()
+	{
+		return getValue();
+	}
+
+	@Override
+	public void setObjectValue( Object object )
+	{
+		if ( !(object instanceof String[]) )
+			throw new IllegalArgumentException( "Value must be a String[]" );
+
+		this.values = new ArrayList<String>( ((String[]) object).length );
+		for ( String s : (String[]) object )
+			values.add( s );
+
+		setChanged();
+	}
+
 }

Modified: trunk/src/main/java/rtspproxy/config/StringParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/StringParameter.java	2005-12-24 09:11:59 UTC (rev 358)
+++ trunk/src/main/java/rtspproxy/config/StringParameter.java	2005-12-24 09:23:39 UTC (rev 359)
@@ -3,7 +3,6 @@
  */
 package rtspproxy.config;
 
-
 /**
  * @author Matteo Merli
  */
@@ -37,7 +36,7 @@
 	@Override
 	public String getType()
 	{
-		return "String";
+		return "java.lang.String";
 	}
 
 	public String getValue()
@@ -53,4 +52,23 @@
 		return defaultValue;
 	}
 
+	@Override
+	public Object getObjectValue()
+	{
+		return getValue();
+	}
+
+	@Override
+	public void setObjectValue( Object object )
+	{
+		if ( !(object instanceof String) )
+			throw new IllegalArgumentException( "Value must be a String" );
+
+		if ( !object.equals( getObjectValue() ) ) {
+			// Only notify if the value is different
+			this.value = (String) object;
+			setChanged();
+		}
+	}
+
 }



From merlimat at berlios.de  Sat Dec 24 10:54:37 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Sat, 24 Dec 2005 10:54:37 +0100
Subject: [Rtspproxy-devel] r360 - trunk/src/main/java/rtspproxy
Message-ID: <200512240954.jBO9sbi4020475@sheep.berlios.de>

Author: merlimat
Date: 2005-12-24 10:54:24 +0100 (Sat, 24 Dec 2005)
New Revision: 360

Modified:
   trunk/src/main/java/rtspproxy/ProxyService.java
   trunk/src/main/java/rtspproxy/ProxyServiceRegistry.java
   trunk/src/main/java/rtspproxy/RdtClientService.java
   trunk/src/main/java/rtspproxy/RdtServerService.java
   trunk/src/main/java/rtspproxy/Reactor.java
   trunk/src/main/java/rtspproxy/RtcpClientService.java
   trunk/src/main/java/rtspproxy/RtcpServerService.java
   trunk/src/main/java/rtspproxy/RtpClientService.java
   trunk/src/main/java/rtspproxy/RtpServerService.java
   trunk/src/main/java/rtspproxy/RtspService.java
Log:
Added some methods to facilitate integration with JMX.

Modified: trunk/src/main/java/rtspproxy/ProxyService.java
===================================================================
--- trunk/src/main/java/rtspproxy/ProxyService.java	2005-12-24 09:23:39 UTC (rev 359)
+++ trunk/src/main/java/rtspproxy/ProxyService.java	2005-12-24 09:54:24 UTC (rev 360)
@@ -32,10 +32,15 @@
 import org.apache.mina.common.IoSession;
 import org.apache.mina.common.TransportType;
 
+import rtspproxy.config.Parameter;
+import rtspproxy.lib.Exceptions;
 import rtspproxy.lib.NetworkInterface;
 import rtspproxy.lib.Singleton;
 
 /**
+ * ProxyService is the base abstract class for all the "Services" that can be
+ * found on the RtspProxy application.
+ * 
  * @author Matteo Merli
  */
 public abstract class ProxyService extends Singleton implements Observer
@@ -43,11 +48,22 @@
 
 	private static Logger log = Logger.getLogger( ProxyService.class );
 
+	/**
+	 * Main Socket address used by the service. It can be bound on several
+	 * different addresses and network interfaces, but it MUST have a default
+	 * address to be communicated to third parties.
+	 */
 	private InetSocketAddress socketAddress = null;
 
+	/**
+	 * Flag used to keep track of the service status.
+	 */
 	private volatile boolean isRunning = false;
 
-	public static final String SERVICE = ProxyService.class.getName();
+	/**
+	 * Service hook name.
+	 */
+	protected static final String SERVICE = ProxyService.class.getName();
 
 	/**
 	 * Starts the service.
@@ -62,7 +78,7 @@
 		}
 
 		String netInterface = getNetworkInterface();
-		int[] ports = getBindPorts();
+		int port = getBindPort();
 
 		try {
 
@@ -71,18 +87,16 @@
 			for ( InetAddress inetAddress : addressSet ) {
 				// Bind to all addresses
 
-				for ( int port : ports ) {
-					// Bind to all the specified ports
-					socketAddress = new InetSocketAddress( inetAddress, port );
+				socketAddress = new InetSocketAddress( inetAddress, port );
 
-					Reactor.getRegistry().bind( this, getIoHandler(), socketAddress,
-							getFilterChainBuilder() );
-				}
+				Reactor.getRegistry().bind( this, getIoHandler(), socketAddress,
+						getFilterChainBuilder() );
+
 			}
 
 			// Choose a bind address
 			InetAddress inetAddress = NetworkInterface.getBindAddress( addressSet );
-			socketAddress = new InetSocketAddress( inetAddress, ports[0] );
+			socketAddress = new InetSocketAddress( inetAddress, port );
 
 			log.info( getName() + " Started - Listening on: " + socketAddress );
 
@@ -99,7 +113,7 @@
 	 * 
 	 * @throws Exception
 	 */
-	protected void stop() throws Exception
+	public void stop() throws Exception
 	{
 		if ( !isRunning ) {
 			log.warn( getName() + " is not running." );
@@ -110,18 +124,25 @@
 		isRunning = false;
 	}
 
-	protected void restart() throws Exception
+	/**
+	 * Restart the service.
+	 * 
+	 * @throws Exception
+	 */
+	public void restart() throws Exception
 	{
-		if ( !isRunning ) {
+		log.info( "Restarting " + getName() );
+		if ( isRunning )
+			stop();
+		else
 			log.warn( getName() + " is not running." );
-			return;
-		}
 
-		log.info( "Restarting " + getName() );
-		stop();
 		start();
 	}
 
+	/**
+	 * @return true if the server is running
+	 */
 	public boolean isRunning()
 	{
 		return isRunning;
@@ -138,10 +159,14 @@
 	 */
 	public abstract IoHandler getIoHandler();
 
+	/**
+	 * @return the filter chain builder to be be used by the IoAcceptor
+	 *         associated with the service.
+	 */
 	public IoFilterChainBuilder getFilterChainBuilder()
 	{
 		// By default there's no filter chain
-		return null;
+		return IoFilterChainBuilder.NOOP;
 	}
 
 	/**
@@ -151,25 +176,61 @@
 	 */
 	public abstract String getName();
 
+	/**
+	 * @return the network interface to bind this service on, as it appears in
+	 *         the configuratio registry (Config).
+	 */
 	public abstract String getNetworkInterface();
 
-	public abstract int[] getBindPorts();
+	/**
+	 * @return the port to bind on, as it appear in the configuration registry.
+	 */
+	public abstract int getBindPort();
 
+	/**
+	 * @return the Parameter associated with the network interface used by the
+	 *         service.
+	 */
+	public abstract Parameter getNetworkInterfaceParameter();
+
+	/**
+	 * @return the Parameter associated with the port number used by the
+	 *         service.
+	 */
+	public abstract Parameter getPortParameter();
+
+	/**
+	 * @return the main IP address where the service is bound.
+	 */
 	public InetAddress getAddress()
 	{
 		return socketAddress.getAddress();
 	}
 
+	/**
+	 * @return the main TCP or UDP port where the service is bound.
+	 */
 	public int getPort()
 	{
 		return socketAddress.getPort();
 	}
 
+	/**
+	 * @return the TCP or UDP address (IP+port) where the service is bound.
+	 */
 	public SocketAddress getSocketAddress()
 	{
 		return socketAddress;
 	}
 
+	/**
+	 * Creates a new connection-less IoSession to a remote address. This is only
+	 * used to create UDP session.
+	 * 
+	 * @param remoteAddress
+	 *            the address of the remote host to connect to.
+	 * @return the newly created IoSession
+	 */
 	public IoSession newSession( SocketAddress remoteAddress )
 	{
 		return Reactor.getRegistry().getAcceptor( this ).newSession( remoteAddress,
@@ -193,10 +254,15 @@
 	 */
 	public void update( Observable o, Object arg )
 	{
+		if ( !(o instanceof Parameter) )
+			throw new IllegalArgumentException( "Only observe parameters" );
+
 		try {
 			restart();
 		} catch ( Exception e ) {
-			log.error( "Error restarting " + getName(), e );
+			log.error( "Error restarting " + getName() );
+			Exceptions.logStackTrace( e );
+			throw new RuntimeException( e );
 		}
 	}
 }

Modified: trunk/src/main/java/rtspproxy/ProxyServiceRegistry.java
===================================================================
--- trunk/src/main/java/rtspproxy/ProxyServiceRegistry.java	2005-12-24 09:23:39 UTC (rev 359)
+++ trunk/src/main/java/rtspproxy/ProxyServiceRegistry.java	2005-12-24 09:54:24 UTC (rev 360)
@@ -22,11 +22,15 @@
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.util.HashSet;
+import java.util.Observable;
+import java.util.Observer;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
+import org.apache.log4j.Logger;
 import org.apache.mina.common.IoAcceptor;
+import org.apache.mina.common.IoFilter;
 import org.apache.mina.common.IoFilterChain;
 import org.apache.mina.common.IoFilterChainBuilder;
 import org.apache.mina.common.IoHandler;
@@ -34,46 +38,93 @@
 import org.apache.mina.filter.ThreadPoolFilter;
 import org.apache.mina.transport.socket.nio.DatagramAcceptor;
 import org.apache.mina.transport.socket.nio.SocketAcceptor;
-import org.apache.mina.transport.vmpipe.VmPipeAcceptor;
 
+import rtspproxy.config.Config;
+import rtspproxy.config.Parameter;
+import rtspproxy.lib.Singleton;
+
 /**
  * Custom implementation of the ServiceRegistry interface. Creates an acceptor
  * for every service.
  * 
  * @author Matteo Merli
  */
-public class ProxyServiceRegistry
+public final class ProxyServiceRegistry extends Singleton implements Observer
 {
 
-	/**
-	 * Thread pool instance that will be added to all acceptors.
-	 */
-	protected final ThreadPoolFilter threadPoolFilter = new ThreadPoolFilter();
+	private static Logger log = Logger.getLogger( ProxyServiceRegistry.class );
 
+	public static final String threadPoolFilterNAME = "threadPoolFilter";
+
+	/** Thread pool instance that will be added to all acceptors. */
+	private final ThreadPoolFilter threadPoolFilter = new ThreadPoolFilter();
+
 	/** All the services, mapped by name. */
 	private final ConcurrentMap<String, ProxyService> services = new ConcurrentHashMap<String, ProxyService>();
 
 	/** Map a ProxyService to all its bound addresses. */
 	private final ConcurrentMap<ProxyService, Set<SocketAddress>> addresses = new ConcurrentHashMap<ProxyService, Set<SocketAddress>>();
 
+	/** Map a ProxyService to its own IoAcceptor. */
 	private final ConcurrentMap<ProxyService, IoAcceptor> acceptors = new ConcurrentHashMap<ProxyService, IoAcceptor>();
 
+	/**
+	 * Construct a new ProxyServiceRegistry. This class is a Singleton, so there
+	 * can be only one instance.
+	 */
+	public ProxyServiceRegistry()
+	{
+		int poolMaxSize = Config.threadPoolSize.getValue();
+		threadPoolFilter.setMaximumPoolSize( poolMaxSize );
+
+		// Subscribe to thread pool size changes notification
+		Config.threadPoolSize.addObserver( this );
+	}
+
+	/**
+	 * Bind a Service to a local address and specify the IoHandler that will
+	 * manage ingoing and outgoing messages.
+	 * 
+	 * @param service
+	 *            the ProxyService
+	 * @param ioHandler
+	 *            the IoHandler that will handle the messages
+	 * @param address
+	 *            the local address to bind on
+	 * @throws IOException
+	 */
 	public void bind( ProxyService service, IoHandler ioHandler, InetSocketAddress address )
 			throws IOException
 	{
 		bind( service, ioHandler, address, null );
 	}
 
+	/**
+	 * Bind a Service to a local address and specify the IoHandler that will
+	 * manage ingoing and outgoing messages.
+	 * <p>
+	 * In addition it should be specified an IoFilterChainBuilder. This builder
+	 * will be associated with the IoAcceptor itself (which is unique per
+	 * ProxyService) and not for every IoSession created.
+	 * 
+	 * @param service
+	 *            the ProxyService
+	 * @param ioHandler
+	 *            the IoHandler that will handle the messages
+	 * @param address
+	 *            the local address to bind on
+	 * @param filterChainBuilder
+	 *            the IoFilterChainBuilder instance
+	 * @throws IOException
+	 */
 	public void bind( ProxyService service, IoHandler ioHandler,
 			InetSocketAddress address, IoFilterChainBuilder filterChainBuilder )
 			throws IOException
 	{
 		IoAcceptor acceptor = newAcceptor( service );
-		if ( filterChainBuilder == null ) {
-			filterChainBuilder = IoFilterChainBuilder.NOOP;
-		}
-		acceptor.bind( address, ioHandler, new IoFilterChainBuilderWrapper( service,
+		acceptor.setFilterChainBuilder( new IoFilterChainBuilderWrapper( service,
 				filterChainBuilder ) );
+		acceptor.bind( address, ioHandler );
 
 		services.put( service.getName(), service );
 
@@ -82,6 +133,13 @@
 		addresses.get( service ).add( address );
 	}
 
+	/**
+	 * Unbind the service from all of its bound addresses.
+	 * 
+	 * @param service
+	 *            the ProxyService
+	 * @throws Exception
+	 */
 	public synchronized void unbind( ProxyService service ) throws Exception
 	{
 		IoAcceptor acceptor = acceptors.get( service );
@@ -102,6 +160,12 @@
 		addresses.remove( service );
 	}
 
+	/**
+	 * Unbind all the services registered in the ProxyServiceRegistry, from all
+	 * of they bound addresses.
+	 * 
+	 * @throws Exception
+	 */
 	public synchronized void unbindAll() throws Exception
 	{
 		Set<ProxyService> serviceList = new HashSet<ProxyService>( services.values() );
@@ -110,16 +174,34 @@
 		}
 	}
 
-	public synchronized Set getAllServices()
+	/**
+	 * @return a Set containing all the registered services.
+	 */
+	public Set<ProxyService> getAllServices()
 	{
 		return new HashSet<ProxyService>( services.values() );
 	}
 
+	/**
+	 * Return the instance of a ProxyService.
+	 * 
+	 * @param name
+	 *            the name of the ProxyService
+	 * @return the instance of the ProxyService
+	 */
 	public ProxyService getService( String name )
 	{
 		return services.get( name );
 	}
 
+	/**
+	 * Returns a reference to the IoAcceptor used by the specified ProxyService.
+	 * 
+	 * @param serviceName
+	 *            the name of the ProxyService
+	 * @return the IoAcceptor associated with the service or null if the
+	 *         serviceName is invalid
+	 */
 	public IoAcceptor getAcceptor( String serviceName )
 	{
 		ProxyService service = services.get( serviceName );
@@ -129,11 +211,25 @@
 			return acceptors.get( service );
 	}
 
+	/**
+	 * Returns a reference to the IoAcceptor used by the specified ProxyService.
+	 * 
+	 * @param service
+	 *            the ProxyService
+	 * @return the IoAcceptor associated with the service
+	 */
 	public IoAcceptor getAcceptor( ProxyService service )
 	{
 		return acceptors.get( service );
 	}
 
+	/**
+	 * Gets a new IoAcceptor suitable for the specified ProxyService
+	 * 
+	 * @param service
+	 *            the ProxyService
+	 * @return a reference to the IoAcceptor
+	 */
 	private IoAcceptor newAcceptor( ProxyService service )
 	{
 		// First check if there's already an acceptor
@@ -144,11 +240,9 @@
 		// Create a new one
 		TransportType transportType = service.getTransportType();
 		if ( transportType == TransportType.SOCKET )
-			acceptor = new SocketAcceptor();
+			acceptor = new SocketAcceptor(); // socketAcceptor;
 		else if ( transportType == TransportType.DATAGRAM )
-			acceptor = new DatagramAcceptor();
-		else if ( transportType == TransportType.VM_PIPE )
-			acceptor = new VmPipeAcceptor();
+			acceptor = new DatagramAcceptor(); // datagramAcceptor;
 		else
 			acceptor = null;
 
@@ -157,14 +251,54 @@
 		return acceptor;
 	}
 
-	private class IoFilterChainBuilderWrapper implements IoFilterChainBuilder
+	/**
+	 * Gets notification of changed parameters.
+	 * 
+	 * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
+	 */
+	public void update( Observable o, Object arg )
 	{
+		if ( !(o instanceof Parameter) )
+			throw new IllegalArgumentException( "Only observe parameters" );
 
+		if ( o == Config.threadPoolSize ) {
+			// Update the thread pool size
+			threadPoolFilter.setMaximumPoolSize( Config.threadPoolSize.getValue() );
+			log.info( "Changed ThreadPool size. New max size: "
+					+ threadPoolFilter.getMaximumPoolSize() );
+		}
+	}
+
+	/**
+	 * @return the shared thread pool filter instance
+	 */
+	public IoFilter getThreadPoolFilterInstance()
+	{
+		return threadPoolFilter;
+	}
+
+	/**
+	 * @return a reference to the (unique) ProxyServiceRegistry instance
+	 */
+	public static ProxyServiceRegistry getInstance()
+	{
+		return (ProxyServiceRegistry) Singleton.getInstance( ProxyServiceRegistry.class );
+	}
+
+	/**
+	 * Wrapper class for the IoFilterChainBuilder that always add the thread
+	 * pool filter as the filter in the chain.
+	 * <p>
+	 * The thread pool filter will be shared by all the services and acceptors.
+	 */
+	protected static class IoFilterChainBuilderWrapper implements IoFilterChainBuilder
+	{
+
 		private final ProxyService service;
 
 		private final IoFilterChainBuilder originalBuilder;
 
-		private IoFilterChainBuilderWrapper( ProxyService service,
+		public IoFilterChainBuilderWrapper( ProxyService service,
 				IoFilterChainBuilder originalBuilder )
 		{
 			this.service = service;
@@ -175,11 +309,10 @@
 		{
 			chain.getSession().setAttribute( ProxyService.SERVICE, service );
 
-			try {
-				originalBuilder.buildFilterChain( chain );
-			} finally {
-				chain.addFirst( "threadPool", threadPoolFilter );
-			}
+			IoFilter threadPoolFilter = ProxyServiceRegistry.getInstance()
+					.getThreadPoolFilterInstance();
+			chain.addFirst( threadPoolFilterNAME, threadPoolFilter );
+			originalBuilder.buildFilterChain( chain );
 		}
 	}
 

Modified: trunk/src/main/java/rtspproxy/RdtClientService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RdtClientService.java	2005-12-24 09:23:39 UTC (rev 359)
+++ trunk/src/main/java/rtspproxy/RdtClientService.java	2005-12-24 09:54:24 UTC (rev 360)
@@ -22,24 +22,30 @@
 import org.apache.mina.common.TransportType;
 
 import rtspproxy.config.Config;
+import rtspproxy.config.Parameter;
+import rtspproxy.lib.Singleton;
 import rtspproxy.proxy.ClientRdtPacketHandler;
 
 /**
+ * ProxyService that manages the RDT packets incoming from clients.
+ * 
  * @author Matteo Merli
  */
-public class RdtClientService extends ProxyService
+public final class RdtClientService extends ProxyService
 {
 
 	private IoHandler clientRdtPacketHandler = new ClientRdtPacketHandler();
 
-	public static final String NAME = "RdtClientService";
+	/** Service name */
+	private static final String NAME = "RdtClientService";
 
-	private static RdtClientService instance;
-
 	public RdtClientService()
 	{
 		super();
-		instance = this;
+
+		// Subscribe to parameter changes
+		Config.proxyClientInterface.addObserver( this );
+		Config.proxyClientRdtPort.addObserver( this );
 	}
 
 	@Override
@@ -67,15 +73,29 @@
 	}
 
 	@Override
-	public int[] getBindPorts()
+	public int getBindPort()
 	{
-		int port = Config.proxyClientRdtPort.getValue();
-		return new int[] { port };
+		return Config.proxyClientRdtPort.getValue();
 	}
 
+	/**
+	 * @return a reference to the (unique) instance of this class
+	 */
 	public static RdtClientService getInstance()
 	{
-		return instance;
+		return (RdtClientService) Singleton.getInstance( RdtClientService.class );
 	}
 
+	@Override
+	public Parameter getNetworkInterfaceParameter()
+	{
+		return Config.proxyClientInterface;
+	}
+
+	@Override
+	public Parameter getPortParameter()
+	{
+		return Config.proxyClientRdtPort;
+	}
+
 }

Modified: trunk/src/main/java/rtspproxy/RdtServerService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RdtServerService.java	2005-12-24 09:23:39 UTC (rev 359)
+++ trunk/src/main/java/rtspproxy/RdtServerService.java	2005-12-24 09:54:24 UTC (rev 360)
@@ -22,23 +22,28 @@
 import org.apache.mina.common.TransportType;
 
 import rtspproxy.config.Config;
+import rtspproxy.config.Parameter;
+import rtspproxy.lib.Singleton;
 import rtspproxy.proxy.ServerRdtPacketHandler;
 
 /**
+ * ProxyService that manages the RDT packets incoming from servers.
+ * 
  * @author Matteo Merli
  */
-public class RdtServerService extends ProxyService
+public final class RdtServerService extends ProxyService
 {
 	private IoHandler serverRdtPacketHandler = new ServerRdtPacketHandler();
 
-	public static final String NAME = "RdtServerService";
+	private static final String NAME = "RdtServerService";
 
-	private static RdtServerService instance;
-
 	public RdtServerService()
 	{
 		super();
-		instance = this;
+
+		// Subscribe to parameter changes
+		Config.proxyServerInterface.addObserver( this );
+		Config.proxyServerRdtPort.addObserver( this );
 	}
 
 	@Override
@@ -66,15 +71,28 @@
 	}
 
 	@Override
-	public int[] getBindPorts()
+	public int getBindPort()
 	{
-		int port = Config.proxyServerRdtPort.getValue();
-		return new int[] { port };
+		return Config.proxyServerRdtPort.getValue();
 	}
 
+	/**
+	 * @return a reference to the (unique) instance of this class
+	 */
 	public static RdtServerService getInstance()
 	{
-		return instance;
+		return (RdtServerService) Singleton.getInstance( RdtServerService.class );
 	}
 
+	@Override
+	public Parameter getNetworkInterfaceParameter()
+	{
+		return Config.proxyServerInterface;
+	}
+	
+	@Override
+	public Parameter getPortParameter()
+	{
+		return Config.proxyServerRdtPort;
+	}
 }

Modified: trunk/src/main/java/rtspproxy/Reactor.java
===================================================================
--- trunk/src/main/java/rtspproxy/Reactor.java	2005-12-24 09:23:39 UTC (rev 359)
+++ trunk/src/main/java/rtspproxy/Reactor.java	2005-12-24 09:54:24 UTC (rev 360)
@@ -22,6 +22,8 @@
 
 import rtspproxy.config.Config;
 import rtspproxy.config.ConfigReader;
+import rtspproxy.jmx.JmxAgent;
+import rtspproxy.lib.Exceptions;
 
 /**
  * 
@@ -31,8 +33,10 @@
 
 	private static Logger log = Logger.getLogger( Reactor.class );
 
-	private static ProxyServiceRegistry registry = new ProxyServiceRegistry();
+	private static ProxyServiceRegistry registry = null;
 
+	private static JmxAgent jmxAgent = null;
+
 	private static boolean isStandalone = false;
 
 	public static void setStandalone( boolean standalone )
@@ -75,6 +79,8 @@
 
 		log.info( "Starting " + Config.getName() + " " + Config.getVersion() );
 
+		registry = new ProxyServiceRegistry();
+
 		// Register the "rtsp://" protocol scheme
 		System.setProperty( "java.protocol.handler.pkgs", "rtspproxy" );
 
@@ -98,18 +104,28 @@
 
 		ProxyService rdtServerService = new RdtServerService();
 		rdtServerService.start();
+
+		boolean enableJmx = Config.proxyManagementEnable.getValue();
+		if ( enableJmx )
+			jmxAgent = new JmxAgent();
 	}
 
 	static public void stop()
 	{
 		try {
-			registry.unbindAll();
+			if ( jmxAgent != null )
+				jmxAgent.stop();
+
+			if ( registry != null )
+				registry.unbindAll();
+			
+			log.info( "Shutdown completed" );
+
 		} catch ( Exception e ) {
-			log.debug( "Error shutting down: " + e );
+			log.warn( "Error shutting down: " + e );
+			Exceptions.logStackTrace( e );
 		}
 
-		log.info( "Shutdown completed" );
-
 		if ( isStandalone )
 			Runtime.getRuntime().halt( 0 );
 	}

Modified: trunk/src/main/java/rtspproxy/RtcpClientService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtcpClientService.java	2005-12-24 09:23:39 UTC (rev 359)
+++ trunk/src/main/java/rtspproxy/RtcpClientService.java	2005-12-24 09:54:24 UTC (rev 360)
@@ -22,23 +22,29 @@
 import org.apache.mina.common.TransportType;
 
 import rtspproxy.config.Config;
+import rtspproxy.config.Parameter;
+import rtspproxy.lib.Singleton;
 import rtspproxy.proxy.ClientRtcpPacketHandler;
 
 /**
+ * ProxyService that manages the RTCP packets incoming from clients.
+ * 
  * @author Matteo Merli
  */
-public class RtcpClientService extends ProxyService
+public final class RtcpClientService extends ProxyService
 {
 	private IoHandler clientRtcpPacketHandler = new ClientRtcpPacketHandler();
 
-	public static final String NAME = "RtcpClientService";
-	
-	private static RtcpClientService instance;
+	/** The name of this service */
+	private static final String NAME = "RtcpClientService";
 
 	public RtcpClientService()
 	{
 		super();
-		instance = this;
+
+		// Subscribe to parameter changes
+		Config.proxyClientInterface.addObserver( this );
+		Config.proxyClientRtcpPort.addObserver( this );
 	}
 
 	@Override
@@ -66,15 +72,29 @@
 	}
 
 	@Override
-	public int[] getBindPorts()
+	public int getBindPort()
 	{
-		int port = Config.proxyClientRtcpPort.getValue();
-		return new int[] { port };
+		return Config.proxyClientRtcpPort.getValue();
 	}
-	
+
+	/**
+	 * @return a reference to the (unique) instance of this class
+	 */
 	public static RtcpClientService getInstance()
 	{
-		return instance;
+		return (RtcpClientService) Singleton.getInstance( RtcpClientService.class );
 	}
 
+	@Override
+	public Parameter getNetworkInterfaceParameter()
+	{
+		return Config.proxyClientInterface;
+	}
+
+	@Override
+	public Parameter getPortParameter()
+	{
+		return Config.proxyClientRtcpPort;
+	}
+
 }

Modified: trunk/src/main/java/rtspproxy/RtcpServerService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtcpServerService.java	2005-12-24 09:23:39 UTC (rev 359)
+++ trunk/src/main/java/rtspproxy/RtcpServerService.java	2005-12-24 09:54:24 UTC (rev 360)
@@ -22,23 +22,29 @@
 import org.apache.mina.common.TransportType;
 
 import rtspproxy.config.Config;
+import rtspproxy.config.Parameter;
+import rtspproxy.lib.Singleton;
 import rtspproxy.proxy.ServerRtcpPacketHandler;
 
 /**
+ * ProxyService that manages the RTCP packets incoming from servers.
+ * 
  * @author Matteo Merli
  */
-public class RtcpServerService extends ProxyService
+public final class RtcpServerService extends ProxyService
 {
 	private IoHandler serverRtcpPacketHandler = new ServerRtcpPacketHandler();
 
-	public static final String NAME = "RtcpServerService";
-	
-	private static RtcpServerService instance;
+	/** The name of this service */
+	private static final String NAME = "RtcpServerService";
 
 	public RtcpServerService()
 	{
 		super();
-		instance = this;
+
+		// Subscribe to parameter changes
+		Config.proxyServerInterface.addObserver( this );
+		Config.proxyServerRtcpPort.addObserver( this );
 	}
 
 	@Override
@@ -66,15 +72,29 @@
 	}
 
 	@Override
-	public int[] getBindPorts()
+	public int getBindPort()
 	{
-		int port = Config.proxyServerRtcpPort.getValue();
-		return new int[] { port };
+		return Config.proxyServerRtcpPort.getValue();
 	}
-	
+
+	/**
+	 * @return a reference to the (unique) instance of this class
+	 */
 	public static RtcpServerService getInstance()
 	{
-		return instance;
+		return (RtcpServerService) Singleton.getInstance( RtcpServerService.class );
 	}
 
+	@Override
+	public Parameter getNetworkInterfaceParameter()
+	{
+		return Config.proxyServerInterface;
+	}
+
+	@Override
+	public Parameter getPortParameter()
+	{
+		return Config.proxyServerRtcpPort;
+	}
+
 }

Modified: trunk/src/main/java/rtspproxy/RtpClientService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtpClientService.java	2005-12-24 09:23:39 UTC (rev 359)
+++ trunk/src/main/java/rtspproxy/RtpClientService.java	2005-12-24 09:54:24 UTC (rev 360)
@@ -22,23 +22,26 @@
 import org.apache.mina.common.TransportType;
 
 import rtspproxy.config.Config;
+import rtspproxy.config.Parameter;
+import rtspproxy.lib.Singleton;
 import rtspproxy.proxy.ClientRtpPacketHandler;
 
 /**
  * @author Matteo Merli
  */
-public class RtpClientService extends ProxyService
+public final class RtpClientService extends ProxyService
 {
 	private IoHandler clientRtpPacketHandler = new ClientRtpPacketHandler();
 
-	public static final String NAME = "RtpClientService";
-	
-	private static RtpClientService instance;
+	private static final String NAME = "RtpClientService";
 
 	public RtpClientService()
 	{
 		super();
-		instance = this;
+
+		// Subscribe to parameter changes
+		Config.proxyClientInterface.addObserver( this );
+		Config.proxyClientRtpPort.addObserver( this );
 	}
 
 	@Override
@@ -66,15 +69,26 @@
 	}
 
 	@Override
-	public int[] getBindPorts()
+	public int getBindPort()
 	{
-		int port = Config.proxyClientRtpPort.getValue();
-		return new int[] { port };
+		return Config.proxyClientRtpPort.getValue();
 	}
-	
+
 	public static RtpClientService getInstance()
 	{
-		return instance;
+		return (RtpClientService) Singleton.getInstance( RtpClientService.class );
 	}
+	
+	@Override
+	public Parameter getNetworkInterfaceParameter()
+	{
+		return Config.proxyClientInterface;
+	}
+	
+	@Override
+	public Parameter getPortParameter()
+	{
+		return Config.proxyClientRtpPort;
+	}
 
 }

Modified: trunk/src/main/java/rtspproxy/RtpServerService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtpServerService.java	2005-12-24 09:23:39 UTC (rev 359)
+++ trunk/src/main/java/rtspproxy/RtpServerService.java	2005-12-24 09:54:24 UTC (rev 360)
@@ -22,23 +22,26 @@
 import org.apache.mina.common.TransportType;
 
 import rtspproxy.config.Config;
+import rtspproxy.config.Parameter;
+import rtspproxy.lib.Singleton;
 import rtspproxy.proxy.ServerRtpPacketHandler;
 
 /**
  * @author Matteo Merli
  */
-public class RtpServerService extends ProxyService
+public final class RtpServerService extends ProxyService
 {
 	private IoHandler serverRtpPacketHandler = new ServerRtpPacketHandler();
 
-	public static final String NAME = "RtpServerService";
-	
-	private static RtpServerService instance;
+	private static final String NAME = "RtpServerService";
 
 	public RtpServerService()
 	{
 		super();
-		instance = this;
+
+		// Subscribe to parameter changes
+		Config.proxyServerInterface.addObserver( this );
+		Config.proxyServerRtpPort.addObserver( this );
 	}
 
 	@Override
@@ -66,15 +69,26 @@
 	}
 
 	@Override
-	public int[] getBindPorts()
+	public int getBindPort()
 	{
-		int port = Config.proxyServerRtpPort.getValue();
-		return new int[] { port };
+		return Config.proxyServerRtpPort.getValue();
 	}
-	
+
 	public static RtpServerService getInstance()
 	{
-		return instance;
+		return (RtpServerService) Singleton.getInstance( RtpServerService.class );
 	}
 
+	@Override
+	public Parameter getNetworkInterfaceParameter()
+	{
+		return Config.proxyServerInterface;
+	}
+	
+	@Override
+	public Parameter getPortParameter()
+	{
+		return Config.proxyServerRtpPort;
+	}
+	
 }

Modified: trunk/src/main/java/rtspproxy/RtspService.java
===================================================================
--- trunk/src/main/java/rtspproxy/RtspService.java	2005-12-24 09:23:39 UTC (rev 359)
+++ trunk/src/main/java/rtspproxy/RtspService.java	2005-12-24 09:54:24 UTC (rev 360)
@@ -18,31 +18,47 @@
 
 package rtspproxy;
 
+import java.util.Observable;
+
+import org.apache.log4j.Logger;
+import org.apache.mina.common.IoAcceptor;
 import org.apache.mina.common.IoFilterChainBuilder;
 import org.apache.mina.common.IoHandler;
 import org.apache.mina.common.TransportType;
 
+import rtspproxy.ProxyServiceRegistry.IoFilterChainBuilderWrapper;
 import rtspproxy.config.Config;
+import rtspproxy.config.Parameter;
 import rtspproxy.filter.RtspClientFilters;
+import rtspproxy.lib.Singleton;
 import rtspproxy.proxy.ClientSide;
 
 /**
  * @author Matteo Merli
  */
-public class RtspService extends ProxyService
+public final class RtspService extends ProxyService
 {
+
+	private static Logger log = Logger.getLogger( RtspService.class );
+
 	private IoHandler rtspHandler = new ClientSide();
 
-	private IoFilterChainBuilder filterChainBuilder = new RtspClientFilters();
+	private final IoFilterChainBuilder filterChainBuilder = new RtspClientFilters();
 
-	public static final String NAME = "RtspService";
-	
-	private static RtspService instance;
+	private static final String NAME = "RtspService";
 
 	public RtspService()
 	{
 		super();
-		instance = this;
+
+		// Subscribe to parameter changes
+		Config.proxyClientInterface.addObserver( this );
+		Config.proxyRtspPort.addObserver( this );
+
+		// Subscribe to filter chain changes notification
+		Config.proxyFilterAuthenticationEnable.addObserver( this );
+		Config.proxyFilterIpaddressEnable.addObserver( this );
+		Config.proxyFilterAccountingEnable.addObserver( this );
 	}
 
 	@Override
@@ -76,14 +92,73 @@
 	}
 
 	@Override
-	public int[] getBindPorts()
+	public int getBindPort()
 	{
 		return Config.proxyRtspPort.getValue();
 	}
-	
+
 	public static RtspService getInstance()
 	{
-		return instance;
+		return (RtspService) Singleton.getInstance( RtspService.class );
 	}
 
+	@Override
+	public Parameter getNetworkInterfaceParameter()
+	{
+		return Config.proxyClientInterface;
+	}
+
+	@Override
+	public Parameter getPortParameter()
+	{
+		return Config.proxyRtspPort;
+	}
+
+	@Override
+	public void update( Observable o, Object arg )
+	{
+		if ( !(o instanceof Parameter) )
+			throw new IllegalArgumentException( "Only observe parameters" );
+
+		if ( o == Config.proxyFilterAuthenticationEnable
+				|| o == Config.proxyFilterIpaddressEnable
+				|| o == Config.proxyFilterAccountingEnable ) {
+
+			/*
+			 * Change the filter chain builder to reflect new parameters
+			 * directives.
+			 */
+			IoAcceptor acceptor = ProxyServiceRegistry.getInstance().getAcceptor( this );
+			acceptor.setFilterChainBuilder( new IoFilterChainBuilderWrapper( this,
+					new RtspClientFilters() ) );
+
+			/*
+			 * Print a meaningful info message
+			 */
+			if ( o == Config.proxyFilterAuthenticationEnable ) {
+				if ( Config.proxyFilterAuthenticationEnable.getValue() == true )
+					log.info( "Activated the Authentication filter." );
+				else
+					log.info( "Disabled the Authentication filter." );
+			}
+			if ( o == Config.proxyFilterIpaddressEnable ) {
+				if ( Config.proxyFilterIpaddressEnable.getValue() == true )
+					log.info( "Activated the IP address filter." );
+				else
+					log.info( "Disabled the IP address filter." );
+			}
+			if ( o == Config.proxyFilterAccountingEnable ) {
+				if ( Config.proxyFilterAccountingEnable.getValue() == true )
+					log.info( "Activated the Accounting filter." );
+				else
+					log.info( "Disabled the Accounting filter." );
+			}
+
+		} else {
+			/*
+			 * Other parameters are observed by base class
+			 */
+			super.update( o, arg );
+		}
+	}
 }



From merlimat at berlios.de  Sat Dec 24 10:56:31 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Sat, 24 Dec 2005 10:56:31 +0100
Subject: [Rtspproxy-devel] r361 - trunk/src/main/java/rtspproxy/filter/authentication/scheme
Message-ID: <200512240956.jBO9uVUt021087@sheep.berlios.de>

Author: merlimat
Date: 2005-12-24 10:56:24 +0100 (Sat, 24 Dec 2005)
New Revision: 361

Modified:
   trunk/src/main/java/rtspproxy/filter/authentication/scheme/DigestAuthentication.java
Log:
Minor fixes to DigestAuthentication.getChallenge() method.

Modified: trunk/src/main/java/rtspproxy/filter/authentication/scheme/DigestAuthentication.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/scheme/DigestAuthentication.java	2005-12-24 09:54:24 UTC (rev 360)
+++ trunk/src/main/java/rtspproxy/filter/authentication/scheme/DigestAuthentication.java	2005-12-24 09:56:24 UTC (rev 361)
@@ -77,7 +77,7 @@
 		long timestamp = Long.valueOf( sTimeStamp, 16 );
 		long current = System.currentTimeMillis();
 		long diff = current - timestamp;
-		log.debug( "Time diff: " + ((float)diff / 1000) + " sec" );
+		log.debug( "Time diff: " + ((float) diff / 1000 ) + " sec" );
 		if ( diff < 0 || diff > NONCE_TIMEOUT * 1000 )
 			// Timeout excedeed
 			return null;
@@ -88,7 +88,7 @@
 		credentials.setRealm( realm );
 		credentials.setNonce( nonce );
 		credentials.setUri( uri );
-		credentials.setMethod( ((RtspRequest) message).getVerbString() );
+		credentials.setMethod( ( (RtspRequest) message ).getVerbString() );
 		credentials.setCnonce( cnonce );
 		credentials.setNc( nc );
 
@@ -99,9 +99,9 @@
 	{
 		StringBuilder challenge = new StringBuilder();
 		challenge.append( realm ).append( "," );
-		challenge.append( "nonce=" ).append( quote( newNonce() ) );
+		challenge.append( "nonce=" ).append( quote( newNonce() ) ).append( "," );
 		challenge.append( "qop=auth," );
-		challenge.append( "algorithm=MD5" );
+		challenge.append( "algorithm=" ).append( quote("MD5") );
 		return challenge.toString();
 	}
 
@@ -130,7 +130,7 @@
 
 	public boolean computeAuthentication( Credentials credentials, String storedPassword )
 	{
-		if ( !(credentials instanceof DigestCredentials) )
+		if ( !( credentials instanceof DigestCredentials ) )
 			return false;
 
 		// response = KD ( H(A1), unq(nonce-value) ":" H(A2) )
@@ -176,6 +176,7 @@
 	 */
 	private static class DigestCredentials extends Credentials
 	{
+
 		private String response;
 
 		private String realm;



From merlimat at berlios.de  Sat Dec 24 11:11:32 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Sat, 24 Dec 2005 11:11:32 +0100
Subject: [Rtspproxy-devel] r362 - trunk/src/main/java/rtspproxy/filter/authentication
Message-ID: <200512241011.jBOABW2o023696@sheep.berlios.de>

Author: merlimat
Date: 2005-12-24 11:11:20 +0100 (Sat, 24 Dec 2005)
New Revision: 362

Modified:
   trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
Log:
Changed ATTR to public visibility to be used in Accounting Filter.

Modified: trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java	2005-12-24 09:56:24 UTC (rev 361)
+++ trunk/src/main/java/rtspproxy/filter/authentication/AuthenticationFilter.java	2005-12-24 10:11:20 UTC (rev 362)
@@ -45,7 +45,7 @@
 
 	private static Logger log = Logger.getLogger( AuthenticationFilter.class );
 
-	private static final String ATTR = AuthenticationFilter.class.toString() + "Attr";
+	public static final String ATTR = AuthenticationFilter.class.getName() + "Attr";
 
 	private static final Map<String, Class> schemeRegistry = new HashMap<String, Class>();
 



From merlimat at berlios.de  Mon Dec 26 09:50:25 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Mon, 26 Dec 2005 09:50:25 +0100
Subject: [Rtspproxy-devel] r363 - in trunk: . src/main/java/rtspproxy src/main/java/rtspproxy/jmx
Message-ID: <200512260850.jBQ8oPAQ031476@sheep.berlios.de>

Author: merlimat
Date: 2005-12-26 09:50:05 +0100 (Mon, 26 Dec 2005)
New Revision: 363

Added:
   trunk/src/main/java/rtspproxy/jmx/
   trunk/src/main/java/rtspproxy/jmx/Authenticator.java
   trunk/src/main/java/rtspproxy/jmx/Info.java
   trunk/src/main/java/rtspproxy/jmx/InfoMBean.java
   trunk/src/main/java/rtspproxy/jmx/JmxAgent.java
   trunk/src/main/java/rtspproxy/jmx/MBeansFactory.java
   trunk/src/main/java/rtspproxy/jmx/ParametersMBean.java
   trunk/src/main/java/rtspproxy/jmx/Service.java
   trunk/src/main/java/rtspproxy/jmx/ServiceMBean.java
Modified:
   trunk/pom.xml
Log:
Initial implementation of JMX features.

Modified: trunk/pom.xml
===================================================================
--- trunk/pom.xml	2005-12-24 10:11:20 UTC (rev 362)
+++ trunk/pom.xml	2005-12-26 08:50:05 UTC (rev 363)
@@ -94,6 +94,12 @@
 			<artifactId>mina</artifactId>
 			<version>0.9.0</version>
 		</dependency>
+		
+		<dependency>
+			<groupId>mx4j</groupId>
+			<artifactId>mx4j-tools</artifactId>
+			<version>2.1.1</version>
+		</dependency>
 
 		<dependency>
 			<groupId>junit</groupId>

Added: trunk/src/main/java/rtspproxy/jmx/Authenticator.java
===================================================================
--- trunk/src/main/java/rtspproxy/jmx/Authenticator.java	2005-12-24 10:11:20 UTC (rev 362)
+++ trunk/src/main/java/rtspproxy/jmx/Authenticator.java	2005-12-26 08:50:05 UTC (rev 363)
@@ -0,0 +1,83 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.jmx;
+
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+
+import javax.management.remote.JMXAuthenticator;
+import javax.management.remote.JMXPrincipal;
+import javax.security.auth.Subject;
+
+import org.apache.log4j.Logger;
+
+import rtspproxy.config.Config;
+
+/**
+ * Authenticator for JMX connector server that reads data from configuration
+ * parameters.
+ * 
+ * @author Matteo Merli
+ */
+public class Authenticator implements JMXAuthenticator
+{
+
+	private static Logger log = Logger.getLogger( Authenticator.class );
+
+	public Subject authenticate( Object credentials ) throws SecurityException
+	{
+		if ( !( credentials instanceof String[] ) )
+			throw new SecurityException( "Bad credentials" );
+
+		String[] creds = (String[]) credentials;
+		if ( creds.length != 2 )
+			throw new SecurityException( "Bad credentials" );
+
+		String user = creds[0];
+		String password = creds[1];
+
+		if ( user == null ) {
+			log.info( "Authentication failed: null username" );
+			throw new SecurityException( "Bad user name" );
+		}
+
+		if ( password == null ) {
+			log.info( "Authentication failed for user " + user + " null password." );
+			throw new SecurityException( "Bad password" );
+		}
+
+		// Expected values
+		String adminUser = Config.proxyManagementUser.getValue();
+		String adminPassword = Config.proxyManagementPassword.getValue();
+
+		if ( !user.equals( adminUser ) || !password.equals( adminPassword ) ) {
+			log.info( "Authentication failed for user " + user
+					+ ". Invalid username or password." );
+			throw new SecurityException( "Invalid username or password." );
+		}
+
+		log.debug( "Successful Authentication for user " + user );
+		Set<JMXPrincipal> principals = new HashSet<JMXPrincipal>();
+		principals.add( new JMXPrincipal( user ) );
+		Subject subject = new Subject( true, principals, Collections.EMPTY_SET,
+				Collections.EMPTY_SET );
+		return subject;
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/jmx/Authenticator.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/jmx/Info.java
===================================================================
--- trunk/src/main/java/rtspproxy/jmx/Info.java	2005-12-24 10:11:20 UTC (rev 362)
+++ trunk/src/main/java/rtspproxy/jmx/Info.java	2005-12-26 08:50:05 UTC (rev 363)
@@ -0,0 +1,86 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+package rtspproxy.jmx;
+
+import java.util.Date;
+
+import rtspproxy.config.Config;
+
+public class Info implements InfoMBean
+{
+
+	public String getName()
+	{
+		return Config.getName();
+	}
+
+	public String getVersion()
+	{
+		return Config.getVersion();
+	}
+
+	public Date getStartDate()
+	{
+		return Config.getStartDate();
+	}
+
+	public String getOSInfo()
+	{
+		StringBuilder sb = new StringBuilder();
+		sb.append( System.getProperty( "os.name" ) );
+		sb.append( " / " ).append( System.getProperty( "os.version" ) );
+		sb.append( " / " ).append( System.getProperty( "os.arch" ) );
+		return sb.toString();
+	}
+
+	public String getJVMInfo()
+	{
+		StringBuilder sb = new StringBuilder();
+		sb.append( System.getProperty( "java.vm.vendor" ) );
+		sb.append( " / " );
+		sb.append( System.getProperty( "java.vm.version" ) );
+		return sb.toString();
+	}
+
+	public double getFreeMemoryMB()
+	{
+		double mb = (double) Runtime.getRuntime().freeMemory() / (1024 * 1024);
+		return mb;
+		// Formatter f = new Formatter();
+		// return f.format( "%1$.2f MB", mb ).toString();
+	}
+
+	public double getTotalMemoryMB()
+	{
+		double mb = (double) Runtime.getRuntime().totalMemory() / (1024 * 1024);
+		return mb;
+		//Formatter f = new Formatter();
+		//return f.format( "%1$.2f MB", mb ).toString();
+	}
+
+	public void runGarbageCollector()
+	{
+		Runtime.getRuntime().gc();
+	}
+
+	public int getActiveThreadsNumber()
+	{
+		return Thread.activeCount();
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/jmx/Info.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/jmx/InfoMBean.java
===================================================================
--- trunk/src/main/java/rtspproxy/jmx/InfoMBean.java	2005-12-24 10:11:20 UTC (rev 362)
+++ trunk/src/main/java/rtspproxy/jmx/InfoMBean.java	2005-12-26 08:50:05 UTC (rev 363)
@@ -0,0 +1,50 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.jmx;
+
+import java.util.Date;
+
+/**
+ * MBean interface for exposing basic proxy informations.
+ * 
+ * @author Matteo Merli
+ */
+public interface InfoMBean
+{
+
+	/** 
+	 * @return the name of the application
+	 */
+	public String getName();
+	public String getVersion();
+	public Date getStartDate();
+	
+	public String getOSInfo();
+	public String getJVMInfo();
+	
+	public double getFreeMemoryMB();
+	public double getTotalMemoryMB();
+	
+	public int getActiveThreadsNumber();
+	
+	// Actions
+	
+	public void runGarbageCollector();
+	
+}


Property changes on: trunk/src/main/java/rtspproxy/jmx/InfoMBean.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/jmx/JmxAgent.java
===================================================================
--- trunk/src/main/java/rtspproxy/jmx/JmxAgent.java	2005-12-24 10:11:20 UTC (rev 362)
+++ trunk/src/main/java/rtspproxy/jmx/JmxAgent.java	2005-12-26 08:50:05 UTC (rev 363)
@@ -0,0 +1,182 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.jmx;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.management.MBeanServer;
+import javax.management.MBeanServerFactory;
+import javax.management.ObjectName;
+import javax.management.remote.JMXAuthenticator;
+import javax.management.remote.JMXConnectorServer;
+import javax.management.remote.JMXConnectorServerFactory;
+import javax.management.remote.JMXServiceURL;
+
+import mx4j.log.Log;
+import mx4j.log.Log4JLogger;
+import mx4j.tools.adaptor.http.HttpAdaptor;
+import mx4j.tools.adaptor.http.XSLTProcessor;
+import mx4j.tools.naming.NamingService;
+
+import org.apache.log4j.Logger;
+
+import rtspproxy.ProxyService;
+import rtspproxy.RdtClientService;
+import rtspproxy.RdtServerService;
+import rtspproxy.Reactor;
+import rtspproxy.RtcpClientService;
+import rtspproxy.RtcpServerService;
+import rtspproxy.RtpClientService;
+import rtspproxy.RtpServerService;
+import rtspproxy.RtspService;
+import rtspproxy.config.Config;
+
+/**
+ * Entry point class for all the JMX interface.
+ * 
+ * @author Matteo Merli
+ */
+public class JmxAgent
+{
+
+	private static Logger log = Logger.getLogger( JmxAgent.class );
+
+	private static final String DOMAIN = "RtspProxy";
+
+	private MBeanServer mbeanServer = null;
+
+	/**
+	 * Creates a MBean server and attach all the MBeans to it. Also starts, if
+	 * needed, the web console and the JMX connector server.
+	 */
+	public JmxAgent()
+	{
+		// Silent mx4j info messages
+		System.setProperty( "mx4j.log.priority", "warn" );
+
+		// Redirect mx4j messages to our own logger
+		Log.redirectTo( new Log4JLogger() );
+
+		mbeanServer = MBeanServerFactory.createMBeanServer();
+
+		try {
+
+			// Basic Info
+			Object infoMBean = new Info();
+			ObjectName infoName = ObjectName.getInstance( DOMAIN + ":name=Info" );
+			mbeanServer.registerMBean( infoMBean, infoName );
+
+			// Parameters
+			Object parametersMBean = mbeanServer.instantiate( ParametersMBean.class.getName() );
+			ObjectName parametersName = ObjectName.getInstance( DOMAIN
+					+ ":name=Parameters" );
+			mbeanServer.registerMBean( parametersMBean, parametersName );
+
+			// Proxy Services
+			ProxyService[] proxyServices = { RtspService.getInstance(),
+					RdtClientService.getInstance(), RdtServerService.getInstance(),
+					RtcpClientService.getInstance(), RtcpServerService.getInstance(),
+					RtpClientService.getInstance(), RtpServerService.getInstance() };
+			ObjectName objectName;
+			for ( ProxyService proxyService : proxyServices ) {
+				objectName = ObjectName.getInstance( DOMAIN + ":name="
+						+ proxyService.getName() );
+				mbeanServer.registerMBean( new Service( proxyService ), objectName );
+			}
+
+			startWebConsole();
+			startConnectorServer();
+
+		} catch ( Exception e ) {
+			log.fatal( "Exception: ", e );
+			Reactor.stop();
+		}
+	}
+
+	public void stop()
+	{
+		// TODO: Handle the shutdown of the JMX agent
+	}
+
+	private void startWebConsole() throws Exception
+	{
+		boolean enabled = Config.proxyManagementWebEnable.getValue();
+		if ( !enabled )
+			return;
+
+		String host = Config.proxyManagementHost.getValue();
+		int port = Config.proxyManagementWebPort.getValue();
+		String user = Config.proxyManagementUser.getValue();
+		String password = Config.proxyManagementPassword.getValue();
+
+		HttpAdaptor adaptor = new HttpAdaptor();
+		ObjectName name = new ObjectName( "Server:name=HttpAdaptor" );
+		mbeanServer.registerMBean( adaptor, name );
+		adaptor.setHost( host );
+		adaptor.setPort( port );
+		// MX4J HTTP adaptor only supports Basic authentication
+		adaptor.setAuthenticationMethod( "basic" );
+		adaptor.addAuthorization( user, password );
+		adaptor.start();
+
+		XSLTProcessor processor = new XSLTProcessor();
+		processor.setUseCache( true );
+		adaptor.setProcessor( processor );
+
+		String url = "http://" + host + ":" + port + "/";
+		log.info( "Started web console. Accepting connections on " + url );
+	}
+
+	@SuppressWarnings("unchecked")
+	private void startConnectorServer() throws Exception
+	{
+		boolean enabled = Config.proxyManagementRemoteEnable.getValue();
+		if ( !enabled )
+			return;
+
+		// Register and start the rmiregistry MBean, needed by JSR 160
+		// RMIConnectorServer
+		ObjectName namingName = ObjectName.getInstance( "naming:type=rmiregistry" );
+		NamingService namingService = new NamingService();
+		mbeanServer.registerMBean( namingService, namingName );
+		namingService.start();
+		int namingPort = ( (Integer) mbeanServer.getAttribute( namingName, "Port" ) ).intValue();
+
+		String jndiPath = "/rtspproxy";
+		String host = Config.proxyManagementHost.getValue();
+		String uri = "service:jmx:rmi://" + host + "/jndi/rmi://" + host + ":"
+				+ namingPort + jndiPath;
+
+		JMXServiceURL url = new JMXServiceURL( uri );
+
+		// Remote Authentication
+		JMXAuthenticator authenticator = new Authenticator();
+		Map<String, JMXAuthenticator> environment = new HashMap<String, JMXAuthenticator>();
+		environment.put( JMXConnectorServer.AUTHENTICATOR, authenticator );
+
+		// Create and start the RMIConnectorServer
+		JMXConnectorServer connectorServer = JMXConnectorServerFactory.newJMXConnectorServer(
+				url, environment, mbeanServer );
+		connectorServer.start();
+
+		log.info( "Started JMX connector server. Service url: " + uri );
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/jmx/JmxAgent.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/jmx/MBeansFactory.java
===================================================================
--- trunk/src/main/java/rtspproxy/jmx/MBeansFactory.java	2005-12-24 10:11:20 UTC (rev 362)
+++ trunk/src/main/java/rtspproxy/jmx/MBeansFactory.java	2005-12-26 08:50:05 UTC (rev 363)
@@ -0,0 +1,51 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.jmx;
+
+import javax.management.MBeanAttributeInfo;
+
+import rtspproxy.config.Parameter;
+
+/**
+ * 
+ * @author Matteo Merli
+ */
+public class MBeansFactory
+{
+
+	/** 
+	 * Creates Attribute Info that wraps Config parameters.
+	 * @param parameter 
+	 * @return
+	 */
+	public static MBeanAttributeInfo createAttribute( Parameter parameter )
+	{
+		return new MBeanAttributeInfo( //
+				parameter.getName(), // name
+				parameter.getType(), // type
+				parameter.getDescription(), // description
+				true, // readable
+				parameter.isMutable(), // writable
+				false // isIs
+		);
+	}
+	
+	
+
+}


Property changes on: trunk/src/main/java/rtspproxy/jmx/MBeansFactory.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/jmx/ParametersMBean.java
===================================================================
--- trunk/src/main/java/rtspproxy/jmx/ParametersMBean.java	2005-12-24 10:11:20 UTC (rev 362)
+++ trunk/src/main/java/rtspproxy/jmx/ParametersMBean.java	2005-12-26 08:50:05 UTC (rev 363)
@@ -0,0 +1,176 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.jmx;
+
+import java.lang.reflect.Constructor;
+
+import javax.management.Attribute;
+import javax.management.AttributeList;
+import javax.management.AttributeNotFoundException;
+import javax.management.DynamicMBean;
+import javax.management.InvalidAttributeValueException;
+import javax.management.MBeanAttributeInfo;
+import javax.management.MBeanConstructorInfo;
+import javax.management.MBeanException;
+import javax.management.MBeanInfo;
+import javax.management.ReflectionException;
+
+import rtspproxy.config.Config;
+import rtspproxy.config.Parameter;
+
+/**
+ * MBeans that lets monitor and adjust the application parameters that can be
+ * found on <code>rtspproxy.config.Config</code>
+ * 
+ * @author Matteo Merli
+ */
+public class ParametersMBean implements DynamicMBean
+{
+
+	private static final String DESCRIPTION = "MBeans that lets monitor and adjust the application parameters "
+			+ "that can befound on rtspproxy.config.Config";
+
+	private MBeanInfo mbeanInfo;
+
+	public ParametersMBean()
+	{
+		// Attributes
+		int size = Config.getAllParameters().size();
+		MBeanAttributeInfo[] attributeInfo = new MBeanAttributeInfo[size];
+		int i = 0;
+		for ( Parameter parameter : Config.getAllParameters() ) {
+			attributeInfo[i++] = MBeansFactory.createAttribute( parameter );
+		}
+
+		/* Constructors. */
+		Constructor[] constructors = this.getClass().getConstructors();
+		MBeanConstructorInfo[] constructorInfo = new MBeanConstructorInfo[constructors.length];
+		for ( i = 0; i < constructors.length; i++ ) {
+			constructorInfo[i] = new MBeanConstructorInfo( this.getClass().getName(),
+					constructors[i] );
+		}
+
+		/* Generate the MBean description. */
+		mbeanInfo = new MBeanInfo( this.getClass().getName(), // name
+				DESCRIPTION, //
+				attributeInfo, // parameters
+				constructorInfo, // constructors
+				null, // operationInfo,
+				null // notificationInfo
+		);
+	}
+
+	/*
+	 * @see javax.management.DynamicMBean#getAttribute(java.lang.String)
+	 */
+	public Object getAttribute( String attributeName ) throws AttributeNotFoundException,
+			MBeanException, ReflectionException
+	{
+		Parameter parameter = Config.getParameter( attributeName );
+		if ( parameter == null )
+			throw new AttributeNotFoundException();
+
+		return parameter.getObjectValue();
+	}
+
+	/*
+	 * @see javax.management.DynamicMBean#getAttributes(java.lang.String[])
+	 */
+	public AttributeList getAttributes( String[] attributes )
+	{
+		AttributeList results = new AttributeList( attributes.length );
+		Attribute attr;
+		Parameter parameter;
+
+		for ( String name : attributes ) {
+			parameter = Config.getParameter( name );
+			if ( parameter == null )
+				continue;
+
+			attr = new Attribute( parameter.getName(), parameter.getObjectValue() );
+			results.add( attr );
+		}
+		return results;
+	}
+
+	/*
+	 * @see javax.management.DynamicMBean#getMBeanInfo()
+	 */
+	public MBeanInfo getMBeanInfo()
+	{
+		return mbeanInfo;
+	}
+
+	/*
+	 * @see javax.management.DynamicMBean#invoke(java.lang.String,
+	 *      java.lang.Object[], java.lang.String[])
+	 */
+	public Object invoke( String actionName, Object[] params, String[] signature )
+			throws MBeanException, ReflectionException
+	{
+		throw new ReflectionException( new NoSuchMethodException( "Method not found: "
+				+ actionName ) );
+	}
+
+	/*
+	 * @see javax.management.DynamicMBean#setAttribute(javax.management.Attribute)
+	 */
+	public void setAttribute( Attribute attribute ) throws AttributeNotFoundException,
+			InvalidAttributeValueException, MBeanException, ReflectionException
+	{
+		Parameter parameter = Config.getParameter( attribute.getName() );
+		if ( parameter == null )
+			throw new AttributeNotFoundException();
+
+		try {
+			parameter.setObjectValue( attribute.getValue() );
+		} catch ( IllegalArgumentException e ) {
+			throw new InvalidAttributeValueException( e.getMessage() );
+		}
+	}
+
+	/*
+	 * @see javax.management.DynamicMBean#setAttributes(javax.management.AttributeList)
+	 */
+	public AttributeList setAttributes( AttributeList attributes )
+	{
+		AttributeList results = new AttributeList();
+		Parameter parameter;
+		Attribute attr;
+
+		for ( Object obj : attributes ) {
+
+			attr = (Attribute) obj;
+			parameter = Config.getParameter( ((Attribute) attr).getName() );
+			if ( parameter == null )
+				continue;
+
+			try {
+				parameter.setObjectValue( attr.getValue() );
+			} catch ( IllegalArgumentException e ) {
+				continue;
+			}
+
+			attr = new Attribute( parameter.getName(), parameter.getObjectValue() );
+			results.add( attr );
+		}
+
+		return results;
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/jmx/ParametersMBean.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/jmx/Service.java
===================================================================
--- trunk/src/main/java/rtspproxy/jmx/Service.java	2005-12-24 10:11:20 UTC (rev 362)
+++ trunk/src/main/java/rtspproxy/jmx/Service.java	2005-12-26 08:50:05 UTC (rev 363)
@@ -0,0 +1,95 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.jmx;
+
+import javax.management.MBeanException;
+
+import rtspproxy.ProxyService;
+import rtspproxy.config.IntegerParameter;
+import rtspproxy.config.Parameter;
+
+/**
+ * Service MBean implementations
+ * 
+ * @author Matteo Merli
+ */
+public class Service implements ServiceMBean
+{
+
+	ProxyService proxyService;
+
+	public Service( ProxyService proxyService )
+	{
+		this.proxyService = proxyService;
+	}
+
+	public String getNetworkInterface()
+	{
+		return proxyService.getNetworkInterfaceParameter().getStringValue();
+	}
+
+	public int getPort()
+	{
+		Parameter parameter = proxyService.getPortParameter();
+		return ((IntegerParameter) parameter).getValue();
+	}
+
+	public void setPort( int port ) throws MBeanException
+	{
+		Parameter parameter = proxyService.getPortParameter();
+		try {
+			parameter.setObjectValue( new Integer( port ) );
+		} catch ( Exception e ) {
+			throw new MBeanException( e );
+		}
+	}
+
+	public boolean isRunning()
+	{
+		return proxyService.isRunning();
+	}
+
+	public void start() throws MBeanException
+	{
+		try {
+			proxyService.start();
+		} catch ( Exception e ) {
+			throw new MBeanException( e );
+		}
+	}
+
+	public void stop() throws MBeanException
+	{
+		try {
+			proxyService.stop();
+		} catch ( Exception e ) {
+			throw new MBeanException( e );
+		}
+	}
+
+	public void restart() throws MBeanException
+	{
+		try {
+			proxyService.restart();
+		} catch ( Exception e ) {
+			throw new MBeanException( e );
+		}
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/jmx/Service.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/jmx/ServiceMBean.java
===================================================================
--- trunk/src/main/java/rtspproxy/jmx/ServiceMBean.java	2005-12-24 10:11:20 UTC (rev 362)
+++ trunk/src/main/java/rtspproxy/jmx/ServiceMBean.java	2005-12-26 08:50:05 UTC (rev 363)
@@ -0,0 +1,46 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.jmx;
+
+import javax.management.MBeanException;
+
+/**
+ * @author Matteo Merli
+ */
+public interface ServiceMBean
+{
+	/* Attributes */
+
+	public String getNetworkInterface();
+
+	public int getPort();
+
+	public void setPort( int port ) throws MBeanException;
+
+	public boolean isRunning();
+
+	/* Actions */
+
+	public void start() throws MBeanException;
+
+	public void stop() throws MBeanException;
+
+	public void restart() throws MBeanException;
+
+}


Property changes on: trunk/src/main/java/rtspproxy/jmx/ServiceMBean.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev



From merlimat at berlios.de  Mon Dec 26 09:59:49 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Mon, 26 Dec 2005 09:59:49 +0100
Subject: [Rtspproxy-devel] r364 - trunk/src/site/xdoc
Message-ID: <200512260859.jBQ8xnPi032025@sheep.berlios.de>

Author: merlimat
Date: 2005-12-26 09:59:46 +0100 (Mon, 26 Dec 2005)
New Revision: 364

Modified:
   trunk/src/site/xdoc/configuration.xml
Log:
Removed references to deleted configuration parameters.

Modified: trunk/src/site/xdoc/configuration.xml
===================================================================
--- trunk/src/site/xdoc/configuration.xml	2005-12-26 08:50:05 UTC (rev 363)
+++ trunk/src/site/xdoc/configuration.xml	2005-12-26 08:59:46 UTC (rev 364)
@@ -108,20 +108,6 @@
 						</tr>
 						<tr>
 							<td>
-								<code>proxy.rtsp.interface</code>
-							</td>
-							<td>String</td>
-							<td>*</td>
-							<td>
-								If you need to define a particular
-								network interface to bind on, specify it
-								here. Default is to listen on all
-								interfaces.
-							</td>
-						</tr>
-
-						<tr>
-							<td>
 								<code>proxy.server.rtp.port</code>
 							</td>
 							<td>Integer</td>
@@ -154,20 +140,6 @@
 								listen on all interfaces.
 							</td>
 						</tr>
-						<tr>
-							<td>
-								<code>proxy.server.dynamicPorts</code>
-							</td>
-							<td>Boolean</td>
-							<td>
-								<code>false</code>
-							</td>
-							<td>
-								If true the proxy will try to bind the
-								listener for packet in the first
-								available ports.
-							</td>
-						</tr>
 
 						<tr>
 							<td>
@@ -203,20 +175,6 @@
 								listen on all interfaces.
 							</td>
 						</tr>
-						<tr>
-							<td>
-								<code>proxy.client.dynamicPorts</code>
-							</td>
-							<td>Boolean</td>
-							<td>
-								<code>false</code>
-							</td>
-							<td>
-								If true the proxy will try to bind the
-								listener for packet in the first
-								available ports.
-							</td>
-						</tr>
 					</tbody>
 				</table>
 



From merlimat at berlios.de  Mon Dec 26 10:02:26 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Mon, 26 Dec 2005 10:02:26 +0100
Subject: [Rtspproxy-devel] r365 - in trunk/src/main/java/rtspproxy: . config filter filter/accounting
Message-ID: <200512260902.jBQ92Qst032199@sheep.berlios.de>

Author: merlimat
Date: 2005-12-26 10:02:18 +0100 (Mon, 26 Dec 2005)
New Revision: 365

Added:
   trunk/src/main/java/rtspproxy/filter/accounting/
   trunk/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java
   trunk/src/main/java/rtspproxy/filter/accounting/AccountingProvider.java
   trunk/src/main/java/rtspproxy/filter/accounting/PlainTextAccountingProvider.java
Removed:
   trunk/src/main/java/rtspproxy/Config.java
Modified:
   trunk/src/main/java/rtspproxy/config/Config.java
   trunk/src/main/java/rtspproxy/filter/RtspClientFilters.java
   trunk/src/main/java/rtspproxy/filter/RtspFilters.java
Log:
Added preliminary implementation of accounting filter.

Deleted: trunk/src/main/java/rtspproxy/Config.java
===================================================================
--- trunk/src/main/java/rtspproxy/Config.java	2005-12-26 08:59:46 UTC (rev 364)
+++ trunk/src/main/java/rtspproxy/Config.java	2005-12-26 09:02:18 UTC (rev 365)
@@ -1,284 +0,0 @@
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
- *                                                                         *
- ***************************************************************************/
-
-/*
- * $Id$
- * 
- * $URL$
- * 
- */
-
-package rtspproxy;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.util.Properties;
-
-import org.apache.log4j.Logger;
-import org.apache.log4j.PropertyConfigurator;
-
-/**
- * General configuration system.
- */
-public class Config
-{
-
-	private static Logger log = Logger.getLogger( Config.class );
-	private static Properties properties = new Properties();
-
-	private static String rtspproxy_home;
-	private static String name;
-	private static String version;
-	private static String proxySignature;
-
-	protected Config()
-	{
-		rtspproxy_home = System.getProperty( "rtspproxy.home" );
-		if ( rtspproxy_home == null ) {
-			rtspproxy_home = System.getProperty( "user.dir" );
-			if ( rtspproxy_home == null )
-				rtspproxy_home = "";
-		}
-
-		// Read program name and version
-		Properties jarProps = new Properties();
-
-		try {
-			jarProps.load( Thread.currentThread().getContextClassLoader().getResourceAsStream(
-					"META-INF/application.properties" ) );
-			name = jarProps.getProperty( "application.name" );
-			version = jarProps.getProperty( "application.version" );
-		} catch ( Exception e ) {
-			name = "RtspProxy";
-			version = "";
-		}
-
-		proxySignature = name + " " + version + " (" + System.getProperty( "os.name" )
-				+ " / " + System.getProperty( "os.version" ) + " / "
-				+ System.getProperty( "os.arch" ) + ")";
-
-		String[] paths = new String[5];
-
-		// Used for testing purposes:
-		// checks for the configuration file
-		paths[4] = "src" + File.separator + "resources" + File.separator + "conf"
-				+ File.separator + "rtspproxy.properties";
-
-		// Current directory configuration
-		paths[3] = "rtspproxy.properties";
-
-		// RtspProxy home folder
-		paths[2] = rtspproxy_home + File.separator + "conf" + File.separator
-				+ "rtspproxy.properties";
-
-		// Per user config
-		paths[1] = System.getProperty( "user.home", "" ) + File.separator
-				+ ".rtspproxy.properties";
-		// System wide configuration (tipical in unix systems)
-		paths[0] = "/etc/rtspproxy.properties";
-
-		for ( String path : paths ) {
-			try {
-				properties.load( new FileInputStream( path ) );
-				// Immediately apply debug settings!
-				updateDebugSettings();
-
-				log.debug( "Reading configurations from '" + path + "'" );
-				// break;
-
-			} catch ( IOException e ) {
-				// Silently ignore
-			}
-		}
-
-		for ( Object key : properties.keySet() ) {
-			log.debug( (String) key + " : " + properties.getProperty( (String) key ) );
-		}
-	}
-
-	public static String get( String key, String defaultValue )
-	{
-		return properties.getProperty( key, defaultValue );
-	}
-
-	/**
-	 * @param key
-	 * @param defaultValue
-	 * @return the value of an integer property
-	 */
-	public static int getInt( String key, int defaultValue )
-	{
-		try {
-			return Integer.parseInt( properties.getProperty( key ) );
-		} catch ( Exception e ) {
-			return defaultValue;
-		}
-	}
-
-	/**
-	 * Convert a list of comma separated integers string into an array of
-	 * integers.
-	 * 
-	 * @param key
-	 * @param defaultValue
-	 * @return
-	 */
-	public static int[] getIntArray( String key, int defaultValue )
-	{
-		try {
-			String toks[] = properties.getProperty( key ).split( "," );
-			int res[] = new int[toks.length];
-			int i = 0;
-			for ( String tok : toks ) {
-				res[i++] = Integer.parseInt( tok.trim() );
-			}
-			return res;
-
-		} catch ( Exception e ) {
-			int res[] = { defaultValue };
-			return res;
-		}
-	}
-
-	/**
-	 * Get a boolean property from config.
-	 * 
-	 * @param key
-	 *        the name of the property
-	 * @param defaultValue
-	 *        its default value
-	 * @return the boolean value
-	 */
-	public static boolean getBoolean( String key, boolean defaultValue )
-	{
-		String value;
-
-		try {
-			value = properties.getProperty( key );
-		} catch ( Exception e ) {
-			return defaultValue;
-		}
-
-		// Try to convert a a String to a boolean
-		if ( "true".equalsIgnoreCase( value ) || "yes".equalsIgnoreCase( value )
-				|| "1".equalsIgnoreCase( value ) ) {
-			return true;
-		} else
-			if ( "false".equalsIgnoreCase( value ) || "no".equalsIgnoreCase( value )
-					|| "0".equalsIgnoreCase( value ) ) {
-				return false;
-			}
-
-		return defaultValue;
-	}
-
-	public static boolean getBoolean( String key )
-	{
-		return getBoolean( key, false );
-	}
-
-	public static void set( String key, String value )
-	{
-		properties.setProperty( key, value );
-	}
-
-	public static void setBoolean( String key, boolean value )
-	{
-		properties.setProperty( key, value ? "true" : "false" );
-	}
-
-	/**
-	 * @param key
-	 * @param value
-	 */
-	public static void setInt( String key, int value )
-	{
-		properties.setProperty( key, Integer.toString( value ) );
-	}
-
-	public static void setIntArray( String key, int[] values )
-	{
-		StringBuilder build = new StringBuilder();
-		for ( int i = 0; i < values.length; i++ ) {
-			if ( i > 0 )
-				build.append( ", " );
-			build.append( Integer.toString( values[i] ) );
-		}
-		properties.setProperty( key, build.toString() );
-	}
-
-	/**
-	 * @return the home directory of the proxy installation
-	 */
-	public static String getHome()
-	{
-		return rtspproxy_home;
-	}
-
-	private static void updateDebugSettings()
-	{
-		Properties prop = new Properties();
-		// common properties
-		prop.setProperty( "log4j.appender.A1.layout", "org.apache.log4j.PatternLayout" );
-		prop.setProperty( "log4j.appender.A1.layout.ConversionPattern",
-				"%7p [%t] (%F:%L) - %m%n" );
-
-		if ( getBoolean( "log.debug" ) )
-			prop.setProperty( "log4j.rootLogger", "DEBUG, A1" );
-		else
-			// only write important messages
-			prop.setProperty( "log4j.rootLogger", "INFO, A1" );
-
-		if ( getBoolean( "log.logtofile" ) ) {
-			// save logs in a file
-			String filename = get( "log.file", "logs" + File.separator + "rtspproxy.log" );
-			prop.setProperty( "log4j.appender.A1", "org.apache.log4j.RollingFileAppender" );
-			prop.setProperty( "log4j.appender.A1.File", filename );
-
-			// if logs directory does not exists, create it
-			File logs = new File( rtspproxy_home + File.separator + "logs" );
-			if ( !logs.exists() )
-				logs.mkdir();
-
-		} else {
-			// Log to console
-			prop.setProperty( "log4j.appender.A1", "org.apache.log4j.ConsoleAppender" );
-		}
-
-		PropertyConfigurator.configure( prop );
-	}
-
-	/**
-	 * @return Returns the application name.
-	 */
-	public static String getName()
-	{
-		return name;
-	}
-
-	/**
-	 * @return Returns the application version.
-	 */
-	public static String getVersion()
-	{
-		return version;
-	}
-
-	
-	/**
-	 * @return Returns the proxySignature.
-	 */
-	public static String getProxySignature()
-	{
-		return proxySignature;
-	}
-}

Modified: trunk/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/Config.java	2005-12-26 08:59:46 UTC (rev 364)
+++ trunk/src/main/java/rtspproxy/config/Config.java	2005-12-26 09:02:18 UTC (rev 365)
@@ -234,6 +234,18 @@
 			"Host to bind the management services. Default is localhost, and the services "
 					+ "will only be reachable from local machine." );
 
+	public static final StringParameter proxyManagementUser = new StringParameter(
+			"proxy.management.user", // name
+			null, // default value
+			true, // mutable
+			"Remote management administrator user name." );
+	
+	public static final StringParameter proxyManagementPassword = new StringParameter(
+			"proxy.management.password", // name
+			null, // default value
+			true, // mutable
+			"Remote management administrator password." );
+
 	public static final BooleanParameter proxyManagementWebEnable = new BooleanParameter(
 			"proxy.management.web.enable", // name
 			false, // default value
@@ -281,8 +293,8 @@
 		// Read program name and version
 		Properties jarProps = new Properties();
 		try {
-			jarProps.load( Thread.currentThread().getContextClassLoader()
-					.getResourceAsStream( "META-INF/application.properties" ) );
+			jarProps.load( Thread.currentThread().getContextClassLoader().getResourceAsStream(
+					"META-INF/application.properties" ) );
 			name = jarProps.getProperty( "application.name" );
 			version = jarProps.getProperty( "application.version" );
 		} catch ( Exception e ) {
@@ -314,7 +326,7 @@
 	 */
 	public void update( Observable o, Object arg )
 	{
-		if ( !(o instanceof Parameter) )
+		if ( !( o instanceof Parameter ) )
 			throw new IllegalArgumentException( "Only observe parameters" );
 
 		if ( o == logDebug || o == logFile || o == logLogToFile ) {
@@ -415,8 +427,8 @@
 	public static String debugParameters()
 	{
 		StringBuilder sb = new StringBuilder();
-		Map<String, Parameter> parameters = new TreeMap<String, Parameter>( Config
-				.getParametersMap() );
+		Map<String, Parameter> parameters = new TreeMap<String, Parameter>(
+				Config.getParametersMap() );
 		sb.append( "Parameters:\n" );
 		for ( Parameter parameter : parameters.values() ) {
 			sb.append( parameter.getName() );

Modified: trunk/src/main/java/rtspproxy/filter/RtspClientFilters.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/RtspClientFilters.java	2005-12-26 08:59:46 UTC (rev 364)
+++ trunk/src/main/java/rtspproxy/filter/RtspClientFilters.java	2005-12-26 09:02:18 UTC (rev 365)
@@ -33,6 +33,7 @@
 		addIpAddressFilter( chain );
 		addRtspCodecFilter( chain );
 		addAuthenticationFilter( chain );
+		addAccountingFilter( chain );
 	}
 
 }

Modified: trunk/src/main/java/rtspproxy/filter/RtspFilters.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/RtspFilters.java	2005-12-26 08:59:46 UTC (rev 364)
+++ trunk/src/main/java/rtspproxy/filter/RtspFilters.java	2005-12-26 09:02:18 UTC (rev 365)
@@ -26,8 +26,10 @@
 import org.apache.mina.filter.codec.ProtocolDecoder;
 import org.apache.mina.filter.codec.ProtocolEncoder;
 
+import rtspproxy.ProxyServiceRegistry;
 import rtspproxy.Reactor;
 import rtspproxy.config.Config;
+import rtspproxy.filter.accounting.AccountingFilter;
 import rtspproxy.filter.authentication.AuthenticationFilter;
 import rtspproxy.filter.ipaddress.IpAddressFilter;
 import rtspproxy.filter.rewrite.RequestUrlRewritingImpl;
@@ -61,13 +63,25 @@
 		}
 	};
 
-	private static IoFilter codecFilter = new ProtocolCodecFilter( codecFactory );
+	private static final IoFilter codecFilter = new ProtocolCodecFilter( codecFactory );
 
 	// These filters are instanciated only one time, when requested
 	private static IpAddressFilter ipAddressFilter = null;
 
 	private static AuthenticationFilter authenticationFilter = null;
 
+	private static AccountingFilter accountingFilter = null;
+
+	public static final String rtspCodecNAME = "rtspCodec";
+
+	public static final String ipAddressFilterNAME = "ipAddressFilter";
+
+	public static final String authenticationFilterNAME = "authenticationFilter";
+
+	public static final String accountingFilterNAME = "accountingFilter";
+
+	public static final String rewriteFilterNAME = "rewriteFilter";
+
 	/**
 	 * IP Address filter.
 	 * <p>
@@ -82,7 +96,9 @@
 		if ( enableIpAddressFilter ) {
 			if ( ipAddressFilter == null )
 				ipAddressFilter = new IpAddressFilter();
-			chain.addLast( "ipAddressFilter", ipAddressFilter );
+
+			chain.addAfter( ProxyServiceRegistry.threadPoolFilterNAME,
+					ipAddressFilterNAME, ipAddressFilter );
 		}
 	}
 
@@ -92,7 +108,7 @@
 	 */
 	protected void addRtspCodecFilter( IoFilterChain chain )
 	{
-		chain.addLast( "codec", codecFilter );
+		chain.addLast( rtspCodecNAME, codecFilter );
 	}
 
 	/**
@@ -106,20 +122,53 @@
 		if ( enableAuthenticationFilter ) {
 			if ( authenticationFilter == null )
 				authenticationFilter = new AuthenticationFilter();
-			chain.addLast( "authentication", authenticationFilter );
+			chain
+					.addAfter( rtspCodecNAME, authenticationFilterNAME,
+							authenticationFilter );
 		}
 	}
 
+	protected void addAccountingFilter( IoFilterChain chain )
+	{
+		boolean enableAccountingFilter = Config.proxyFilterAccountingEnable.getValue();
+
+		if ( enableAccountingFilter ) {
+			if ( accountingFilter == null ) {
+				accountingFilter = new AccountingFilter();
+			}
+			if ( chain.contains( authenticationFilterNAME ) ) {
+				/*
+				 * If we have the authentication filter in the chain, it's
+				 * preferable to have the accounting after that, to see the user
+				 * identity if authenticated.
+				 */
+				chain.addAfter( authenticationFilterNAME, accountingFilterNAME,
+						accountingFilter );
+			} else {
+				/*
+				 * At least we want to have it after the RTSP codec, because it
+				 * deals with already parsed RTSP messages.
+				 */
+				chain.addAfter( rtspCodecNAME, accountingFilterNAME, accountingFilter );
+			}
+		}
+	}
+
 	protected void addRewriteFilter( IoFilterChain chain )
 	{
 		// TODO: use different parameters..
-		String rewritingFilter = null; //Config.get(
-				//"filter.requestUrlRewriting.implementationClass", null );
+		String rewritingFilter = null; // Config.get(
+		// "filter.requestUrlRewriting.implementationClass", null );
 
 		try {
-			if ( rewritingFilter != null )
-				chain.addLast( "requestUrlRewriting", new RequestUrlRewritingImpl(
-						rewritingFilter ) );
+			if ( rewritingFilter != null ) {
+				/*
+				 * The rewrite filter will be placed after the codec filter
+				 * because it deals with already formed RTSP messages.
+				 */
+				chain.addAfter( rtspCodecNAME, rewriteFilterNAME,
+						new RequestUrlRewritingImpl( rewritingFilter ) );
+			}
 		} catch ( Exception e ) {
 			// already logged
 			Reactor.stop();

Added: trunk/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java	2005-12-26 08:59:46 UTC (rev 364)
+++ trunk/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java	2005-12-26 09:02:18 UTC (rev 365)
@@ -0,0 +1,99 @@
+package rtspproxy.filter.accounting;
+
+import org.apache.log4j.Logger;
+import org.apache.mina.common.IoFilterAdapter;
+import org.apache.mina.common.IoSession;
+
+import rtspproxy.Reactor;
+import rtspproxy.config.Config;
+import rtspproxy.rtsp.RtspMessage;
+
+/**
+ * 
+ * @author Matteo Merli
+ */
+public class AccountingFilter extends IoFilterAdapter
+{
+
+	private static Logger log = Logger.getLogger( AccountingFilter.class );
+
+	private AccountingProvider provider = null;
+
+	public AccountingFilter()
+	{
+		// Check which backend implementation to use
+		// Default is plain-text implementation
+		String className = Config.proxyFilterAccountingImplementationClass.getValue();
+
+		Class providerClass;
+		try {
+			providerClass = Class.forName( className );
+
+		} catch ( ClassNotFoundException e ) {
+			log.fatal( "Invalid AccountingProvider class: " + className );
+			Reactor.stop();
+			return;
+		}
+
+		// Check if the class implements the IpAddressProvider interfaces
+		boolean found = false;
+		for ( Class interFace : providerClass.getInterfaces() ) {
+			if ( AccountingProvider.class.equals( interFace ) ) {
+				found = true;
+				break;
+			}
+		}
+
+		if ( !found ) {
+			log.fatal( "Class (" + providerClass
+					+ ") does not implement the AccountingProvider interface." );
+			Reactor.stop();
+			return;
+		}
+
+		try {
+			provider = (AccountingProvider) providerClass.newInstance();
+			provider.init();
+
+		} catch ( Exception e ) {
+			log.fatal( "Error starting AccountingProvider: " + e );
+			Reactor.stop();
+			return;
+		}
+
+		log.info( "Using AccountingFilter " + " (" + className + ")" );
+	}
+
+	@Override
+	public void messageReceived( NextFilter nextFilter, IoSession session, Object message )
+			throws Exception
+	{
+		if ( provider != null ) {
+			if ( message instanceof RtspMessage )
+				provider.messageReceived( session, (RtspMessage) message );
+			else
+				log.error( "Expecting a RtspMessage. Received a "
+						+ message.getClass().getName() );
+		}
+
+		// Forward message
+		nextFilter.messageReceived( session, message );
+	}
+
+	@Override
+	public void messageSent( NextFilter nextFilter, IoSession session, Object message )
+			throws Exception
+	{
+		if ( provider != null ) {
+			if ( message instanceof RtspMessage )
+				provider.messageSent( session, (RtspMessage) message );
+			else
+				log.error( "Expecting a RtspMessage. Received a "
+						+ message.getClass().getName() );
+		}
+		
+		// Forward message
+		nextFilter.messageSent( session, message );
+	}
+
+}


Property changes on: trunk/src/main/java/rtspproxy/filter/accounting/AccountingFilter.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/filter/accounting/AccountingProvider.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/accounting/AccountingProvider.java	2005-12-26 08:59:46 UTC (rev 364)
+++ trunk/src/main/java/rtspproxy/filter/accounting/AccountingProvider.java	2005-12-26 09:02:18 UTC (rev 365)
@@ -0,0 +1,32 @@
+package rtspproxy.filter.accounting;
+
+import org.apache.mina.common.IoSession;
+
+import rtspproxy.rtsp.RtspMessage;
+
+/**
+ * @author Matteo Merli
+ */
+public interface AccountingProvider
+{
+	
+	/**
+	 * Called once at service startup. Should be used to initialize the
+	 * provider.
+	 * 
+	 * @throws Exception
+	 */
+	public void init() throws Exception;
+
+	/**
+	 * Called once at service shutdown.
+	 * 
+	 * @throws Exception
+	 */
+	public void shutdown() throws Exception;
+
+	public void messageReceived( IoSession session, RtspMessage message );
+
+	public void messageSent( IoSession session, RtspMessage message );
+
+}


Property changes on: trunk/src/main/java/rtspproxy/filter/accounting/AccountingProvider.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/src/main/java/rtspproxy/filter/accounting/PlainTextAccountingProvider.java
===================================================================
--- trunk/src/main/java/rtspproxy/filter/accounting/PlainTextAccountingProvider.java	2005-12-26 08:59:46 UTC (rev 364)
+++ trunk/src/main/java/rtspproxy/filter/accounting/PlainTextAccountingProvider.java	2005-12-26 09:02:18 UTC (rev 365)
@@ -0,0 +1,117 @@
+package rtspproxy.filter.accounting;
+
+import java.io.File;
+import java.net.InetSocketAddress;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Observable;
+import java.util.Observer;
+
+import org.apache.log4j.Appender;
+import org.apache.log4j.Layout;
+import org.apache.log4j.Level;
+import org.apache.log4j.Logger;
+import org.apache.log4j.PatternLayout;
+import org.apache.log4j.RollingFileAppender;
+import org.apache.mina.common.IoSession;
+
+import rtspproxy.config.Config;
+import rtspproxy.filter.authentication.AuthenticationFilter;
+import rtspproxy.rtsp.RtspMessage;
+import rtspproxy.rtsp.RtspRequest;
+
+/**
+ * @author Matteo Merli
+ */
+public class PlainTextAccountingProvider implements AccountingProvider, Observer
+{
+
+	private static String datePattern = "yyyy-MM-dd HH:mm:ss Z";
+	private static SimpleDateFormat format = new SimpleDateFormat( datePattern );
+
+	// This is not static since it's a separate log
+	private Logger accessLog;
+
+	public PlainTextAccountingProvider()
+	{
+		accessLog = Logger.getLogger( "accessLog" );
+
+		// Subcribe to changes notification
+		Config.proxyFilterAccountingTextFile.addObserver( this );
+	}
+
+	public void init() throws Exception
+	{
+		// Set the file appender
+		String fileName = Config.proxyFilterAccountingTextFile.getValue();
+		File file = new File( fileName );
+		if ( !file.isAbsolute() ) {
+			file = new File( Config.getHome() + File.separator + fileName );
+		}
+
+		// if logs directory does not exists, create it
+		File logs = file.getParentFile();
+		if ( !logs.exists() )
+			logs.mkdir();
+
+		Layout layout = new PatternLayout( "%m%n" );
+		Appender appender = new RollingFileAppender( layout, file.getAbsolutePath() );
+		accessLog.setAdditivity( false );
+		accessLog.addAppender( appender );
+		accessLog.setLevel( Level.INFO );
+	}
+
+	public void shutdown() throws Exception
+	{
+		// Do nothing
+	}
+
+	public void messageReceived( IoSession session, RtspMessage message )
+	{
+		StringBuilder logMessage = new StringBuilder();
+		if ( message instanceof RtspRequest ) {
+			logMessage.append( ( (RtspRequest) message ).getVerb() ).append( " " );
+			logMessage.append( ( (RtspRequest) message ).getUrl() );
+		}
+		accessLog.info( buildLogMessage( session, message, logMessage ) );
+	}
+
+	public void messageSent( IoSession session, RtspMessage message )
+	{
+		// StringBuilder sb = new StringBuilder();
+		// sb.append( "ciao" );
+		// accessLog.info( buildLogMessage( session, message, sb ) );
+	}
+
+	public void update( Observable o, Object arg )
+	{
+		if ( o == Config.proxyFilterAccountingTextFile ) {
+			try {
+				// Reload the configuration
+				init();
+			} catch ( Exception e ) {
+			}
+		}
+	}
+
+	private static String buildLogMessage( IoSession session, RtspMessage message,
+			StringBuilder logMessage )
+	{
+		StringBuilder sb = new StringBuilder( 150 );
+		String userName = (String) session.getAttribute( AuthenticationFilter.ATTR );
+		String userAgent = message.getHeader( "User-Agent" );
+		Date now = new Date();
+		String dateString = format.format( now );
+
+		sb.append( ( (InetSocketAddress) session.getRemoteAddress() ).getAddress().getHostAddress() );
+		sb.append( " - " );
+		sb.append( userName != null ? userName : "-" ).append( " " );
+		sb.append( "[" ).append( dateString ).append( "] " );
+		sb.append( "\"" ).append( logMessage ).append( "\" " );
+		if ( userAgent != null ) {
+			sb.append( "\"" ).append( userAgent ).append( "\" " );
+		}
+
+		return sb.toString();
+	}
+}


Property changes on: trunk/src/main/java/rtspproxy/filter/accounting/PlainTextAccountingProvider.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev



From merlimat at berlios.de  Mon Dec 26 10:03:41 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Mon, 26 Dec 2005 10:03:41 +0100
Subject: [Rtspproxy-devel] r366 - trunk/src/test/java/rtspproxy
Message-ID: <200512260903.jBQ93ffS032259@sheep.berlios.de>

Author: merlimat
Date: 2005-12-26 10:03:38 +0100 (Mon, 26 Dec 2005)
New Revision: 366

Removed:
   trunk/src/test/java/rtspproxy/ConfigTest.java
Log:
Deleted ConfigTest (was testing against the old config version)

Deleted: trunk/src/test/java/rtspproxy/ConfigTest.java
===================================================================
--- trunk/src/test/java/rtspproxy/ConfigTest.java	2005-12-26 09:02:18 UTC (rev 365)
+++ trunk/src/test/java/rtspproxy/ConfigTest.java	2005-12-26 09:03:38 UTC (rev 366)
@@ -1,104 +0,0 @@
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   Copyright (C) 2005 - Matteo Merli - matteo.merli at gmail.com            *
- *                                                                         *
- ***************************************************************************/
-
-/*
- * $Id$
- * 
- * $URL$
- * 
- */
-
-package rtspproxy;
-
-import junit.framework.TestCase;
-
-/**
- * @author Matteo Merli
- */
-public class ConfigTest extends TestCase
-{
-
-	public static void main( String[] args )
-	{
-		junit.textui.TestRunner.run( ConfigTest.class );
-	}
-
-	/*
-	 * @see TestCase#setUp()
-	 */
-	protected void setUp() throws Exception
-	{
-		new Config();
-	}
-
-	/*
-	 * Test method for 'rtspproxy.Config.get(String, String)'
-	 */
-	public final void testGet()
-	{
-		Config.set( "testKey", "testValue" );
-
-		assertEquals( "testValue", Config.get( "testKey", null ) );
-		assertNull( Config.get( "notPresentKey", null ) );
-		assertEquals( "test", Config.get( "notPresentKey", "test" ) );
-	}
-
-	/*
-	 * Test method for 'rtspproxy.Config.getInt(String, int)'
-	 */
-	public final void testGetInt()
-	{
-		int value = 12345678;
-		Config.setInt( "testKeyInt", value );
-
-		assertEquals( value, Config.getInt( "testKeyInt", 0 ) );
-		assertEquals( 0, Config.getInt( "notPresentKey", 0 ) );
-	}
-
-	/*
-	 * Test method for 'rtspproxy.Config.getIntArray(String, int)'
-	 */
-	public final void testGetIntArray()
-	{
-		int values[] = new int[] { 23, 4, 5, 62, -43, 23 };
-		Config.setIntArray( "testIntArray", values );
-
-		int results[] = Config.getIntArray( "testIntArray", 0 );
-
-		assertEquals( values.length, results.length );
-
-		for ( int i = 0; i < values.length; i++ ) {
-			assertEquals( values[i], results[i] );
-		}
-	}
-
-	/*
-	 * Test method for 'rtspproxy.Config.getBoolean(String, boolean)'
-	 */
-	public final void testGetBoolean()
-	{
-		Config.setBoolean( "testTrue", true );
-		Config.setBoolean( "testFalse", false );
-
-		assertTrue( Config.getBoolean( "testTrue" ) );
-		assertTrue( Config.getBoolean( "testTrue", false ) );
-		assertTrue( Config.getBoolean( "testTrue", true ) );
-
-		assertFalse( Config.getBoolean( "testFalse" ) );
-		assertFalse( Config.getBoolean( "testFalse", false ) );
-		assertFalse( Config.getBoolean( "testFalse", true ) );
-
-		assertFalse( Config.getBoolean( "notPresentKey" ) );
-		assertTrue( Config.getBoolean( "notPresentKey", true ) );
-		assertFalse( Config.getBoolean( "notPresentKey", false ) );
-	}
-
-}



From merlimat at berlios.de  Mon Dec 26 10:04:20 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Mon, 26 Dec 2005 10:04:20 +0100
Subject: [Rtspproxy-devel] r367 - trunk/src/changes
Message-ID: <200512260904.jBQ94Koi032332@sheep.berlios.de>

Author: merlimat
Date: 2005-12-26 10:04:18 +0100 (Mon, 26 Dec 2005)
New Revision: 367

Modified:
   trunk/src/changes/changes.xml
Log:
Updated changelog entries.

Modified: trunk/src/changes/changes.xml
===================================================================
--- trunk/src/changes/changes.xml	2005-12-26 09:03:38 UTC (rev 366)
+++ trunk/src/changes/changes.xml	2005-12-26 09:04:18 UTC (rev 367)
@@ -6,7 +6,19 @@
 	</properties>
 	<body>
 
-		<release version="3.0-ALPHA3-SNAPSHOT" date="2005-12-20">
+		<release version="3.0-ALPHA3-SNAPSHOT" date="in SVN">
+			<action dev="merlimat" type="add">
+				Added support for RDT transport and RealVideo streams.
+			</action>
+			<action dev="merlimat" type="change">
+				Refactored the configuration subsystem.
+			</action>
+			<action dev="merlimat" type="add">
+				Added JMX complaint remote management capabilities.
+			</action>
+			<action dev="merlimat" type="add">
+				Added accounting filter to log accesses to the proxy service.
+			</action>
 		</release>
 
 		<release version="3.0-ALPHA2" date="2005-12-08">



From merlimat at berlios.de  Mon Dec 26 10:32:21 2005
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Mon, 26 Dec 2005 10:32:21 +0100
Subject: [Rtspproxy-devel] r368 - trunk
Message-ID: <200512260932.jBQ9WL62001464@sheep.berlios.de>

Author: merlimat
Date: 2005-12-26 10:32:19 +0100 (Mon, 26 Dec 2005)
New Revision: 368

Modified:
   trunk/
Log:
Updated svn:ignore property on base dir.


Property changes on: trunk
___________________________________________________________________
Name: svn:ignore
   - 
doc

   + 
doc
.classpath
.wtpmodules
.project
target
.settings




From rbieniek at berlios.de  Tue Dec 27 01:39:18 2005
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Tue, 27 Dec 2005 01:39:18 +0100
Subject: [Rtspproxy-devel] r369 - in trunk: . src/main/java/rtspproxy/config src/resources/conf
Message-ID: <200512270039.jBR0dIdT008840@sheep.berlios.de>

Author: rbieniek
Date: 2005-12-27 01:37:27 +0100 (Tue, 27 Dec 2005)
New Revision: 369

Added:
   trunk/src/main/java/rtspproxy/config/ListParameter.java
   trunk/src/main/java/rtspproxy/config/XMLConfigReader.java
   trunk/src/resources/conf/rtspproxy.conf.xml
Modified:
   trunk/pom.xml
   trunk/src/main/java/rtspproxy/config/BooleanParameter.java
   trunk/src/main/java/rtspproxy/config/Config.java
   trunk/src/main/java/rtspproxy/config/IntegerListParameter.java
   trunk/src/main/java/rtspproxy/config/IntegerParameter.java
   trunk/src/main/java/rtspproxy/config/Parameter.java
   trunk/src/main/java/rtspproxy/config/StringListParameter.java
   trunk/src/main/java/rtspproxy/config/StringParameter.java
Log:
- started support for XML based configuration files. Configuration for simple 
parameters is supported, configuration of additional filter / logging modules 
is not supported yet.
-- TODO: validate XML configuration file by a schema definition (XSD/RelaxNG)
-- TODO: factor configuration out of the top-level reactor. The reactor should
be started after it is configured anyway.
-- TODO: implement unit test for XML configuration file.
-- TODO: document XML configuration file

Modified: trunk/pom.xml
===================================================================
--- trunk/pom.xml	2005-12-26 09:32:19 UTC (rev 368)
+++ trunk/pom.xml	2005-12-27 00:37:27 UTC (rev 369)
@@ -102,6 +102,12 @@
 		</dependency>
 
 		<dependency>
+			<groupId>dom4j</groupId>
+			<artifactId>dom4j</artifactId>
+			<version>1.6.1</version>
+		</dependency>
+
+		<dependency>
 			<groupId>junit</groupId>
 			<artifactId>junit</artifactId>
 			<version>3.8.1</version>

Modified: trunk/src/main/java/rtspproxy/config/BooleanParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/BooleanParameter.java	2005-12-26 09:32:19 UTC (rev 368)
+++ trunk/src/main/java/rtspproxy/config/BooleanParameter.java	2005-12-27 00:37:27 UTC (rev 369)
@@ -14,9 +14,9 @@
 	private boolean defaultValue;
 
 	public BooleanParameter( String name, boolean defaultValue, boolean mutable,
-			String description )
+			String description, String xpathExpr )
 	{
-		super( name, mutable, description );
+		super( name, mutable, description, xpathExpr );
 		this.defaultValue = defaultValue;
 	}
 

Modified: trunk/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/Config.java	2005-12-26 09:32:19 UTC (rev 368)
+++ trunk/src/main/java/rtspproxy/config/Config.java	2005-12-27 00:37:27 UTC (rev 369)
@@ -48,18 +48,24 @@
 			false, // default value
 			true, // mutable
 			"This flag let you to enable or disable the debug "
-					+ "output of the program." );
+					+ "output of the program.",
+			"/rtspproxy/log/debug" // xpathExpr
+	);
 
 	public static final BooleanParameter logLogToFile = new BooleanParameter(
 			"log.logtofile", // name
 			false, // default value
 			true, // mutable
-			"If you want to save to a file the debug output	set this to Yes" );
+			"If you want to save to a file the debug output	set this to Yes",
+			"/rtspproxy/log/logToFile" // xpathExpr
+	);
 
 	public static final StringParameter logFile = new StringParameter( "log.file", // name
 			"logs/rtspproxy.log", // default value
 			true, // mutable
-			"Here you specify the file to log to." );
+			"Here you specify the file to log to.",
+			"/rtspproxy/log/file"  // xpathExpr
+	);
 
 	public static final IntegerParameter threadPoolSize = new IntegerParameter(
 			"thread.pool.size", // name
@@ -68,7 +74,9 @@
 			new Integer( 10 ), // default value
 			true, // mutable
 			"Maximum size of the thread pool. The thread pool is shared "
-					+ "between all services found in RtspProxy." );
+					+ "between all services found in RtspProxy.",
+			"/rtspproxy/threadPoolSize" // xpathExpr
+	);
 
 	public static final IntegerParameter proxyRtspPort = new IntegerParameter(
 			"proxy.rtsp.port", // name
@@ -77,19 +85,25 @@
 			new Integer( Handler.DEFAULT_RTSP_PORT ), // default value
 			true, // mutable
 			"This is the port which the proxy will listen for "
-					+ "RTSP connection. The default is 554, like normal RTSP servers." );
+					+ "RTSP connection. The default is 554, like normal RTSP servers.",
+			"/rtspproxy/proxy/rtspPort" // xpathExpr
+			);
 
 	public static final StringParameter proxyClientInterface = new StringParameter(
 			"proxy.client.interface", // name
 			null, // default value
 			false, // mutable
-			"Specify a network interface. Default is to listen on all interfaces." );
+			"Specify a network interface. Default is to listen on all interfaces." ,
+			"/rtspproxy/proxy/client/interface" // xpathExpr
+			);
 
 	public static final StringParameter proxyServerInterface = new StringParameter(
 			"proxy.server.interface", // name
 			null, // default value
 			false, // mutable
-			"Specify a network interface. Default is to listen on all interfaces." );
+			"Specify a network interface. Default is to listen on all interfaces.",
+			"/rtspproxy/proxy/server/interface" // pathExpr
+			);
 
 	public static final IntegerParameter proxyServerRtpPort = new IntegerParameter(
 			"proxy.server.rtp.port", // name
@@ -97,7 +111,9 @@
 			new Integer( 65536 ), // max value
 			new Integer( 8000 ), // default value
 			true, // mutable
-			"Port to listen for RTP packets arriving from servers." );
+			"Port to listen for RTP packets arriving from servers.",
+			"/rtspproxy/proxy/server/rtpPort" // xpathExpr
+			);
 
 	public static final IntegerParameter proxyServerRtcpPort = new IntegerParameter(
 			"proxy.server.rtcp.port", // name
@@ -105,7 +121,9 @@
 			new Integer( 65536 ), // max value
 			new Integer( 8001 ), // default value
 			true, // mutable
-			"Port to listen for RTCP packets arriving from servers." );
+			"Port to listen for RTCP packets arriving from servers.",
+			"/rtspproxy/proxy/server/rtcpPort" // xpathExpr
+			);
 
 	public static final IntegerParameter proxyClientRtpPort = new IntegerParameter(
 			"proxy.client.rtp.port", // name
@@ -113,7 +131,9 @@
 			new Integer( 65536 ), // max value
 			new Integer( 8002 ), // default value
 			true, // mutable
-			"Port to listen for RTP packets arriving from clients." );
+			"Port to listen for RTP packets arriving from clients.",
+			"/rtspproxy/proxy/client/rtpPort" // xpathExpr
+			);
 
 	public static final IntegerParameter proxyClientRtcpPort = new IntegerParameter(
 			"proxy.client.rtcp.port", // name
@@ -121,7 +141,9 @@
 			new Integer( 65536 ), // max value
 			new Integer( 8003 ), // default value
 			true, // mutable
-			"Port to listen for RTCP packets arriving from clients." );
+			"Port to listen for RTCP packets arriving from clients.",
+			"/rtspproxy/proxy/client/rtcpPort" // xpathExpr
+			);
 
 	public static final IntegerParameter proxyServerRdtPort = new IntegerParameter(
 			"proxy.server.rdt.port", // name
@@ -129,7 +151,9 @@
 			new Integer( 65536 ), // max value
 			new Integer( 8020 ), // default value
 			true, // mutable
-			"Port to listen for RDT packets arriving from servers." );
+			"Port to listen for RDT packets arriving from servers.",
+			"/rtspproxy/proxy/server/rdtPort" // xpathExpr
+			);
 
 	public static final IntegerParameter proxyClientRdtPort = new IntegerParameter(
 			"proxy.client.rdt.port", // name
@@ -137,7 +161,9 @@
 			new Integer( 65536 ), // max value
 			new Integer( 8022 ), // default value
 			true, // mutable
-			"Port to listen for RDT packets arriving from clients." );
+			"Port to listen for RDT packets arriving from clients.",
+			"/rtspproxy/proxy/server/rdtPort" // xpathExpr
+			);
 
 	// // IP address filter
 
@@ -145,7 +171,9 @@
 			"proxy.filter.ipaddress.enable", // name
 			false, // default value
 			true, // mutable
-			"Enable or disable the IP address filtering system." );
+			"Enable or disable the IP address filtering system.",
+			null // xpathExpr
+			);
 
 	public static final StringParameter proxyFilterIpaddressImplementationClass = new StringParameter(
 			"proxy.filter.ipaddress.implementationClass", // name
@@ -154,13 +182,17 @@
 			false, // mutable
 			"Use an alternative backend class. This can be any class "
 					+ "that implements the rtspproxy.filter.ipaddress.IpAddressProvider "
-					+ "interface." );
+					+ "interface.",
+			null // xpathExpr
+			);
 
 	public static final StringParameter proxyFilterIpaddressTextFile = new StringParameter(
 			"proxy.filter.ipaddress.text.file", // name
 			"conf/ipfilter.txt", // default value
 			false, // mutable
-			"Plain Text based implementation specific configuration" );
+			"Plain Text based implementation specific configuration",
+			null // xpathExpr
+			);
 
 	// // Authentication filter
 
@@ -168,14 +200,18 @@
 			"proxy.filter.authentication.enable", // name
 			false, // default value
 			true, // mutable
-			"Enable or disable the authentication system." );
+			"Enable or disable the authentication system.",
+			null // xpathExpr
+			 );
 
 	public static final StringParameter proxyFilterAuthenticationScheme = new StringParameter(
 			"proxy.filter.authentication.scheme", // name
 			"Basic", // default value
 			false, // mutable
 			"Authentication Scheme. This could be Basic (the default), Digest or any "
-					+ "other supported scheme." );
+					+ "other supported scheme.",
+					null // xpathExpr
+					 );
 
 	public static final StringParameter proxyFilterAuthenticationImplementationClass = new StringParameter(
 			"proxy.filter.authentication.implementationClass", // name
@@ -184,13 +220,17 @@
 			false, // mutable
 			"Use an alternative backend class. This can be any class "
 					+ "that implements the rtspproxy.filter.authentication.AuthenticationProvider "
-					+ "interface." );
+					+ "interface.",
+					null // xpathExpr
+					 );
 
 	public static final StringParameter proxyFilterAuthenticationTextFile = new StringParameter(
 			"proxy.filter.authentication.text.file", // name
 			"conf/users.txt", // default value
 			false, // mutable
-			"Plain Text based implementation specific configuration" );
+			"Plain Text based implementation specific configuration",
+			null // xpathExpr
+			 );
 
 	// /////////////////////////////////////////////////////////
 
@@ -200,7 +240,9 @@
 			"proxy.filter.accounting.enable", // name
 			true, // default value
 			true, // mutable
-			"Controls the activation of the Accounting subsystem." );
+			"Controls the activation of the Accounting subsystem.",
+			null // xpathExpr
+			 );
 
 	public static final StringParameter proxyFilterAccountingImplementationClass = new StringParameter(
 			"proxy.filter.accounting.implementationClass", // name
@@ -209,13 +251,17 @@
 			false, // mutable
 			"Use an alternative backend class. This can be any class "
 					+ "that implements the rtspproxy.filter.accounting.AccountingProvider "
-					+ "interface." );
+					+ "interface.",
+					null // xpathExpr
+					 );
 
 	public static final StringParameter proxyFilterAccountingTextFile = new StringParameter(
 			"proxy.filter.accounting.text.file", // name
 			"logs/access.log", // default value
 			false, // mutable
-			"Plain Text based implementation specific configuration" );
+			"Plain Text based implementation specific configuration",
+			null // xpathExpr
+			 );
 
 	// /////////////////////////////////////////////////////////
 
@@ -225,32 +271,42 @@
 			"proxy.management.enable", // name
 			false, // default value
 			false, // mutable
-			"Controls the activation of the management subsystem (JMX)." );
+			"Controls the activation of the management subsystem (JMX).",
+			"/rtspproxy/jmx/manageable" // xpathExpr
+			);
 
 	public static final StringParameter proxyManagementHost = new StringParameter(
 			"proxy.management.host", // name
 			"localhost", // default value
 			false, // mutable
 			"Host to bind the management services. Default is localhost, and the services "
-					+ "will only be reachable from local machine." );
+					+ "will only be reachable from local machine.",
+			"/rtspproxy/jmx/interface" // xpathExpr
+			 );
 
 	public static final StringParameter proxyManagementUser = new StringParameter(
 			"proxy.management.user", // name
 			null, // default value
 			true, // mutable
-			"Remote management administrator user name." );
+			"Remote management administrator user name.",
+			"/rtspproxy/jmx/user" // xpathExpr
+			 );
 	
 	public static final StringParameter proxyManagementPassword = new StringParameter(
 			"proxy.management.password", // name
 			null, // default value
 			true, // mutable
-			"Remote management administrator password." );
+			"Remote management administrator password.",
+			"/rtspproxy/jmx/password" // xpathExpr
+			 );
 
 	public static final BooleanParameter proxyManagementWebEnable = new BooleanParameter(
 			"proxy.management.web.enable", // name
 			false, // default value
 			false, // mutable
-			"Controls the activation of the Web management console." );
+			"Controls the activation of the Web management console.",
+			"/rtspproxy/jmx/web/manageable" // xpathExpr
+			 );
 
 	public static final IntegerParameter proxyManagementWebPort = new IntegerParameter(
 			"proxy.management.web.port", // name
@@ -258,13 +314,17 @@
 			new Integer( 65536 ), // max value
 			new Integer( 8000 ), // default value
 			false, // mutable
-			"TCP port to be used for the Web Console." );
+			"TCP port to be used for the Web Console.",
+			"/rtspproxy/jmx/web/port" // xpathExpr
+			 );
 
 	public static final BooleanParameter proxyManagementRemoteEnable = new BooleanParameter(
 			"proxy.management.remote.enable", // name
 			false, // default value
 			false, // mutable
-			"Controls the activation of the JMX connector server." );
+			"Controls the activation of the JMX connector server.",
+			"/rtspproxy/jmx/connectorService/manageable" // xpathExpr
+			 );
 
 	// /////////////////////////////////////////////////////////
 

Modified: trunk/src/main/java/rtspproxy/config/IntegerListParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/IntegerListParameter.java	2005-12-26 09:32:19 UTC (rev 368)
+++ trunk/src/main/java/rtspproxy/config/IntegerListParameter.java	2005-12-27 00:37:27 UTC (rev 369)
@@ -9,7 +9,7 @@
 /**
  * @author Matteo Merli
  */
-public class IntegerListParameter extends Parameter
+public class IntegerListParameter extends ListParameter
 {
 	private List<Integer> values = null;
 
@@ -20,9 +20,9 @@
 	private Integer defaultValue;
 
 	public IntegerListParameter( String name, Integer minValue, Integer maxValue,
-			Integer defaultValue, boolean mutable, String description )
+			Integer defaultValue, boolean mutable, String description, String xpathExpr )
 	{
-		super( name, mutable, description );
+		super( name, mutable, description, xpathExpr );
 
 		if ( defaultValue == null )
 			throw new IllegalArgumentException( "Default value for " + name
@@ -62,6 +62,20 @@
 		setChanged();
 	}
 
+	@Override	
+	public void addValue(String value) {
+		try {
+			Integer tmpValue = Integer.valueOf(value);
+
+			this.values.add(tmpValue);
+		} catch ( NumberFormatException nfe ) {
+			throw new IllegalArgumentException( "Integer value for " + name
+					+ " not valid: " + value );
+		}
+		
+		setChanged();
+	}
+
 	@Override
 	public String getStringValue()
 	{

Modified: trunk/src/main/java/rtspproxy/config/IntegerParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/IntegerParameter.java	2005-12-26 09:32:19 UTC (rev 368)
+++ trunk/src/main/java/rtspproxy/config/IntegerParameter.java	2005-12-27 00:37:27 UTC (rev 369)
@@ -17,9 +17,9 @@
 	private Integer defaultValue;
 
 	public IntegerParameter( String name, Integer minValue, Integer maxValue,
-			Integer defaultValue, boolean mutable, String description )
+			Integer defaultValue, boolean mutable, String description, String xpathExpr )
 	{
-		super( name, mutable, description );
+		super( name, mutable, description, xpathExpr );
 
 		if ( defaultValue == null )
 			throw new IllegalArgumentException( "Default value for " + name

Added: trunk/src/main/java/rtspproxy/config/ListParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/ListParameter.java	2005-12-26 09:32:19 UTC (rev 368)
+++ trunk/src/main/java/rtspproxy/config/ListParameter.java	2005-12-27 00:37:27 UTC (rev 369)
@@ -0,0 +1,27 @@
+/**
+ * 
+ */
+package rtspproxy.config;
+
+/**
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ *
+ */
+public abstract class ListParameter extends Parameter {
+
+	/**
+	 * @param name
+	 * @param mutable
+	 * @param description
+	 * @param xpathExpr
+	 */
+	public ListParameter(String name, boolean mutable, String description,
+			String xpathExpr) {
+		super(name, mutable, description, xpathExpr);
+	}
+
+	/**
+	 * add a value to the list
+	 */
+	public abstract void addValue(String value);
+}

Modified: trunk/src/main/java/rtspproxy/config/Parameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/Parameter.java	2005-12-26 09:32:19 UTC (rev 368)
+++ trunk/src/main/java/rtspproxy/config/Parameter.java	2005-12-27 00:37:27 UTC (rev 369)
@@ -16,15 +16,18 @@
 	protected final boolean mutable;
 
 	protected final String description;
+	
+	protected final String xpathExpr;
 
-	protected Parameter( String name, boolean mutable, String description )
+	protected Parameter( String name, boolean mutable, String description, String xpathExpr )
 	{
 		validateName( name );
 
 		this.name = name;
 		this.mutable = mutable;
 		this.description = description;
-
+		this.xpathExpr = xpathExpr;
+		
 		Config.addParameter( this );
 	}
 
@@ -88,6 +91,14 @@
 	public abstract String getType();
 
 	/**
+	 * @return the xpath expression used to address this parameter in the xml configuration file.
+	 * If null, this parameter is ignored in the configuration file evaluation.
+	 */
+	public final String getXPathExpr() {
+		return this.xpathExpr;
+	}
+	
+	/**
 	 * Marks the parameter as changed and notify all the Observers.
 	 * 
 	 * @see java.util.Observable#setChanged()

Modified: trunk/src/main/java/rtspproxy/config/StringListParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/StringListParameter.java	2005-12-26 09:32:19 UTC (rev 368)
+++ trunk/src/main/java/rtspproxy/config/StringListParameter.java	2005-12-27 00:37:27 UTC (rev 369)
@@ -9,16 +9,16 @@
 /**
  * @author Matteo Merli
  */
-public class StringListParameter extends Parameter
+public class StringListParameter extends ListParameter
 {
 	private List<String> values = null;
 
 	private String defaultValue;
 
 	public StringListParameter( String name, String defaultValue, boolean mutable,
-			String description )
+			String description, String xpathExpr )
 	{
-		super( name, mutable, description );
+		super( name, mutable, description, xpathExpr );
 
 		if ( defaultValue == null )
 			throw new IllegalArgumentException( "Default value for " + name
@@ -37,6 +37,13 @@
 		}
 		setChanged();
 	}
+	
+	@Override	
+	public void addValue(String value) {
+		this.values.add(value);
+		
+		setChanged();
+	}
 
 	@Override
 	public String getStringValue()

Modified: trunk/src/main/java/rtspproxy/config/StringParameter.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/StringParameter.java	2005-12-26 09:32:19 UTC (rev 368)
+++ trunk/src/main/java/rtspproxy/config/StringParameter.java	2005-12-27 00:37:27 UTC (rev 369)
@@ -14,9 +14,9 @@
 	private String defaultValue;
 
 	public StringParameter( String name, String defaultValue, boolean mutable,
-			String description )
+			String description, String xpathExpr )
 	{
-		super( name, mutable, description );
+		super( name, mutable, description, xpathExpr );
 		this.defaultValue = defaultValue;
 	}
 

Added: trunk/src/main/java/rtspproxy/config/XMLConfigReader.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/XMLConfigReader.java	2005-12-26 09:32:19 UTC (rev 368)
+++ trunk/src/main/java/rtspproxy/config/XMLConfigReader.java	2005-12-27 00:37:27 UTC (rev 369)
@@ -0,0 +1,98 @@
+/**
+ * 
+ */
+package rtspproxy.config;
+
+import org.apache.log4j.Logger;
+
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.List;
+
+import org.dom4j.Attribute;
+import org.dom4j.Document;
+import org.dom4j.DocumentException;
+import org.dom4j.Element;
+import org.dom4j.Node;
+import org.dom4j.io.SAXReader;
+
+/**
+ * This class implements a parser for XML configuration files.
+ * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ * @todo validate the parsed configuration file by a schema.
+ */
+public class XMLConfigReader {
+
+	// logger
+	private static final Logger logger = Logger
+			.getLogger(XMLConfigReader.class);
+	
+	/**
+	 * create the xml config read object
+	 */
+	public XMLConfigReader() {}
+	
+	/**
+	 * read the configuration file.
+	 * @param fName the pathname of the configuration file
+	 * @exception IOException the file denoted by the file name cannot be read
+	 * @throws DocumentException parsing the config file failed.
+	 */ 
+	public final void readConfig(String fName) throws IOException, DocumentException {
+		this.readConfig(new FileInputStream(fName));
+	}
+	
+	/**
+	 * read the configuration file
+	 * @param is the input stream to read the configuration from.
+	 * @throws DocumentException parsing the input stream failed.
+	 * @throws IllegalArgumentException invalid parameter value given
+	 */
+	public final void readConfig(InputStream is) throws DocumentException, IllegalArgumentException {
+		SAXReader reader = new SAXReader();
+		Document doc = reader.read(is); // TODO validate the document by a schema
+		
+		for(Parameter param : Config.getAllParameters()) {
+			String xpathExpr = param.getXPathExpr();
+			
+			if(xpathExpr != null) {
+				logger.debug("evaluating parameter " + param.getName() + " with xpath " + xpathExpr);
+				
+				List<Node> nodes = (List<Node>)doc.selectNodes(xpathExpr);
+				
+				if(nodes.size() > 1) {
+					if(param instanceof ListParameter) {
+						for(Node node : nodes) {
+							String value = null;
+							
+							if(node instanceof Attribute)
+								value = ((Attribute)node).getText();
+							else if(node instanceof Element)
+								value = ((Element)node).getTextTrim();
+							
+							if(value == null)
+								throw new IllegalArgumentException("Invalid value specified for parameter " + param.getName());
+							
+							((ListParameter)param).addValue(value);							
+						}
+					} else
+						throw new IllegalArgumentException("Parameter " + param.getName() + " is not a list value");
+				} else if(nodes.size() == 1){
+					String value = null;
+					Node node = nodes.get(0);
+					
+					if(node instanceof Attribute)
+						value = ((Attribute)node).getText();
+					else if(node instanceof Element)
+						value = ((Element)node).getTextTrim();
+					
+					if(value == null)
+						throw new IllegalArgumentException("Invalid value specified for parameter " + param.getName());
+					
+					param.setValue(value);
+				}
+			}
+		}
+	}
+}

Added: trunk/src/resources/conf/rtspproxy.conf.xml
===================================================================
--- trunk/src/resources/conf/rtspproxy.conf.xml	2005-12-26 09:32:19 UTC (rev 368)
+++ trunk/src/resources/conf/rtspproxy.conf.xml	2005-12-27 00:37:27 UTC (rev 369)
@@ -0,0 +1,51 @@
+<rtspproxy>
+  <log>
+    <debug>false</debug>
+    <logToFile>true</logToFile>
+    <file>/tmp/rtspproxy.log</file>
+  </log>
+  <threadPoolSize>10</threadPoolSize>
+  <proxy>
+    <rtspPort>554</rtspPort>
+    <server>
+      <rtpPort>6970</rtpPort>
+      <rtcpPort>6971</rtcpPort>
+      <rdtPort>6972</rdtPort>
+      <interface>10.0.0.24</interface>
+    </server>
+    <client>
+      <rtpPort>6970</rtpPort>
+      <rtcpPort>6971</rtcpPort>
+      <rdtPort>6972</rdtPort>
+      <interface>10.0.0.23</interface>
+    </client>
+  </proxy>
+  <jmx>
+    <manageable>true</manageable>
+    <interface>10.0.0.22</interface>
+    <user>admin</user>
+    <password>admin123</password>
+    <web>
+      <manageable>true</manageable>
+      <port>8080</port>
+    </web>
+    <connectorService>
+      <manageable>true</manageable>
+    </connectorService>
+  </jmx>
+  <aaa>
+    <authentication implClass="rtspproxy.filter.authentication.PlainTextAuthenticationProvider">
+      <scheme>Digest</scheme>
+      <user>
+	<name>myuser</name>
+	<password>itspassword</password>
+      </user>
+    </authentication>
+    <authorization implClass="rtspproxy.filter.ipaddress.PlainTextIpAddressProvider">
+      <deny>*</deny>
+      <allow>127.0.0.1</allow>
+      <allow>10.0.0.*</allow>
+      <allow>*.some.domain</allow>
+    </authorization>
+  </aaa>
+</rtspproxy>
\ No newline at end of file



From rbieniek at berlios.de  Wed Dec 28 02:40:46 2005
From: rbieniek at berlios.de (rbieniek at berlios.de)
Date: Wed, 28 Dec 2005 02:40:46 +0100
Subject: [Rtspproxy-devel] r370 - in trunk/src: main/java/rtspproxy/config resources/conf
Message-ID: <200512280140.jBS1ekJP022810@sheep.berlios.de>

Author: rbieniek
Date: 2005-12-28 02:39:17 +0100 (Wed, 28 Dec 2005)
New Revision: 370

Added:
   trunk/src/main/java/rtspproxy/config/AAAConfig.java
Modified:
   trunk/src/main/java/rtspproxy/config/Config.java
   trunk/src/main/java/rtspproxy/config/XMLConfigReader.java
   trunk/src/resources/conf/rtspproxy.conf.xml
Log:
- added generic filter configuration support to XML based configuration file
parsing.
-- The generic filter information is not used yet while assembling the
filter chains because it would break the property-based configuration
mechanism.


Added: trunk/src/main/java/rtspproxy/config/AAAConfig.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/AAAConfig.java	2005-12-27 00:37:27 UTC (rev 369)
+++ trunk/src/main/java/rtspproxy/config/AAAConfig.java	2005-12-28 01:39:17 UTC (rev 370)
@@ -0,0 +1,39 @@
+/**
+ * 
+ */
+package rtspproxy.config;
+
+import java.util.List;
+
+import org.dom4j.Element;
+
+/**
+ * This class contains the configuration for an AAA filter.
+ * 
+ * @author Rainer Bieniek (Rainer.Bieniek at web.de)
+ */
+public class AAAConfig {
+
+	// implementation class name
+	private String implClass;
+	
+	// list of configuration elements
+	private List<Element> configElements;
+	
+	/**
+	 * 
+	 */
+	AAAConfig(String implClass, List<Element> configElements) {
+		this.implClass = implClass;
+		this.configElements = configElements;
+	}
+
+	public final List<Element> getConfigElements() {
+		return configElements;
+	}
+
+	public final String getImplClass() {
+		return implClass;
+	}
+
+}

Modified: trunk/src/main/java/rtspproxy/config/Config.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/Config.java	2005-12-27 00:37:27 UTC (rev 369)
+++ trunk/src/main/java/rtspproxy/config/Config.java	2005-12-28 01:39:17 UTC (rev 370)
@@ -1,8 +1,11 @@
 package rtspproxy.config;
 
 import java.io.File;
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.Date;
+import java.util.List;
 import java.util.Map;
 import java.util.Observable;
 import java.util.Observer;
@@ -339,7 +342,42 @@
 	private static Date startDate;
 
 	// /////////////////////////////////////////////////////////
+	
+	// filter configurations from XML
+	private static List<AAAConfig> authenticationFilters = new ArrayList<AAAConfig>();
 
+	// filter configurations from XML
+	private static List<AAAConfig> authorizationFilters = new ArrayList<AAAConfig>();
+
+	// filter configurations from XML
+	private static List<AAAConfig> accountingFilters = new ArrayList<AAAConfig>();
+
+	static void addAuthenticationFilter(AAAConfig config) {
+		authenticationFilters.add(config);
+	}
+	
+	static void addAuthorizationFilter(AAAConfig config) {
+		authorizationFilters.add(config);
+	}
+	
+	static void addAccountingFilter(AAAConfig config) {
+		accountingFilters.add(config);
+	}
+	
+	public static List<AAAConfig> getAuthenticationFilters() {
+		return Collections.unmodifiableList(authenticationFilters);
+	}
+	
+	public static List<AAAConfig> getAuthorizationFilters() {
+		return Collections.unmodifiableList(authorizationFilters);
+	}
+	
+	public static List<AAAConfig> getAccountingFilters() {
+		return Collections.unmodifiableList(accountingFilters);
+	}
+	
+	// /////////////////////////////////////////////////////////
+
 	public Config()
 	{
 		// Read home directory

Modified: trunk/src/main/java/rtspproxy/config/XMLConfigReader.java
===================================================================
--- trunk/src/main/java/rtspproxy/config/XMLConfigReader.java	2005-12-27 00:37:27 UTC (rev 369)
+++ trunk/src/main/java/rtspproxy/config/XMLConfigReader.java	2005-12-28 01:39:17 UTC (rev 370)
@@ -94,5 +94,27 @@
 				}
 			}
 		}
+		
+		for(Node aaaNode : (List<Node>)doc.selectNodes("/rtspproxy/filters/*")) {
+			String name = aaaNode.getName();
+			String implClass = ((Element)aaaNode).attributeValue("implClass");
+			
+			logger.debug("element name=" + name + ", implClass=" + implClass);
+			
+			if(implClass == null || implClass.length() == 0)
+				throw new IllegalArgumentException("no implementation class given");
+			
+			if(name.equals("authentication")) {
+				Config.addAuthenticationFilter(new AAAConfig(implClass, 
+						(List<Element>)((Element)aaaNode).elements()));
+			} else if(name.equals("authorization")) {
+				Config.addAuthorizationFilter(new AAAConfig(implClass, 
+						(List<Element>)((Element)aaaNode).elements()));
+			} else if(name.equals("accounting")) {
+				Config.addAccountingFilter(new AAAConfig(implClass, 
+						(List<Element>)((Element)aaaNode).elements()));				
+			} else
+				throw new IllegalArgumentException("invalid AAA element given, name=" + name);
+		}
 	}
 }

Modified: trunk/src/resources/conf/rtspproxy.conf.xml
===================================================================
--- trunk/src/resources/conf/rtspproxy.conf.xml	2005-12-27 00:37:27 UTC (rev 369)
+++ trunk/src/resources/conf/rtspproxy.conf.xml	2005-12-28 01:39:17 UTC (rev 370)
@@ -33,7 +33,7 @@
       <manageable>true</manageable>
     </connectorService>
   </jmx>
-  <aaa>
+  <filters>
     <authentication implClass="rtspproxy.filter.authentication.PlainTextAuthenticationProvider">
       <scheme>Digest</scheme>
       <user>
@@ -47,5 +47,8 @@
       <allow>10.0.0.*</allow>
       <allow>*.some.domain</allow>
     </authorization>
-  </aaa>
+    <accounting implClass="rtspproxy.filter.accounting.PlainTextAccountingProvider" >
+      <log>/tmp/rtspproxy-access.log</log>
+    </accounting>
+  </filters>
 </rtspproxy>
\ No newline at end of file



