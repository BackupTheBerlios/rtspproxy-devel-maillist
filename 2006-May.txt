From merlimat at berlios.de  Tue May  2 16:33:02 2006
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 2 May 2006 16:33:02 +0200
Subject: [Rtspproxy-devel] r418 - in trunk/RTSPProxy-App/src: main/java/rtspproxy main/java/rtspproxy/filter/accounting main/java/rtspproxy/filter/authentication resources/conf
Message-ID: <200605021433.k42EX2jL021357@sheep.berlios.de>

Author: merlimat
Date: 2006-05-02 16:32:49 +0200 (Tue, 02 May 2006)
New Revision: 418

Added:
   trunk/RTSPProxy-App/src/resources/conf/users.properties
Removed:
   trunk/RTSPProxy-App/src/resources/conf/user.properties
Modified:
   trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/SimpleAccountingProvider.java
   trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/authentication/SimpleAuthenticationProvider.java
   trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml
Log:
Update filter providers and renamed users password file.

Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java	2006-04-25 22:25:50 UTC (rev 417)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/Main.java	2006-05-02 14:32:49 UTC (rev 418)
@@ -116,7 +116,7 @@
             Reactor.start();
 
         } catch ( Exception e ) {
-            log.fatal( "Exception in the reactor: ", e );
+            log.fatal( "Exception in the reactor: " + e );
             Exceptions.logStackTrace( e );
             System.exit( -1 );
         }

Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/SimpleAccountingProvider.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/SimpleAccountingProvider.java	2006-04-25 22:25:50 UTC (rev 417)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/accounting/SimpleAccountingProvider.java	2006-05-02 14:32:49 UTC (rev 418)
@@ -20,14 +20,15 @@
  * @author Matteo Merli
  */
 public class SimpleAccountingProvider extends AccountingProviderAdapter implements
-        Observer
+        AccountingProvider, Observer
 {
 
-    private static final SimpleDateFormat format = new SimpleDateFormat(
-            "yyyy-MM-dd HH:mm:ss Z" );
+    private static final SimpleDateFormat format = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss Z" );
 
     private static Logger log = LoggerFactory.getLogger( SimpleAccountingProvider.class );
 
+    private static final String requestMessageATTR = SimpleAccountingProvider.class.getName() + "requestATTR";
+
     // This is not static since it's a separate log
     private Logger accessLog = null;
 
@@ -36,7 +37,7 @@
     public SimpleAccountingProvider()
     {
         loggerCatergory = new StringParameter( "filters.accounting.category", // name
-                "accessLog", // default value
+                "accounting.rtspproxy", // default value
                 true, // mutable
                 "Log4j category name for the accounting log." );
         

Modified: trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/authentication/SimpleAuthenticationProvider.java
===================================================================
--- trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/authentication/SimpleAuthenticationProvider.java	2006-04-25 22:25:50 UTC (rev 417)
+++ trunk/RTSPProxy-App/src/main/java/rtspproxy/filter/authentication/SimpleAuthenticationProvider.java	2006-05-02 14:32:49 UTC (rev 418)
@@ -37,7 +37,7 @@
 public class SimpleAuthenticationProvider implements AuthenticationProvider, Observer
 {
 
-    private static Logger log = LoggerFactory
+    private static final Logger log = LoggerFactory
             .getLogger( SimpleAuthenticationProvider.class );
 
     private final StringParameter usersDbParameter;
@@ -47,7 +47,7 @@
     public SimpleAuthenticationProvider()
     {
         usersDbParameter = new StringParameter( "filters.authentication.usersFile", // name
-                "conf/user.properties", // default value
+                "conf/users.properties", // default value
                 true, // mutable
                 "" );
 
@@ -63,7 +63,7 @@
             usersDb.load( is );
 
         } catch ( Exception e ) {
-            log.error( "Error reading users DB: " + e );
+            log.error( "Error reading users DB: " + e.getMessage() );
         }
     }
 

Modified: trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml
===================================================================
--- trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml	2006-04-25 22:25:50 UTC (rev 417)
+++ trunk/RTSPProxy-App/src/resources/conf/rtspproxy.conf.xml	2006-05-02 14:32:49 UTC (rev 418)
@@ -1,11 +1,10 @@
-
 <!-- $Id$ -->
 
 <rtspproxy>
 
 	<!-- Enable or disable debug output. 
-	     A more fine-grained configuration can be done in the log4j 
-	     properties file. -->
+		A more fine-grained configuration can be done in the log4j 
+		properties file. -->
 	<debug>true</debug>
 
 	<!-- Thread pool configuration. Number of active threads. -->
@@ -18,16 +17,16 @@
 
 		<!-- Server-side configuration -->
 		<server>
-	
+
 			<!-- If specified, bound the proxy on a specifed network
-                             interface. -->
-                        <!-- <address>127.0.0.1</address> -->
+				interface. -->
+			<!-- <address>127.0.0.1</address> -->
 
-                        <!-- Same as for the address, but specifying the
-                             network interface name. On Linux they are called 'eth0', 'eth1'...
-                             On  MacOS X they are 'en0', 'en1', .. -->
-                        <!-- <interface>eth0</interface> -->
-		
+			<!-- Same as for the address, but specifying the
+				network interface name. On Linux they are called 'eth0', 'eth1'...
+				On  MacOS X they are 'en0', 'en1', .. -->
+			<!-- <interface>eth0</interface> -->
+
 			<!-- RTP port used with servers -->
 			<!-- <rtpPort>6970</rtpPort> -->
 
@@ -53,13 +52,13 @@
 		<!-- Client-side configuration -->
 		<client>
 			<!-- If specified, bound the proxy on a specifed network 
-			     interface. -->
+				interface. -->
 			<address>127.0.0.1</address>
 
 			<!-- Same as for the address, but specifying the 
-			     network interface name. On Linux they are called 'eth0', 'eth1'...
-			     On  MacOS X they are 'en0', 'en1', .. -->
-                        <!-- <interface>eth0</interface> -->
+				network interface name. On Linux they are called 'eth0', 'eth1'...
+				On  MacOS X they are 'en0', 'en1', .. -->
+			<!-- <interface>eth0</interface> -->
 
 			<!-- Rtp port used with clients -->
 			<!-- <rtpPort>6970</rtpPort> -->
@@ -105,7 +104,7 @@
 		<!-- JMX web console -->
 		<web>
 			<enable>true</enable>
-			
+
 			<!-- HTTP port -->
 			<port>8080</port>
 		</web>
@@ -125,7 +124,7 @@
 		<!-- Authentication filter -->
 		<authentication>
 			<!-- Enable or disable the authentication filter -->
-			<enable>true</enable>
+			<enable>false</enable>
 
 			<implClass>
 				rtspproxy.filter.authentication.SimpleAuthenticationProvider
@@ -134,27 +133,27 @@
 			<!-- Authentication Scheme: 
 				can be 'Basic' or 'Digest'
 			-->
-			<scheme>Digest</scheme>
+			<scheme>Basic</scheme>
 
 			<!-- The SimpleAuthenticationProvider uses a Property file 
-			     to keep a user db. In this file, keys are the usernames 
-			     and values are the passwords. -->
+				to keep a user db. In this file, keys are the usernames 
+				and values are the passwords. -->
 			<usersFile>conf/users.properties</usersFile>
 		</authentication>
 
 		<!-- Filter clients using theyr IP address -->
 		<ipaddress>
-			
+
 			<!-- Enable or disable the ipaddress filter -->
-                        <enable>true</enable>
+			<enable>false</enable>
 
 			<implClass>
 				rtspproxy.filter.ipaddress.SimpleIpAddressProvider
 			</implClass>
 
 			<!-- Access rules for clients -->
-			<client-rules>	
-				<rule type="deny"  pattern="*" />
+			<client-rules>
+				<rule type="deny" pattern="*" />
 				<rule type="allow" pattern="127.0.0.1" />
 				<rule type="allow" pattern="10.0.0.*" />
 				<rule type="allow" pattern="*.some.domain" />
@@ -192,8 +191,8 @@
 			</implClass>
 
 			<!-- SimpleUrlRewritingProvider uses the following rules 
-		 	     to rewrite the URLs.	
-                          -->
+				to rewrite the URLs.	
+			-->
 			<rules>
 				<mapping>
 					<from>rtsp://10.0.0.1:554/</from>
@@ -208,14 +207,12 @@
 
 		<control>
 			<enable>false</enable>
-			
+
 			<filters>
-				<filter side="Client" 
-					name="testFilter" 
+				<filter side="Client" name="testFilter"
 					implClass="path.to.Class" />
 
-				<filter side="Server" 
-					name="testFilterServer"
+				<filter side="Server" name="testFilterServer"
 					implClass="other.path.class" />
 			</filters>
 		</control>

Deleted: trunk/RTSPProxy-App/src/resources/conf/user.properties
===================================================================
--- trunk/RTSPProxy-App/src/resources/conf/user.properties	2006-04-25 22:25:50 UTC (rev 417)
+++ trunk/RTSPProxy-App/src/resources/conf/user.properties	2006-05-02 14:32:49 UTC (rev 418)
@@ -1,7 +0,0 @@
-
-## User Databases
-# 
-# Insert users in the form: 
-
-user: password
-joe: test

Copied: trunk/RTSPProxy-App/src/resources/conf/users.properties (from rev 416, trunk/RTSPProxy-App/src/resources/conf/user.properties)



From merlimat at berlios.de  Tue May  2 17:19:39 2006
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 2 May 2006 17:19:39 +0200
Subject: [Rtspproxy-devel] r420 - trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp
Message-ID: <200605021519.k42FJdLh029246@sheep.berlios.de>

Author: merlimat
Date: 2006-05-02 17:19:33 +0200 (Tue, 02 May 2006)
New Revision: 420

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp/SDESInfo.java
Log:
Removed 'false-alarm' TODO task.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp/SDESInfo.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp/SDESInfo.java	2006-05-02 15:06:24 UTC (rev 419)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rtp/rtcp/SDESInfo.java	2006-05-02 15:19:33 UTC (rev 420)
@@ -88,7 +88,6 @@
 	 */
 	public ByteBuffer toBuffer()
 	{
-		// TODO Auto-generated method stub
 		return null;
 	}
 



From merlimat at berlios.de  Tue May  2 17:26:30 2006
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 2 May 2006 17:26:30 +0200
Subject: [Rtspproxy-devel] r421 - in trunk/RTSPProxy-Core/src/main/java: . rtspproxy/proxy/track rtspproxy/rdt
Message-ID: <200605021526.k42FQUZu030188@sheep.berlios.de>

Author: merlimat
Date: 2006-05-02 17:26:24 +0200 (Tue, 02 May 2006)
New Revision: 421

Removed:
   trunk/RTSPProxy-Core/src/main/java/javax/
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/Track.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java
Log:
Removed 'false-alarm' TODO task.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/Track.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/Track.java	2006-05-02 15:19:33 UTC (rev 420)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/track/Track.java	2006-05-02 15:26:24 UTC (rev 421)
@@ -84,7 +84,6 @@
     protected static final String ATTR = Track.class.toString() + "Attr";
 
     /** Maps a client address to a Track */
-    // TODO: bring back to protected
     protected static Map<InetSocketAddress, Track> clientAddressMap = new ConcurrentHashMap<InetSocketAddress, Track>();
 
     /** Maps a server address to a Track */
@@ -178,6 +177,16 @@
         this.url = url;
     }
 
+    public InetAddress getClientAddress()
+    {
+        return clientAddress;
+    }
+
+    public InetAddress getServerAddress()
+    {
+        return serverAddress;
+    }
+
     public abstract void close();
 
     @Override

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java	2006-05-02 15:19:33 UTC (rev 420)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/rdt/RdtProtocolDecoder.java	2006-05-02 15:26:24 UTC (rev 421)
@@ -50,7 +50,6 @@
 	 * @see org.apache.mina.filter.codec.ProtocolDecoder#dispose(org.apache.mina.common.IoSession)
 	 */
 	public void dispose(IoSession arg0) throws Exception {
-		// TODO Auto-generated method stub
 
 	}
 



From merlimat at berlios.de  Tue May  2 17:27:20 2006
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 2 May 2006 17:27:20 +0200
Subject: [Rtspproxy-devel] r422 - trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy
Message-ID: <200605021527.k42FRKix030312@sheep.berlios.de>

Author: merlimat
Date: 2006-05-02 17:27:15 +0200 (Tue, 02 May 2006)
New Revision: 422

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java
Log:
Exposed methods for JMX management.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java	2006-05-02 15:26:24 UTC (rev 421)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/proxy/ProxySession.java	2006-05-02 15:27:15 UTC (rev 422)
@@ -18,16 +18,18 @@
 
 package rtspproxy.proxy;
 
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Random;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
-import javax.management.ObjectName;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import rtspproxy.jmx.JmxAgent;
 import rtspproxy.lib.number.UnsignedInt;
 import rtspproxy.lib.number.UnsignedLong;
 import rtspproxy.proxy.track.RdtTrack;
@@ -54,6 +56,8 @@
     /** Map IDs for RTSP session with clients to ProxySession objects. */
     private static Map<String, ProxySession> clientSessionIds = new ConcurrentHashMap<String, ProxySession>();
 
+    private static Set<ProxySession> sessions = Collections.synchronizedSet( new HashSet<ProxySession>() );
+
     /**
      * Retrieve the ProxySession associated with the given session ID used by
      * the client.
@@ -86,6 +90,13 @@
         return serverSessionIds.get( serverSessionId );
     }
 
+    public static Set<ProxySession> getActiveSessions()
+    {
+        return Collections.unmodifiableSet( sessions );
+    }
+
+    ///////////////////////////////////////
+
     /**
      * This is the session ID generated by the proxy and used for the
      * communication with the client.
@@ -98,49 +109,29 @@
      */
     private String serverSessionId = null;
 
-    /** Tells whether the proxySession has already been closed. */
-    private boolean closedFlag = false;
-
     /**
      * Collection of Track associated with this ProxySession.
      */
     private Map<String, Track> trackList = new ConcurrentHashMap<String, Track>();
 
     /**
-     * object name of proxy session
-     */
-    private ObjectName objectName;
-
-    /**
      * the special server-side session which handles RTP sessions with different
      * local source ports
      */
     private PortrangeRtpServerSession portrangeRtpServerSession;
 
-    /**
-     * @return Returns the objectName.
-     */
-    public ObjectName getObjectName()
-    {
-        return objectName;
-    }
+    private final Date startDate;
 
     /**
-     * @param objectName
-     *            The objectName to set.
-     */
-    public void setObjectName( ObjectName objectName )
-    {
-        this.objectName = objectName;
-    }
-
-    /**
      * Construct a new ProxySession. The session ID that will be used when
      * communicating with the client will be generated.
      */
     public ProxySession()
     {
+        startDate = new Date();
         setClientSessionId( newSessionID() );
+        sessions.add( this );
+        
         log.debug( "\n----------\nCreated new proxy session: {} \n----------",
                 clientSessionId );
     }
@@ -212,7 +203,6 @@
     {
         this.clientSessionId = clientSessionId;
         clientSessionIds.put( clientSessionId, this );
-        makeManaged();
     }
 
     /**
@@ -226,27 +216,18 @@
         this.serverSessionId = serverSessionId;
         if ( serverSessionId != null )
             serverSessionIds.put( serverSessionId, this );
-        makeManaged();
     }
 
-    /**
-     * check if both client and server session id's are set and register proxy
-     * session facade MBean
-     */
-    private void makeManaged()
+    public Date getStartDate()
     {
-        if ( this.clientSessionId != null && this.serverSessionId != null )
-            JmxAgent.getInstance().registerProxySession( this );
-    }
+        return startDate;
+    }    
 
     /**
      * Closes the entire proxy session and frees all associated resources.
      */
     public synchronized void close()
     {
-        if ( closedFlag )
-            return;
-
         log.debug( "TrackList: {}", trackList );
 
         // close all associated tracks
@@ -254,7 +235,6 @@
             entry.getValue().close();
         }
 
-        closedFlag = true;
         log.debug( "Closed proxySession: {}", clientSessionId );
 
         String s = "";
@@ -273,12 +253,11 @@
         if ( serverSessionId != null )
             serverSessionIds.remove( serverSessionId );
 
+        sessions.remove( this );
+
         if ( this.portrangeRtpServerSession != null )
             PortrangeRtpServerSessionFactory.getInstance().releaseSession(
                     this.portrangeRtpServerSession );
-
-        // unregister session facade in MBean server
-        JmxAgent.getInstance().unregisterProxySession( this );
     }
 
     // ///////////////////
@@ -331,18 +310,15 @@
         }
     }
 
-    /**
-     * @return Returns the closedFlag.
-     */
-    public boolean isClosed()
-    {
-        return closedFlag;
-    }
-
     public void setPortrangeRtpServerSession(
             PortrangeRtpServerSession portrangeRtpSession )
     {
         this.portrangeRtpServerSession = portrangeRtpSession;
     }
 
+    public Collection<Track> getTrackList()
+    {
+        return trackList.values();
+    }
+
 }



From merlimat at berlios.de  Tue May  2 17:35:17 2006
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 2 May 2006 17:35:17 +0200
Subject: [Rtspproxy-devel] r423 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter: . ipaddress
Message-ID: <200605021535.k42FZHt4031294@sheep.berlios.de>

Author: merlimat
Date: 2006-05-02 17:35:05 +0200 (Tue, 02 May 2006)
New Revision: 423

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java
Log:
Reworked the way filter are stopped/resumed at run time.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java	2006-05-02 15:27:15 UTC (rev 422)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterBase.java	2006-05-02 15:35:05 UTC (rev 423)
@@ -22,28 +22,36 @@
     private static Logger log = LoggerFactory.getLogger( FilterBase.class );
 
     /** running flag */
-    private boolean isRunning = true;
+    private boolean isRunning = false;
 
-    /** MBean name assigned by JMX interface */
-    private ObjectName mbeanName;
-
     /** chain name of filter */
     private String chainName;
 
+    private T providerReference = null;
+
     // Abstract methods
     public abstract String getName();
 
-    public String getProviderClassName() { return null; }
+    public String getProviderClassName()
+    {
+        return null;
+    }
 
-    protected Class<T> getProviderInterface() { return null; }
+    protected Class<T> getProviderInterface()
+    {
+        return null;
+    }
 
-    protected void setProvider( T provider ) {}
+    protected void setProvider( T provider )
+    {
+    }
 
     /**
      * Subclasses can overload the method to read theyr own configuration
      * parameters.
      * 
-     * @param configuration A {Configuration} object to read from.
+     * @param configuration
+     *            A {Configuration} object to read from.
      */
     protected void doConfigure( Configuration configuration )
     {
@@ -62,6 +70,9 @@
      */
     public final void suspend()
     {
+        if ( providerReference != null )
+            providerReference.stop();
+
         isRunning = false;
         log.info( "{} suspended", getChainName() );
     }
@@ -71,6 +82,14 @@
      */
     public final void resume()
     {
+        if ( providerReference != null ) {
+            try {
+                providerReference.start();
+            } catch ( Exception e ) {
+                log.error( "Error starting {}: {}", getProviderClassName(), e.getMessage() );
+                return;
+            }
+        }
         isRunning = true;
         log.info( "{} resumed", getChainName() );
     }
@@ -84,28 +103,6 @@
     }
 
     /**
-     * @return Returns the mbeanName.
-     */
-    public ObjectName getMbeanName()
-    {
-        return mbeanName;
-    }
-
-    /**
-     * Set the name of the MBean used for filter management. This property is
-     * write-once.
-     * 
-     * @param mbeanName
-     *            The mbeanName to set.
-     */
-    public void setMbeanName( ObjectName mbeanName )
-    {
-        // once set it can not change
-        if ( this.mbeanName == null )
-            this.mbeanName = mbeanName;
-    }
-
-    /**
      * get the chain name for the filter.
      */
     public String getChainName()
@@ -133,12 +130,12 @@
         doConfigure( configuration );
 
         Class providerClass;
-	String className = getProviderClassName(); 
-	if ( className == null ) {
-		// The filter does not have a provider 
-		// system. Ignore it.
-		return;
-	}
+        String className = getProviderClassName();
+        if ( className == null ) {
+            // The filter does not have a provider
+            // system. Ignore it.
+            return;
+        }
 
         try {
             providerClass = Class.forName( className );
@@ -166,10 +163,11 @@
             return;
         }
 
-	// Instanciate the provider and configure it.
+        // Instanciate the provider and configure it.
         try {
             T provider = (T) providerClass.newInstance();
             setProvider( provider );
+            providerReference = provider;
             provider.configure( configuration );
             provider.start();
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java	2006-05-02 15:27:15 UTC (rev 422)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/FilterRegistry.java	2006-05-02 15:35:05 UTC (rev 423)
@@ -81,23 +81,27 @@
 
         Configuration config = XMLConfigReader.getConfiguration();
 
-        if ( Config.filtersAuthenticationEnable.getValue() ) {
+        try {
+            
             authenticationFilter = new AuthenticationFilter();
             authenticationFilter.configure( config );
             registerFilterMBean( authenticationFilter );
-        }
+            if ( Config.filtersAuthenticationEnable.getValue() ) {
+                authenticationFilter.resume();
+            }
 
-        if ( Config.filtersIpAddressEnable.getValue() ) {
             clientAddressFilter = new IpAddressFilter( Side.Client );
             clientAddressFilter.configure( config );
             registerFilterMBean( clientAddressFilter );
 
             serverAddressFilter = new IpAddressFilter( Side.Server );
             serverAddressFilter.configure( config );
-            registerFilterMBean( serverAddressFilter );         
-        }
+            registerFilterMBean( serverAddressFilter );
+            if ( Config.filtersIpAddressEnable.getValue() ) {
+                clientAddressFilter.resume();
+                serverAddressFilter.resume();
+            }
 
-        if ( Config.filtersRewriteEnable.getValue() ) {
             clientRewritingFilter = new UrlRewritingFilter( Side.Client );
             clientRewritingFilter.configure( config );
             registerFilterMBean( clientRewritingFilter );
@@ -105,10 +109,17 @@
             serverRewritingFilter = new UrlRewritingFilter( Side.Server );
             serverRewritingFilter.configure( config );
             registerFilterMBean( serverRewritingFilter );
-        }
+            if ( Config.filtersRewriteEnable.getValue() ) {
+                clientRewritingFilter.resume();
+                serverRewritingFilter.resume();
+            }
 
-        try {
-            // TODO: XXXXX
+            accountingFilter = new AccountingFilter();
+            accountingFilter.configure( config );
+            registerFilterMBean( accountingFilter );
+            if ( Config.filtersAccountingEnable.getValue() ) {
+                accountingFilter.resume();
+            }
 
         } catch ( Throwable t ) {
             log.error( "Failed to populate filter registry", t );
@@ -116,7 +127,7 @@
             Reactor.stop();
         }
 
-        this.populated = true;
+        populated = true;
     }
 
     private void registerFilterMBean( FilterBase filter )

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java	2006-05-02 15:27:15 UTC (rev 422)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/RtspFilters.java	2006-05-02 15:35:05 UTC (rev 423)
@@ -76,15 +76,15 @@
     protected void addIpAddressFilter( IoFilterChain chain, Side side )
     {
         IpAddressFilter filter;
-	if ( side == Side.Client )
-		filter = FilterRegistry.getInstance().getClientAddressFilter();
-	else
-		filter = FilterRegistry.getInstance().getServerAddressFilter();
+        if ( side == Side.Client )
+            filter = FilterRegistry.getInstance().getClientAddressFilter();
+        else
+            filter = FilterRegistry.getInstance().getServerAddressFilter();
 
-	if ( filter == null )
-		return;
+        if ( filter == null || !filter.isRunning() )
+            return;
 
-	chain.addAfter( ProxyServiceRegistry.threadPoolFilterNAME, filter.getChainName(),
+        chain.addAfter( ProxyServiceRegistry.threadPoolFilterNAME, filter.getChainName(),
                 filter );
     }
 
@@ -105,35 +105,35 @@
         AuthenticationFilter filter = FilterRegistry.getInstance()
                 .getAuthenticationFilter();
 
-	if ( filter == null )
-		return;
+        if ( !filter.isRunning() )
+            return;
 
         chain.addAfter( rtspCodecNAME, filter.getChainName(), filter );
     }
 
     protected void addAccountingFilter( IoFilterChain chain )
     {
-	AccountingFilter filter = FilterRegistry.getInstance().getAccountingFilter();
-    
-	if ( filter == null )
-		return;
-    
-	chain.addAfter( rtspCodecNAME, filter.getChainName(), filter ); 
+        AccountingFilter filter = FilterRegistry.getInstance().getAccountingFilter();
+
+        if ( !filter.isRunning() )
+            return;
+
+        chain.addAfter( rtspCodecNAME, filter.getChainName(), filter );
     }
 
     protected void addRewriteFilter( IoFilterChain chain, Side side )
     {
-	UrlRewritingFilter filter;
-	
-	if ( side == Side.Client )
-		filter = FilterRegistry.getInstance().getClientRewritingFilter();
-	else
-		filter = FilterRegistry.getInstance().getServerRewritingFilter();
-	
-	if ( filter == null )
-		return;
-          
-         chain.addAfter( rtspCodecNAME, filter.getChainName(), filter ); 
+        UrlRewritingFilter filter;
+
+        if ( side == Side.Client )
+            filter = FilterRegistry.getInstance().getClientRewritingFilter();
+        else
+            filter = FilterRegistry.getInstance().getServerRewritingFilter();
+
+        if ( !filter.isRunning() )
+            return;
+
+        chain.addAfter( rtspCodecNAME, filter.getChainName(), filter );
     }
 
     protected void addControlFilter( IoFilterChain chain )

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java	2006-05-02 15:27:15 UTC (rev 422)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/filter/ipaddress/IpAddressFilter.java	2006-05-02 15:35:05 UTC (rev 423)
@@ -45,7 +45,7 @@
 
     public IpAddressFilter( Side side )
     {
-	this.side = side;
+        this.side = side;
     }
 
     /*
@@ -90,14 +90,14 @@
     protected void setProvider( IpAddressProvider provider )
     {
         this.provider = provider;
-	this.provider.setSide( side );
+        this.provider.setSide( side );
     }
 
     @Override
     public void messageReceived( NextFilter nextFilter, IoSession session, Object message )
             throws Exception
     {
-	log.debug( "Testing address: {}", session.getRemoteAddress() );
+        log.debug( "Testing address: {}", session.getRemoteAddress() );
 
         if ( !isRunning() ) {
             // forward because filter is suspended
@@ -126,7 +126,7 @@
         if ( !isRunning() ) {
             // forward because filter is suspended
             nextFilter.sessionCreated( session );
-            
+
         } else if ( !provider.isBlocked( ((InetSocketAddress) session.getRemoteAddress())
                 .getAddress() ) ) {
             // forward if not blocked



From merlimat at berlios.de  Tue May  2 17:37:31 2006
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 2 May 2006 17:37:31 +0200
Subject: [Rtspproxy-devel] r424 - in trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx: . mbeans
Message-ID: <200605021537.k42FbV6t031495@sheep.berlios.de>

Author: merlimat
Date: 2006-05-02 17:37:14 +0200 (Tue, 02 May 2006)
New Revision: 424

Added:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ProxySessionList.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/TrackFacade.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/TrackFacadeMBean.java
Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/MBeansFactory.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/Filter.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/FilterMBean.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacade.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacadeMBean.java
Log:
Added a MBean to access ProxySession informations.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java	2006-05-02 15:35:05 UTC (rev 423)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/JmxAgent.java	2006-05-02 15:37:14 UTC (rev 424)
@@ -81,6 +81,8 @@
     public static final String PROXY_SESSION_DOMAIN = "RtspProxy.Sessions.Proxy";
 
     public static final String RTP_DYNAMIC_SESSION_DOMAIN = "RtspProxy.Sessions.RTP.dynamic";
+    
+    public static final String LOGGER_DOMAIN = "RtspProxy.Logger";
 
     private MBeanServer mbeanServer = null;
 
@@ -124,6 +126,13 @@
                 mbeanServer.registerMBean( new Service( proxyService ), objectName );
             }
 
+            // ProxySessionList
+            Object proxySessionList = mbeanServer.instantiate( ProxySessionList.class
+                    .getName() );
+            ObjectName proxySessionListName = ObjectName.getInstance( DOMAIN
+                    + ":name=ProxySessionList" );
+            mbeanServer.registerMBean( proxySessionList, proxySessionListName );
+
             startWebConsole();
             startConnectorServer();
 
@@ -135,6 +144,7 @@
 
     public void stop()
     {
+        log.info( "Shutting down JMX Agent" );
         // TODO: Handle the shutdown of the JMX agent
     }
 
@@ -216,15 +226,14 @@
      */
     public void registerFilter( FilterBase filter )
     {
-        boolean enabled = Config.jmxConnectorServiceEnable.getValue();
+        boolean enabled = Config.jmxEnable.getValue();
         if ( !enabled )
             return;
 
         try {
             Filter mbean = new Filter( filter );
 
-            mbeanServer.registerMBean( mbean, mbean.getName() );
-            filter.setMbeanName( mbean.getName() );
+            mbeanServer.registerMBean( mbean, mbean.getObjectName() );
             if ( filter instanceof JmxManageable )
                 ((JmxManageable) filter).setMBeanServer( mbeanServer );
         } catch ( Exception e ) {
@@ -255,38 +264,12 @@
             ObjectName name = mbean.buildName();
 
             mbeanServer.registerMBean( mbean, name );
-            session.setObjectName( name );
         } catch ( Exception e ) {
             log.error( "failed to register proxy session MBean: session=" + session, e );
         }
     }
 
     /**
-     * unregister a proxy session
-     */
-    public void unregisterProxySession( ProxySession session )
-    {
-        boolean enabled = Config.jmxConnectorServiceEnable.getValue();
-        if ( !enabled )
-            return;
-
-        try {
-            ObjectName name = session.getObjectName();
-
-            if ( name != null ) {
-                mbeanServer.unregisterMBean( name );
-                session.setObjectName( null );
-            }
-        } catch ( InstanceNotFoundException infe ) {
-            log.debug( "internal problem: MBean not found, name={}", session
-                    .getObjectName(), infe );
-        } catch ( Exception e ) {
-            log.error( "failed to register proxy session MBean: session={}", session, e );
-        }
-
-    }
-
-    /**
      * register a proxy session
      * 
      */

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/MBeansFactory.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/MBeansFactory.java	2006-05-02 15:35:05 UTC (rev 423)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/MBeansFactory.java	2006-05-02 15:37:14 UTC (rev 424)
@@ -21,6 +21,8 @@
 import javax.management.MBeanAttributeInfo;
 
 import rtspproxy.config.Parameter;
+import rtspproxy.jmx.mbeans.ProxySessionFacade;
+import rtspproxy.proxy.ProxySession;
 
 /**
  * 
@@ -29,23 +31,36 @@
 public class MBeansFactory
 {
 
-	/** 
-	 * Creates Attribute Info that wraps Config parameters.
-	 * @param parameter 
-	 * @return
-	 */
-	public static MBeanAttributeInfo createAttribute( Parameter parameter )
-	{
-		return new MBeanAttributeInfo( //
-				parameter.getName(), // name
-				parameter.getType(), // type
-				parameter.getDescription(), // description
-				true, // readable
-				parameter.isMutable(), // writable
-				false // isIs
-		);
-	}
-	
-	
+    /** 
+     * Creates Attribute Info that wraps Config parameters.
+     * @param parameter 
+     * @return
+     */
+    public static MBeanAttributeInfo createAttribute( Parameter parameter )
+    {
+        return new MBeanAttributeInfo( //
+            parameter.getName(), // name
+            parameter.getType(), // type
+            parameter.getDescription(), // description
+            true, // readable
+            parameter.isMutable(), // writable
+            false // isIs
+            );
+    }
+    
+    public static MBeanAttributeInfo createAttribute( ProxySession session )
+    {
+        ProxySessionFacade facade = new ProxySessionFacade( session );
+        
+        return new MBeanAttributeInfo( //
+            "TODO: ProxySession", // name
+            ProxySessionFacade.class.getName(), // type 
+            "TODO: description", // description
+            true, // readable
+            false, // writable
+            false // isIs
+            );
+        
+    }
 
 }

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ProxySessionList.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ProxySessionList.java	2006-05-02 15:35:05 UTC (rev 423)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ProxySessionList.java	2006-05-02 15:37:14 UTC (rev 424)
@@ -0,0 +1,143 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   Copyright (C) 2006 - Matteo Merli - matteo.merli at gmail.com            *
+ *                                                                         *
+ ***************************************************************************/
+
+/*
+ * $Id$
+ * 
+ * $URL$
+ * 
+ */
+
+package rtspproxy.jmx;
+
+import java.lang.reflect.Constructor;
+import java.util.Set;
+
+import javax.management.Attribute;
+import javax.management.AttributeList;
+import javax.management.AttributeNotFoundException;
+import javax.management.DynamicMBean;
+import javax.management.InvalidAttributeValueException;
+import javax.management.MBeanAttributeInfo;
+import javax.management.MBeanConstructorInfo;
+import javax.management.MBeanException;
+import javax.management.MBeanInfo;
+import javax.management.ReflectionException;
+
+import rtspproxy.proxy.ProxySession;
+
+/**
+ * MBeans that lets monitor and adjust the application parameters that can be
+ * found on <code>rtspproxy.config.Config</code>
+ * 
+ * @author Matteo Merli
+ */
+public class ProxySessionList implements DynamicMBean
+{
+
+    private static final String DESCRIPTION = "MBeans that list all the active RTSP proxy sessions.";
+    
+    private String name;
+    
+    private MBeanInfo mbeanInfo;
+    
+    public ProxySessionList()
+    {
+        name = this.getClass().getSimpleName();
+    }
+
+    /*
+     * @see javax.management.DynamicMBean#getAttribute(java.lang.String)
+     */
+    public Object getAttribute( String attributeName ) throws AttributeNotFoundException,
+			MBeanException, ReflectionException
+    {
+        //Parameter parameter = Config.getParameter( attributeName );
+        //if ( parameter == null )
+        //    throw new AttributeNotFoundException();
+        
+        return null; // parameter.getObjectValue();
+    }
+
+    /*
+     * @see javax.management.DynamicMBean#getAttributes(java.lang.String[])
+     */
+    public AttributeList getAttributes( String[] attributes )
+    {
+        AttributeList results = new AttributeList( attributes.length );
+        Attribute attr;
+        
+        for ( String name : attributes ) {
+            // parameter = Config.getParameter( name );
+            // if ( parameter == null )
+            //     continue;
+            
+            // attr = new Attribute( parameter.getName(), parameter.getObjectValue() );
+            // results.add( attr );
+        }
+        return results;
+    }
+    
+    /*
+     * @see javax.management.DynamicMBean#getMBeanInfo()
+     */
+    public MBeanInfo getMBeanInfo()
+    {
+        Set<ProxySession> sessions = ProxySession.getActiveSessions();
+        
+        // Attributes
+        int size = sessions.size();
+        MBeanAttributeInfo[] attributeInfo = new MBeanAttributeInfo[size];
+        int i = 0;
+        for ( ProxySession session : sessions ) {
+            attributeInfo[i++] = MBeansFactory.createAttribute( session );
+        }
+
+        /* Generate the MBean description. */
+        MBeanInfo mbeanInfo = new MBeanInfo( name, // name
+                                             DESCRIPTION, //
+                                             attributeInfo, // parameters
+                                             null, // constructors
+                                             null, // operationInfo,      
+                                             null // notificationInfo
+            );
+        return mbeanInfo;
+    }
+
+    /*
+     * @see javax.management.DynamicMBean#invoke(java.lang.String,
+     *      java.lang.Object[], java.lang.String[])
+     */
+    public Object invoke( String actionName, Object[] params, String[] signature )
+        throws MBeanException, ReflectionException
+    {
+        throw new ReflectionException( new NoSuchMethodException( "Method not found: "
+                                                                  + actionName ) );
+    }
+    
+    /*
+     * @see javax.management.DynamicMBean#setAttribute(javax.management.Attribute)
+     */
+    public void setAttribute( Attribute attribute ) throws AttributeNotFoundException,
+        InvalidAttributeValueException, MBeanException, ReflectionException
+    {
+        throw new AttributeNotFoundException();
+    }
+
+    /*
+     * @see javax.management.DynamicMBean#setAttributes(javax.management.AttributeList)
+     */
+    public AttributeList setAttributes( AttributeList attributes )
+    {
+        AttributeList results = new AttributeList();
+        return results;
+    }
+}


Property changes on: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/ProxySessionList.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/Filter.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/Filter.java	2006-05-02 15:35:05 UTC (rev 423)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/Filter.java	2006-05-02 15:37:14 UTC (rev 424)
@@ -3,80 +3,101 @@
  */
 package rtspproxy.jmx.mbeans;
 
+import java.util.Hashtable;
+
 import javax.management.MBeanException;
 import javax.management.MalformedObjectNameException;
 import javax.management.ObjectName;
 
-import java.util.Hashtable;
-
 import rtspproxy.filter.FilterBase;
 import rtspproxy.jmx.JmxAgent;
 
 /**
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
- *
+ * 
  */
-public class Filter implements FilterMBean {
+public class Filter implements FilterMBean
+{
 
-	// managed filter
-	private FilterBase filter;
-	
-	// object name
-	private ObjectName name;
-	
-	/**
-	 * @throws NullPointerException 
-	 * @throws MalformedObjectNameException 
-	 * 
-	 */
-	public Filter( FilterBase filter ) 
-		throws MalformedObjectNameException, NullPointerException 
-	{
-		this.filter = filter;
-		
-		// build the MBean name
-		Hashtable<String, String> keys = new Hashtable<String, String>();
-		
-		keys.put("filter", filter.getName());
-		keys.put("classname", filter.getProviderClassName());
-		keys.put("id", Long.toHexString(System.identityHashCode(filter)));
-		
-		this.name = new ObjectName(JmxAgent.FILTERS_DOMAIN, keys);
-	}
+    /** managed filter */
+    private final FilterBase filter;
 
-	/* (non-Javadoc)
-	 * @see rtspproxy.jmx.FilterMBean#getDetailMBean()
-	 */
-	public ObjectName getDetailMBean() {
-		return this.filter.getDetailMBean();
-	}
+    /** object name */
+    private final ObjectName name;
 
-	/* (non-Javadoc)
-	 * @see rtspproxy.jmx.FilterMBean#isRunning()
-	 */
-	public boolean isRunning() {
-		return this.filter.isRunning();
-	}
+    /**
+     * @throws NullPointerException
+     * @throws MalformedObjectNameException
+     * 
+     */
+    public Filter( FilterBase filter ) throws MalformedObjectNameException,
+            NullPointerException
+    {
+        // build the MBean name
+        Hashtable<String, String> keys = new Hashtable<String, String>();
 
-	/* (non-Javadoc)
-	 * @see rtspproxy.jmx.FilterMBean#suspend()
-	 */
-	public void suspend() throws MBeanException {
-		this.filter.suspend();
-	}
+        keys.put( "filter", filter.getName() );
+        keys.put( "classname", filter.getProviderClassName() );
+        keys.put( "id", Long.toHexString( System.identityHashCode( filter ) ) );
 
-	/* (non-Javadoc)
-	 * @see rtspproxy.jmx.FilterMBean#resume()
-	 */
-	public void resume() throws MBeanException {
-		this.filter.resume();
-	}
+        this.name = new ObjectName( JmxAgent.FILTERS_DOMAIN, keys );
+        this.filter = filter;
+    }
 
-	/**
-	 * @return Returns the name.
-	 */
-	public ObjectName getName() {
-		return name;
-	}
+    /*
+     * (non-Javadoc)
+     * 
+     * @see rtspproxy.jmx.FilterMBean#getDetailMBean()
+     */
+    public ObjectName getDetailMBean()
+    {
+        return filter.getDetailMBean();
+    }
 
+    /*
+     * (non-Javadoc)
+     * 
+     * @see rtspproxy.jmx.FilterMBean#isRunning()
+     */
+    public boolean isRunning()
+    {
+        return filter.isRunning();
+    }
+
+    /*
+     * (non -Javadoc)
+     * 
+     * @see rtspproxy.jmx.FilterMBean#suspend()
+     */
+    public void suspend() throws MBeanException
+    {
+        if ( filter != null )
+            filter.suspend();
+    }
+
+    /*
+     * (non-Javadoc)
+     * 
+     * @see rtspproxy.jmx.FilterMBean#resume()
+     */
+    public void resume() throws MBeanException
+    {
+        filter.resume();
+    }
+
+    /*
+     * (non-Javadoc)
+     * 
+     * @see rtspproxy.jmx.mbeans.FilterMBean#getName()
+     */
+    public String getName()
+    {
+        return filter.getName();
+    }
+
+    public ObjectName getObjectName()
+    {
+        return name;
+    }
+
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/FilterMBean.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/FilterMBean.java	2006-05-02 15:35:05 UTC (rev 423)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/FilterMBean.java	2006-05-02 15:37:14 UTC (rev 424)
@@ -13,6 +13,8 @@
 public interface FilterMBean {
 
 	public ObjectName getDetailMBean();
+    
+    public String getName();
 	
 	public boolean isRunning();
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacade.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacade.java	2006-05-02 15:35:05 UTC (rev 423)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacade.java	2006-05-02 15:37:14 UTC (rev 424)
@@ -3,6 +3,8 @@
  */
 package rtspproxy.jmx.mbeans;
 
+import java.util.Collection;
+import java.util.Date;
 import java.util.Hashtable;
 
 import javax.management.MalformedObjectNameException;
@@ -10,57 +12,70 @@
 
 import rtspproxy.jmx.JmxAgent;
 import rtspproxy.proxy.ProxySession;
+import rtspproxy.proxy.track.Track;
 
 /**
  * Management implementation of proxy sessions.
  * 
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ * @author Matteo Merli
  *
  */
 public class ProxySessionFacade implements ProxySessionFacadeMBean {
 
-	// reference to proxy session
-	private ProxySession session = null;
+    // reference to proxy session
+    private ProxySession session;
 	
-	/**
-	 * 
-	 */
-	public ProxySessionFacade(ProxySession session) {
-		this.session = session;
-	}
+    public ProxySessionFacade( ProxySession session ) 
+    {        
+        this.session = session;
+    }
 
-	public boolean isClosed() {
-		return session.isClosed();
-	}
+    public Date getStartDate()
+    {
+        return session.getStartDate();
+    }
 
-	public ObjectName getClientSession() {
-		// TODO Auto-generated method stub
-		return null;
-	}
+    public String getClientSessionId() 
+    {
+        return session.getClientSessionId();
+    }
 
-	public ObjectName getServerSession() {
-		// TODO Auto-generated method stub
-		return null;
-	}
+    public String getServerSessionId() 
+    {
+        return session.getServerSessionId();
+    }
 
-	/**
-	 * build the object name
-	 * @throws NullPointerException 
-	 * @throws MalformedObjectNameException 
-	 */
-	public ObjectName buildName() throws MalformedObjectNameException, NullPointerException {
-		Hashtable<String, String> parts = new Hashtable<String, String>();
-		
-		parts.put("clientID", this.session.getClientSessionId());
-		
-		String serverID = this.session.getServerSessionId();
-		int ind = serverID.indexOf(';');
-		
-		if(ind > 0)
-			serverID = serverID.substring(0, ind);
-		parts.put("serverID", serverID);
-		
-		return ObjectName.getInstance(JmxAgent.PROXY_SESSION_DOMAIN, parts);
-	}
-	
+    public Collection<Track> getTrackList() 
+    {
+        return session.getTrackList();
+    }
+
+    public void close()
+    {
+        session.close();
+    }
+
+    /**
+     * build the object name
+     * @throws NullPointerException 
+     * @throws MalformedObjectNameException 
+     */
+    public ObjectName buildName() 
+        throws MalformedObjectNameException, NullPointerException 
+    {
+        Hashtable<String, String> parts = new Hashtable<String, String>();
+        
+        parts.put("clientID", this.session.getClientSessionId());
+        
+        String serverID = this.session.getServerSessionId();
+        int ind = serverID.indexOf(';');
+        
+        if(ind > 0)
+            serverID = serverID.substring(0, ind);
+        parts.put("serverID", serverID);
+        
+        return ObjectName.getInstance(JmxAgent.PROXY_SESSION_DOMAIN, parts);
+    }
+
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacadeMBean.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacadeMBean.java	2006-05-02 15:35:05 UTC (rev 423)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/ProxySessionFacadeMBean.java	2006-05-02 15:37:14 UTC (rev 424)
@@ -3,27 +3,29 @@
  */
 package rtspproxy.jmx.mbeans;
 
-import javax.management.ObjectName;
+import java.util.Collection;
+import java.util.Date;
 
+import rtspproxy.proxy.track.Track;
+
 /**
  * Management interface to proxy session.
  * 
  * @author Rainer Bieniek (Rainer.Bieniek at vodafone.com)
+ * @author Matteo Merli
  *
  */
-public interface ProxySessionFacadeMBean {
-	/**
-	 * query if the session is closed
-	 */
-	public boolean isClosed();
-	
-	/**
-	 * get reference to client session
-	 */
-	public ObjectName getClientSession();
-	
-	/**
-	 * get reference to server session
-	 */
-	public ObjectName getServerSession();
+public interface ProxySessionFacadeMBean 
+{
+
+    public Date getStartDate();
+    
+    public String getClientSessionId();
+    
+    public String getServerSessionId();
+
+    public Collection<Track> getTrackList();
+
+    public void close();
+    
 }

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/TrackFacade.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/TrackFacade.java	2006-05-02 15:35:05 UTC (rev 423)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/TrackFacade.java	2006-05-02 15:37:14 UTC (rev 424)
@@ -0,0 +1,47 @@
+
+package rtspproxy.jmx.mbeans;
+
+import java.net.InetAddress;
+
+import rtspproxy.proxy.track.Track;
+
+/**
+ * Management facade from Track (RtpTrack, RdtTrack) objects. 
+ *
+ * @author Matteo Merli
+ */
+public class TrackFacade implements TrackFacadeMBean 
+{
+    private Track track;
+    
+    public TrackFacade( Track track )
+    {
+        this.track = track;
+    }
+
+    public String getUrl()
+    {
+        return track.getUrl();
+    }
+    
+    public void setUrl( String url ) 
+    {
+        track.setUrl( url );
+    }        
+
+    public InetAddress getClientAddress()
+    {
+        return track.getClientAddress();
+    }
+
+    public InetAddress getServerAddress()
+    {
+        return track.getServerAddress();
+    }
+
+    public void close()
+    {
+        track.close();
+    }
+    
+}


Property changes on: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/TrackFacade.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev

Added: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/TrackFacadeMBean.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/TrackFacadeMBean.java	2006-05-02 15:35:05 UTC (rev 423)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/TrackFacadeMBean.java	2006-05-02 15:37:14 UTC (rev 424)
@@ -0,0 +1,22 @@
+
+package rtspproxy.jmx.mbeans;
+
+import java.net.InetAddress;
+
+/**
+ * Management interface from Track (RtpTrack, RdtTrack) objects. 
+ *
+ * @author Matteo Merli
+ */
+public interface TrackFacadeMBean 
+{
+    public String getUrl();
+    
+    public void setUrl( String url );
+
+    public InetAddress getClientAddress();
+    
+    public InetAddress getServerAddress();
+
+    public void close();
+}


Property changes on: trunk/RTSPProxy-Core/src/main/java/rtspproxy/jmx/mbeans/TrackFacadeMBean.java
___________________________________________________________________
Name: svn:keywords
   + Id URL Rev



From merlimat at berlios.de  Tue May  2 17:40:43 2006
From: merlimat at berlios.de (merlimat at berlios.de)
Date: Tue, 2 May 2006 17:40:43 +0200
Subject: [Rtspproxy-devel] r425 - trunk/RTSPProxy-Core/src/main/java/rtspproxy
Message-ID: <200605021540.k42FehIc031791@sheep.berlios.de>

Author: merlimat
Date: 2006-05-02 17:40:29 +0200 (Tue, 02 May 2006)
New Revision: 425

Modified:
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java
   trunk/RTSPProxy-Core/src/main/java/rtspproxy/ShutdownHandler.java
Log:
Using only two acceptors, one for TCP and one for UDP, 
instead of one per service.

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2006-05-02 15:37:14 UTC (rev 424)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyService.java	2006-05-02 15:40:29 UTC (rev 425)
@@ -122,7 +122,7 @@
 
             }
         } catch ( IOException e ) {
-            log.error( "Can't start {}: {}", getName(), e );
+            log.error( "Can't start {} ({}): " + e.getMessage(), getName(), socketAddress  );
             throw e;
         }
         log.info( "{} Started - Listening on: {}", getName(), socketAddress );
@@ -142,7 +142,11 @@
             return;
         }
 
-        Reactor.getRegistry().unbind( this, false );
+        try {
+            Reactor.getRegistry().unbind( this, false );
+        } catch ( Exception e ) {
+            log.debug( "Exception unbinding service: {}", e.getMessage() );
+        }
 
         log.info( getName() + " Stopped" );
         isRunning = false;

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2006-05-02 15:37:14 UTC (rev 424)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ProxyServiceRegistry.java	2006-05-02 15:40:29 UTC (rev 425)
@@ -33,10 +33,14 @@
 import org.apache.mina.common.IoFilterChain;
 import org.apache.mina.common.IoFilterChainBuilder;
 import org.apache.mina.common.IoHandler;
+import org.apache.mina.common.IoSession;
 import org.apache.mina.common.TransportType;
 import org.apache.mina.filter.ThreadPoolFilter;
 import org.apache.mina.transport.socket.nio.DatagramAcceptor;
+import org.apache.mina.transport.socket.nio.DatagramAcceptorConfig;
+import org.apache.mina.transport.socket.nio.DatagramSessionConfig;
 import org.apache.mina.transport.socket.nio.SocketAcceptor;
+import org.apache.mina.transport.socket.nio.SocketAcceptorConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -70,6 +74,10 @@
     /** Map a ProxyService to its own IoAcceptor. */
     private final ConcurrentMap<ProxyService, IoAcceptor> acceptors = new ConcurrentHashMap<ProxyService, IoAcceptor>();
 
+    private SocketAcceptor socketAcceptor = null;
+
+    private DatagramAcceptor datagramAcceptor = null;
+
     /**
      * Construct a new ProxyServiceRegistry. This class is a Singleton, so there
      * can be only one instance.
@@ -153,8 +161,18 @@
             throws Exception
     {
         IoAcceptor acceptor = acceptors.get( service );
+
         for ( SocketAddress address : addresses.get( service ) ) {
             try {
+                // Disconnect all clients
+                Set sessions = acceptor.getManagedSessions( address );
+                log.debug( "{} has {} connected clients.", service.getName(), sessions
+                        .size() );
+                for ( Object obj : sessions ) {
+                    IoSession session = (IoSession) obj;
+                    session.close();
+                }
+
                 acceptor.unbind( address );
             } catch ( Exception e ) {
                 // log.debug( "Error unbinding {}", service.getName() );
@@ -250,13 +268,31 @@
 
         // Create a new one
         TransportType transportType = service.getTransportType();
-        if ( transportType == TransportType.SOCKET )
-            acceptor = new SocketAcceptor(); // socketAcceptor;
-        else if ( transportType == TransportType.DATAGRAM )
-            acceptor = new DatagramAcceptor(); // datagramAcceptor;
-        else
-            acceptor = null;
+        if ( transportType == TransportType.SOCKET ) {
+            if ( socketAcceptor == null ) {
+                socketAcceptor = new SocketAcceptor();
+                SocketAcceptorConfig config = (SocketAcceptorConfig) socketAcceptor
+                        .getDefaultConfig();
+                config.setReuseAddress( true );
+            }
+            acceptor = socketAcceptor;
 
+        } else if ( transportType == TransportType.DATAGRAM ) {
+            if ( datagramAcceptor == null ) {
+                datagramAcceptor = new DatagramAcceptor(); // datagramAcceptor;
+                DatagramAcceptorConfig config = (DatagramAcceptorConfig) datagramAcceptor
+                        .getDefaultConfig();
+                DatagramSessionConfig sessionConfig = (DatagramSessionConfig) config
+                        .getSessionConfig();
+                sessionConfig.setReuseAddress( true );
+            }
+            acceptor = datagramAcceptor;
+
+        } else {
+            log.debug( "Unrecognized transport type: {}", transportType );
+            return null;
+        }
+
         // Save the acceptor
         acceptors.put( service, acceptor );
         return acceptor;
@@ -275,8 +311,8 @@
         if ( o == Config.threadPoolSize ) {
             // Update the thread pool size
             threadPoolFilter.setMaximumPoolSize( Config.threadPoolSize.getValue() );
-            log.info( "Changed ThreadPool size. New max size: "
-                    + threadPoolFilter.getMaximumPoolSize() );
+            log.info( "Changed ThreadPool size. New max size: {}", threadPoolFilter
+                    .getMaximumPoolSize() );
         }
     }
 

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java	2006-05-02 15:37:14 UTC (rev 424)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/Reactor.java	2006-05-02 15:40:29 UTC (rev 425)
@@ -35,95 +35,96 @@
 public class Reactor
 {
 
-	private static Logger log = LoggerFactory.getLogger( Reactor.class );
+    private static Logger log = LoggerFactory.getLogger( Reactor.class );
 
-	private static ProxyServiceRegistry registry = null;
+    private static ProxyServiceRegistry registry = null;
 
-	private static JmxAgent jmxAgent = null;
+    private static JmxAgent jmxAgent = null;
+    
+    private static boolean isStandalone = false;
+    
+    private static FilterRegistry filterRegistry = null;
 
-	private static boolean isStandalone = false;
-	
-	private static FilterRegistry filterRegistry = null;
+    public static void setStandalone( boolean standalone )
+    {
+        isStandalone = standalone;
+    }
 
-	public static void setStandalone( boolean standalone )
-	{
-		isStandalone = standalone;
-	}
+    /**
+     * Constructor. Creates a new Reactor and starts it.
+     * The reactor relies on configuration info that has to be provided 
+     * <b>before</b> starting the reactor.
+     * @exception Exception reactor startup failed.
+     */
+    static public void start() throws Exception
+    {
+        log.info( "Starting " + Config.getName() + " " + Config.getVersion() );
 
-	/**
-	 * Constructor. Creates a new Reactor and starts it.
-	 * The reactor relies on configuration info that has to be provided 
-	 * <b>before</b> starting the reactor.
-	 * @exception Exception reactor startup failed.
-	 */
-	static public void start() throws Exception
-	{
-		log.info( "Starting " + Config.getName() + " " + Config.getVersion() );
+        registry = new ProxyServiceRegistry();
 
-		registry = new ProxyServiceRegistry();
+        // Register the "rtsp://" protocol scheme
+        System.setProperty( "java.protocol.handler.pkgs", "rtspproxy" );
 
-		// Register the "rtsp://" protocol scheme
-		System.setProperty( "java.protocol.handler.pkgs", "rtspproxy" );
+        ProxyService rtspService = new RtspService();
+        rtspService.start();
+        
+        ProxyService rtpClientService = new RtpClientService();
+        rtpClientService.start();
+        
+        ProxyService rtcpClientService = new RtcpClientService();
+        rtcpClientService.start();
 
-		ProxyService rtspService = new RtspService();
-		rtspService.start();
+        ProxyService rtpServerService = new RtpServerService();
+        rtpServerService.start();
+                
+        ProxyService rtcpServerService = new RtcpServerService();
+        rtcpServerService.start();
 
-		ProxyService rtpClientService = new RtpClientService();
-		rtpClientService.start();
+        ProxyService rdtClientService = new RdtClientService();
+        rdtClientService.start();
 
-		ProxyService rtcpClientService = new RtcpClientService();
-		rtcpClientService.start();
+        ProxyService rdtServerService = new RdtServerService();
+        rdtServerService.start();
 
-		ProxyService rtpServerService = new RtpServerService();
-		rtpServerService.start();
+        boolean enableJmx = Config.jmxEnable.getValue();
+        if ( enableJmx )
+            jmxAgent = new JmxAgent();
 
-		ProxyService rtcpServerService = new RtcpServerService();
-		rtcpServerService.start();
-
-		ProxyService rdtClientService = new RdtClientService();
-		rdtClientService.start();
-
-		ProxyService rdtServerService = new RdtServerService();
-		rdtServerService.start();
-
-		boolean enableJmx = Config.jmxEnable.getValue();
-		if ( enableJmx )
-			jmxAgent = new JmxAgent();
-
-		filterRegistry = new FilterRegistry();
-		filterRegistry.populateRegistry();		
+        filterRegistry = new FilterRegistry();
+        filterRegistry.populateRegistry();		
 		
-		PortrangeRtpServerSessionFactory portrangeFactory = new PortrangeRtpServerSessionFactory();
-		portrangeFactory.setLocalAddress(rtpServerService.getAddress());
-		portrangeFactory.start();
-		
-	}
+        PortrangeRtpServerSessionFactory portrangeFactory = new PortrangeRtpServerSessionFactory();
+        portrangeFactory.setLocalAddress(rtpServerService.getAddress());
+        portrangeFactory.start();
+        
+    }
 
-	static public void stop()
-	{
-		try {
-			PortrangeRtpServerSessionFactory.getInstance().stop();
-			
-			if ( jmxAgent != null )
-				jmxAgent.stop();
+    static public void stop()
+    {
+        try {
+            // TODO: check why null pointer exception
+            // PortrangeRtpServerSessionFactory.getInstance().stop();
+            
+            if ( jmxAgent != null )
+                jmxAgent.stop();
+            
+            if ( registry != null )
+                registry.unbindAll();
+            
+            log.info( "Shutdown completed" );
 
-			if ( registry != null )
-				registry.unbindAll();
-			
-			log.info( "Shutdown completed" );
+        } catch ( Exception e ) {
+            log.warn( "Error shutting down: {}", (Object)e );
+            Exceptions.logStackTrace( e );
+        }
 
-		} catch ( Exception e ) {
-			log.warn( "Error shutting down: " + e );
-			Exceptions.logStackTrace( e );
-		}
+        if ( isStandalone )
+            Runtime.getRuntime().halt( 0 );
+    }
 
-		if ( isStandalone )
-			Runtime.getRuntime().halt( 0 );
-	}
+    protected static ProxyServiceRegistry getRegistry()
+    {        
+        return registry;
+    }
 
-	protected static ProxyServiceRegistry getRegistry()
-	{
-		return registry;
-	}
-
 }

Modified: trunk/RTSPProxy-Core/src/main/java/rtspproxy/ShutdownHandler.java
===================================================================
--- trunk/RTSPProxy-Core/src/main/java/rtspproxy/ShutdownHandler.java	2006-05-02 15:37:14 UTC (rev 424)
+++ trunk/RTSPProxy-Core/src/main/java/rtspproxy/ShutdownHandler.java	2006-05-02 15:40:29 UTC (rev 425)
@@ -32,20 +32,19 @@
 public class ShutdownHandler extends Thread
 {
 
-	private static Logger log = LoggerFactory.getLogger( ShutdownHandler.class );
-
-	@Override
+    private static Logger log = LoggerFactory.getLogger( ShutdownHandler.class );
+    
+    @Override
     public void run()
-	{
-		log.info( "Shutting down" );
-		try {
-			log.info( "Stopping {} {}", Config.getName(), Config.getVersion() );
-			Reactor.stop();
+    {
+        log.info( "Shutting down" );
+        try {
+            log.info( "Stopping {} {}", Config.getName(), Config.getVersion() );
+            Reactor.stop();
 
-		} catch ( Exception e ) {
-			log.error( "Exception in the reactor: ", e );
-			Exceptions.logStackTrace( e );
-		}
-	}
-
+        } catch ( Exception e ) {
+            log.error( "Exception in the reactor: ", e );
+            Exceptions.logStackTrace( e );
+        }
+    }
 }



